/* Converted to D from windows/windows.h by htod */
module windows;
//C      typedef unsigned long long size_t;
extern (System):
alias ulong size_t;
//C      typedef long long ssize_t;
alias long ssize_t;
//C      typedef long long intptr_t;
alias long intptr_t;
//C      typedef unsigned long long uintptr_t;
alias ulong uintptr_t;
//C      typedef long long ptrdiff_t;
alias long ptrdiff_t;
//C     typedef unsigned short wchar_t;
alias ushort wchar_t;
//C     typedef unsigned short wint_t;
alias ushort wint_t;
//C     typedef unsigned short wctype_t;
alias ushort wctype_t;
//C     typedef int errno_t;
alias int errno_t;
//C     typedef long __time32_t;
alias int __time32_t;
//C      typedef long long __time64_t;
alias long __time64_t;
//C     typedef __time64_t time_t;
alias __time64_t time_t;
//C     void  __debugbreak(void);
void  __debugbreak();
//C     extern   void  __debugbreak(void)
//C     {
//C       __asm__ ("int $3");
//C     }
//C     const char *__mingw_get_crt_info (void);
void  __debugbreak();
char * __mingw_get_crt_info();
//C     typedef char * va_list;
alias char *va_list;
//C     typedef unsigned long ULONG;
alias uint ULONG;
//C     typedef ULONG *PULONG;
alias ULONG *PULONG;
//C     typedef unsigned short USHORT;
alias ushort USHORT;
//C     typedef USHORT *PUSHORT;
alias USHORT *PUSHORT;
//C     typedef unsigned char UCHAR;
alias ubyte UCHAR;
//C     typedef UCHAR *PUCHAR;
alias UCHAR *PUCHAR;
//C     typedef char *PSZ;
alias char *PSZ;
//C     typedef int WINBOOL;
alias int WINBOOL;
//C     typedef int BOOL;
alias int BOOL;
//C     typedef WINBOOL *PBOOL;
alias WINBOOL *PBOOL;
//C     typedef WINBOOL *LPBOOL;
alias WINBOOL *LPBOOL;
//C     typedef unsigned char BYTE;
alias ubyte BYTE;
//C     typedef unsigned short WORD;
alias ushort WORD;
//C     typedef unsigned long DWORD;
alias uint DWORD;
//C     typedef float FLOAT;
alias float FLOAT;
//C     typedef FLOAT *PFLOAT;
alias FLOAT *PFLOAT;
//C     typedef BYTE *PBYTE;
alias BYTE *PBYTE;
//C     typedef BYTE *LPBYTE;
alias BYTE *LPBYTE;
//C     typedef int *PINT;
alias int *PINT;
//C     typedef int *LPINT;
alias int *LPINT;
//C     typedef WORD *PWORD;
alias WORD *PWORD;
//C     typedef WORD *LPWORD;
alias WORD *LPWORD;
//C     typedef long *LPLONG;
alias int *LPLONG;
//C     typedef DWORD *PDWORD;
alias DWORD *PDWORD;
//C     typedef DWORD *LPDWORD;
alias DWORD *LPDWORD;
//C     typedef void *LPVOID;
alias void *LPVOID;
//C     typedef const void *LPCVOID;
alias void *LPCVOID;
//C     typedef int INT;
alias int INT;
//C     typedef unsigned int UINT;
alias uint UINT;
//C     typedef unsigned int *PUINT;
alias uint *PUINT;
//C     typedef size_t rsize_t;
alias size_t rsize_t;
//C     struct threadlocaleinfostruct;
//C     struct threadmbcinfostruct;
//C     typedef struct threadlocaleinfostruct *pthreadlocinfo;
alias threadlocaleinfostruct *pthreadlocinfo;
//C     typedef struct threadmbcinfostruct *pthreadmbcinfo;
alias threadmbcinfostruct *pthreadmbcinfo;
//C     struct __lc_time_data;
//C     typedef struct localeinfo_struct {
//C       pthreadlocinfo locinfo;
//C       pthreadmbcinfo mbcinfo;
//C     } _locale_tstruct,*_locale_t;
struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
}
alias localeinfo_struct _locale_tstruct;
alias localeinfo_struct *_locale_t;
//C     typedef struct tagLC_ID {
//C       unsigned short wLanguage;
//C       unsigned short wCountry;
//C       unsigned short wCodePage;
//C     } LC_ID,*LPLC_ID;
struct tagLC_ID
{
    ushort wLanguage;
    ushort wCountry;
    ushort wCodePage;
}
alias tagLC_ID LC_ID;
alias tagLC_ID *LPLC_ID;
//C     typedef struct threadlocaleinfostruct {
//C       int refcount;
//C       unsigned int lc_codepage;
//C       unsigned int lc_collate_cp;
//C       unsigned long lc_handle[6];
//C       LC_ID lc_id[6];
//C       struct {
//C         char *locale;
//C         wchar_t *wlocale;
//C         int *refcount;
//C         int *wrefcount;
//C       } lc_category[6];
struct _N1
{
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
}
//C       int lc_clike;
//C       int mb_cur_max;
//C       int *lconv_intl_refcount;
//C       int *lconv_num_refcount;
//C       int *lconv_mon_refcount;
//C       struct struct lconv_;lconv_ *lconv;
//C       int *ctype1_refcount;
//C       unsigned short *ctype1;
//C       const unsigned short *pctype;
//C       const unsigned char *pclmap;
//C       const unsigned char *pcumap;
//C       struct struct __lc_time_data; __lc_time_data *lc_time_curr;
//C     } threadlocinfo;
struct threadlocaleinfostruct
{
    int refcount;
    uint lc_codepage;
    uint lc_collate_cp;
    uint [6]lc_handle;
    LC_ID [6]lc_id;
    _N1 [6]lc_category;
    int lc_clike;
    int mb_cur_max;
    int *lconv_intl_refcount;
    int *lconv_num_refcount;
    int *lconv_mon_refcount;
    struct lconv_;lconv_ *lconv;
    int *ctype1_refcount;
    ushort *ctype1;
    ushort *pctype;
    ubyte *pclmap;
    ubyte *pcumap;
    struct __lc_time_data; __lc_time_data *lc_time_curr;
}
alias threadlocaleinfostruct threadlocinfo;
//C       extern unsigned short ** __imp__pctype;
extern ushort **__imp__pctype;
//C       extern unsigned short ** __imp__wctype;
extern ushort **__imp__wctype;
//C       extern unsigned short ** __imp__pwctype;
extern ushort **__imp__pwctype;
//C       extern const unsigned char __newclmap[];
extern const ubyte []__newclmap;
//C       extern const unsigned char __newcumap[];
extern const ubyte []__newcumap;
//C       extern pthreadlocinfo __ptlocinfo;
extern pthreadlocinfo __ptlocinfo;
//C       extern pthreadmbcinfo __ptmbcinfo;
extern pthreadmbcinfo __ptmbcinfo;
//C       extern int __globallocalestatus;
extern int __globallocalestatus;
//C       extern int __locale_changed;
extern int __locale_changed;
//C       extern struct threadlocaleinfostruct __initiallocinfo;
extern threadlocaleinfostruct __initiallocinfo;
//C       extern _locale_tstruct __initiallocalestructinfo;
extern _locale_tstruct __initiallocalestructinfo;
//C       pthreadlocinfo  __updatetlocinfo(void);
pthreadlocinfo  __updatetlocinfo();
//C       pthreadmbcinfo  __updatetmbcinfo(void);
pthreadmbcinfo  __updatetmbcinfo();
//C     int  isblank(int _C);
int  isblank(int _C);
//C       int  iswalpha(wint_t _C);
int  iswalpha(wint_t _C);
//C       int  iswupper(wint_t _C);
int  iswupper(wint_t _C);
//C       int  iswlower(wint_t _C);
int  iswlower(wint_t _C);
//C       int  iswdigit(wint_t _C);
int  iswdigit(wint_t _C);
//C       int  iswxdigit(wint_t _C);
int  iswxdigit(wint_t _C);
//C       int  iswspace(wint_t _C);
int  iswspace(wint_t _C);
//C       int  iswpunct(wint_t _C);
int  iswpunct(wint_t _C);
//C       int  iswalnum(wint_t _C);
int  iswalnum(wint_t _C);
//C       int  iswprint(wint_t _C);
int  iswprint(wint_t _C);
//C       int  iswgraph(wint_t _C);
int  iswgraph(wint_t _C);
//C       int  iswcntrl(wint_t _C);
int  iswcntrl(wint_t _C);
//C       int  iswascii(wint_t _C);
int  iswascii(wint_t _C);
//C       int  isleadbyte(int _C);
int  isleadbyte(int _C);
//C       wint_t  towupper(wint_t _C);
wint_t  towupper(wint_t _C);
//C       wint_t  towlower(wint_t _C);
wint_t  towlower(wint_t _C);
//C       int  iswctype(wint_t _C,wctype_t _Type);
int  iswctype(wint_t _C, wctype_t _Type);
//C       int  is_wctype(wint_t _C,wctype_t _Type);
int  is_wctype(wint_t _C, wctype_t _Type);
//C     int  iswblank(wint_t _C);
int  iswblank(wint_t _C);
//C       extern int * __imp___mb_cur_max;
extern int *__imp___mb_cur_max;
//C      typedef unsigned long long POINTER_64_INT;
alias ulong POINTER_64_INT;
//C       typedef signed char INT8,*PINT8;
alias byte INT8;
alias byte *PINT8;
//C       typedef signed short INT16,*PINT16;
alias short INT16;
alias short *PINT16;
//C       typedef signed int INT32,*PINT32;
alias int INT32;
alias int *PINT32;
//C        typedef signed long long INT64,*PINT64;
alias long INT64;
alias long *PINT64;
//C       typedef unsigned char UINT8,*PUINT8;
alias ubyte UINT8;
alias ubyte *PUINT8;
//C       typedef unsigned short UINT16,*PUINT16;
alias ushort UINT16;
alias ushort *PUINT16;
//C       typedef unsigned int UINT32,*PUINT32;
alias uint UINT32;
alias uint *PUINT32;
//C        typedef unsigned long long UINT64,*PUINT64;
alias ulong UINT64;
alias ulong *PUINT64;
//C       typedef signed int LONG32,*PLONG32;
alias int LONG32;
alias int *PLONG32;
//C       typedef unsigned int ULONG32,*PULONG32;
alias uint ULONG32;
alias uint *PULONG32;
//C       typedef unsigned int DWORD32,*PDWORD32;
alias uint DWORD32;
alias uint *PDWORD32;
//C        typedef long long INT_PTR,*PINT_PTR;
alias long INT_PTR;
alias long *PINT_PTR;
//C        typedef unsigned long long UINT_PTR,*PUINT_PTR;
alias ulong UINT_PTR;
alias ulong *PUINT_PTR;
//C        typedef long long LONG_PTR,*PLONG_PTR;
alias long LONG_PTR;
alias long *PLONG_PTR;
//C        typedef unsigned long long ULONG_PTR,*PULONG_PTR;
alias ulong ULONG_PTR;
alias ulong *PULONG_PTR;
//C        typedef long long SHANDLE_PTR;
alias long SHANDLE_PTR;
//C        typedef unsigned long long HANDLE_PTR;
alias ulong HANDLE_PTR;
//C       typedef unsigned int UHALF_PTR,*PUHALF_PTR;
alias uint UHALF_PTR;
alias uint *PUHALF_PTR;
//C       typedef int HALF_PTR,*PHALF_PTR;
alias int HALF_PTR;
alias int *PHALF_PTR;
//C       static  unsigned long HandleToULong(const void *h) { return((unsigned long) (ULONG_PTR) h); }
//C       static  long HandleToLong(const void *h) { return((long) (LONG_PTR) h); }
uint  HandleToULong(void *);
//C       static  void *ULongToHandle(const unsigned long h) { return((void *) (UINT_PTR) h); }
int  HandleToLong(void *);
//C       static  void *LongToHandle(const long h) { return((void *) (INT_PTR) h); }
void * ULongToHandle(uint );
//C       static  unsigned long PtrToUlong(const void *p) { return((unsigned long) (ULONG_PTR) p); }
void * LongToHandle(int );
//C       static  unsigned int PtrToUint(const void *p) { return((unsigned int) (UINT_PTR) p); }
uint  PtrToUlong(void *);
//C       static  unsigned short PtrToUshort(const void *p) { return((unsigned short) (unsigned long) (ULONG_PTR) p); }
uint  PtrToUint(void *);
//C       static  long PtrToLong(const void *p) { return((long) (LONG_PTR) p); }
ushort  PtrToUshort(void *);
//C       static  int PtrToInt(const void *p) { return(() (INT_PTR) p); }
int  PtrToLong(void *);
//C       static  short PtrToShort(const void *p) { return((short) (long) (LONG_PTR) p); }
int  PtrToInt(void *);
//C       static  void *IntToPtr(const int i) { return((void *)(INT_PTR)i); }
short  PtrToShort(void *);
//C       static  void *UIntToPtr(const unsigned int ui) { return((void *)(UINT_PTR)ui); }
void * IntToPtr(int );
//C       static  void *LongToPtr(const long l) { return((void *)(LONG_PTR)l); }
void * UIntToPtr(uint );
//C       static  void *ULongToPtr(const unsigned long ul) { return((void *)(ULONG_PTR)ul); }
void * LongToPtr(int );
//C       static  void *Ptr32ToPtr(const void *p) { return (void *) (ULONG_PTR) p; }
void * ULongToPtr(uint );
//C       static  void *Handle32ToHandle(const void *h) { return((void *) (ULONG_PTR) h); }
void * Ptr32ToPtr(void *);
//C       static  void *PtrToPtr32(const void *p) { return((void *) (ULONG_PTR) p); }
void * Handle32ToHandle(void *);
//C        typedef ULONG_PTR SIZE_T,*PSIZE_T;
void * PtrToPtr32(void *);
alias ULONG_PTR SIZE_T;
alias ULONG_PTR *PSIZE_T;
//C        typedef LONG_PTR SSIZE_T,*PSSIZE_T;
alias LONG_PTR SSIZE_T;
alias LONG_PTR *PSSIZE_T;
//C        typedef ULONG_PTR DWORD_PTR,*PDWORD_PTR;
alias ULONG_PTR DWORD_PTR;
alias ULONG_PTR *PDWORD_PTR;
//C        typedef long long LONG64,*PLONG64;
alias long LONG64;
alias long *PLONG64;
//C        typedef unsigned long long ULONG64,*PULONG64;
alias ulong ULONG64;
alias ulong *PULONG64;
//C        typedef unsigned long long DWORD64,*PDWORD64;
alias ulong DWORD64;
alias ulong *PDWORD64;
//C        typedef ULONG_PTR KAFFINITY;
alias ULONG_PTR KAFFINITY;
//C        typedef KAFFINITY *PKAFFINITY;
alias KAFFINITY *PKAFFINITY;
//C       typedef void *PVOID;
alias void *PVOID;
//C       typedef void *PVOID64;
alias void *PVOID64;
//C       typedef char CHAR;
alias char CHAR;
//C       typedef short SHORT;
alias short SHORT;
//C       typedef long LONG;
alias int LONG;
//C       typedef wchar_t WCHAR;
alias wchar_t WCHAR;
//C       typedef WCHAR *PWCHAR,*LPWCH,*PWCH;
alias WCHAR *PWCHAR;
alias WCHAR *LPWCH;
alias WCHAR *PWCH;
//C       typedef const WCHAR *LPCWCH,*PCWCH;
alias WCHAR *LPCWCH;
alias WCHAR *PCWCH;
//C       typedef WCHAR *NWPSTR,*LPWSTR,*PWSTR;
alias WCHAR *NWPSTR;
alias WCHAR *LPWSTR;
alias WCHAR *PWSTR;
//C       typedef PWSTR *PZPWSTR;
alias PWSTR *PZPWSTR;
//C       typedef const PWSTR *PCZPWSTR;
alias PWSTR *PCZPWSTR;
//C       typedef WCHAR *LPUWSTR,*PUWSTR;
alias WCHAR *LPUWSTR;
alias WCHAR *PUWSTR;
//C       typedef const WCHAR *LPCWSTR,*PCWSTR;
alias WCHAR *LPCWSTR;
alias WCHAR *PCWSTR;
//C       typedef PCWSTR *PZPCWSTR;
alias PCWSTR *PZPCWSTR;
//C       typedef const WCHAR *LPCUWSTR,*PCUWSTR;
alias WCHAR *LPCUWSTR;
alias WCHAR *PCUWSTR;
//C       typedef CHAR *PCHAR,*LPCH,*PCH;
alias CHAR *PCHAR;
alias CHAR *LPCH;
alias CHAR *PCH;
//C       typedef const CHAR *LPCCH,*PCCH;
alias CHAR *LPCCH;
alias CHAR *PCCH;
//C       typedef CHAR *NPSTR,*LPSTR,*PSTR;
alias CHAR *NPSTR;
alias CHAR *LPSTR;
alias CHAR *PSTR;
//C       typedef PSTR *PZPSTR;
alias PSTR *PZPSTR;
//C       typedef const PSTR *PCZPSTR;
alias PSTR *PCZPSTR;
//C       typedef const CHAR *LPCSTR,*PCSTR;
alias CHAR *LPCSTR;
alias CHAR *PCSTR;
//C       typedef PCSTR *PZPCSTR;
alias PCSTR *PZPCSTR;
//C       typedef char TCHAR,*PTCHAR;
alias char TCHAR;
alias char *PTCHAR;
//C       typedef unsigned char TBYTE,*PTBYTE;
alias ubyte TBYTE;
alias ubyte *PTBYTE;
//C       typedef LPSTR LPTCH,PTCH;
alias LPSTR LPTCH;
alias LPSTR PTCH;
//C       typedef LPSTR PTSTR,LPTSTR,PUTSTR,LPUTSTR;
alias LPSTR PTSTR;
alias LPSTR LPTSTR;
alias LPSTR PUTSTR;
alias LPSTR LPUTSTR;
//C       typedef LPCSTR PCTSTR,LPCTSTR,PCUTSTR,LPCUTSTR;
alias LPCSTR PCTSTR;
alias LPCSTR LPCTSTR;
alias LPCSTR PCUTSTR;
alias LPCSTR LPCUTSTR;
//C       typedef SHORT *PSHORT;
alias SHORT *PSHORT;
//C       typedef LONG *PLONG;
alias LONG *PLONG;
//C       typedef void *HANDLE;
alias void *HANDLE;
//C       typedef HANDLE *PHANDLE;
alias HANDLE *PHANDLE;
//C       typedef BYTE FCHAR;
alias BYTE FCHAR;
//C       typedef WORD FSHORT;
alias WORD FSHORT;
//C       typedef DWORD FLONG;
alias DWORD FLONG;
//C       typedef LONG HRESULT;
alias LONG HRESULT;
//C       typedef char CCHAR;
alias char CCHAR;
//C     typedef DWORD LCID;
alias DWORD LCID;
//C       typedef PDWORD PLCID;
alias PDWORD PLCID;
//C       typedef WORD LANGID;
alias WORD LANGID;
//C         typedef struct _FLOAT128 {
//C            long long LowPart;
//C            long long HighPart;
//C       } FLOAT128;
struct _FLOAT128
{
    long LowPart;
    long HighPart;
}
alias _FLOAT128 FLOAT128;
//C       typedef FLOAT128 *PFLOAT128;
alias FLOAT128 *PFLOAT128;
//C        typedef long long LONGLONG;
alias long LONGLONG;
//C        typedef unsigned long long ULONGLONG;
alias ulong ULONGLONG;
//C       typedef LONGLONG *PLONGLONG;
alias LONGLONG *PLONGLONG;
//C       typedef ULONGLONG *PULONGLONG;
alias ULONGLONG *PULONGLONG;
//C       typedef LONGLONG USN;
alias LONGLONG USN;
//C       typedef union _LARGE_INTEGER {
//C          struct {
//C           DWORD LowPart;
//C           LONG HighPart;
//C         } ;
struct _N2
{
    DWORD LowPart;
    LONG HighPart;
}
//C         struct {
//C           DWORD LowPart;
//C           LONG HighPart;
//C         } u;
struct _N3
{
    DWORD LowPart;
    LONG HighPart;
}
//C         LONGLONG QuadPart;
//C       } LARGE_INTEGER;
union _LARGE_INTEGER
{
    DWORD LowPart;
    LONG HighPart;
    _N3 u;
    LONGLONG QuadPart;
}
alias _LARGE_INTEGER LARGE_INTEGER;
//C       typedef LARGE_INTEGER *PLARGE_INTEGER;
alias LARGE_INTEGER *PLARGE_INTEGER;
//C       typedef union _ULARGE_INTEGER {
//C          struct {
//C           DWORD LowPart;
//C           DWORD HighPart;
//C         } ;
struct _N4
{
    DWORD LowPart;
    DWORD HighPart;
}
//C         struct {
//C           DWORD LowPart;
//C           DWORD HighPart;
//C         } u;
struct _N5
{
    DWORD LowPart;
    DWORD HighPart;
}
//C         ULONGLONG QuadPart;
//C       } ULARGE_INTEGER;
union _ULARGE_INTEGER
{
    DWORD LowPart;
    DWORD HighPart;
    _N5 u;
    ULONGLONG QuadPart;
}
alias _ULARGE_INTEGER ULARGE_INTEGER;
//C       typedef ULARGE_INTEGER *PULARGE_INTEGER;
alias ULARGE_INTEGER *PULARGE_INTEGER;
//C       typedef struct _LUID {
//C         DWORD LowPart;
//C         LONG HighPart;
//C       } LUID,*PLUID;
struct _LUID
{
    DWORD LowPart;
    LONG HighPart;
}
alias _LUID LUID;
alias _LUID *PLUID;
//C       typedef ULONGLONG DWORDLONG;
alias ULONGLONG DWORDLONG;
//C       typedef DWORDLONG *PDWORDLONG;
alias DWORDLONG *PDWORDLONG;
//C         unsigned char  _rotl8(unsigned char Value,unsigned char Shift);
ubyte  _rotl8(ubyte Value, ubyte Shift);
//C         unsigned short  _rotl16(unsigned short Value,unsigned char Shift);
ushort  _rotl16(ushort Value, ubyte Shift);
//C         unsigned char  _rotr8(unsigned char Value,unsigned char Shift);
ubyte  _rotr8(ubyte Value, ubyte Shift);
//C         unsigned short  _rotr16(unsigned short Value,unsigned char Shift);
ushort  _rotr16(ushort Value, ubyte Shift);
//C         unsigned int  _rotl(unsigned int Value,int Shift);
uint  _rotl(uint Value, int Shift);
//C         unsigned int  _rotr(unsigned int Value,int Shift);
uint  _rotr(uint Value, int Shift);
//C          unsigned long long  _rotl64(unsigned long long Value,int Shift);
ulong  _rotl64(ulong Value, int Shift);
//C          unsigned long long  _rotr64(unsigned long long Value,int Shift);
ulong  _rotr64(ulong Value, int Shift);
//C       typedef BYTE BOOLEAN;
alias BYTE BOOLEAN;
//C       typedef BOOLEAN *PBOOLEAN;
alias BOOLEAN *PBOOLEAN;
//C       typedef struct _LIST_ENTRY {
//C         struct _LIST_ENTRY *Flink;
//C         struct _LIST_ENTRY *Blink;
//C       } LIST_ENTRY,*PLIST_ENTRY,* PRLIST_ENTRY;
struct _LIST_ENTRY
{
    _LIST_ENTRY *Flink;
    _LIST_ENTRY *Blink;
}
alias _LIST_ENTRY LIST_ENTRY;
alias _LIST_ENTRY *PLIST_ENTRY;
alias _LIST_ENTRY *PRLIST_ENTRY;
//C       typedef struct _SINGLE_LIST_ENTRY {
//C         struct _SINGLE_LIST_ENTRY *Next;
//C       } SINGLE_LIST_ENTRY,*PSINGLE_LIST_ENTRY;
struct _SINGLE_LIST_ENTRY
{
    _SINGLE_LIST_ENTRY *Next;
}
alias _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
alias _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;
//C       typedef struct LIST_ENTRY32 {
//C         DWORD Flink;
//C         DWORD Blink;
//C       } LIST_ENTRY32;
struct LIST_ENTRY32
{
    DWORD Flink;
    DWORD Blink;
}
//C       typedef LIST_ENTRY32 *PLIST_ENTRY32;
alias LIST_ENTRY32 *PLIST_ENTRY32;
//C       typedef struct LIST_ENTRY64 {
//C         ULONGLONG Flink;
//C         ULONGLONG Blink;
//C       } LIST_ENTRY64;
struct LIST_ENTRY64
{
    ULONGLONG Flink;
    ULONGLONG Blink;
}
//C       typedef LIST_ENTRY64 *PLIST_ENTRY64;
alias LIST_ENTRY64 *PLIST_ENTRY64;
//C     typedef struct _GUID {
//C       unsigned long Data1;
//C       unsigned short Data2;
//C       unsigned short Data3;
//C       unsigned char Data4[8 ];
//C     } GUID;
struct _GUID
{
    uint Data1;
    ushort Data2;
    ushort Data3;
    ubyte [8]Data4;
}
alias _GUID GUID;
//C     typedef GUID *LPGUID;
alias GUID *LPGUID;
//C     typedef const GUID *LPCGUID;
alias GUID *LPCGUID;
//C     typedef GUID IID;
alias GUID IID;
//C     typedef IID *LPIID;
alias IID *LPIID;
//C     typedef GUID CLSID;
alias GUID CLSID;
//C     typedef CLSID *LPCLSID;
alias CLSID *LPCLSID;
//C     typedef GUID FMTID;
alias GUID FMTID;
//C     typedef FMTID *LPFMTID;
alias FMTID *LPFMTID;
//C       void * memchr(const void *_Buf ,int _Val,size_t _MaxCount);
void * memchr(void *_Buf, int _Val, size_t _MaxCount);
//C       int  memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
int  memcmp(void *_Buf1, void *_Buf2, size_t _Size);
//C       void *  memcpy(void *  _Dst,const void *  _Src,size_t _Size) ;
void * memcpy(void *_Dst, void *_Src, size_t _Size);
//C       void *  mempcpy (void *_Dst,const void *_Src,size_t _Size);
void * mempcpy(void *_Dst, void *_Src, size_t _Size);
//C       void *  memset(void *_Dst,int _Val,size_t _Size);
void * memset(void *_Dst, int _Val, size_t _Size);
//C       void *  memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
void * memccpy(void *_Dst, void *_Src, int _Val, size_t _Size);
//C       int  memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;
int  memicmp(void *_Buf1, void *_Buf2, size_t _Size);
//C       char *  _strset(char *_Str,int _Val) ;
char * _strset(char *_Str, int _Val);
//C       char *  _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
char * _strset_l(char *_Str, int _Val, _locale_t _Locale);
//C       char *  strcpy(char *  _Dest,const char *  _Source);
char * strcpy(char *_Dest, char *_Source);
//C       char *  strcat(char *  _Dest,const char *  _Source);
char * strcat(char *_Dest, char *_Source);
//C       int  strcmp(const char *_Str1,const char *_Str2);
int  strcmp(char *_Str1, char *_Str2);
//C       size_t  strlen(const char *_Str);
size_t  strlen(char *_Str);
//C       size_t  strnlen(const char *_Str,size_t _MaxCount);
size_t  strnlen(char *_Str, size_t _MaxCount);
//C       void * memmove(void *_Dst,const void *_Src,size_t _Size) ;
void * memmove(void *_Dst, void *_Src, size_t _Size);
//C       char * strchr(const char *_Str,int _Val);
char * strchr(char *_Str, int _Val);
//C       int  strcoll(const char *_Str1,const char *_Str2);
int  strcoll(char *_Str1, char *_Str2);
//C       size_t  strcspn(const char *_Str,const char *_Control);
size_t  strcspn(char *_Str, char *_Control);
//C       char * strerror() ;
char * strerror(int );
//C       char *strlwr_l(char *_String,_locale_t _Locale) ;
char * strlwr_l(char *_String, _locale_t _Locale);
//C       char * strncat(char *  _Dest,const char *  _Source,size_t _Count) ;
char * strncat(char *_Dest, char *_Source, size_t _Count);
//C       int  strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
int  strncmp(char *_Str1, char *_Str2, size_t _MaxCount);
//C       char *strncpy(char *  _Dest,const char *  _Source,size_t _Count) ;
char * strncpy(char *_Dest, char *_Source, size_t _Count);
//C       char * strpbrk(const char *_Str,const char *_Control);
char * strpbrk(char *_Str, char *_Control);
//C       char * strrchr(const char *_Str,int _Ch);
char * strrchr(char *_Str, int _Ch);
//C       size_t  strspn(const char *_Str,const char *_Control);
size_t  strspn(char *_Str, char *_Control);
//C       char * strstr(const char *_Str,const char *_SubStr);
char * strstr(char *_Str, char *_SubStr);
//C       char * strtok(char *  _Str,const char *  _Delim) ;
char * strtok(char *_Str, char *_Delim);
//C       size_t  strxfrm(char *  _Dst,const char *  _Src,size_t _MaxCount);
size_t  strxfrm(char *_Dst, char *_Src, size_t _MaxCount);
//C       char * strdup(const char *_Src) ;
char * strdup(char *_Src);
//C       int  strcmpi(const char *_Str1,const char *_Str2) ;
int  strcmpi(char *_Str1, char *_Str2);
//C       int  stricmp(const char *_Str1,const char *_Str2) ;
int  stricmp(char *_Str1, char *_Str2);
//C       char * strlwr(char *_Str) ;
char * strlwr(char *_Str);
//C       int  strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
int  strnicmp(char *_Str1, char *_Str, size_t _MaxCount);
//C       int  strncasecmp (const char *,const char *,size_t);
int  strncasecmp(char *, char *, size_t );
//C       int  strcasecmp (const char *,const char *);
int  strcasecmp(char *, char *);
//C       char * strnset(char *_Str,int _Val,size_t _MaxCount) ;
char * strnset(char *_Str, int _Val, size_t _MaxCount);
//C       char * strrev(char *_Str) ;
char * strrev(char *_Str);
//C       char * strset(char *_Str,int _Val) ;
char * strset(char *_Str, int _Val);
//C       char * strupr(char *_Str) ;
char * strupr(char *_Str);
//C       wchar_t * wcscat(wchar_t *  _Dest,const wchar_t *  _Source) ;
wchar_t * wcscat(wchar_t *_Dest, wchar_t *_Source);
//C       wchar_t * wcschr(const wchar_t *_Str,wchar_t _Ch);
wchar_t * wcschr(wchar_t *_Str, wchar_t _Ch);
//C       int  wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
int  wcscmp(wchar_t *_Str1, wchar_t *_Str2);
//C       wchar_t * wcscpy(wchar_t *  _Dest,const wchar_t *  _Source) ;
wchar_t * wcscpy(wchar_t *_Dest, wchar_t *_Source);
//C       size_t  wcscspn(const wchar_t *_Str,const wchar_t *_Control);
size_t  wcscspn(wchar_t *_Str, wchar_t *_Control);
//C       size_t  wcslen(const wchar_t *_Str);
size_t  wcslen(wchar_t *_Str);
//C       size_t  wcsnlen(const wchar_t *_Src,size_t _MaxCount);
size_t  wcsnlen(wchar_t *_Src, size_t _MaxCount);
//C       wchar_t *wcsncat(wchar_t *  _Dest,const wchar_t *  _Source,size_t _Count) ;
wchar_t * wcsncat(wchar_t *_Dest, wchar_t *_Source, size_t _Count);
//C       int  wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
int  wcsncmp(wchar_t *_Str1, wchar_t *_Str2, size_t _MaxCount);
//C       wchar_t *wcsncpy(wchar_t *  _Dest,const wchar_t *  _Source,size_t _Count) ;
wchar_t * wcsncpy(wchar_t *_Dest, wchar_t *_Source, size_t _Count);
//C       wchar_t * _wcsncpy_l(wchar_t *  _Dest,const wchar_t *  _Source,size_t _Count,_locale_t _Locale) ;
wchar_t * _wcsncpy_l(wchar_t *_Dest, wchar_t *_Source, size_t _Count, _locale_t _Locale);
//C       wchar_t * wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
wchar_t * wcspbrk(wchar_t *_Str, wchar_t *_Control);
//C       wchar_t * wcsrchr(const wchar_t *_Str,wchar_t _Ch);
wchar_t * wcsrchr(wchar_t *_Str, wchar_t _Ch);
//C       size_t  wcsspn(const wchar_t *_Str,const wchar_t *_Control);
size_t  wcsspn(wchar_t *_Str, wchar_t *_Control);
//C       wchar_t * wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
wchar_t * wcsstr(wchar_t *_Str, wchar_t *_SubStr);
//C       wchar_t * wcstok(wchar_t *  _Str,const wchar_t *  _Delim) ;
wchar_t * wcstok(wchar_t *_Str, wchar_t *_Delim);
//C       size_t  wcsxfrm(wchar_t *  _Dst,const wchar_t *  _Src,size_t _MaxCount);
size_t  wcsxfrm(wchar_t *_Dst, wchar_t *_Src, size_t _MaxCount);
//C       int  wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
int  wcscoll(wchar_t *_Str1, wchar_t *_Str2);
//C       wchar_t * wcsdup(const wchar_t *_Str) ;
wchar_t * wcsdup(wchar_t *_Str);
//C       int  wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
int  wcsicmp(wchar_t *_Str1, wchar_t *_Str2);
//C       int  wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
int  wcsnicmp(wchar_t *_Str1, wchar_t *_Str2, size_t _MaxCount);
//C       wchar_t * wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
wchar_t * wcsnset(wchar_t *_Str, wchar_t _Val, size_t _MaxCount);
//C       wchar_t * wcsrev(wchar_t *_Str) ;
wchar_t * wcsrev(wchar_t *_Str);
//C       wchar_t * wcsset(wchar_t *_Str,wchar_t _Val) ;
wchar_t * wcsset(wchar_t *_Str, wchar_t _Val);
//C       wchar_t * wcslwr(wchar_t *_Str) ;
wchar_t * wcslwr(wchar_t *_Str);
//C       wchar_t * wcsupr(wchar_t *_Str) ;
wchar_t * wcsupr(wchar_t *_Str);
//C       int  wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;
int  wcsicoll(wchar_t *_Str1, wchar_t *_Str2);
//C       typedef struct _OBJECTID {
//C         GUID Lineage;
//C         DWORD Uniquifier;
//C       } OBJECTID;
struct _OBJECTID
{
    GUID Lineage;
    DWORD Uniquifier;
}
alias _OBJECTID OBJECTID;
//C       typedef ULONG_PTR KSPIN_LOCK;
alias ULONG_PTR KSPIN_LOCK;
//C       typedef KSPIN_LOCK *PKSPIN_LOCK;
alias KSPIN_LOCK *PKSPIN_LOCK;
//C         BOOLEAN _bittest(LONG const *Base,LONG Offset);
BOOLEAN  _bittest(LONG *Base, LONG Offset);
//C         BOOLEAN _bittestandcomplement(LONG *Base,LONG Offset);
BOOLEAN  _bittestandcomplement(LONG *Base, LONG Offset);
//C         BOOLEAN InterlockedBitTestAndComplement(LONG *Base,LONG Bit);
BOOLEAN  InterlockedBitTestAndComplement(LONG *Base, LONG Bit);
//C         BOOLEAN _bittestandset(LONG *Base,LONG Offset);
BOOLEAN  _bittestandset(LONG *Base, LONG Offset);
//C         BOOLEAN _bittestandreset(LONG *Base,LONG Offset);
BOOLEAN  _bittestandreset(LONG *Base, LONG Offset);
//C         BOOLEAN _interlockedbittestandset(LONG *Base,LONG Offset);
BOOLEAN  _interlockedbittestandset(LONG *Base, LONG Offset);
//C         BOOLEAN _interlockedbittestandreset(LONG *Base,LONG Offset);
BOOLEAN  _interlockedbittestandreset(LONG *Base, LONG Offset);
//C         BOOLEAN _bittest64(LONG64 const *Base,LONG64 Offset);
BOOLEAN  _bittest64(LONG64 *Base, LONG64 Offset);
//C         BOOLEAN _bittestandcomplement64(LONG64 *Base,LONG64 Offset);
BOOLEAN  _bittestandcomplement64(LONG64 *Base, LONG64 Offset);
//C         BOOLEAN _bittestandset64(LONG64 *Base,LONG64 Offset);
BOOLEAN  _bittestandset64(LONG64 *Base, LONG64 Offset);
//C         BOOLEAN _bittestandreset64(LONG64 *Base,LONG64 Offset);
BOOLEAN  _bittestandreset64(LONG64 *Base, LONG64 Offset);
//C         BOOLEAN _interlockedbittestandset64(LONG64 *Base,LONG64 Offset);
BOOLEAN  _interlockedbittestandset64(LONG64 *Base, LONG64 Offset);
//C         BOOLEAN _interlockedbittestandreset64(LONG64 *Base,LONG64 Offset);
BOOLEAN  _interlockedbittestandreset64(LONG64 *Base, LONG64 Offset);
//C         BOOLEAN _BitScanForward(DWORD *Index,DWORD Mask);
BOOLEAN  _BitScanForward(DWORD *Index, DWORD Mask);
//C         BOOLEAN _BitScanReverse(DWORD *Index,DWORD Mask);
BOOLEAN  _BitScanReverse(DWORD *Index, DWORD Mask);
//C         BOOLEAN _BitScanForward64(DWORD *Index,DWORD64 Mask);
BOOLEAN  _BitScanForward64(DWORD *Index, DWORD64 Mask);
//C         BOOLEAN _BitScanReverse64(DWORD *Index,DWORD64 Mask);
BOOLEAN  _BitScanReverse64(DWORD *Index, DWORD64 Mask);
//C         SHORT _InterlockedIncrement16(SHORT volatile *Addend);
SHORT  _InterlockedIncrement16(SHORT *Addend);
//C         SHORT _InterlockedDecrement16(SHORT volatile *Addend);
SHORT  _InterlockedDecrement16(SHORT *Addend);
//C         SHORT _InterlockedCompareExchange16(SHORT volatile *Destination,SHORT ExChange,SHORT Comperand);
SHORT  _InterlockedCompareExchange16(SHORT *Destination, SHORT ExChange, SHORT Comperand);
//C         LONG _InterlockedAnd(LONG volatile *Destination,LONG Value);
LONG  _InterlockedAnd(LONG *Destination, LONG Value);
//C         LONG _InterlockedOr(LONG volatile *Destination,LONG Value);
LONG  _InterlockedOr(LONG *Destination, LONG Value);
//C         LONG _InterlockedXor(LONG volatile *Destination,LONG Value);
LONG  _InterlockedXor(LONG *Destination, LONG Value);
//C         LONG _InterlockedIncrement(LONG volatile *Addend);
LONG  _InterlockedIncrement(LONG *Addend);
//C         LONG _InterlockedDecrement(LONG volatile *Addend);
LONG  _InterlockedDecrement(LONG *Addend);
//C         LONG _InterlockedExchange(LONG volatile *Target,LONG Value);
LONG  _InterlockedExchange(LONG *Target, LONG Value);
//C         LONG64 _InterlockedAnd64(LONG64 volatile *Destination,LONG64 Value);
LONG64  _InterlockedAnd64(LONG64 *Destination, LONG64 Value);
//C         LONG64 _InterlockedOr64(LONG64 volatile *Destination,LONG64 Value);
LONG64  _InterlockedOr64(LONG64 *Destination, LONG64 Value);
//C         LONG64 _InterlockedXor64(LONG64 volatile *Destination,LONG64 Value);
LONG64  _InterlockedXor64(LONG64 *Destination, LONG64 Value);
//C         LONG _InterlockedExchangeAdd(LONG volatile *Addend,LONG Value);
LONG  _InterlockedExchangeAdd(LONG *Addend, LONG Value);
//C         LONG _InterlockedCompareExchange(LONG volatile *Destination,LONG ExChange,LONG Comperand);
LONG  _InterlockedCompareExchange(LONG *Destination, LONG ExChange, LONG Comperand);
//C         LONG _InterlockedAdd(LONG volatile *Addend,LONG Value);
LONG  _InterlockedAdd(LONG *Addend, LONG Value);
//C         LONG64 _InterlockedIncrement64(LONG64 volatile *Addend);
LONG64  _InterlockedIncrement64(LONG64 *Addend);
//C         LONG64 _InterlockedDecrement64(LONG64 volatile *Addend);
LONG64  _InterlockedDecrement64(LONG64 *Addend);
//C         LONG64 _InterlockedExchange64(LONG64 volatile *Target,LONG64 Value);
LONG64  _InterlockedExchange64(LONG64 *Target, LONG64 Value);
//C         LONG64 _InterlockedExchangeAdd64(LONG64 volatile *Addend,LONG64 Value);
LONG64  _InterlockedExchangeAdd64(LONG64 *Addend, LONG64 Value);
//C         LONG64 _InterlockedAdd64(LONG64 volatile *Addend,LONG64 Value);
LONG64  _InterlockedAdd64(LONG64 *Addend, LONG64 Value);
//C         LONG64 _InterlockedCompareExchange64(LONG64 volatile *Destination,LONG64 ExChange,LONG64 Comperand);
LONG64  _InterlockedCompareExchange64(LONG64 *Destination, LONG64 ExChange, LONG64 Comperand);
//C         PVOID _InterlockedCompareExchangePointer(PVOID volatile *Destination,PVOID ExChange,PVOID Comperand);
PVOID  _InterlockedCompareExchangePointer(PVOID *Destination, PVOID ExChange, PVOID Comperand);
//C         PVOID _InterlockedExchangePointer(PVOID volatile *Target,PVOID Value);
PVOID  _InterlockedExchangePointer(PVOID *Target, PVOID Value);
//C         void _ReadWriteBarrier(void);
void  _ReadWriteBarrier();
//C         void __int2c(void);
void  __int2c();
//C         unsigned int __getcallerseflags(void);
uint  __getcallerseflags();
//C         DWORD __segmentlimit(DWORD Selector);
DWORD  __segmentlimit(DWORD Selector);
//C          unsigned long long __rdtsc(void);
ulong  __rdtsc();
//C         void __movsb(PBYTE Destination,BYTE const *Source,SIZE_T Count);
void  __movsb(PBYTE Destination, BYTE *Source, SIZE_T Count);
//C         void __movsw(PWORD Destination,WORD const *Source,SIZE_T Count);
void  __movsw(PWORD Destination, WORD *Source, SIZE_T Count);
//C         void __movsd(PDWORD Destination,DWORD const *Source,SIZE_T Count);
void  __movsd(PDWORD Destination, DWORD *Source, SIZE_T Count);
//C         void __movsq(PDWORD64 Destination,DWORD64 const *Source,SIZE_T Count);
void  __movsq(PDWORD64 Destination, DWORD64 *Source, SIZE_T Count);
//C         void __stosb(PBYTE Destination,BYTE Value,SIZE_T Count);
void  __stosb(PBYTE Destination, BYTE Value, SIZE_T Count);
//C         void __stosw(PWORD Destination,WORD Value,SIZE_T Count);
void  __stosw(PWORD Destination, WORD Value, SIZE_T Count);
//C         void __stosd(PDWORD Destination,DWORD Value,SIZE_T Count);
void  __stosd(PDWORD Destination, DWORD Value, SIZE_T Count);
//C         void __stosq(PDWORD64 Destination,DWORD64 Value,SIZE_T Count);
void  __stosq(PDWORD64 Destination, DWORD64 Value, SIZE_T Count);
//C         LONGLONG __mulh(LONGLONG Multiplier,LONGLONG Multiplicand);
LONGLONG  __mulh(LONGLONG Multiplier, LONGLONG Multiplicand);
//C         ULONGLONG __umulh(ULONGLONG Multiplier,ULONGLONG Multiplicand);
ULONGLONG  __umulh(ULONGLONG Multiplier, ULONGLONG Multiplicand);
//C         DWORD64 __shiftleft128(DWORD64 LowPart,DWORD64 HighPart,BYTE Shift);
DWORD64  __shiftleft128(DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);
//C         DWORD64 __shiftright128(DWORD64 LowPart,DWORD64 HighPart,BYTE Shift);
DWORD64  __shiftright128(DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);
//C         LONG64 _mul128(LONG64 Multiplier,LONG64 Multiplicand,LONG64 *HighProduct);
LONG64  _mul128(LONG64 Multiplier, LONG64 Multiplicand, LONG64 *HighProduct);
//C         DWORD64 _umul128(DWORD64 Multiplier,DWORD64 Multiplicand,DWORD64 *HighProduct);
DWORD64  _umul128(DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64 *HighProduct);
//C         LONG64 MultiplyExtract128(LONG64 Multiplier,LONG64 Multiplicand,BYTE Shift);
LONG64  MultiplyExtract128(LONG64 Multiplier, LONG64 Multiplicand, BYTE Shift);
//C         DWORD64 UnsignedMultiplyExtract128(DWORD64 Multiplier,DWORD64 Multiplicand,BYTE Shift);
DWORD64  UnsignedMultiplyExtract128(DWORD64 Multiplier, DWORD64 Multiplicand, BYTE Shift);
//C       typedef struct  _M128A {
//C         ULONGLONG Low;
//C         LONGLONG High;
//C       } M128A,*PM128A;
struct _M128A
{
    ULONGLONG Low;
    LONGLONG High;
}
alias _M128A M128A;
alias _M128A *PM128A;
//C       typedef struct _XMM_SAVE_AREA32 {
//C         WORD ControlWord;
//C         WORD StatusWord;
//C         BYTE TagWord;
//C         BYTE Reserved1;
//C         WORD ErrorOpcode;
//C         DWORD ErrorOffset;
//C         WORD ErrorSelector;
//C         WORD Reserved2;
//C         DWORD DataOffset;
//C         WORD DataSelector;
//C         WORD Reserved3;
//C         DWORD MxCsr;
//C         DWORD MxCsr_Mask;
//C         M128A FloatRegisters[8];
//C         M128A XmmRegisters[16];
//C         BYTE Reserved4[96];
//C       } XMM_SAVE_AREA32,*PXMM_SAVE_AREA32;
struct _XMM_SAVE_AREA32
{
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A [8]FloatRegisters;
    M128A [16]XmmRegisters;
    BYTE [96]Reserved4;
}
alias _XMM_SAVE_AREA32 XMM_SAVE_AREA32;
alias _XMM_SAVE_AREA32 *PXMM_SAVE_AREA32;
//C       typedef struct  _CONTEXT {
//C         DWORD64 P1Home;
//C         DWORD64 P2Home;
//C         DWORD64 P3Home;
//C         DWORD64 P4Home;
//C         DWORD64 P5Home;
//C         DWORD64 P6Home;
//C         DWORD ContextFlags;
//C         DWORD MxCsr;
//C         WORD SegCs;
//C         WORD SegDs;
//C         WORD SegEs;
//C         WORD SegFs;
//C         WORD SegGs;
//C         WORD SegSs;
//C         DWORD EFlags;
//C         DWORD64 Dr0;
//C         DWORD64 Dr1;
//C         DWORD64 Dr2;
//C         DWORD64 Dr3;
//C         DWORD64 Dr6;
//C         DWORD64 Dr7;
//C         DWORD64 Rax;
//C         DWORD64 Rcx;
//C         DWORD64 Rdx;
//C         DWORD64 Rbx;
//C         DWORD64 Rsp;
//C         DWORD64 Rbp;
//C         DWORD64 Rsi;
//C         DWORD64 Rdi;
//C         DWORD64 R8;
//C         DWORD64 R9;
//C         DWORD64 R10;
//C         DWORD64 R11;
//C         DWORD64 R12;
//C         DWORD64 R13;
//C         DWORD64 R14;
//C         DWORD64 R15;
//C         DWORD64 Rip;
//C          union {
//C           XMM_SAVE_AREA32 FltSave;
//C           XMM_SAVE_AREA32 FloatSave;
//C            struct {
//C      M128A Header[2];
//C      M128A Legacy[8];
//C      M128A Xmm0;
//C      M128A Xmm1;
//C      M128A Xmm2;
//C      M128A Xmm3;
//C      M128A Xmm4;
//C      M128A Xmm5;
//C      M128A Xmm6;
//C      M128A Xmm7;
//C      M128A Xmm8;
//C      M128A Xmm9;
//C      M128A Xmm10;
//C      M128A Xmm11;
//C      M128A Xmm12;
//C      M128A Xmm13;
//C      M128A Xmm14;
//C      M128A Xmm15;
//C           };
struct _N7
{
    M128A [2]Header;
    M128A [8]Legacy;
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
}
//C         };
union _N6
{
    XMM_SAVE_AREA32 FltSave;
    XMM_SAVE_AREA32 FloatSave;
    M128A [2]Header;
    M128A [8]Legacy;
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
}
//C         M128A VectorRegister[26];
//C         DWORD64 VectorControl;
//C         DWORD64 DebugControl;
//C         DWORD64 LastBranchToRip;
//C         DWORD64 LastBranchFromRip;
//C         DWORD64 LastExceptionToRip;
//C         DWORD64 LastExceptionFromRip;
//C       } CONTEXT,*PCONTEXT;
struct _CONTEXT
{
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;
    DWORD ContextFlags;
    DWORD MxCsr;
    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;
    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;
    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;
    DWORD64 Rip;
    XMM_SAVE_AREA32 FltSave;
    XMM_SAVE_AREA32 FloatSave;
    M128A [2]Header;
    M128A [8]Legacy;
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
    M128A [26]VectorRegister;
    DWORD64 VectorControl;
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
}
alias _CONTEXT CONTEXT;
alias _CONTEXT *PCONTEXT;
//C       typedef struct _RUNTIME_FUNCTION {
//C         DWORD BeginAddress;
//C         DWORD EndAddress;
//C         DWORD UnwindData;
//C       } RUNTIME_FUNCTION,*PRUNTIME_FUNCTION;
struct _RUNTIME_FUNCTION
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindData;
}
alias _RUNTIME_FUNCTION RUNTIME_FUNCTION;
alias _RUNTIME_FUNCTION *PRUNTIME_FUNCTION;
//C       typedef PRUNTIME_FUNCTION (*PGET_RUNTIME_FUNCTION_CALLBACK)(DWORD64 ControlPc,PVOID Context);
alias PRUNTIME_FUNCTION  function(DWORD64 ControlPc, PVOID Context)PGET_RUNTIME_FUNCTION_CALLBACK;
//C       typedef DWORD (*POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK)(HANDLE Process,PVOID TableAddress,PDWORD Entries,PRUNTIME_FUNCTION *Functions);
alias DWORD  function(HANDLE Process, PVOID TableAddress, PDWORD Entries, PRUNTIME_FUNCTION *Functions)POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
//C        void  RtlRestoreContext (PCONTEXT ContextRecord,struct _EXCEPTION_RECORD *ExceptionRecord);
void  RtlRestoreContext(PCONTEXT ContextRecord, _EXCEPTION_RECORD *ExceptionRecord);
//C        BOOLEAN  RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable,DWORD EntryCount,DWORD64 BaseAddress);
BOOLEAN  RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress);
//C        BOOLEAN  RtlInstallFunctionTableCallback(DWORD64 TableIdentifier,DWORD64 BaseAddress,DWORD Length,PGET_RUNTIME_FUNCTION_CALLBACK Callback,PVOID Context,PCWSTR OutOfProcessCallbackDll);
BOOLEAN  RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll);
//C        BOOLEAN  RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable);
BOOLEAN  RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable);
//C       LONG _InterlockedIncrement(LONG volatile *);
LONG  _InterlockedIncrement(LONG *);
//C       LONG _InterlockedDecrement(LONG volatile *);
LONG  _InterlockedDecrement(LONG *);
//C       LONG _InterlockedExchange(LONG volatile *,LONG);
LONG  _InterlockedExchange(LONG *, LONG );
//C         typedef struct _LDT_ENTRY {
//C           WORD LimitLow;
//C           WORD BaseLow;
//C           union {
//C      struct {
//C        BYTE BaseMid;
//C        BYTE Flags1;
//C        BYTE Flags2;
//C        BYTE BaseHi;
//C      } Bytes;
struct _N9
{
    BYTE BaseMid;
    BYTE Flags1;
    BYTE Flags2;
    BYTE BaseHi;
}
//C      struct {
//C        DWORD BaseMid : 8;
//C        DWORD Type : 5;
//C        DWORD Dpl : 2;
//C        DWORD Pres : 1;
//C        DWORD LimitHi : 4;
//C        DWORD Sys : 1;
//C        DWORD Reserved_0 : 1;
//C        DWORD Default_Big : 1;
//C        DWORD Granularity : 1;
//C        DWORD BaseHi : 8;
//C      } Bits;
struct _N10
{
    DWORD __bitfield1;
    DWORD BaseMid() { return (__bitfield1 >> 0) & 0xff; }
    DWORD Type() { return (__bitfield1 >> 8) & 0x1f; }
    DWORD Dpl() { return (__bitfield1 >> 13) & 0x3; }
    DWORD Pres() { return (__bitfield1 >> 15) & 0x1; }
    DWORD LimitHi() { return (__bitfield1 >> 16) & 0xf; }
    DWORD Sys() { return (__bitfield1 >> 20) & 0x1; }
    DWORD Reserved_0() { return (__bitfield1 >> 21) & 0x1; }
    DWORD Default_Big() { return (__bitfield1 >> 22) & 0x1; }
    DWORD Granularity() { return (__bitfield1 >> 23) & 0x1; }
    DWORD BaseHi() { return (__bitfield1 >> 24) & 0xff; }
}
//C           } HighWord;
union _N8
{
    _N9 Bytes;
    _N10 Bits;
}
//C         } LDT_ENTRY,*PLDT_ENTRY;
struct _LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;
    _N8 HighWord;
}
alias _LDT_ENTRY LDT_ENTRY;
alias _LDT_ENTRY *PLDT_ENTRY;
//C         typedef struct _EXCEPTION_RECORD {
//C           DWORD ExceptionCode;
//C           DWORD ExceptionFlags;
//C           struct _EXCEPTION_RECORD *ExceptionRecord;
//C           PVOID ExceptionAddress;
//C           DWORD NumberParameters;
//C           ULONG_PTR ExceptionInformation[15];
//C         } EXCEPTION_RECORD;
struct _EXCEPTION_RECORD
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR [15]ExceptionInformation;
}
alias _EXCEPTION_RECORD EXCEPTION_RECORD;
//C         typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;
alias EXCEPTION_RECORD *PEXCEPTION_RECORD;
//C         typedef struct _EXCEPTION_RECORD32 {
//C           DWORD ExceptionCode;
//C           DWORD ExceptionFlags;
//C           DWORD ExceptionRecord;
//C           DWORD ExceptionAddress;
//C           DWORD NumberParameters;
//C           DWORD ExceptionInformation[15];
//C         } EXCEPTION_RECORD32,*PEXCEPTION_RECORD32;
struct _EXCEPTION_RECORD32
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD [15]ExceptionInformation;
}
alias _EXCEPTION_RECORD32 EXCEPTION_RECORD32;
alias _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;
//C         typedef struct _EXCEPTION_RECORD64 {
//C           DWORD ExceptionCode;
//C           DWORD ExceptionFlags;
//C           DWORD64 ExceptionRecord;
//C           DWORD64 ExceptionAddress;
//C           DWORD NumberParameters;
//C           DWORD __unusedAlignment;
//C           DWORD64 ExceptionInformation[15];
//C         } EXCEPTION_RECORD64,*PEXCEPTION_RECORD64;
struct _EXCEPTION_RECORD64
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 [15]ExceptionInformation;
}
alias _EXCEPTION_RECORD64 EXCEPTION_RECORD64;
alias _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;
//C         typedef struct _EXCEPTION_POINTERS {
//C           PEXCEPTION_RECORD ExceptionRecord;
//C           PCONTEXT ContextRecord;
//C         } EXCEPTION_POINTERS,*PEXCEPTION_POINTERS;
struct _EXCEPTION_POINTERS
{
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
}
alias _EXCEPTION_POINTERS EXCEPTION_POINTERS;
alias _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
//C       typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
//C         ULONG64 ImageBase;
//C         PRUNTIME_FUNCTION FunctionEntry;
//C       } UNWIND_HISTORY_TABLE_ENTRY,*PUNWIND_HISTORY_TABLE_ENTRY;
struct _UNWIND_HISTORY_TABLE_ENTRY
{
    ULONG64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
}
alias _UNWIND_HISTORY_TABLE_ENTRY UNWIND_HISTORY_TABLE_ENTRY;
alias _UNWIND_HISTORY_TABLE_ENTRY *PUNWIND_HISTORY_TABLE_ENTRY;
//C       typedef struct _UNWIND_HISTORY_TABLE {
//C         ULONG Count;
//C         UCHAR Search;
//C         ULONG64 LowAddress;
//C         ULONG64 HighAddress;
//C         UNWIND_HISTORY_TABLE_ENTRY Entry[12];
//C       } UNWIND_HISTORY_TABLE,*PUNWIND_HISTORY_TABLE;
struct _UNWIND_HISTORY_TABLE
{
    ULONG Count;
    UCHAR Search;
    ULONG64 LowAddress;
    ULONG64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY [12]Entry;
}
alias _UNWIND_HISTORY_TABLE UNWIND_HISTORY_TABLE;
alias _UNWIND_HISTORY_TABLE *PUNWIND_HISTORY_TABLE;
//C        PRUNTIME_FUNCTION RtlLookupFunctionEntry(ULONG64 ControlPc,PULONG64 ImageBase,PUNWIND_HISTORY_TABLE HistoryTable);
PRUNTIME_FUNCTION  RtlLookupFunctionEntry(ULONG64 ControlPc, PULONG64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable);
//C       struct _DISPATCHER_CONTEXT;
//C       typedef struct _DISPATCHER_CONTEXT DISPATCHER_CONTEXT;
alias _DISPATCHER_CONTEXT DISPATCHER_CONTEXT;
//C       typedef struct _DISPATCHER_CONTEXT *PDISPATCHER_CONTEXT;
alias _DISPATCHER_CONTEXT *PDISPATCHER_CONTEXT;
//C       typedef struct EXCEPTION_DISPOSITION* PEXCEPTION_ROUTINE;
alias EXCEPTION_DISPOSITION *PEXCEPTION_ROUTINE;
//C         typedef struct PEXCEPTION_RECORD ExceptionRecord;
alias PEXCEPTION_RECORD ExceptionRecord;
//C          typedef ULONG64 EstablisherFrame;
alias ULONG64 EstablisherFrame;
//C          typedef struct PCONTEXT ContextRecord;
alias PCONTEXT ContextRecord;
//C          typedef struct PDISPATCHER_CONTEXT DispatcherContext;
alias PDISPATCHER_CONTEXT DispatcherContext;
//C       struct _DISPATCHER_CONTEXT {
//C         ULONG64 ControlPc;
//C         ULONG64 ImageBase;
//C         PRUNTIME_FUNCTION FunctionEntry;
//C         ULONG64 EstablisherFrame;
//C         ULONG64 TargetIp;
//C         PCONTEXT ContextRecord;
//C         PEXCEPTION_ROUTINE LanguageHandler;
//C         PVOID HandlerData;
//C         PUNWIND_HISTORY_TABLE HistoryTable;
//C         ULONG ScopeIndex;
//C         ULONG Fill0;
//C       };
struct _DISPATCHER_CONTEXT
{
    ULONG64 ControlPc;
    ULONG64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    ULONG64 EstablisherFrame;
    ULONG64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    PUNWIND_HISTORY_TABLE HistoryTable;
    ULONG ScopeIndex;
    ULONG Fill0;
}
//C       typedef struct _KNONVOLATILE_CONTEXT_POINTERS
//C       {
//C         PM128A FloatingContext[16];
//C         PULONG64 IntegerContext[16];
//C       } KNONVOLATILE_CONTEXT_POINTERS,*PKNONVOLATILE_CONTEXT_POINTERS;
struct _KNONVOLATILE_CONTEXT_POINTERS
{
    PM128A [16]FloatingContext;
    PULONG64 [16]IntegerContext;
}
alias _KNONVOLATILE_CONTEXT_POINTERS KNONVOLATILE_CONTEXT_POINTERS;
alias _KNONVOLATILE_CONTEXT_POINTERS *PKNONVOLATILE_CONTEXT_POINTERS;
//C        void RtlUnwindEx(PVOID TargetFrame,ULONG64 TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue,PCONTEXT OriginalContext,PUNWIND_HISTORY_TABLE HistoryTable);
void  RtlUnwindEx(PVOID TargetFrame, ULONG64 TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT OriginalContext, PUNWIND_HISTORY_TABLE HistoryTable);
//C        PEXCEPTION_ROUTINE RtlVirtualUnwind(ULONG HandlerType,ULONG64 ImageBase,ULONG64 ControlPc,PRUNTIME_FUNCTION FunctionEntry,PCONTEXT ContextRecord,PVOID *HandlerData,PULONG64 EstablisherFrame,PKNONVOLATILE_CONTEXT_POINTERS ContextPointers);
PEXCEPTION_ROUTINE  RtlVirtualUnwind(ULONG HandlerType, ULONG64 ImageBase, ULONG64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID *HandlerData, PULONG64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers);
//C         typedef PVOID PACCESS_TOKEN;
alias PVOID PACCESS_TOKEN;
//C         typedef PVOID PSECURITY_DESCRIPTOR;
alias PVOID PSECURITY_DESCRIPTOR;
//C         typedef PVOID PSID;
alias PVOID PSID;
//C         typedef DWORD ACCESS_MASK;
alias DWORD ACCESS_MASK;
//C         typedef ACCESS_MASK *PACCESS_MASK;
alias ACCESS_MASK *PACCESS_MASK;
//C         typedef struct _GENERIC_MAPPING {
//C           ACCESS_MASK GenericRead;
//C           ACCESS_MASK GenericWrite;
//C           ACCESS_MASK GenericExecute;
//C           ACCESS_MASK GenericAll;
//C         } GENERIC_MAPPING;
struct _GENERIC_MAPPING
{
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
}
alias _GENERIC_MAPPING GENERIC_MAPPING;
//C         typedef GENERIC_MAPPING *PGENERIC_MAPPING;
alias GENERIC_MAPPING *PGENERIC_MAPPING;
//C         typedef struct _LUID_AND_ATTRIBUTES {
//C           LUID Luid;
//C           DWORD Attributes;
//C         } LUID_AND_ATTRIBUTES,*PLUID_AND_ATTRIBUTES;
struct _LUID_AND_ATTRIBUTES
{
    LUID Luid;
    DWORD Attributes;
}
alias _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
alias _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;
//C         typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
alias LUID_AND_ATTRIBUTES [1]LUID_AND_ATTRIBUTES_ARRAY;
//C         typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
alias LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
//C         typedef struct _SID_IDENTIFIER_AUTHORITY {
//C           BYTE Value[6];
//C         } SID_IDENTIFIER_AUTHORITY,*PSID_IDENTIFIER_AUTHORITY;
struct _SID_IDENTIFIER_AUTHORITY
{
    BYTE [6]Value;
}
alias _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
alias _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;
//C         typedef struct _SID {
//C           BYTE Revision;
//C           BYTE SubAuthorityCount;
//C           SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
//C           DWORD SubAuthority[1];
//C         } SID,*PISID;
struct _SID
{
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD [1]SubAuthority;
}
alias _SID SID;
alias _SID *PISID;
//C         typedef enum _SID_NAME_USE {
//C           SidTypeUser = 1,SidTypeGroup,SidTypeDomain,SidTypeAlias,SidTypeWellKnownGroup,SidTypeDeletedAccount,SidTypeInvalid,SidTypeUnknown,SidTypeComputer
//C         } SID_NAME_USE,*PSID_NAME_USE;
enum _SID_NAME_USE
{
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
}
alias _SID_NAME_USE SID_NAME_USE;
alias _SID_NAME_USE *PSID_NAME_USE;
//C         typedef struct _SID_AND_ATTRIBUTES {
//C           PSID Sid;
//C           DWORD Attributes;
//C         } SID_AND_ATTRIBUTES,*PSID_AND_ATTRIBUTES;
struct _SID_AND_ATTRIBUTES
{
    PSID Sid;
    DWORD Attributes;
}
alias _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
alias _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;
//C         typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
alias SID_AND_ATTRIBUTES [1]SID_AND_ATTRIBUTES_ARRAY;
//C         typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
alias SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
//C         typedef enum {
//C           WinNullSid = 0,WinWorldSid = 1,WinLocalSid = 2,WinCreatorOwnerSid = 3,WinCreatorGroupSid = 4,WinCreatorOwnerServerSid = 5,WinCreatorGroupServerSid = 6,WinNtAuthoritySid = 7,WinDialupSid = 8,WinNetworkSid = 9,WinBatchSid = 10,WinInteractiveSid = 11,WinServiceSid = 12,WinAnonymousSid = 13,WinProxySid = 14,WinEnterpriseControllersSid = 15,WinSelfSid = 16,WinAuthenticatedUserSid = 17,WinRestrictedCodeSid = 18,WinTerminalServerSid = 19,WinRemoteLogonIdSid = 20,WinLogonIdsSid = 21,WinLocalSystemSid = 22,WinLocalServiceSid = 23,WinNetworkServiceSid = 24,WinBuiltinDomainSid = 25,WinBuiltinAdministratorsSid = 26,WinBuiltinUsersSid = 27,WinBuiltinGuestsSid = 28,WinBuiltinPowerUsersSid = 29,WinBuiltinAccountOperatorsSid = 30,WinBuiltinSystemOperatorsSid = 31,WinBuiltinPrintOperatorsSid = 32,WinBuiltinBackupOperatorsSid = 33,WinBuiltinReplicatorSid = 34,WinBuiltinPreWindows2000CompatibleAccessSid = 35,WinBuiltinRemoteDesktopUsersSid = 36,WinBuiltinNetworkConfigurationOperatorsSid = 37,WinAccountAdministratorSid = 38,WinAccountGuestSid = 39,WinAccountKrbtgtSid = 40,WinAccountDomainAdminsSid = 41,WinAccountDomainUsersSid = 42,WinAccountDomainGuestsSid = 43,WinAccountComputersSid = 44,WinAccountControllersSid = 45,WinAccountCertAdminsSid = 46,WinAccountSchemaAdminsSid = 47,WinAccountEnterpriseAdminsSid = 48,WinAccountPolicyAdminsSid = 49,WinAccountRasAndIasServersSid = 50,WinNTLMAuthenticationSid = 51,WinDigestAuthenticationSid = 52,WinSChannelAuthenticationSid = 53,WinThisOrganizationSid = 54,WinOtherOrganizationSid = 55,WinBuiltinIncomingForestTrustBuildersSid = 56,WinBuiltinPerfMonitoringUsersSid = 57,WinBuiltinPerfLoggingUsersSid = 58,WinBuiltinAuthorizationAccessSid = 59,WinBuiltinTerminalServerLicenseServersSid = 60,WinBuiltinDCOMUsersSid = 61
//C         } WELL_KNOWN_SID_TYPE;
enum
{
    WinNullSid,
    WinWorldSid,
    WinLocalSid,
    WinCreatorOwnerSid,
    WinCreatorGroupSid,
    WinCreatorOwnerServerSid,
    WinCreatorGroupServerSid,
    WinNtAuthoritySid,
    WinDialupSid,
    WinNetworkSid,
    WinBatchSid,
    WinInteractiveSid,
    WinServiceSid,
    WinAnonymousSid,
    WinProxySid,
    WinEnterpriseControllersSid,
    WinSelfSid,
    WinAuthenticatedUserSid,
    WinRestrictedCodeSid,
    WinTerminalServerSid,
    WinRemoteLogonIdSid,
    WinLogonIdsSid,
    WinLocalSystemSid,
    WinLocalServiceSid,
    WinNetworkServiceSid,
    WinBuiltinDomainSid,
    WinBuiltinAdministratorsSid,
    WinBuiltinUsersSid,
    WinBuiltinGuestsSid,
    WinBuiltinPowerUsersSid,
    WinBuiltinAccountOperatorsSid,
    WinBuiltinSystemOperatorsSid,
    WinBuiltinPrintOperatorsSid,
    WinBuiltinBackupOperatorsSid,
    WinBuiltinReplicatorSid,
    WinBuiltinPreWindows2000CompatibleAccessSid,
    WinBuiltinRemoteDesktopUsersSid,
    WinBuiltinNetworkConfigurationOperatorsSid,
    WinAccountAdministratorSid,
    WinAccountGuestSid,
    WinAccountKrbtgtSid,
    WinAccountDomainAdminsSid,
    WinAccountDomainUsersSid,
    WinAccountDomainGuestsSid,
    WinAccountComputersSid,
    WinAccountControllersSid,
    WinAccountCertAdminsSid,
    WinAccountSchemaAdminsSid,
    WinAccountEnterpriseAdminsSid,
    WinAccountPolicyAdminsSid,
    WinAccountRasAndIasServersSid,
    WinNTLMAuthenticationSid,
    WinDigestAuthenticationSid,
    WinSChannelAuthenticationSid,
    WinThisOrganizationSid,
    WinOtherOrganizationSid,
    WinBuiltinIncomingForestTrustBuildersSid,
    WinBuiltinPerfMonitoringUsersSid,
    WinBuiltinPerfLoggingUsersSid,
    WinBuiltinAuthorizationAccessSid,
    WinBuiltinTerminalServerLicenseServersSid,
    WinBuiltinDCOMUsersSid,
}
alias int WELL_KNOWN_SID_TYPE;
//C         typedef struct _ACL {
//C           BYTE AclRevision;
//C           BYTE Sbz1;
//C           WORD AclSize;
//C           WORD AceCount;
//C           WORD Sbz2;
//C         } ACL;
struct _ACL
{
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
}
alias _ACL ACL;
//C         typedef ACL *PACL;
alias ACL *PACL;
//C         typedef struct _ACE_HEADER {
//C           BYTE AceType;
//C           BYTE AceFlags;
//C           WORD AceSize;
//C         } ACE_HEADER;
struct _ACE_HEADER
{
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
}
alias _ACE_HEADER ACE_HEADER;
//C         typedef ACE_HEADER *PACE_HEADER;
alias ACE_HEADER *PACE_HEADER;
//C         typedef struct _ACCESS_ALLOWED_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } ACCESS_ALLOWED_ACE;
struct _ACCESS_ALLOWED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
//C         typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
alias ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
//C         typedef struct _ACCESS_DENIED_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } ACCESS_DENIED_ACE;
struct _ACCESS_DENIED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
//C         typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
alias ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
//C         typedef struct _SYSTEM_AUDIT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } SYSTEM_AUDIT_ACE;
struct _SYSTEM_AUDIT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
//C         typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
alias SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
//C         typedef struct _SYSTEM_ALARM_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } SYSTEM_ALARM_ACE;
struct _SYSTEM_ALARM_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
//C         typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
alias SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
//C         typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } SYSTEM_MANDATORY_LABEL_ACE,*PSYSTEM_MANDATORY_LABEL_ACE;
struct _SYSTEM_MANDATORY_LABEL_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _SYSTEM_MANDATORY_LABEL_ACE SYSTEM_MANDATORY_LABEL_ACE;
alias _SYSTEM_MANDATORY_LABEL_ACE *PSYSTEM_MANDATORY_LABEL_ACE;
//C         typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } ACCESS_ALLOWED_OBJECT_ACE,*PACCESS_ALLOWED_OBJECT_ACE;
struct _ACCESS_ALLOWED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
alias _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
//C         typedef struct _ACCESS_DENIED_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } ACCESS_DENIED_OBJECT_ACE,*PACCESS_DENIED_OBJECT_ACE;
struct _ACCESS_DENIED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
alias _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;
//C         typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } SYSTEM_AUDIT_OBJECT_ACE,*PSYSTEM_AUDIT_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
alias _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;
//C         typedef struct _SYSTEM_ALARM_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } SYSTEM_ALARM_OBJECT_ACE,*PSYSTEM_ALARM_OBJECT_ACE;
struct _SYSTEM_ALARM_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
alias _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;
//C         typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } ACCESS_ALLOWED_CALLBACK_ACE,*PACCESS_ALLOWED_CALLBACK_ACE;
struct _ACCESS_ALLOWED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _ACCESS_ALLOWED_CALLBACK_ACE ACCESS_ALLOWED_CALLBACK_ACE;
alias _ACCESS_ALLOWED_CALLBACK_ACE *PACCESS_ALLOWED_CALLBACK_ACE;
//C         typedef struct _ACCESS_DENIED_CALLBACK_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } ACCESS_DENIED_CALLBACK_ACE,*PACCESS_DENIED_CALLBACK_ACE;
struct _ACCESS_DENIED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _ACCESS_DENIED_CALLBACK_ACE ACCESS_DENIED_CALLBACK_ACE;
alias _ACCESS_DENIED_CALLBACK_ACE *PACCESS_DENIED_CALLBACK_ACE;
//C         typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } SYSTEM_AUDIT_CALLBACK_ACE,*PSYSTEM_AUDIT_CALLBACK_ACE;
struct _SYSTEM_AUDIT_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _SYSTEM_AUDIT_CALLBACK_ACE SYSTEM_AUDIT_CALLBACK_ACE;
alias _SYSTEM_AUDIT_CALLBACK_ACE *PSYSTEM_AUDIT_CALLBACK_ACE;
//C         typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD SidStart;
//C         } SYSTEM_ALARM_CALLBACK_ACE,*PSYSTEM_ALARM_CALLBACK_ACE;
struct _SYSTEM_ALARM_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
}
alias _SYSTEM_ALARM_CALLBACK_ACE SYSTEM_ALARM_CALLBACK_ACE;
alias _SYSTEM_ALARM_CALLBACK_ACE *PSYSTEM_ALARM_CALLBACK_ACE;
//C         typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } ACCESS_ALLOWED_CALLBACK_OBJECT_ACE,*PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
alias _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
//C         typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } ACCESS_DENIED_CALLBACK_OBJECT_ACE,*PACCESS_DENIED_CALLBACK_OBJECT_ACE;
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _ACCESS_DENIED_CALLBACK_OBJECT_ACE ACCESS_DENIED_CALLBACK_OBJECT_ACE;
alias _ACCESS_DENIED_CALLBACK_OBJECT_ACE *PACCESS_DENIED_CALLBACK_OBJECT_ACE;
//C         typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } SYSTEM_AUDIT_CALLBACK_OBJECT_ACE,*PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
alias _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
//C         typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
//C           ACE_HEADER Header;
//C           ACCESS_MASK Mask;
//C           DWORD Flags;
//C           GUID ObjectType;
//C           GUID InheritedObjectType;
//C           DWORD SidStart;
//C         } SYSTEM_ALARM_CALLBACK_OBJECT_ACE,*PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
}
alias _SYSTEM_ALARM_CALLBACK_OBJECT_ACE SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
alias _SYSTEM_ALARM_CALLBACK_OBJECT_ACE *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
//C         typedef enum _ACL_INFORMATION_CLASS {
//C           AclRevisionInformation = 1,AclSizeInformation
//C         } ACL_INFORMATION_CLASS;
enum _ACL_INFORMATION_CLASS
{
    AclRevisionInformation = 1,
    AclSizeInformation,
}
alias _ACL_INFORMATION_CLASS ACL_INFORMATION_CLASS;
//C         typedef struct _ACL_REVISION_INFORMATION {
//C           DWORD AclRevision;
//C         } ACL_REVISION_INFORMATION;
struct _ACL_REVISION_INFORMATION
{
    DWORD AclRevision;
}
alias _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
//C         typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
alias ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
//C         typedef struct _ACL_SIZE_INFORMATION {
//C           DWORD AceCount;
//C           DWORD AclBytesInUse;
//C           DWORD AclBytesFree;
//C         } ACL_SIZE_INFORMATION;
struct _ACL_SIZE_INFORMATION
{
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
}
alias _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
//C         typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
alias ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
//C         typedef WORD SECURITY_DESCRIPTOR_CONTROL,*PSECURITY_DESCRIPTOR_CONTROL;
alias WORD SECURITY_DESCRIPTOR_CONTROL;
alias WORD *PSECURITY_DESCRIPTOR_CONTROL;
//C         typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
//C           BYTE Revision;
//C           BYTE Sbz1;
//C           SECURITY_DESCRIPTOR_CONTROL Control;
//C           DWORD Owner;
//C           DWORD Group;
//C           DWORD Sacl;
//C           DWORD Dacl;
//C         } SECURITY_DESCRIPTOR_RELATIVE,*PISECURITY_DESCRIPTOR_RELATIVE;
struct _SECURITY_DESCRIPTOR_RELATIVE
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
}
alias _SECURITY_DESCRIPTOR_RELATIVE SECURITY_DESCRIPTOR_RELATIVE;
alias _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;
//C         typedef struct _SECURITY_DESCRIPTOR {
//C           BYTE Revision;
//C           BYTE Sbz1;
//C           SECURITY_DESCRIPTOR_CONTROL Control;
//C           PSID Owner;
//C           PSID Group;
//C           PACL Sacl;
//C           PACL Dacl;
//C         } SECURITY_DESCRIPTOR,*PISECURITY_DESCRIPTOR;
struct _SECURITY_DESCRIPTOR
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
}
alias _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
alias _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;
//C         typedef struct _OBJECT_TYPE_LIST {
//C           WORD Level;
//C           WORD Sbz;
//C           GUID *ObjectType;
//C         } OBJECT_TYPE_LIST,*POBJECT_TYPE_LIST;
struct _OBJECT_TYPE_LIST
{
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
}
alias _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
alias _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;
//C         typedef enum _AUDIT_EVENT_TYPE {
//C           AuditEventObjectAccess,AuditEventDirectoryServiceAccess
//C         } AUDIT_EVENT_TYPE,*PAUDIT_EVENT_TYPE;
enum _AUDIT_EVENT_TYPE
{
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess,
}
alias _AUDIT_EVENT_TYPE AUDIT_EVENT_TYPE;
alias _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;
//C         typedef struct _PRIVILEGE_SET {
//C           DWORD PrivilegeCount;
//C           DWORD Control;
//C           LUID_AND_ATTRIBUTES Privilege[1];
//C         } PRIVILEGE_SET,*PPRIVILEGE_SET;
struct _PRIVILEGE_SET
{
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES [1]Privilege;
}
alias _PRIVILEGE_SET PRIVILEGE_SET;
alias _PRIVILEGE_SET *PPRIVILEGE_SET;
//C         typedef enum _SECURITY_IMPERSONATION_LEVEL {
//C           SecurityAnonymous,SecurityIdentification,SecurityImpersonation,SecurityDelegation
//C         } SECURITY_IMPERSONATION_LEVEL,*PSECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_IMPERSONATION_LEVEL
{
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation,
}
alias _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
alias _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
//C         typedef enum _TOKEN_TYPE {
//C           TokenPrimary = 1,TokenImpersonation
//C         } TOKEN_TYPE;
enum _TOKEN_TYPE
{
    TokenPrimary = 1,
    TokenImpersonation,
}
alias _TOKEN_TYPE TOKEN_TYPE;
//C         typedef TOKEN_TYPE *PTOKEN_TYPE;
alias TOKEN_TYPE *PTOKEN_TYPE;
//C         typedef enum _TOKEN_ELEVATION_TYPE {
//C           TokenElevationTypeDefault = 1,
//C           TokenElevationTypeFull,
//C           TokenElevationTypeLimited
//C         } TOKEN_ELEVATION_TYPE,*PTOKEN_ELEVATION_TYPE;
enum _TOKEN_ELEVATION_TYPE
{
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
}
alias _TOKEN_ELEVATION_TYPE TOKEN_ELEVATION_TYPE;
alias _TOKEN_ELEVATION_TYPE *PTOKEN_ELEVATION_TYPE;
//C         typedef enum _TOKEN_INFORMATION_CLASS {
//C           TokenUser = 1,
//C           TokenGroups,
//C           TokenPrivileges,
//C           TokenOwner,
//C           TokenPrimaryGroup,
//C           TokenDefaultDacl,
//C           TokenSource,
//C           TokenType,
//C           TokenImpersonationLevel,
//C           TokenStatistics,
//C           TokenRestrictedSids,
//C           TokenSessionId,
//C           TokenGroupsAndPrivileges,
//C           TokenSessionReference,
//C           TokenSandBoxInert,
//C           TokenAuditPolicy,
//C           TokenOrigin,
//C           TokenElevationType,
//C           TokenLinkedToken,
//C           TokenElevation,
//C           TokenHasRestrictions,
//C           TokenAccessInformation,
//C           TokenVirtualizationAllowed,
//C           TokenVirtualizationEnabled,
//C           TokenIntegrityLevel,
//C           TokenUIAccess,
//C           TokenMandatoryPolicy,
//C           TokenLogonSid,
//C           MaxTokenInfoClass
//C         } TOKEN_INFORMATION_CLASS,*PTOKEN_INFORMATION_CLASS;
enum _TOKEN_INFORMATION_CLASS
{
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    MaxTokenInfoClass,
}
alias _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
alias _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;
//C         typedef struct _TOKEN_USER {
//C           SID_AND_ATTRIBUTES User;
//C         } TOKEN_USER,*PTOKEN_USER;
struct _TOKEN_USER
{
    SID_AND_ATTRIBUTES User;
}
alias _TOKEN_USER TOKEN_USER;
alias _TOKEN_USER *PTOKEN_USER;
//C         typedef struct _TOKEN_GROUPS {
//C           DWORD GroupCount;
//C           SID_AND_ATTRIBUTES Groups[1];
//C         } TOKEN_GROUPS,*PTOKEN_GROUPS;
struct _TOKEN_GROUPS
{
    DWORD GroupCount;
    SID_AND_ATTRIBUTES [1]Groups;
}
alias _TOKEN_GROUPS TOKEN_GROUPS;
alias _TOKEN_GROUPS *PTOKEN_GROUPS;
//C         typedef struct _TOKEN_PRIVILEGES {
//C           DWORD PrivilegeCount;
//C           LUID_AND_ATTRIBUTES Privileges[1];
//C         } TOKEN_PRIVILEGES,*PTOKEN_PRIVILEGES;
struct _TOKEN_PRIVILEGES
{
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES [1]Privileges;
}
alias _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
alias _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;
//C         typedef struct _TOKEN_OWNER {
//C           PSID Owner;
//C         } TOKEN_OWNER,*PTOKEN_OWNER;
struct _TOKEN_OWNER
{
    PSID Owner;
}
alias _TOKEN_OWNER TOKEN_OWNER;
alias _TOKEN_OWNER *PTOKEN_OWNER;
//C         typedef struct _TOKEN_PRIMARY_GROUP {
//C           PSID PrimaryGroup;
//C         } TOKEN_PRIMARY_GROUP,*PTOKEN_PRIMARY_GROUP;
struct _TOKEN_PRIMARY_GROUP
{
    PSID PrimaryGroup;
}
alias _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
alias _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;
//C         typedef struct _TOKEN_DEFAULT_DACL {
//C           PACL DefaultDacl;
//C         } TOKEN_DEFAULT_DACL,*PTOKEN_DEFAULT_DACL;
struct _TOKEN_DEFAULT_DACL
{
    PACL DefaultDacl;
}
alias _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
alias _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;
//C         typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
//C           DWORD SidCount;
//C           DWORD SidLength;
//C           PSID_AND_ATTRIBUTES Sids;
//C           DWORD RestrictedSidCount;
//C           DWORD RestrictedSidLength;
//C           PSID_AND_ATTRIBUTES RestrictedSids;
//C           DWORD PrivilegeCount;
//C           DWORD PrivilegeLength;
//C           PLUID_AND_ATTRIBUTES Privileges;
//C           LUID AuthenticationId;
//C         } TOKEN_GROUPS_AND_PRIVILEGES,*PTOKEN_GROUPS_AND_PRIVILEGES;
struct _TOKEN_GROUPS_AND_PRIVILEGES
{
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
}
alias _TOKEN_GROUPS_AND_PRIVILEGES TOKEN_GROUPS_AND_PRIVILEGES;
alias _TOKEN_GROUPS_AND_PRIVILEGES *PTOKEN_GROUPS_AND_PRIVILEGES;
//C         typedef struct _TOKEN_AUDIT_POLICY {
//C           UCHAR PerUserPolicy[(()) >> 1) + 1];
//C         } TOKEN_AUDIT_POLICY,*PTOKEN_AUDIT_POLICY;
struct _TOKEN_AUDIT_POLICY
{
    UCHAR [27]PerUserPolicy;
}
alias _TOKEN_AUDIT_POLICY TOKEN_AUDIT_POLICY;
alias _TOKEN_AUDIT_POLICY *PTOKEN_AUDIT_POLICY;
//C         typedef struct _TOKEN_SOURCE {
//C           CHAR SourceName[8];
//C           LUID SourceIdentifier;
//C         } TOKEN_SOURCE,*PTOKEN_SOURCE;
struct _TOKEN_SOURCE
{
    CHAR [8]SourceName;
    LUID SourceIdentifier;
}
alias _TOKEN_SOURCE TOKEN_SOURCE;
alias _TOKEN_SOURCE *PTOKEN_SOURCE;
//C         typedef struct _TOKEN_STATISTICS {
//C           LUID TokenId;
//C           LUID AuthenticationId;
//C           LARGE_INTEGER ExpirationTime;
//C           TOKEN_TYPE TokenType;
//C           SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
//C           DWORD DynamicCharged;
//C           DWORD DynamicAvailable;
//C           DWORD GroupCount;
//C           DWORD PrivilegeCount;
//C           LUID ModifiedId;
//C         } TOKEN_STATISTICS,*PTOKEN_STATISTICS;
struct _TOKEN_STATISTICS
{
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
}
alias _TOKEN_STATISTICS TOKEN_STATISTICS;
alias _TOKEN_STATISTICS *PTOKEN_STATISTICS;
//C         typedef struct _TOKEN_CONTROL {
//C           LUID TokenId;
//C           LUID AuthenticationId;
//C           LUID ModifiedId;
//C           TOKEN_SOURCE TokenSource;
//C         } TOKEN_CONTROL,*PTOKEN_CONTROL;
struct _TOKEN_CONTROL
{
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
}
alias _TOKEN_CONTROL TOKEN_CONTROL;
alias _TOKEN_CONTROL *PTOKEN_CONTROL;
//C         typedef struct _TOKEN_ORIGIN {
//C           LUID OriginatingLogonSession;
//C         } TOKEN_ORIGIN,*PTOKEN_ORIGIN;
struct _TOKEN_ORIGIN
{
    LUID OriginatingLogonSession;
}
alias _TOKEN_ORIGIN TOKEN_ORIGIN;
alias _TOKEN_ORIGIN *PTOKEN_ORIGIN;
//C         typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,*PSECURITY_CONTEXT_TRACKING_MODE;
alias BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
alias BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE;
//C         typedef struct _SECURITY_QUALITY_OF_SERVICE {
//C           DWORD Length;
//C           SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
//C           SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
//C           BOOLEAN EffectiveOnly;
//C         } SECURITY_QUALITY_OF_SERVICE,*PSECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_QUALITY_OF_SERVICE
{
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
}
alias _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
alias _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;
//C         typedef struct _SE_IMPERSONATION_STATE {
//C           PACCESS_TOKEN Token;
//C           BOOLEAN CopyOnOpen;
//C           BOOLEAN EffectiveOnly;
//C           SECURITY_IMPERSONATION_LEVEL Level;
//C         } SE_IMPERSONATION_STATE,*PSE_IMPERSONATION_STATE;
struct _SE_IMPERSONATION_STATE
{
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
}
alias _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
alias _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;
//C         typedef DWORD SECURITY_INFORMATION,*PSECURITY_INFORMATION;
alias DWORD SECURITY_INFORMATION;
alias DWORD *PSECURITY_INFORMATION;
//C         typedef struct _JOB_SET_ARRAY {
//C           HANDLE JobHandle;
//C           DWORD MemberLevel;
//C           DWORD Flags;
//C         } JOB_SET_ARRAY,*PJOB_SET_ARRAY;
struct _JOB_SET_ARRAY
{
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
}
alias _JOB_SET_ARRAY JOB_SET_ARRAY;
alias _JOB_SET_ARRAY *PJOB_SET_ARRAY;
//C          typedef struct _NT_TIB {
//C           struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
//C           PVOID StackBase;
//C           PVOID StackLimit;
//C           PVOID SubSystemTib;
//C            union {
//C      PVOID FiberData;
//C      DWORD Version;
//C           };
union _N12
{
    PVOID FiberData;
    DWORD Version;
}
//C           PVOID ArbitraryUserPointer;
//C           struct _NT_TIB *Self;
//C         } NT_TIB;
struct _NT_TIB
{
    _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    PVOID FiberData;
    DWORD Version;
    PVOID ArbitraryUserPointer;
    _NT_TIB *Self;
}
alias _NT_TIB NT_TIB;
//C         typedef NT_TIB *PNT_TIB;
alias NT_TIB *PNT_TIB;
//C          typedef struct _NT_TIB32 {
//C           DWORD ExceptionList;
//C           DWORD StackBase;
//C           DWORD StackLimit;
//C           DWORD SubSystemTib;
//C            union {
//C      DWORD FiberData;
//C      DWORD Version;
//C           };
union _N13
{
    DWORD FiberData;
    DWORD Version;
}
//C           DWORD ArbitraryUserPointer;
//C           DWORD Self;
//C         } NT_TIB32,*PNT_TIB32;
struct _NT_TIB32
{
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;
    DWORD FiberData;
    DWORD Version;
    DWORD ArbitraryUserPointer;
    DWORD Self;
}
alias _NT_TIB32 NT_TIB32;
alias _NT_TIB32 *PNT_TIB32;
//C          typedef struct _NT_TIB64 {
//C           DWORD64 ExceptionList;
//C           DWORD64 StackBase;
//C           DWORD64 StackLimit;
//C           DWORD64 SubSystemTib;
//C            union {
//C      DWORD64 FiberData;
//C      DWORD Version;
//C           };
union _N14
{
    DWORD64 FiberData;
    DWORD Version;
}
//C           DWORD64 ArbitraryUserPointer;
//C           DWORD64 Self;
//C         } NT_TIB64,*PNT_TIB64;
struct _NT_TIB64
{
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
    DWORD64 FiberData;
    DWORD Version;
    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
}
alias _NT_TIB64 NT_TIB64;
alias _NT_TIB64 *PNT_TIB64;
//C         typedef struct _QUOTA_LIMITS {
//C           SIZE_T PagedPoolLimit;
//C           SIZE_T NonPagedPoolLimit;
//C           SIZE_T MinimumWorkingSetSize;
//C           SIZE_T MaximumWorkingSetSize;
//C           SIZE_T PagefileLimit;
//C           LARGE_INTEGER TimeLimit;
//C         } QUOTA_LIMITS,*PQUOTA_LIMITS;
struct _QUOTA_LIMITS
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
}
alias _QUOTA_LIMITS QUOTA_LIMITS;
alias _QUOTA_LIMITS *PQUOTA_LIMITS;
//C         typedef union _RATE_QUOTA_LIMIT {
//C           DWORD RateData;
//C            struct {
//C             DWORD RatePercent : 7;
//C             DWORD Reserved0 : 25;
//C           } ;
struct _N15
{
    DWORD __bitfield1;
    DWORD RatePercent() { return (__bitfield1 >> 0) & 0x7f; }
    DWORD Reserved0() { return (__bitfield1 >> 7) & 0x1ffffff; }
}
//C         } RATE_QUOTA_LIMIT,*PRATE_QUOTA_LIMIT;
union _RATE_QUOTA_LIMIT
{
    DWORD RateData;
    DWORD RatePercent() { return 0x7f; }
    DWORD Reserved0() { return 0x1ffffff; }
}
alias _RATE_QUOTA_LIMIT RATE_QUOTA_LIMIT;
alias _RATE_QUOTA_LIMIT *PRATE_QUOTA_LIMIT;
//C         typedef struct _QUOTA_LIMITS_EX {
//C           SIZE_T PagedPoolLimit;
//C           SIZE_T NonPagedPoolLimit;
//C           SIZE_T MinimumWorkingSetSize;
//C           SIZE_T MaximumWorkingSetSize;
//C           SIZE_T PagefileLimit;
//C           LARGE_INTEGER TimeLimit;
//C           SIZE_T WorkingSetLimit;
//C           SIZE_T Reserved2;
//C           SIZE_T Reserved3;
//C           SIZE_T Reserved4;
//C           DWORD Flags;
//C           RATE_QUOTA_LIMIT CpuRateLimit;
//C         } QUOTA_LIMITS_EX,*PQUOTA_LIMITS_EX;
struct _QUOTA_LIMITS_EX
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
}
alias _QUOTA_LIMITS_EX QUOTA_LIMITS_EX;
alias _QUOTA_LIMITS_EX *PQUOTA_LIMITS_EX;
//C         typedef struct _IO_COUNTERS {
//C           ULONGLONG ReadOperationCount;
//C           ULONGLONG WriteOperationCount;
//C           ULONGLONG OtherOperationCount;
//C           ULONGLONG ReadTransferCount;
//C           ULONGLONG WriteTransferCount;
//C           ULONGLONG OtherTransferCount;
//C         } IO_COUNTERS;
struct _IO_COUNTERS
{
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
}
alias _IO_COUNTERS IO_COUNTERS;
//C         typedef IO_COUNTERS *PIO_COUNTERS;
alias IO_COUNTERS *PIO_COUNTERS;
//C         typedef enum _HARDWARE_COUNTER_TYPE {
//C           PMCCounter,
//C           MaxHardwareCounterType
//C         } HARDWARE_COUNTER_TYPE,*PHARDWARE_COUNTER_TYPE;
enum _HARDWARE_COUNTER_TYPE
{
    PMCCounter,
    MaxHardwareCounterType,
}
alias _HARDWARE_COUNTER_TYPE HARDWARE_COUNTER_TYPE;
alias _HARDWARE_COUNTER_TYPE *PHARDWARE_COUNTER_TYPE;
//C         typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
//C           LARGE_INTEGER TotalUserTime;
//C           LARGE_INTEGER TotalKernelTime;
//C           LARGE_INTEGER ThisPeriodTotalUserTime;
//C           LARGE_INTEGER ThisPeriodTotalKernelTime;
//C           DWORD TotalPageFaultCount;
//C           DWORD TotalProcesses;
//C           DWORD ActiveProcesses;
//C           DWORD TotalTerminatedProcesses;
//C         } JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
}
alias _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
alias _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
//C         typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
//C           LARGE_INTEGER PerProcessUserTimeLimit;
//C           LARGE_INTEGER PerJobUserTimeLimit;
//C           DWORD LimitFlags;
//C           SIZE_T MinimumWorkingSetSize;
//C           SIZE_T MaximumWorkingSetSize;
//C           DWORD ActiveProcessLimit;
//C           ULONG_PTR Affinity;
//C           DWORD PriorityClass;
//C           DWORD SchedulingClass;
//C         } JOBOBJECT_BASIC_LIMIT_INFORMATION,*PJOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
}
alias _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
alias _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
//C         typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
//C           JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
//C           IO_COUNTERS IoInfo;
//C           SIZE_T ProcessMemoryLimit;
//C           SIZE_T JobMemoryLimit;
//C           SIZE_T PeakProcessMemoryUsed;
//C           SIZE_T PeakJobMemoryUsed;
//C         } JOBOBJECT_EXTENDED_LIMIT_INFORMATION,*PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
}
alias _JOBOBJECT_EXTENDED_LIMIT_INFORMATION JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
alias _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
//C         typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
//C           DWORD NumberOfAssignedProcesses;
//C           DWORD NumberOfProcessIdsInList;
//C           ULONG_PTR ProcessIdList[1];
//C         } JOBOBJECT_BASIC_PROCESS_ID_LIST,*PJOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR [1]ProcessIdList;
}
alias _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
alias _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
//C         typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
//C           DWORD UIRestrictionsClass;
//C         } JOBOBJECT_BASIC_UI_RESTRICTIONS,*PJOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
    DWORD UIRestrictionsClass;
}
alias _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
alias _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
//C         typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
//C           DWORD SecurityLimitFlags;
//C           HANDLE JobToken;
//C           PTOKEN_GROUPS SidsToDisable;
//C           PTOKEN_PRIVILEGES PrivilegesToDelete;
//C           PTOKEN_GROUPS RestrictedSids;
//C         } JOBOBJECT_SECURITY_LIMIT_INFORMATION,*PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
    DWORD SecurityLimitFlags;
    HANDLE JobToken;
    PTOKEN_GROUPS SidsToDisable;
    PTOKEN_PRIVILEGES PrivilegesToDelete;
    PTOKEN_GROUPS RestrictedSids;
}
alias _JOBOBJECT_SECURITY_LIMIT_INFORMATION JOBOBJECT_SECURITY_LIMIT_INFORMATION;
alias _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
//C         typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
//C           DWORD EndOfJobTimeAction;
//C         } JOBOBJECT_END_OF_JOB_TIME_INFORMATION,*PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
    DWORD EndOfJobTimeAction;
}
alias _JOBOBJECT_END_OF_JOB_TIME_INFORMATION JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
alias _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
//C         typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
//C           PVOID CompletionKey;
//C           HANDLE CompletionPort;
//C         } JOBOBJECT_ASSOCIATE_COMPLETION_PORT,*PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
    PVOID CompletionKey;
    HANDLE CompletionPort;
}
alias _JOBOBJECT_ASSOCIATE_COMPLETION_PORT JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
alias _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
//C         typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
//C           JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
//C           IO_COUNTERS IoInfo;
//C         } JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION,*PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
}
alias _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
alias _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
//C         typedef struct _JOBOBJECT_JOBSET_INFORMATION {
//C           DWORD MemberLevel;
//C         } JOBOBJECT_JOBSET_INFORMATION,*PJOBOBJECT_JOBSET_INFORMATION;
struct _JOBOBJECT_JOBSET_INFORMATION
{
    DWORD MemberLevel;
}
alias _JOBOBJECT_JOBSET_INFORMATION JOBOBJECT_JOBSET_INFORMATION;
alias _JOBOBJECT_JOBSET_INFORMATION *PJOBOBJECT_JOBSET_INFORMATION;
//C         typedef enum _JOBOBJECTINFOCLASS {
//C           JobObjectBasicAccountingInformation = 1,JobObjectBasicLimitInformation,
//C           JobObjectBasicProcessIdList,JobObjectBasicUIRestrictions,
//C           JobObjectSecurityLimitInformation,JobObjectEndOfJobTimeInformation,
//C           JobObjectAssociateCompletionPortInformation,JobObjectBasicAndIoAccountingInformation,
//C           JobObjectExtendedLimitInformation,JobObjectJobSetInformation,
//C           JobObjectGroupInformation,
//C           MaxJobObjectInfoClass
//C         } JOBOBJECTINFOCLASS;
enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    MaxJobObjectInfoClass,
}
alias _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
//C         typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
//C           RelationProcessorCore,RelationNumaNode,RelationCache,
//C           RelationProcessorPackage,RelationGroup,RelationAll=0xffff
//C         } LOGICAL_PROCESSOR_RELATIONSHIP;
enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 65535,
}
alias _LOGICAL_PROCESSOR_RELATIONSHIP LOGICAL_PROCESSOR_RELATIONSHIP;
//C         typedef enum _PROCESSOR_CACHE_TYPE {
//C           CacheUnified,CacheInstruction,CacheData,CacheTrace
//C         } PROCESSOR_CACHE_TYPE;
enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace,
}
alias _PROCESSOR_CACHE_TYPE PROCESSOR_CACHE_TYPE;
//C         typedef struct _CACHE_DESCRIPTOR {
//C           BYTE Level;
//C           BYTE Associativity;
//C           WORD LineSize;
//C           DWORD Size;
//C           PROCESSOR_CACHE_TYPE Type;
//C         } CACHE_DESCRIPTOR,*PCACHE_DESCRIPTOR;
struct _CACHE_DESCRIPTOR
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
}
alias _CACHE_DESCRIPTOR CACHE_DESCRIPTOR;
alias _CACHE_DESCRIPTOR *PCACHE_DESCRIPTOR;
//C         typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
//C           ULONG_PTR ProcessorMask;
//C           LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
//C            union {
//C      struct {
//C        BYTE Flags;
//C      } ProcessorCore;
struct _N17
{
    BYTE Flags;
}
//C      struct {
//C        DWORD NodeNumber;
//C      } NumaNode;
struct _N18
{
    DWORD NodeNumber;
}
//C      CACHE_DESCRIPTOR Cache;
//C      ULONGLONG Reserved[2];
//C           };
union _N16
{
    _N17 ProcessorCore;
    _N18 NumaNode;
    CACHE_DESCRIPTOR Cache;
    ULONGLONG [2]Reserved;
}
//C         } SYSTEM_LOGICAL_PROCESSOR_INFORMATION,*PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    _N17 ProcessorCore;
    _N18 NumaNode;
    CACHE_DESCRIPTOR Cache;
    ULONGLONG [2]Reserved;
}
alias _SYSTEM_LOGICAL_PROCESSOR_INFORMATION SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
alias _SYSTEM_LOGICAL_PROCESSOR_INFORMATION *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
//C         typedef struct _MEMORY_BASIC_INFORMATION {
//C           PVOID BaseAddress;
//C           PVOID AllocationBase;
//C           DWORD AllocationProtect;
//C           SIZE_T RegionSize;
//C           DWORD State;
//C           DWORD Protect;
//C           DWORD Type;
//C         } MEMORY_BASIC_INFORMATION,*PMEMORY_BASIC_INFORMATION;
struct _MEMORY_BASIC_INFORMATION
{
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
}
alias _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
alias _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;
//C         typedef struct _MEMORY_BASIC_INFORMATION32 {
//C           DWORD BaseAddress;
//C           DWORD AllocationBase;
//C           DWORD AllocationProtect;
//C           DWORD RegionSize;
//C           DWORD State;
//C           DWORD Protect;
//C           DWORD Type;
//C         } MEMORY_BASIC_INFORMATION32,*PMEMORY_BASIC_INFORMATION32;
struct _MEMORY_BASIC_INFORMATION32
{
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
}
alias _MEMORY_BASIC_INFORMATION32 MEMORY_BASIC_INFORMATION32;
alias _MEMORY_BASIC_INFORMATION32 *PMEMORY_BASIC_INFORMATION32;
//C         typedef struct  _MEMORY_BASIC_INFORMATION64 {
//C           ULONGLONG BaseAddress;
//C           ULONGLONG AllocationBase;
//C           DWORD AllocationProtect;
//C           DWORD __alignment1;
//C           ULONGLONG RegionSize;
//C           DWORD State;
//C           DWORD Protect;
//C           DWORD Type;
//C           DWORD __alignment2;
//C         } MEMORY_BASIC_INFORMATION64,*PMEMORY_BASIC_INFORMATION64;
struct _MEMORY_BASIC_INFORMATION64
{
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
}
alias _MEMORY_BASIC_INFORMATION64 MEMORY_BASIC_INFORMATION64;
alias _MEMORY_BASIC_INFORMATION64 *PMEMORY_BASIC_INFORMATION64;
//C         typedef struct _FILE_NOTIFY_INFORMATION {
//C           DWORD NextEntryOffset;
//C           DWORD Action;
//C           DWORD FileNameLength;
//C           WCHAR FileName[1];
//C         } FILE_NOTIFY_INFORMATION,*PFILE_NOTIFY_INFORMATION;
struct _FILE_NOTIFY_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR [1]FileName;
}
alias _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
alias _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;
//C         typedef union _FILE_SEGMENT_ELEMENT {
//C           PVOID64 Buffer;
//C           ULONGLONG Alignment;
//C         }FILE_SEGMENT_ELEMENT,*PFILE_SEGMENT_ELEMENT;
union _FILE_SEGMENT_ELEMENT
{
    PVOID64 Buffer;
    ULONGLONG Alignment;
}
alias _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
alias _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;
//C         typedef struct _REPARSE_GUID_DATA_BUFFER {
//C           DWORD ReparseTag;
//C           WORD ReparseDataLength;
//C           WORD Reserved;
//C           GUID ReparseGuid;
//C           struct {
//C      BYTE DataBuffer[1];
//C           } GenericReparseBuffer;
struct _N19
{
    BYTE [1]DataBuffer;
}
//C         } REPARSE_GUID_DATA_BUFFER,*PREPARSE_GUID_DATA_BUFFER;
struct _REPARSE_GUID_DATA_BUFFER
{
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    _N19 GenericReparseBuffer;
}
alias _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
alias _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;
//C       typedef enum _SYSTEM_POWER_STATE {
//C         PowerSystemUnspecified = 0,PowerSystemWorking = 1,PowerSystemSleeping1 = 2,PowerSystemSleeping2 = 3,PowerSystemSleeping3 = 4,PowerSystemHibernate = 5,PowerSystemShutdown = 6,PowerSystemMaximum = 7
//C       } SYSTEM_POWER_STATE,*PSYSTEM_POWER_STATE;
enum _SYSTEM_POWER_STATE
{
    PowerSystemUnspecified,
    PowerSystemWorking,
    PowerSystemSleeping1,
    PowerSystemSleeping2,
    PowerSystemSleeping3,
    PowerSystemHibernate,
    PowerSystemShutdown,
    PowerSystemMaximum,
}
alias _SYSTEM_POWER_STATE SYSTEM_POWER_STATE;
alias _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;
//C       typedef enum {
//C         PowerActionNone = 0,PowerActionReserved,PowerActionSleep,PowerActionHibernate,
//C         PowerActionShutdown,PowerActionShutdownReset,PowerActionShutdownOff,
//C         PowerActionWarmEject
//C       } POWER_ACTION,*PPOWER_ACTION;
enum
{
    PowerActionNone,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
}
alias int POWER_ACTION;
alias int *PPOWER_ACTION;
//C       typedef enum _DEVICE_POWER_STATE {
//C         PowerDeviceUnspecified = 0,PowerDeviceD0,PowerDeviceD1,PowerDeviceD2,PowerDeviceD3,
//C         PowerDeviceMaximum
//C       } DEVICE_POWER_STATE,*PDEVICE_POWER_STATE;
enum _DEVICE_POWER_STATE
{
    PowerDeviceUnspecified,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum,
}
alias _DEVICE_POWER_STATE DEVICE_POWER_STATE;
alias _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;
//C       typedef enum _MONITOR_DISPLAY_STATE {
//C         PowerMonitorOff = 0,PowerMonitorOn,PowerMonitorDim
//C       } MONITOR_DISPLAY_STATE,*PMONITOR_DISPLAY_STATE;
enum _MONITOR_DISPLAY_STATE
{
    PowerMonitorOff,
    PowerMonitorOn,
    PowerMonitorDim,
}
alias _MONITOR_DISPLAY_STATE MONITOR_DISPLAY_STATE;
alias _MONITOR_DISPLAY_STATE *PMONITOR_DISPLAY_STATE;
//C       typedef DWORD EXECUTION_STATE;
alias DWORD EXECUTION_STATE;
//C       typedef enum {
//C         LT_DONT_CARE,LT_LOWEST_LATENCY
//C       } LATENCY_TIME;
enum
{
    LT_DONT_CARE,
    LT_LOWEST_LATENCY,
}
alias int LATENCY_TIME;
//C         typedef struct CM_Power_Data_s {
//C           DWORD PD_Size;
//C           DEVICE_POWER_STATE PD_MostRecentPowerState;
//C           DWORD PD_Capabilities;
//C           DWORD PD_D1Latency;
//C           DWORD PD_D2Latency;
//C           DWORD PD_D3Latency;
//C           DEVICE_POWER_STATE PD_PowerStateMapping[7];
//C           SYSTEM_POWER_STATE PD_DeepestSystemWake;
//C         } CM_POWER_DATA,*PCM_POWER_DATA;
struct CM_Power_Data_s
{
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE [7]PD_PowerStateMapping;
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
}
alias CM_Power_Data_s CM_POWER_DATA;
alias CM_Power_Data_s *PCM_POWER_DATA;
//C         typedef enum {
//C           SystemPowerPolicyAc,SystemPowerPolicyDc,VerifySystemPolicyAc,VerifySystemPolicyDc,SystemPowerCapabilities,SystemBatteryState,SystemPowerStateHandler,ProcessorStateHandler,SystemPowerPolicyCurrent,AdministratorPowerPolicy,SystemReserveHiberFile,ProcessorInformation,SystemPowerInformation,ProcessorStateHandler2,LastWakeTime,LastSleepTime,SystemExecutionState,SystemPowerStateNotifyHandler,ProcessorPowerPolicyAc,ProcessorPowerPolicyDc,VerifyProcessorPowerPolicyAc,VerifyProcessorPowerPolicyDc,ProcessorPowerPolicyCurrent,SystemPowerStateLogging,SystemPowerLoggingEntry
//C         } POWER_INFORMATION_LEVEL;
enum
{
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
}
alias int POWER_INFORMATION_LEVEL;
//C         typedef struct {
//C           DWORD Granularity;
//C           DWORD Capacity;
//C         } BATTERY_REPORTING_SCALE,*PBATTERY_REPORTING_SCALE;
struct _N23
{
    DWORD Granularity;
    DWORD Capacity;
}
alias _N23 BATTERY_REPORTING_SCALE;
alias _N23 *PBATTERY_REPORTING_SCALE;
//C         typedef struct {
//C           POWER_ACTION Action;
//C           DWORD Flags;
//C           DWORD EventCode;
//C         } POWER_ACTION_POLICY,*PPOWER_ACTION_POLICY;
struct _N24
{
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
}
alias _N24 POWER_ACTION_POLICY;
alias _N24 *PPOWER_ACTION_POLICY;
//C         typedef struct {
//C           BOOLEAN Enable;
//C           BYTE Spare[3];
//C           DWORD BatteryLevel;
//C           POWER_ACTION_POLICY PowerPolicy;
//C           SYSTEM_POWER_STATE MinSystemState;
//C         } SYSTEM_POWER_LEVEL,*PSYSTEM_POWER_LEVEL;
struct _N25
{
    BOOLEAN Enable;
    BYTE [3]Spare;
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
}
alias _N25 SYSTEM_POWER_LEVEL;
alias _N25 *PSYSTEM_POWER_LEVEL;
//C         typedef struct _SYSTEM_POWER_POLICY {
//C           DWORD Revision;
//C           POWER_ACTION_POLICY PowerButton;
//C           POWER_ACTION_POLICY SleepButton;
//C           POWER_ACTION_POLICY LidClose;
//C           SYSTEM_POWER_STATE LidOpenWake;
//C           DWORD Reserved;
//C           POWER_ACTION_POLICY Idle;
//C           DWORD IdleTimeout;
//C           BYTE IdleSensitivity;
//C           BYTE DynamicThrottle;
//C           BYTE Spare2[2];
//C           SYSTEM_POWER_STATE MinSleep;
//C           SYSTEM_POWER_STATE MaxSleep;
//C           SYSTEM_POWER_STATE ReducedLatencySleep;
//C           DWORD WinLogonFlags;
//C           DWORD Spare3;
//C           DWORD DozeS4Timeout;
//C           DWORD BroadcastCapacityResolution;
//C           SYSTEM_POWER_LEVEL DischargePolicy[4];
//C           DWORD VideoTimeout;
//C           BOOLEAN VideoDimDisplay;
//C           DWORD VideoReserved[3];
//C           DWORD SpindownTimeout;
//C           BOOLEAN OptimizeForPower;
//C           BYTE FanThrottleTolerance;
//C           BYTE ForcedThrottle;
//C           BYTE MinThrottle;
//C           POWER_ACTION_POLICY OverThrottled;
//C         } SYSTEM_POWER_POLICY,*PSYSTEM_POWER_POLICY;
struct _SYSTEM_POWER_POLICY
{
    DWORD Revision;
    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;
    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;
    BYTE DynamicThrottle;
    BYTE [2]Spare2;
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;
    DWORD Spare3;
    DWORD DozeS4Timeout;
    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL [4]DischargePolicy;
    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD [3]VideoReserved;
    DWORD SpindownTimeout;
    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;
}
alias _SYSTEM_POWER_POLICY SYSTEM_POWER_POLICY;
alias _SYSTEM_POWER_POLICY *PSYSTEM_POWER_POLICY;
//C         typedef struct _PROCESSOR_POWER_POLICY_INFO {
//C           DWORD TimeCheck;
//C           DWORD DemoteLimit;
//C           DWORD PromoteLimit;
//C           BYTE DemotePercent;
//C           BYTE PromotePercent;
//C           BYTE Spare[2];
//C           DWORD AllowDemotion:1;
//C           DWORD AllowPromotion:1;
//C           DWORD Reserved:30;
//C         } PROCESSOR_POWER_POLICY_INFO,*PPROCESSOR_POWER_POLICY_INFO;
struct _PROCESSOR_POWER_POLICY_INFO
{
    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE [2]Spare;
    DWORD __bitfield1;
    DWORD AllowDemotion() { return (__bitfield1 >> 0) & 0x1; }
    DWORD AllowPromotion() { return (__bitfield1 >> 1) & 0x1; }
    DWORD Reserved() { return (__bitfield1 >> 2) & 0x3fffffff; }
}
alias _PROCESSOR_POWER_POLICY_INFO PROCESSOR_POWER_POLICY_INFO;
alias _PROCESSOR_POWER_POLICY_INFO *PPROCESSOR_POWER_POLICY_INFO;
//C         typedef struct _PROCESSOR_POWER_POLICY {
//C           DWORD Revision;
//C           BYTE DynamicThrottle;
//C           BYTE Spare[3];
//C           DWORD DisableCStates:1;
//C           DWORD Reserved:31;
//C           DWORD PolicyCount;
//C           PROCESSOR_POWER_POLICY_INFO Policy[3];
//C         } PROCESSOR_POWER_POLICY,*PPROCESSOR_POWER_POLICY;
struct _PROCESSOR_POWER_POLICY
{
    DWORD Revision;
    BYTE DynamicThrottle;
    BYTE [3]Spare;
    DWORD __bitfield1;
    DWORD DisableCStates() { return (__bitfield1 >> 0) & 0x1; }
    DWORD Reserved() { return (__bitfield1 >> 1) & 0x7fffffff; }
    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO [3]Policy;
}
alias _PROCESSOR_POWER_POLICY PROCESSOR_POWER_POLICY;
alias _PROCESSOR_POWER_POLICY *PPROCESSOR_POWER_POLICY;
//C         typedef struct _ADMINISTRATOR_POWER_POLICY {
//C           SYSTEM_POWER_STATE MinSleep;
//C           SYSTEM_POWER_STATE MaxSleep;
//C           DWORD MinVideoTimeout;
//C           DWORD MaxVideoTimeout;
//C           DWORD MinSpindownTimeout;
//C           DWORD MaxSpindownTimeout;
//C         } ADMINISTRATOR_POWER_POLICY,*PADMINISTRATOR_POWER_POLICY;
struct _ADMINISTRATOR_POWER_POLICY
{
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;
    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
}
alias _ADMINISTRATOR_POWER_POLICY ADMINISTRATOR_POWER_POLICY;
alias _ADMINISTRATOR_POWER_POLICY *PADMINISTRATOR_POWER_POLICY;
//C         typedef struct {
//C           BOOLEAN PowerButtonPresent;
//C           BOOLEAN SleepButtonPresent;
//C           BOOLEAN LidPresent;
//C           BOOLEAN SystemS1;
//C           BOOLEAN SystemS2;
//C           BOOLEAN SystemS3;
//C           BOOLEAN SystemS4;
//C           BOOLEAN SystemS5;
//C           BOOLEAN HiberFilePresent;
//C           BOOLEAN FullWake;
//C           BOOLEAN VideoDimPresent;
//C           BOOLEAN ApmPresent;
//C           BOOLEAN UpsPresent;
//C           BOOLEAN ThermalControl;
//C           BOOLEAN ProcessorThrottle;
//C           BYTE ProcessorMinThrottle;
//C           BYTE ProcessorMaxThrottle;
//C           BOOLEAN FastSystemS4;
//C           BYTE spare2[3];
//C           BOOLEAN DiskSpinDown;
//C           BYTE spare3[8];
//C           BOOLEAN SystemBatteriesPresent;
//C           BOOLEAN BatteriesAreShortTerm;
//C           BATTERY_REPORTING_SCALE BatteryScale[3];
//C           SYSTEM_POWER_STATE AcOnLineWake;
//C           SYSTEM_POWER_STATE SoftLidWake;
//C           SYSTEM_POWER_STATE RtcWake;
//C           SYSTEM_POWER_STATE MinDeviceWakeState;
//C           SYSTEM_POWER_STATE DefaultLowLatencyWake;
//C         } SYSTEM_POWER_CAPABILITIES,*PSYSTEM_POWER_CAPABILITIES;
struct _N26
{
    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;
    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;
    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BYTE [3]spare2;
    BOOLEAN DiskSpinDown;
    BYTE [8]spare3;
    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE [3]BatteryScale;
    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
}
alias _N26 SYSTEM_POWER_CAPABILITIES;
alias _N26 *PSYSTEM_POWER_CAPABILITIES;
//C         typedef struct {
//C           BOOLEAN AcOnLine;
//C           BOOLEAN BatteryPresent;
//C           BOOLEAN Charging;
//C           BOOLEAN Discharging;
//C           BOOLEAN Spare1[4];
//C           DWORD MaxCapacity;
//C           DWORD RemainingCapacity;
//C           DWORD Rate;
//C           DWORD EstimatedTime;
//C           DWORD DefaultAlert1;
//C           DWORD DefaultAlert2;
//C         } SYSTEM_BATTERY_STATE,*PSYSTEM_BATTERY_STATE;
struct _N27
{
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN [4]Spare1;
    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;
    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
}
alias _N27 SYSTEM_BATTERY_STATE;
alias _N27 *PSYSTEM_BATTERY_STATE;
//C         typedef struct _IMAGE_DOS_HEADER {
//C           WORD e_magic;
//C           WORD e_cblp;
//C           WORD e_cp;
//C           WORD e_crlc;
//C           WORD e_cparhdr;
//C           WORD e_minalloc;
//C           WORD e_maxalloc;
//C           WORD e_ss;
//C           WORD e_sp;
//C           WORD e_csum;
//C           WORD e_ip;
//C           WORD e_cs;
//C           WORD e_lfarlc;
//C           WORD e_ovno;
//C           WORD e_res[4];
//C           WORD e_oemid;
//C           WORD e_oeminfo;
//C           WORD e_res2[10];
//C           LONG e_lfanew;
//C         } IMAGE_DOS_HEADER,*PIMAGE_DOS_HEADER;
struct _IMAGE_DOS_HEADER
{
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD [4]e_res;
    WORD e_oemid;
    WORD e_oeminfo;
    WORD [10]e_res2;
    LONG e_lfanew;
}
alias _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
alias _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;
//C         typedef struct _IMAGE_OS2_HEADER {
//C           WORD ne_magic;
//C           CHAR ne_ver;
//C           CHAR ne_rev;
//C           WORD ne_enttab;
//C           WORD ne_cbenttab;
//C           LONG ne_crc;
//C           WORD ne_flags;
//C           WORD ne_autodata;
//C           WORD ne_heap;
//C           WORD ne_stack;
//C           LONG ne_csip;
//C           LONG ne_sssp;
//C           WORD ne_cseg;
//C           WORD ne_cmod;
//C           WORD ne_cbnrestab;
//C           WORD ne_segtab;
//C           WORD ne_rsrctab;
//C           WORD ne_restab;
//C           WORD ne_modtab;
//C           WORD ne_imptab;
//C           LONG ne_nrestab;
//C           WORD ne_cmovent;
//C           WORD ne_align;
//C           WORD ne_cres;
//C           BYTE ne_exetyp;
//C           BYTE ne_flagsothers;
//C           WORD ne_pretthunks;
//C           WORD ne_psegrefbytes;
//C           WORD ne_swaparea;
//C           WORD ne_expver;
//C         } IMAGE_OS2_HEADER,*PIMAGE_OS2_HEADER;
struct _IMAGE_OS2_HEADER
{
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
}
alias _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
alias _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;
//C         typedef struct _IMAGE_VXD_HEADER {
//C           WORD e32_magic;
//C           BYTE e32_border;
//C           BYTE e32_worder;
//C           DWORD e32_level;
//C           WORD e32_cpu;
//C           WORD e32_os;
//C           DWORD e32_ver;
//C           DWORD e32_mflags;
//C           DWORD e32_mpages;
//C           DWORD e32_startobj;
//C           DWORD e32_eip;
//C           DWORD e32_stackobj;
//C           DWORD e32_esp;
//C           DWORD e32_pagesize;
//C           DWORD e32_lastpagesize;
//C           DWORD e32_fixupsize;
//C           DWORD e32_fixupsum;
//C           DWORD e32_ldrsize;
//C           DWORD e32_ldrsum;
//C           DWORD e32_objtab;
//C           DWORD e32_objcnt;
//C           DWORD e32_objmap;
//C           DWORD e32_itermap;
//C           DWORD e32_rsrctab;
//C           DWORD e32_rsrccnt;
//C           DWORD e32_restab;
//C           DWORD e32_enttab;
//C           DWORD e32_dirtab;
//C           DWORD e32_dircnt;
//C           DWORD e32_fpagetab;
//C           DWORD e32_frectab;
//C           DWORD e32_impmod;
//C           DWORD e32_impmodcnt;
//C           DWORD e32_impproc;
//C           DWORD e32_pagesum;
//C           DWORD e32_datapage;
//C           DWORD e32_preload;
//C           DWORD e32_nrestab;
//C           DWORD e32_cbnrestab;
//C           DWORD e32_nressum;
//C           DWORD e32_autodata;
//C           DWORD e32_debuginfo;
//C           DWORD e32_debuglen;
//C           DWORD e32_instpreload;
//C           DWORD e32_instdemand;
//C           DWORD e32_heapsize;
//C           BYTE e32_res3[12];
//C           DWORD e32_winresoff;
//C           DWORD e32_winreslen;
//C           WORD e32_devid;
//C           WORD e32_ddkver;
//C         } IMAGE_VXD_HEADER,*PIMAGE_VXD_HEADER;
struct _IMAGE_VXD_HEADER
{
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE [12]e32_res3;
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
}
alias _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
alias _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;
//C         typedef struct _IMAGE_FILE_HEADER {
//C           WORD Machine;
//C           WORD NumberOfSections;
//C           DWORD TimeDateStamp;
//C           DWORD PointerToSymbolTable;
//C           DWORD NumberOfSymbols;
//C           WORD SizeOfOptionalHeader;
//C           WORD Characteristics;
//C         } IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;
struct _IMAGE_FILE_HEADER
{
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
}
alias _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
alias _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;
//C         typedef struct _IMAGE_DATA_DIRECTORY {
//C           DWORD VirtualAddress;
//C           DWORD Size;
//C         } IMAGE_DATA_DIRECTORY,*PIMAGE_DATA_DIRECTORY;
struct _IMAGE_DATA_DIRECTORY
{
    DWORD VirtualAddress;
    DWORD Size;
}
alias _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
alias _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;
//C         typedef struct _IMAGE_OPTIONAL_HEADER {
//C           WORD Magic;
//C           BYTE MajorLinkerVersion;
//C           BYTE MinorLinkerVersion;
//C           DWORD SizeOfCode;
//C           DWORD SizeOfInitializedData;
//C           DWORD SizeOfUninitializedData;
//C           DWORD AddressOfEntryPoint;
//C           DWORD BaseOfCode;
//C           DWORD BaseOfData;
//C           DWORD ImageBase;
//C           DWORD SectionAlignment;
//C           DWORD FileAlignment;
//C           WORD MajorOperatingSystemVersion;
//C           WORD MinorOperatingSystemVersion;
//C           WORD MajorImageVersion;
//C           WORD MinorImageVersion;
//C           WORD MajorSubsystemVersion;
//C           WORD MinorSubsystemVersion;
//C           DWORD Win32VersionValue;
//C           DWORD SizeOfImage;
//C           DWORD SizeOfHeaders;
//C           DWORD CheckSum;
//C           WORD Subsystem;
//C           WORD DllCharacteristics;
//C           DWORD SizeOfStackReserve;
//C           DWORD SizeOfStackCommit;
//C           DWORD SizeOfHeapReserve;
//C           DWORD SizeOfHeapCommit;
//C           DWORD LoaderFlags;
//C           DWORD NumberOfRvaAndSizes;
//C           IMAGE_DATA_DIRECTORY DataDirectory[16];
//C         } IMAGE_OPTIONAL_HEADER32,*PIMAGE_OPTIONAL_HEADER32;
struct _IMAGE_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY [16]DataDirectory;
}
alias _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER32;
alias _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;
//C         typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
//C           WORD Magic;
//C           BYTE MajorLinkerVersion;
//C           BYTE MinorLinkerVersion;
//C           DWORD SizeOfCode;
//C           DWORD SizeOfInitializedData;
//C           DWORD SizeOfUninitializedData;
//C           DWORD AddressOfEntryPoint;
//C           DWORD BaseOfCode;
//C           DWORD BaseOfData;
//C           DWORD BaseOfBss;
//C           DWORD GprMask;
//C           DWORD CprMask[4];
//C           DWORD GpValue;
//C         } IMAGE_ROM_OPTIONAL_HEADER,*PIMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_ROM_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD [4]CprMask;
    DWORD GpValue;
}
alias _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
alias _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;
//C         typedef struct _IMAGE_OPTIONAL_HEADER64 {
//C           WORD Magic;
//C           BYTE MajorLinkerVersion;
//C           BYTE MinorLinkerVersion;
//C           DWORD SizeOfCode;
//C           DWORD SizeOfInitializedData;
//C           DWORD SizeOfUninitializedData;
//C           DWORD AddressOfEntryPoint;
//C           DWORD BaseOfCode;
//C           ULONGLONG ImageBase;
//C           DWORD SectionAlignment;
//C           DWORD FileAlignment;
//C           WORD MajorOperatingSystemVersion;
//C           WORD MinorOperatingSystemVersion;
//C           WORD MajorImageVersion;
//C           WORD MinorImageVersion;
//C           WORD MajorSubsystemVersion;
//C           WORD MinorSubsystemVersion;
//C           DWORD Win32VersionValue;
//C           DWORD SizeOfImage;
//C           DWORD SizeOfHeaders;
//C           DWORD CheckSum;
//C           WORD Subsystem;
//C           WORD DllCharacteristics;
//C           ULONGLONG SizeOfStackReserve;
//C           ULONGLONG SizeOfStackCommit;
//C           ULONGLONG SizeOfHeapReserve;
//C           ULONGLONG SizeOfHeapCommit;
//C           DWORD LoaderFlags;
//C           DWORD NumberOfRvaAndSizes;
//C           IMAGE_DATA_DIRECTORY DataDirectory[16];
//C         } IMAGE_OPTIONAL_HEADER64,*PIMAGE_OPTIONAL_HEADER64;
struct _IMAGE_OPTIONAL_HEADER64
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY [16]DataDirectory;
}
alias _IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64;
alias _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;
//C         typedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;
alias IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;
//C         typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;
alias PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;
//C         typedef struct _IMAGE_NT_HEADERS64 {
//C           DWORD Signature;
//C           IMAGE_FILE_HEADER FileHeader;
//C           IMAGE_OPTIONAL_HEADER64 OptionalHeader;
//C         } IMAGE_NT_HEADERS64,*PIMAGE_NT_HEADERS64;
struct _IMAGE_NT_HEADERS64
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
}
alias _IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64;
alias _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;
//C         typedef struct _IMAGE_NT_HEADERS {
//C           DWORD Signature;
//C           IMAGE_FILE_HEADER FileHeader;
//C           IMAGE_OPTIONAL_HEADER32 OptionalHeader;
//C         } IMAGE_NT_HEADERS32,*PIMAGE_NT_HEADERS32;
struct _IMAGE_NT_HEADERS
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
}
alias _IMAGE_NT_HEADERS IMAGE_NT_HEADERS32;
alias _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
//C         typedef struct _IMAGE_ROM_HEADERS {
//C           IMAGE_FILE_HEADER FileHeader;
//C           IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
//C         } IMAGE_ROM_HEADERS,*PIMAGE_ROM_HEADERS;
struct _IMAGE_ROM_HEADERS
{
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
}
alias _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
alias _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;
//C         typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
alias IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
//C         typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
alias PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
//C         typedef struct ANON_OBJECT_HEADER {
//C           WORD Sig1;
//C           WORD Sig2;
//C           WORD Version;
//C           WORD Machine;
//C           DWORD TimeDateStamp;
//C           CLSID ClassID;
//C           DWORD SizeOfData;
//C         } ANON_OBJECT_HEADER;
struct ANON_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
}
//C         typedef struct _IMAGE_SECTION_HEADER {
//C           BYTE Name[8];
//C           union {
//C      DWORD PhysicalAddress;
//C      DWORD VirtualSize;
//C           } Misc;
union _N28
{
    DWORD PhysicalAddress;
    DWORD VirtualSize;
}
//C           DWORD VirtualAddress;
//C           DWORD SizeOfRawData;
//C           DWORD PointerToRawData;
//C           DWORD PointerToRelocations;
//C           DWORD PointerToLinenumbers;
//C           WORD NumberOfRelocations;
//C           WORD NumberOfLinenumbers;
//C           DWORD Characteristics;
//C         } IMAGE_SECTION_HEADER,*PIMAGE_SECTION_HEADER;
struct _IMAGE_SECTION_HEADER
{
    BYTE [8]Name;
    _N28 Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
}
alias _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
alias _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;
//C         typedef struct _IMAGE_SYMBOL {
//C           union {
//C      BYTE ShortName[8];
//C      struct {
//C        DWORD Short;
//C        DWORD Long;
//C      } Name;
struct _N30
{
    DWORD Short;
    DWORD Long;
}
//C      DWORD LongName[2];
//C           } N;
union _N29
{
    BYTE [8]ShortName;
    _N30 Name;
    DWORD [2]LongName;
}
//C           DWORD Value;
//C           SHORT SectionNumber;
//C           WORD Type;
//C           BYTE StorageClass;
//C           BYTE NumberOfAuxSymbols;
//C         } IMAGE_SYMBOL;
struct _IMAGE_SYMBOL
{
    _N29 N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
}
alias _IMAGE_SYMBOL IMAGE_SYMBOL;
//C         typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
alias IMAGE_SYMBOL *PIMAGE_SYMBOL;
//C         typedef union _IMAGE_AUX_SYMBOL {
//C           struct {
//C      DWORD TagIndex;
//C      union {
//C        struct {
//C          WORD Linenumber;
//C          WORD Size;
//C        } LnSz;
struct _N33
{
    WORD Linenumber;
    WORD Size;
}
//C        DWORD TotalSize;
//C      } Misc;
union _N32
{
    _N33 LnSz;
    DWORD TotalSize;
}
//C      union {
//C        struct {
//C          DWORD PointerToLinenumber;
//C          DWORD PointerToNextFunction;
//C        } Function;
struct _N35
{
    DWORD PointerToLinenumber;
    DWORD PointerToNextFunction;
}
//C        struct {
//C          WORD Dimension[4];
//C        } Array;
struct _N36
{
    WORD [4]Dimension;
}
//C      } FcnAry;
union _N34
{
    _N35 Function;
    _N36 Array;
}
//C      WORD TvIndex;
//C           } Sym;
struct _N31
{
    DWORD TagIndex;
    _N32 Misc;
    _N34 FcnAry;
    WORD TvIndex;
}
//C           struct {
//C      BYTE Name[18];
//C           } File;
struct _N37
{
    BYTE [18]Name;
}
//C           struct {
//C      DWORD Length;
//C      WORD NumberOfRelocations;
//C      WORD NumberOfLinenumbers;
//C      DWORD CheckSum;
//C      SHORT Number;
//C      BYTE Selection;
//C           } Section;
struct _N38
{
    DWORD Length;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD CheckSum;
    SHORT Number;
    BYTE Selection;
}
//C         } IMAGE_AUX_SYMBOL;
union _IMAGE_AUX_SYMBOL
{
    _N31 Sym;
    _N37 File;
    _N38 Section;
}
alias _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
//C         typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
alias IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
//C         typedef enum IMAGE_AUX_SYMBOL_TYPE {
//C           IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
//C         } IMAGE_AUX_SYMBOL_TYPE;
enum IMAGE_AUX_SYMBOL_TYPE
{
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
}
//C         typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
//C           BYTE bAuxType;
//C           BYTE bReserved;
//C           DWORD SymbolTableIndex;
//C           BYTE rgbReserved[12];
//C         } IMAGE_AUX_SYMBOL_TOKEN_DEF;
struct IMAGE_AUX_SYMBOL_TOKEN_DEF
{
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE [12]rgbReserved;
}
//C         typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
alias IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;
//C         typedef struct _IMAGE_RELOCATION {
//C            union {
//C      DWORD VirtualAddress;
//C      DWORD RelocCount;
//C           } ;
union _N39
{
    DWORD VirtualAddress;
    DWORD RelocCount;
}
//C           DWORD SymbolTableIndex;
//C           WORD Type;
//C         } IMAGE_RELOCATION;
struct _IMAGE_RELOCATION
{
    DWORD VirtualAddress;
    DWORD RelocCount;
    DWORD SymbolTableIndex;
    WORD Type;
}
alias _IMAGE_RELOCATION IMAGE_RELOCATION;
//C         typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
alias IMAGE_RELOCATION *PIMAGE_RELOCATION;
//C         typedef struct _IMAGE_LINENUMBER {
//C           union {
//C      DWORD SymbolTableIndex;
//C      DWORD VirtualAddress;
//C           } Type;
union _N40
{
    DWORD SymbolTableIndex;
    DWORD VirtualAddress;
}
//C           WORD Linenumber;
//C         } IMAGE_LINENUMBER;
struct _IMAGE_LINENUMBER
{
    _N40 Type;
    WORD Linenumber;
}
alias _IMAGE_LINENUMBER IMAGE_LINENUMBER;
//C         typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
alias IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
//C         typedef struct _IMAGE_BASE_RELOCATION {
//C           DWORD VirtualAddress;
//C           DWORD SizeOfBlock;
//C         } IMAGE_BASE_RELOCATION;
struct _IMAGE_BASE_RELOCATION
{
    DWORD VirtualAddress;
    DWORD SizeOfBlock;
}
alias _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
//C         typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
alias IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
//C         typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
//C           BYTE Name[16];
//C           BYTE Date[12];
//C           BYTE UserID[6];
//C           BYTE GroupID[6];
//C           BYTE Mode[8];
//C           BYTE Size[10];
//C           BYTE EndHeader[2];
//C         } IMAGE_ARCHIVE_MEMBER_HEADER,*PIMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
    BYTE [16]Name;
    BYTE [12]Date;
    BYTE [6]UserID;
    BYTE [6]GroupID;
    BYTE [8]Mode;
    BYTE [10]Size;
    BYTE [2]EndHeader;
}
alias _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
alias _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;
//C         typedef struct _IMAGE_EXPORT_DIRECTORY {
//C           DWORD Characteristics;
//C           DWORD TimeDateStamp;
//C           WORD MajorVersion;
//C           WORD MinorVersion;
//C           DWORD Name;
//C           DWORD Base;
//C           DWORD NumberOfFunctions;
//C           DWORD NumberOfNames;
//C           DWORD AddressOfFunctions;
//C           DWORD AddressOfNames;
//C           DWORD AddressOfNameOrdinals;
//C         } IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;
struct _IMAGE_EXPORT_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
}
alias _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
alias _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;
//C         typedef struct _IMAGE_IMPORT_BY_NAME {
//C           WORD Hint;
//C           BYTE Name[1];
//C         } IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;
struct _IMAGE_IMPORT_BY_NAME
{
    WORD Hint;
    BYTE [1]Name;
}
alias _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
alias _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;
//C         typedef struct _IMAGE_THUNK_DATA64 {
//C           union {
//C      ULONGLONG ForwarderString;
//C      ULONGLONG Function;
//C      ULONGLONG Ordinal;
//C      ULONGLONG AddressOfData;
//C           } u1;
union _N41
{
    ULONGLONG ForwarderString;
    ULONGLONG Function;
    ULONGLONG Ordinal;
    ULONGLONG AddressOfData;
}
//C         } IMAGE_THUNK_DATA64;
struct _IMAGE_THUNK_DATA64
{
    _N41 u1;
}
alias _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
//C         typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
alias IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
//C         typedef struct _IMAGE_THUNK_DATA32 {
//C           union {
//C      DWORD ForwarderString;
//C      DWORD Function;
//C      DWORD Ordinal;
//C      DWORD AddressOfData;
//C           } u1;
union _N42
{
    DWORD ForwarderString;
    DWORD Function;
    DWORD Ordinal;
    DWORD AddressOfData;
}
//C         } IMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA32
{
    _N42 u1;
}
alias _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
//C         typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
alias IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
//C         typedef void
//C           ( *PIMAGE_TLS_CALLBACK)(PVOID DllHandle,DWORD Reason,PVOID Reserved);
alias void  function(PVOID DllHandle, DWORD Reason, PVOID Reserved)PIMAGE_TLS_CALLBACK;
//C         typedef struct _IMAGE_TLS_DIRECTORY64 {
//C           ULONGLONG StartAddressOfRawData;
//C           ULONGLONG EndAddressOfRawData;
//C           ULONGLONG AddressOfIndex;
//C           ULONGLONG AddressOfCallBacks;
//C           DWORD SizeOfZeroFill;
//C           DWORD Characteristics;
//C         } IMAGE_TLS_DIRECTORY64;
struct _IMAGE_TLS_DIRECTORY64
{
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
}
alias _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
//C         typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;
alias IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;
//C         typedef struct _IMAGE_TLS_DIRECTORY32 {
//C           DWORD StartAddressOfRawData;
//C           DWORD EndAddressOfRawData;
//C           DWORD AddressOfIndex;
//C           DWORD AddressOfCallBacks;
//C           DWORD SizeOfZeroFill;
//C           DWORD Characteristics;
//C         } IMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY32
{
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
}
alias _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
//C         typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
alias IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
//C         typedef IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA;
alias IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA;
//C         typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA;
alias PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA;
//C         typedef IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;
alias IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;
//C         typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;
alias PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;
//C         typedef struct _IMAGE_IMPORT_DESCRIPTOR {
//C            union {
//C      DWORD Characteristics;
//C      DWORD OriginalFirstThunk;
//C           } ;
union _N43
{
    DWORD Characteristics;
    DWORD OriginalFirstThunk;
}
//C           DWORD TimeDateStamp;
//C           DWORD ForwarderChain;
//C           DWORD Name;
//C           DWORD FirstThunk;
//C         } IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_IMPORT_DESCRIPTOR
{
    DWORD Characteristics;
    DWORD OriginalFirstThunk;
    DWORD TimeDateStamp;
    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
}
alias _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
//C         typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
alias IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
//C         typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
//C           DWORD TimeDateStamp;
//C           WORD OffsetModuleName;
//C           WORD NumberOfModuleForwarderRefs;
//C         } IMAGE_BOUND_IMPORT_DESCRIPTOR,*PIMAGE_BOUND_IMPORT_DESCRIPTOR;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;
}
alias _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
alias _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
//C         typedef struct _IMAGE_BOUND_FORWARDER_REF {
//C           DWORD TimeDateStamp;
//C           WORD OffsetModuleName;
//C           WORD Reserved;
//C         } IMAGE_BOUND_FORWARDER_REF,*PIMAGE_BOUND_FORWARDER_REF;
struct _IMAGE_BOUND_FORWARDER_REF
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
}
alias _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
alias _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;
//C         typedef struct _IMAGE_RESOURCE_DIRECTORY {
//C           DWORD Characteristics;
//C           DWORD TimeDateStamp;
//C           WORD MajorVersion;
//C           WORD MinorVersion;
//C           WORD NumberOfNamedEntries;
//C           WORD NumberOfIdEntries;
//C         } IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;
struct _IMAGE_RESOURCE_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;
}
alias _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
alias _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;
//C         typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
//C            union {
//C       struct {
//C        DWORD NameOffset:31;
//C        DWORD NameIsString:1;
//C      } ;
struct _N45
{
    DWORD __bitfield1;
    DWORD NameOffset() { return (__bitfield1 >> 0) & 0x7fffffff; }
    DWORD NameIsString() { return (__bitfield1 >> 31) & 0x1; }
}
//C      DWORD Name;
//C      WORD Id;
//C           } ;
union _N44
{
    DWORD __bitfield1;
    DWORD NameOffset() { return (__bitfield1 >> 0) & 0x7fffffff; }
    DWORD NameIsString() { return (__bitfield1 >> 31) & 0x1; }
    DWORD Name;
    WORD Id;
}
//C            union {
//C      DWORD OffsetToData;
//C       struct {
//C        DWORD OffsetToDirectory:31;
//C        DWORD DataIsDirectory:1;
//C      } ;
struct _N47
{
    DWORD __bitfield1;
    DWORD OffsetToDirectory() { return (__bitfield1 >> 0) & 0x7fffffff; }
    DWORD DataIsDirectory() { return (__bitfield1 >> 31) & 0x1; }
}
//C           } ;
union _N46
{
    DWORD OffsetToData;
    DWORD OffsetToDirectory() { return 0x7fffffff; }
    DWORD DataIsDirectory() { return 0x1; }
}
//C         } IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
    DWORD __bitfield1;
    DWORD NameOffset() { return (__bitfield1 >> 0) & 0x7fffffff; }
    DWORD NameIsString() { return (__bitfield1 >> 31) & 0x1; }
    DWORD Name;
    WORD Id;
    DWORD OffsetToData;
    DWORD OffsetToDirectory() { return (__bitfield1 >> 0) & 0x7fffffff; }
    DWORD DataIsDirectory() { return (__bitfield1 >> 31) & 0x1; }
}
alias _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
alias _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
//C         typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
//C           WORD Length;
//C           CHAR NameString[1];
//C         } IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;
struct _IMAGE_RESOURCE_DIRECTORY_STRING
{
    WORD Length;
    CHAR [1]NameString;
}
alias _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
alias _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;
//C         typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
//C           WORD Length;
//C           WCHAR NameString[1];
//C         } IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_RESOURCE_DIR_STRING_U
{
    WORD Length;
    WCHAR [1]NameString;
}
alias _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
alias _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;
//C         typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
//C           DWORD OffsetToData;
//C           DWORD Size;
//C           DWORD CodePage;
//C           DWORD Reserved;
//C         } IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_RESOURCE_DATA_ENTRY
{
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
}
alias _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
alias _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;
//C         typedef struct {
//C           DWORD Size;
//C           DWORD TimeDateStamp;
//C           WORD MajorVersion;
//C           WORD MinorVersion;
//C           DWORD GlobalFlagsClear;
//C           DWORD GlobalFlagsSet;
//C           DWORD CriticalSectionDefaultTimeout;
//C           DWORD DeCommitFreeBlockThreshold;
//C           DWORD DeCommitTotalFreeThreshold;
//C           DWORD LockPrefixTable;
//C           DWORD MaximumAllocationSize;
//C           DWORD VirtualMemoryThreshold;
//C           DWORD ProcessHeapFlags;
//C           DWORD ProcessAffinityMask;
//C           WORD CSDVersion;
//C           WORD Reserved1;
//C           DWORD EditList;
//C           DWORD SecurityCookie;
//C           DWORD SEHandlerTable;
//C           DWORD SEHandlerCount;
//C         } IMAGE_LOAD_CONFIG_DIRECTORY32,*PIMAGE_LOAD_CONFIG_DIRECTORY32;
struct _N48
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
}
alias _N48 IMAGE_LOAD_CONFIG_DIRECTORY32;
alias _N48 *PIMAGE_LOAD_CONFIG_DIRECTORY32;
//C         typedef struct {
//C           DWORD Size;
//C           DWORD TimeDateStamp;
//C           WORD MajorVersion;
//C           WORD MinorVersion;
//C           DWORD GlobalFlagsClear;
//C           DWORD GlobalFlagsSet;
//C           DWORD CriticalSectionDefaultTimeout;
//C           ULONGLONG DeCommitFreeBlockThreshold;
//C           ULONGLONG DeCommitTotalFreeThreshold;
//C           ULONGLONG LockPrefixTable;
//C           ULONGLONG MaximumAllocationSize;
//C           ULONGLONG VirtualMemoryThreshold;
//C           ULONGLONG ProcessAffinityMask;
//C           DWORD ProcessHeapFlags;
//C           WORD CSDVersion;
//C           WORD Reserved1;
//C           ULONGLONG EditList;
//C           ULONGLONG SecurityCookie;
//C           ULONGLONG SEHandlerTable;
//C           ULONGLONG SEHandlerCount;
//C         } IMAGE_LOAD_CONFIG_DIRECTORY64,*PIMAGE_LOAD_CONFIG_DIRECTORY64;
struct _N49
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
}
alias _N49 IMAGE_LOAD_CONFIG_DIRECTORY64;
alias _N49 *PIMAGE_LOAD_CONFIG_DIRECTORY64;
//C         typedef IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY;
alias IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY;
//C         typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY;
alias PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY;
//C         typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
//C           DWORD FuncStart;
//C           DWORD PrologLen : 8;
//C           DWORD FuncLen : 22;
//C           DWORD ThirtyTwoBit : 1;
//C           DWORD ExceptionFlag : 1;
//C         } IMAGE_CE_RUNTIME_FUNCTION_ENTRY,*PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
    DWORD FuncStart;
    DWORD __bitfield1;
    DWORD PrologLen() { return (__bitfield1 >> 0) & 0xff; }
    DWORD FuncLen() { return (__bitfield1 >> 8) & 0x3fffff; }
    DWORD ThirtyTwoBit() { return (__bitfield1 >> 30) & 0x1; }
    DWORD ExceptionFlag() { return (__bitfield1 >> 31) & 0x1; }
}
alias _IMAGE_CE_RUNTIME_FUNCTION_ENTRY IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
//C         typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
//C           ULONGLONG BeginAddress;
//C           ULONGLONG EndAddress;
//C           ULONGLONG ExceptionHandler;
//C           ULONGLONG HandlerData;
//C           ULONGLONG PrologEndAddress;
//C         } IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
}
alias _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
//C         typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
//C           DWORD BeginAddress;
//C           DWORD EndAddress;
//C           DWORD ExceptionHandler;
//C           DWORD HandlerData;
//C           DWORD PrologEndAddress;
//C         } IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY,*PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
}
alias _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
//C         typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
//C           DWORD BeginAddress;
//C           DWORD EndAddress;
//C           DWORD UnwindInfoAddress;
//C         } _IMAGE_RUNTIME_FUNCTION_ENTRY,*_PIMAGE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
}
alias _IMAGE_RUNTIME_FUNCTION_ENTRY *_PIMAGE_RUNTIME_FUNCTION_ENTRY;
//C         typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
//C         typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
alias _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
//C         typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
//C         typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
alias _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
//C         typedef struct _IMAGE_DEBUG_DIRECTORY {
//C           DWORD Characteristics;
//C           DWORD TimeDateStamp;
//C           WORD MajorVersion;
//C           WORD MinorVersion;
//C           DWORD Type;
//C           DWORD SizeOfData;
//C           DWORD AddressOfRawData;
//C           DWORD PointerToRawData;
//C         } IMAGE_DEBUG_DIRECTORY,*PIMAGE_DEBUG_DIRECTORY;
struct _IMAGE_DEBUG_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
}
alias _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
alias _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;
//C         typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
//C           DWORD NumberOfSymbols;
//C           DWORD LvaToFirstSymbol;
//C           DWORD NumberOfLinenumbers;
//C           DWORD LvaToFirstLinenumber;
//C           DWORD RvaToFirstByteOfCode;
//C           DWORD RvaToLastByteOfCode;
//C           DWORD RvaToFirstByteOfData;
//C           DWORD RvaToLastByteOfData;
//C         } IMAGE_COFF_SYMBOLS_HEADER,*PIMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_COFF_SYMBOLS_HEADER
{
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
}
alias _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
alias _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;
//C         typedef struct _FPO_DATA {
//C           DWORD ulOffStart;
//C           DWORD cbProcSize;
//C           DWORD cdwLocals;
//C           WORD cdwParams;
//C           WORD cbProlog : 8;
//C           WORD cbRegs : 3;
//C           WORD fHasSEH : 1;
//C           WORD fUseBP : 1;
//C           WORD reserved : 1;
//C           WORD cbFrame : 2;
//C         } FPO_DATA,*PFPO_DATA;
struct _FPO_DATA
{
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD __bitfield1;
    WORD cbProlog() { return (__bitfield1 >> 0) & 0xff; }
    WORD cbRegs() { return (__bitfield1 >> 8) & 0x7; }
    WORD fHasSEH() { return (__bitfield1 >> 11) & 0x1; }
    WORD fUseBP() { return (__bitfield1 >> 12) & 0x1; }
    WORD reserved() { return (__bitfield1 >> 13) & 0x1; }
    WORD cbFrame() { return (__bitfield1 >> 14) & 0x3; }
}
alias _FPO_DATA FPO_DATA;
alias _FPO_DATA *PFPO_DATA;
//C         typedef struct _IMAGE_DEBUG_MISC {
//C           DWORD DataType;
//C           DWORD Length;
//C           BOOLEAN Unicode;
//C           BYTE Reserved[3];
//C           BYTE Data[1];
//C         } IMAGE_DEBUG_MISC,*PIMAGE_DEBUG_MISC;
struct _IMAGE_DEBUG_MISC
{
    DWORD DataType;
    DWORD Length;
    BOOLEAN Unicode;
    BYTE [3]Reserved;
    BYTE [1]Data;
}
alias _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
alias _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;
//C         typedef struct _IMAGE_FUNCTION_ENTRY {
//C           DWORD StartingAddress;
//C           DWORD EndingAddress;
//C           DWORD EndOfPrologue;
//C         } IMAGE_FUNCTION_ENTRY,*PIMAGE_FUNCTION_ENTRY;
struct _IMAGE_FUNCTION_ENTRY
{
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
}
alias _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
alias _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;
//C         typedef struct _IMAGE_FUNCTION_ENTRY64 {
//C           ULONGLONG StartingAddress;
//C           ULONGLONG EndingAddress;
//C            union {
//C      ULONGLONG EndOfPrologue;
//C      ULONGLONG UnwindInfoAddress;
//C           } ;
union _N50
{
    ULONGLONG EndOfPrologue;
    ULONGLONG UnwindInfoAddress;
}
//C         } IMAGE_FUNCTION_ENTRY64,*PIMAGE_FUNCTION_ENTRY64;
struct _IMAGE_FUNCTION_ENTRY64
{
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    ULONGLONG EndOfPrologue;
    ULONGLONG UnwindInfoAddress;
}
alias _IMAGE_FUNCTION_ENTRY64 IMAGE_FUNCTION_ENTRY64;
alias _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;
//C         typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
//C           WORD Signature;
//C           WORD Flags;
//C           WORD Machine;
//C           WORD Characteristics;
//C           DWORD TimeDateStamp;
//C           DWORD CheckSum;
//C           DWORD ImageBase;
//C           DWORD SizeOfImage;
//C           DWORD NumberOfSections;
//C           DWORD ExportedNamesSize;
//C           DWORD DebugDirectorySize;
//C           DWORD SectionAlignment;
//C           DWORD Reserved[2];
//C         } IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;
struct _IMAGE_SEPARATE_DEBUG_HEADER
{
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD [2]Reserved;
}
alias _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
alias _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;
//C         typedef struct _NON_PAGED_DEBUG_INFO {
//C           WORD Signature;
//C           WORD Flags;
//C           DWORD Size;
//C           WORD Machine;
//C           WORD Characteristics;
//C           DWORD TimeDateStamp;
//C           DWORD CheckSum;
//C           DWORD SizeOfImage;
//C           ULONGLONG ImageBase;
//C         } NON_PAGED_DEBUG_INFO,*PNON_PAGED_DEBUG_INFO;
struct _NON_PAGED_DEBUG_INFO
{
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;
}
alias _NON_PAGED_DEBUG_INFO NON_PAGED_DEBUG_INFO;
alias _NON_PAGED_DEBUG_INFO *PNON_PAGED_DEBUG_INFO;
//C         typedef struct _ImageArchitectureHeader {
//C           unsigned int AmaskValue: 1;
//C           int Adummy1 :7;
//C           unsigned int AmaskShift: 8;
//C           int Adummy2 :16;
//C           DWORD FirstEntryRVA;
//C         } IMAGE_ARCHITECTURE_HEADER,*PIMAGE_ARCHITECTURE_HEADER;
struct _ImageArchitectureHeader
{
    uint __bitfield1;
    uint AmaskValue() { return (__bitfield1 >> 0) & 0x1; }
    int Adummy1() { return (__bitfield1 << 24) >> 25; }
    uint AmaskShift() { return (__bitfield1 >> 8) & 0xff; }
    int Adummy2() { return (__bitfield1 << 0) >> 16; }
    DWORD FirstEntryRVA;
}
alias _ImageArchitectureHeader IMAGE_ARCHITECTURE_HEADER;
alias _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;
//C         typedef struct _ImageArchitectureEntry {
//C           DWORD FixupInstRVA;
//C           DWORD NewInst;
//C         } IMAGE_ARCHITECTURE_ENTRY,*PIMAGE_ARCHITECTURE_ENTRY;
struct _ImageArchitectureEntry
{
    DWORD FixupInstRVA;
    DWORD NewInst;
}
alias _ImageArchitectureEntry IMAGE_ARCHITECTURE_ENTRY;
alias _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;
//C         typedef struct IMPORT_OBJECT_HEADER {
//C           WORD Sig1;
//C           WORD Sig2;
//C           WORD Version;
//C           WORD Machine;
//C           DWORD TimeDateStamp;
//C           DWORD SizeOfData;
//C            union {
//C      WORD Ordinal;
//C      WORD Hint;
//C           };
union _N51
{
    WORD Ordinal;
    WORD Hint;
}
//C           WORD Type : 2;
//C           WORD NameType : 3;
//C           WORD Reserved : 11;
//C         } IMPORT_OBJECT_HEADER;
struct IMPORT_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;
    WORD Ordinal;
    WORD Hint;
    WORD __bitfield1;
    WORD Type() { return (__bitfield1 >> 0) & 0x3; }
    WORD NameType() { return (__bitfield1 >> 2) & 0x7; }
    WORD Reserved() { return (__bitfield1 >> 5) & 0x7ff; }
}
//C         typedef enum IMPORT_OBJECT_TYPE {
//C           IMPORT_OBJECT_CODE = 0,IMPORT_OBJECT_DATA = 1,IMPORT_OBJECT_CONST = 2
//C         } IMPORT_OBJECT_TYPE;
enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE,
    IMPORT_OBJECT_DATA,
    IMPORT_OBJECT_CONST,
}
//C         typedef enum IMPORT_OBJECT_NAME_TYPE {
//C           IMPORT_OBJECT_ORDINAL = 0,IMPORT_OBJECT_NAME = 1,IMPORT_OBJECT_NAME_NO_PREFIX = 2,IMPORT_OBJECT_NAME_UNDECORATE = 3
//C         } IMPORT_OBJECT_NAME_TYPE;
enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL,
    IMPORT_OBJECT_NAME,
    IMPORT_OBJECT_NAME_NO_PREFIX,
    IMPORT_OBJECT_NAME_UNDECORATE,
}
//C         typedef enum ReplacesCorHdrNumericDefines {
//C           COMIMAGE_FLAGS_ILONLY =0x00000001,COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
//C           COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,COR_VERSION_MAJOR_V2 =2,
//C           COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,COR_VERSION_MINOR =0,COR_DELETED_NAME_LENGTH =8,COR_VTABLEGAP_NAME_LENGTH =8,
//C           NATIVE_TYPE_MAX_CB =1,COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,IMAGE_COR_MIH_METHODRVA =0x01,IMAGE_COR_MIH_EHRVA =0x02,
//C           IMAGE_COR_MIH_BASICBLOCK =0x08,COR_VTABLE_32BIT =0x01,COR_VTABLE_64BIT =0x02,COR_VTABLE_FROM_UNMANAGED =0x04,
//C           COR_VTABLE_CALL_MOST_DERIVED =0x10,IMAGE_COR_EATJ_THUNK_SIZE =32,MAX_CLASS_NAME =1024,MAX_PACKAGE_NAME =1024
//C         } ReplacesCorHdrNumericDefines;
enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 0,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024,
}
//C         typedef struct IMAGE_COR20_HEADER {
//C           DWORD cb;
//C           WORD MajorRuntimeVersion;
//C           WORD MinorRuntimeVersion;
//C           IMAGE_DATA_DIRECTORY MetaData;
//C           DWORD Flags;
//C           DWORD EntryPointToken;
//C           IMAGE_DATA_DIRECTORY Resources;
//C           IMAGE_DATA_DIRECTORY StrongNameSignature;
//C           IMAGE_DATA_DIRECTORY CodeManagerTable;
//C           IMAGE_DATA_DIRECTORY VTableFixups;
//C           IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
//C           IMAGE_DATA_DIRECTORY ManagedNativeHeader;
//C         } IMAGE_COR20_HEADER,*PIMAGE_COR20_HEADER;
struct IMAGE_COR20_HEADER
{
    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;
    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;
    DWORD EntryPointToken;
    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;
}
alias IMAGE_COR20_HEADER *PIMAGE_COR20_HEADER;
//C         typedef struct _SLIST_ENTRY *PSLIST_ENTRY;
alias _SLIST_ENTRY *PSLIST_ENTRY;
//C         typedef struct  _SLIST_ENTRY {
//C           PSLIST_ENTRY Next;
//C         } SLIST_ENTRY;
struct _SLIST_ENTRY
{
    PSLIST_ENTRY Next;
}
alias _SLIST_ENTRY SLIST_ENTRY;
//C         typedef struct  _SLIST_HEADER {
//C           ULONGLONG Alignment;
//C           ULONGLONG Region;
//C         } SLIST_HEADER;
struct _SLIST_HEADER
{
    ULONGLONG Alignment;
    ULONGLONG Region;
}
alias _SLIST_HEADER SLIST_HEADER;
//C         typedef struct _SLIST_HEADER *PSLIST_HEADER;
alias _SLIST_HEADER *PSLIST_HEADER;
//C          void RtlInitializeSListHead(PSLIST_HEADER ListHead);
void  RtlInitializeSListHead(PSLIST_HEADER ListHead);
//C          PSLIST_ENTRY RtlFirstEntrySList(const SLIST_HEADER *ListHead);
PSLIST_ENTRY  RtlFirstEntrySList(SLIST_HEADER *ListHead);
//C          PSLIST_ENTRY RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead);
PSLIST_ENTRY  RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead);
//C          PSLIST_ENTRY RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead,PSLIST_ENTRY ListEntry);
PSLIST_ENTRY  RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
//C          PSLIST_ENTRY RtlInterlockedFlushSList(PSLIST_HEADER ListHead);
PSLIST_ENTRY  RtlInterlockedFlushSList(PSLIST_HEADER ListHead);
//C          WORD RtlQueryDepthSList(PSLIST_HEADER ListHead);
WORD  RtlQueryDepthSList(PSLIST_HEADER ListHead);
//C          WORD RtlCaptureStackBackTrace(DWORD FramesToSkip,DWORD FramesToCapture,PVOID *BackTrace,PDWORD BackTraceHash);
WORD  RtlCaptureStackBackTrace(DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash);
//C          void RtlCaptureContext(PCONTEXT ContextRecord);
void  RtlCaptureContext(PCONTEXT ContextRecord);
//C          SIZE_T RtlCompareMemory(const void *Source1,const void *Source2,SIZE_T Length);
SIZE_T  RtlCompareMemory(void *Source1, void *Source2, SIZE_T Length);
//C         void RtlUnwind(PVOID TargetFrame,PVOID TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue);
void  RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue);
//C         PVOID RtlSecureZeroMemory(PVOID ptr,SIZE_T cnt);
PVOID  RtlSecureZeroMemory(PVOID ptr, SIZE_T cnt);
//C         typedef struct _MESSAGE_RESOURCE_ENTRY {
//C           WORD Length;
//C           WORD Flags;
//C           BYTE Text[1];
//C         } MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;
struct _MESSAGE_RESOURCE_ENTRY
{
    WORD Length;
    WORD Flags;
    BYTE [1]Text;
}
alias _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
alias _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;
//C         typedef struct _MESSAGE_RESOURCE_BLOCK {
//C           DWORD LowId;
//C           DWORD HighId;
//C           DWORD OffsetToEntries;
//C         } MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_BLOCK
{
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
}
alias _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
alias _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;
//C         typedef struct _MESSAGE_RESOURCE_DATA {
//C           DWORD NumberOfBlocks;
//C           MESSAGE_RESOURCE_BLOCK Blocks[1];
//C         } MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;
struct _MESSAGE_RESOURCE_DATA
{
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK [1]Blocks;
}
alias _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
alias _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;
//C         typedef struct _OSVERSIONINFOA {
//C           DWORD dwOSVersionInfoSize;
//C           DWORD dwMajorVersion;
//C           DWORD dwMinorVersion;
//C           DWORD dwBuildNumber;
//C           DWORD dwPlatformId;
//C           CHAR szCSDVersion[128];
//C         } OSVERSIONINFOA,*POSVERSIONINFOA,*LPOSVERSIONINFOA;
struct _OSVERSIONINFOA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR [128]szCSDVersion;
}
alias _OSVERSIONINFOA OSVERSIONINFOA;
alias _OSVERSIONINFOA *POSVERSIONINFOA;
alias _OSVERSIONINFOA *LPOSVERSIONINFOA;
//C         typedef struct _OSVERSIONINFOW {
//C           DWORD dwOSVersionInfoSize;
//C           DWORD dwMajorVersion;
//C           DWORD dwMinorVersion;
//C           DWORD dwBuildNumber;
//C           DWORD dwPlatformId;
//C           WCHAR szCSDVersion[128];
//C         } OSVERSIONINFOW,*POSVERSIONINFOW,*LPOSVERSIONINFOW,RTL_OSVERSIONINFOW,*PRTL_OSVERSIONINFOW;
struct _OSVERSIONINFOW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR [128]szCSDVersion;
}
alias _OSVERSIONINFOW OSVERSIONINFOW;
alias _OSVERSIONINFOW *POSVERSIONINFOW;
alias _OSVERSIONINFOW *LPOSVERSIONINFOW;
alias _OSVERSIONINFOW RTL_OSVERSIONINFOW;
alias _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;
//C         typedef OSVERSIONINFOA OSVERSIONINFO;
alias OSVERSIONINFOA OSVERSIONINFO;
//C         typedef POSVERSIONINFOA POSVERSIONINFO;
alias POSVERSIONINFOA POSVERSIONINFO;
//C         typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
alias LPOSVERSIONINFOA LPOSVERSIONINFO;
//C         typedef struct _OSVERSIONINFOEXA {
//C           DWORD dwOSVersionInfoSize;
//C           DWORD dwMajorVersion;
//C           DWORD dwMinorVersion;
//C           DWORD dwBuildNumber;
//C           DWORD dwPlatformId;
//C           CHAR szCSDVersion[128];
//C           WORD wServicePackMajor;
//C           WORD wServicePackMinor;
//C           WORD wSuiteMask;
//C           BYTE wProductType;
//C           BYTE wReserved;
//C         } OSVERSIONINFOEXA,*POSVERSIONINFOEXA,*LPOSVERSIONINFOEXA;
struct _OSVERSIONINFOEXA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR [128]szCSDVersion;
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
}
alias _OSVERSIONINFOEXA OSVERSIONINFOEXA;
alias _OSVERSIONINFOEXA *POSVERSIONINFOEXA;
alias _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;
//C         typedef struct _OSVERSIONINFOEXW {
//C           DWORD dwOSVersionInfoSize;
//C           DWORD dwMajorVersion;
//C           DWORD dwMinorVersion;
//C           DWORD dwBuildNumber;
//C           DWORD dwPlatformId;
//C           WCHAR szCSDVersion[128];
//C           WORD wServicePackMajor;
//C           WORD wServicePackMinor;
//C           WORD wSuiteMask;
//C           BYTE wProductType;
//C           BYTE wReserved;
//C         } OSVERSIONINFOEXW,*POSVERSIONINFOEXW,*LPOSVERSIONINFOEXW,RTL_OSVERSIONINFOEXW,*PRTL_OSVERSIONINFOEXW;
struct _OSVERSIONINFOEXW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR [128]szCSDVersion;
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
}
alias _OSVERSIONINFOEXW OSVERSIONINFOEXW;
alias _OSVERSIONINFOEXW *POSVERSIONINFOEXW;
alias _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;
alias _OSVERSIONINFOEXW RTL_OSVERSIONINFOEXW;
alias _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;
//C         typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
alias OSVERSIONINFOEXA OSVERSIONINFOEX;
//C         typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
alias POSVERSIONINFOEXA POSVERSIONINFOEX;
//C         typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
alias LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
//C          ULONGLONG VerSetConditionMask(ULONGLONG ConditionMask,DWORD TypeMask,BYTE Condition);
ULONGLONG  VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition);
//C         typedef struct _RTL_CRITICAL_SECTION_DEBUG {
//C           WORD Type;
//C           WORD CreatorBackTraceIndex;
//C           struct _RTL_CRITICAL_SECTION *CriticalSection;
//C           LIST_ENTRY ProcessLocksList;
//C           DWORD EntryCount;
//C           DWORD ContentionCount;
//C           DWORD Flags;
//C           WORD CreatorBackTraceIndexHigh;
//C           WORD SpareWORD;
//C         } RTL_CRITICAL_SECTION_DEBUG,*PRTL_CRITICAL_SECTION_DEBUG,RTL_RESOURCE_DEBUG,*PRTL_RESOURCE_DEBUG;
struct _RTL_CRITICAL_SECTION_DEBUG
{
    WORD Type;
    WORD CreatorBackTraceIndex;
    _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
}
alias _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
alias _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;
alias _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG;
alias _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;
//C         typedef struct _RTL_CRITICAL_SECTION {
//C           PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
//C           LONG LockCount;
//C           LONG RecursionCount;
//C           HANDLE OwningThread;
//C           HANDLE LockSemaphore;
//C           ULONG_PTR SpinCount;
//C         } RTL_CRITICAL_SECTION,*PRTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION
{
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
}
alias _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
alias _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;
//C         typedef void ( *RTL_VERIFIER_DLL_LOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
alias void  function(PWSTR DllName, PVOID DllBase, SIZE_T DllSize, PVOID Reserved)RTL_VERIFIER_DLL_LOAD_CALLBACK;
//C         typedef void ( *RTL_VERIFIER_DLL_UNLOAD_CALLBACK) (PWSTR DllName,PVOID DllBase,SIZE_T DllSize,PVOID Reserved);
alias void  function(PWSTR DllName, PVOID DllBase, SIZE_T DllSize, PVOID Reserved)RTL_VERIFIER_DLL_UNLOAD_CALLBACK;
//C         typedef void ( *RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK)(PVOID AllocationBase,SIZE_T AllocationSize);
alias void  function(PVOID AllocationBase, SIZE_T AllocationSize)RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK;
//C         typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR {
//C           PCHAR ThunkName;
//C           PVOID ThunkOldAddress;
//C           PVOID ThunkNewAddress;
//C         } RTL_VERIFIER_THUNK_DESCRIPTOR,*PRTL_VERIFIER_THUNK_DESCRIPTOR;
struct _RTL_VERIFIER_THUNK_DESCRIPTOR
{
    PCHAR ThunkName;
    PVOID ThunkOldAddress;
    PVOID ThunkNewAddress;
}
alias _RTL_VERIFIER_THUNK_DESCRIPTOR RTL_VERIFIER_THUNK_DESCRIPTOR;
alias _RTL_VERIFIER_THUNK_DESCRIPTOR *PRTL_VERIFIER_THUNK_DESCRIPTOR;
//C         typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR {
//C           PWCHAR DllName;
//C           DWORD DllFlags;
//C           PVOID DllAddress;
//C           PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;
//C         } RTL_VERIFIER_DLL_DESCRIPTOR,*PRTL_VERIFIER_DLL_DESCRIPTOR;
struct _RTL_VERIFIER_DLL_DESCRIPTOR
{
    PWCHAR DllName;
    DWORD DllFlags;
    PVOID DllAddress;
    PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;
}
alias _RTL_VERIFIER_DLL_DESCRIPTOR RTL_VERIFIER_DLL_DESCRIPTOR;
alias _RTL_VERIFIER_DLL_DESCRIPTOR *PRTL_VERIFIER_DLL_DESCRIPTOR;
//C         typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {
//C           DWORD Length;
//C           PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
//C           RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
//C           RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
//C           PWSTR VerifierImage;
//C           DWORD VerifierFlags;
//C           DWORD VerifierDebug;
//C           PVOID RtlpGetStackTraceAddress;
//C           PVOID RtlpDebugPageHeapCreate;
//C           PVOID RtlpDebugPageHeapDestroy;
//C           RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;
//C         } RTL_VERIFIER_PROVIDER_DESCRIPTOR,*PRTL_VERIFIER_PROVIDER_DESCRIPTOR;
struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR
{
    DWORD Length;
    PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
    RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
    RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
    PWSTR VerifierImage;
    DWORD VerifierFlags;
    DWORD VerifierDebug;
    PVOID RtlpGetStackTraceAddress;
    PVOID RtlpDebugPageHeapCreate;
    PVOID RtlpDebugPageHeapDestroy;
    RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;
}
alias _RTL_VERIFIER_PROVIDER_DESCRIPTOR RTL_VERIFIER_PROVIDER_DESCRIPTOR;
alias _RTL_VERIFIER_PROVIDER_DESCRIPTOR *PRTL_VERIFIER_PROVIDER_DESCRIPTOR;
//C         void RtlApplicationVerifierStop(ULONG_PTR Code,PSTR Message,ULONG_PTR Param1,PSTR Description1,ULONG_PTR Param2,PSTR Description2,ULONG_PTR Param3,PSTR Description3,ULONG_PTR Param4,PSTR Description4);
void  RtlApplicationVerifierStop(ULONG_PTR Code, PSTR Message, ULONG_PTR Param1, PSTR Description1, ULONG_PTR Param2, PSTR Description2, ULONG_PTR Param3, PSTR Description3, ULONG_PTR Param4, PSTR Description4);
//C         typedef LONG ( *PVECTORED_EXCEPTION_HANDLER)(struct _EXCEPTION_POINTERS *ExceptionInfo);
alias LONG  function(_EXCEPTION_POINTERS *ExceptionInfo)PVECTORED_EXCEPTION_HANDLER;
//C         typedef enum _HEAP_INFORMATION_CLASS {
//C           HeapCompatibilityInformation,
//C           HeapEnableTerminationOnCorruption
//C         } HEAP_INFORMATION_CLASS;
enum _HEAP_INFORMATION_CLASS
{
    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption,
}
alias _HEAP_INFORMATION_CLASS HEAP_INFORMATION_CLASS;
//C          DWORD RtlSetHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength);
DWORD  RtlSetHeapInformation(PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
//C          DWORD RtlQueryHeapInformation(PVOID HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength);
DWORD  RtlQueryHeapInformation(PVOID HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
//C         DWORD RtlMultipleAllocateHeap(PVOID HeapHandle,DWORD Flags,SIZE_T Size,DWORD Count,PVOID *Array);
DWORD  RtlMultipleAllocateHeap(PVOID HeapHandle, DWORD Flags, SIZE_T Size, DWORD Count, PVOID *Array);
//C         DWORD RtlMultipleFreeHeap(PVOID HeapHandle,DWORD Flags,DWORD Count,PVOID *Array);
DWORD  RtlMultipleFreeHeap(PVOID HeapHandle, DWORD Flags, DWORD Count, PVOID *Array);
//C         typedef void ( *WAITORTIMERCALLBACKFUNC)(PVOID,BOOLEAN);
alias void  function(PVOID , BOOLEAN )WAITORTIMERCALLBACKFUNC;
//C         typedef void ( *WORKERCALLBACKFUNC)(PVOID);
alias void  function(PVOID )WORKERCALLBACKFUNC;
//C         typedef void ( *APC_CALLBACK_FUNCTION)(DWORD ,PVOID,PVOID);
alias void  function(DWORD , PVOID , PVOID )APC_CALLBACK_FUNCTION;
//C         typedef
//C           void
//C           ( *PFLS_CALLBACK_FUNCTION)(PVOID lpFlsData);
alias void  function(PVOID lpFlsData)PFLS_CALLBACK_FUNCTION;
//C         typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
//C           ActivationContextBasicInformation = 1,ActivationContextDetailedInformation = 2,AssemblyDetailedInformationInActivationContext = 3,FileInformationInAssemblyOfAssemblyInActivationContext = 4,MaxActivationContextInfoClass,AssemblyDetailedInformationInActivationContxt = 3,FileInformationInAssemblyOfAssemblyInActivationContxt = 4
//C         } ACTIVATION_CONTEXT_INFO_CLASS;
enum _ACTIVATION_CONTEXT_INFO_CLASS
{
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation,
    AssemblyDetailedInformationInActivationContext,
    FileInformationInAssemblyOfAssemblyInActivationContext,
    MaxActivationContextInfoClass,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt,
}
alias _ACTIVATION_CONTEXT_INFO_CLASS ACTIVATION_CONTEXT_INFO_CLASS;
//C         typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
//C           DWORD ulAssemblyIndex;
//C           DWORD ulFileIndexInAssembly;
//C         } ACTIVATION_CONTEXT_QUERY_INDEX,*PACTIVATION_CONTEXT_QUERY_INDEX;
struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
}
alias _ACTIVATION_CONTEXT_QUERY_INDEX ACTIVATION_CONTEXT_QUERY_INDEX;
alias _ACTIVATION_CONTEXT_QUERY_INDEX *PACTIVATION_CONTEXT_QUERY_INDEX;
//C         typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
alias _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;
//C         typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
//C           DWORD ulFlags;
//C           DWORD ulFilenameLength;
//C           DWORD ulPathLength;
//C           PCWSTR lpFileName;
//C           PCWSTR lpFilePath;
//C         } ASSEMBLY_FILE_DETAILED_INFORMATION,*PASSEMBLY_FILE_DETAILED_INFORMATION;
struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
}
alias _ASSEMBLY_FILE_DETAILED_INFORMATION ASSEMBLY_FILE_DETAILED_INFORMATION;
alias _ASSEMBLY_FILE_DETAILED_INFORMATION *PASSEMBLY_FILE_DETAILED_INFORMATION;
//C         typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
alias ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
//C         typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
//C           DWORD ulFlags;
//C           DWORD ulEncodedAssemblyIdentityLength;
//C           DWORD ulManifestPathType;
//C           DWORD ulManifestPathLength;
//C           LARGE_INTEGER liManifestLastWriteTime;
//C           DWORD ulPolicyPathType;
//C           DWORD ulPolicyPathLength;
//C           LARGE_INTEGER liPolicyLastWriteTime;
//C           DWORD ulMetadataSatelliteRosterIndex;
//C           DWORD ulManifestVersionMajor;
//C           DWORD ulManifestVersionMinor;
//C           DWORD ulPolicyVersionMajor;
//C           DWORD ulPolicyVersionMinor;
//C           DWORD ulAssemblyDirectoryNameLength;
//C           PCWSTR lpAssemblyEncodedAssemblyIdentity;
//C           PCWSTR lpAssemblyManifestPath;
//C           PCWSTR lpAssemblyPolicyPath;
//C           PCWSTR lpAssemblyDirectoryName;
//C           DWORD ulFileCount;
//C         } ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD ulFileCount;
}
alias _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
alias _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
//C         typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
alias _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
//C         typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
//C           DWORD dwFlags;
//C           DWORD ulFormatVersion;
//C           DWORD ulAssemblyCount;
//C           DWORD ulRootManifestPathType;
//C           DWORD ulRootManifestPathChars;
//C           DWORD ulRootConfigurationPathType;
//C           DWORD ulRootConfigurationPathChars;
//C           DWORD ulAppDirPathType;
//C           DWORD ulAppDirPathChars;
//C           PCWSTR lpRootManifestPath;
//C           PCWSTR lpRootConfigurationPath;
//C           PCWSTR lpAppDirPath;
//C         } ACTIVATION_CONTEXT_DETAILED_INFORMATION,*PACTIVATION_CONTEXT_DETAILED_INFORMATION;
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
}
alias _ACTIVATION_CONTEXT_DETAILED_INFORMATION ACTIVATION_CONTEXT_DETAILED_INFORMATION;
alias _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PACTIVATION_CONTEXT_DETAILED_INFORMATION;
//C         typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
alias _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
//C         typedef struct _EVENTLOGRECORD {
//C           DWORD Length;
//C           DWORD Reserved;
//C           DWORD RecordNumber;
//C           DWORD TimeGenerated;
//C           DWORD TimeWritten;
//C           DWORD EventID;
//C           WORD EventType;
//C           WORD NumStrings;
//C           WORD EventCategory;
//C           WORD ReservedFlags;
//C           DWORD ClosingRecordNumber;
//C           DWORD StringOffset;
//C           DWORD UserSidLength;
//C           DWORD UserSidOffset;
//C           DWORD DataLength;
//C           DWORD DataOffset;
//C         } EVENTLOGRECORD,*PEVENTLOGRECORD;
struct _EVENTLOGRECORD
{
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
}
alias _EVENTLOGRECORD EVENTLOGRECORD;
alias _EVENTLOGRECORD *PEVENTLOGRECORD;
//C         typedef struct _EVENTSFORLOGFILE{
//C           DWORD ulSize;
//C           WCHAR szLogicalLogFile[256];
//C           DWORD ulNumRecords;
//C           EVENTLOGRECORD pEventLogRecords[];
//C         } EVENTSFORLOGFILE,*PEVENTSFORLOGFILE;
struct _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR [256]szLogicalLogFile;
    DWORD ulNumRecords;
    EVENTLOGRECORD []pEventLogRecords;
}
alias _EVENTSFORLOGFILE EVENTSFORLOGFILE;
alias _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;
//C         typedef struct _PACKEDEVENTINFO{
//C           DWORD ulSize;
//C           DWORD ulNumEventsForLogFile;
//C           DWORD ulOffsets[];
//C         } PACKEDEVENTINFO,*PPACKEDEVENTINFO;
struct _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD []ulOffsets;
}
alias _PACKEDEVENTINFO PACKEDEVENTINFO;
alias _PACKEDEVENTINFO *PPACKEDEVENTINFO;
//C         typedef enum _CM_SERVICE_NODE_TYPE {
//C           DriverType = 0x00000001,FileSystemType = 0x00000002,Win32ServiceOwnProcess = 0x00000010,
//C           Win32ServiceShareProcess = 0x00000020,AdapterType = 0x00000004,RecognizerType = 0x00000008
//C         } SERVICE_NODE_TYPE;
enum _CM_SERVICE_NODE_TYPE
{
    DriverType = 1,
    FileSystemType,
    Win32ServiceOwnProcess = 16,
    Win32ServiceShareProcess = 32,
    AdapterType = 4,
    RecognizerType = 8,
}
alias _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
//C         typedef enum _CM_SERVICE_LOAD_TYPE {
//C           BootLoad = 0x00000000,SystemLoad = 0x00000001,AutoLoad = 0x00000002,DemandLoad = 0x00000003,
//C           DisableLoad = 0x00000004
//C         } SERVICE_LOAD_TYPE;
enum _CM_SERVICE_LOAD_TYPE
{
    BootLoad,
    SystemLoad,
    AutoLoad,
    DemandLoad,
    DisableLoad,
}
alias _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
//C         typedef enum _CM_ERROR_CONTROL_TYPE {
//C           IgnoreError = 0x00000000,NormalError = 0x00000001,SevereError = 0x00000002,CriticalError = 0x00000003
//C         } SERVICE_ERROR_TYPE;
enum _CM_ERROR_CONTROL_TYPE
{
    IgnoreError,
    NormalError,
    SevereError,
    CriticalError,
}
alias _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
//C         typedef struct _TAPE_ERASE {
//C           DWORD Type;
//C           BOOLEAN Immediate;
//C         } TAPE_ERASE,*PTAPE_ERASE;
struct _TAPE_ERASE
{
    DWORD Type;
    BOOLEAN Immediate;
}
alias _TAPE_ERASE TAPE_ERASE;
alias _TAPE_ERASE *PTAPE_ERASE;
//C         typedef struct _TAPE_PREPARE {
//C           DWORD Operation;
//C           BOOLEAN Immediate;
//C         } TAPE_PREPARE,*PTAPE_PREPARE;
struct _TAPE_PREPARE
{
    DWORD Operation;
    BOOLEAN Immediate;
}
alias _TAPE_PREPARE TAPE_PREPARE;
alias _TAPE_PREPARE *PTAPE_PREPARE;
//C         typedef struct _TAPE_WRITE_MARKS {
//C           DWORD Type;
//C           DWORD Count;
//C           BOOLEAN Immediate;
//C         } TAPE_WRITE_MARKS,*PTAPE_WRITE_MARKS;
struct _TAPE_WRITE_MARKS
{
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
}
alias _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
alias _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;
//C         typedef struct _TAPE_GET_POSITION {
//C           DWORD Type;
//C           DWORD Partition;
//C           LARGE_INTEGER Offset;
//C         } TAPE_GET_POSITION,*PTAPE_GET_POSITION;
struct _TAPE_GET_POSITION
{
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
}
alias _TAPE_GET_POSITION TAPE_GET_POSITION;
alias _TAPE_GET_POSITION *PTAPE_GET_POSITION;
//C         typedef struct _TAPE_SET_POSITION {
//C           DWORD Method;
//C           DWORD Partition;
//C           LARGE_INTEGER Offset;
//C           BOOLEAN Immediate;
//C         } TAPE_SET_POSITION,*PTAPE_SET_POSITION;
struct _TAPE_SET_POSITION
{
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
}
alias _TAPE_SET_POSITION TAPE_SET_POSITION;
alias _TAPE_SET_POSITION *PTAPE_SET_POSITION;
//C         typedef struct _TAPE_GET_DRIVE_PARAMETERS {
//C           BOOLEAN ECC;
//C           BOOLEAN Compression;
//C           BOOLEAN DataPadding;
//C           BOOLEAN ReportSetmarks;
//C           DWORD DefaultBlockSize;
//C           DWORD MaximumBlockSize;
//C           DWORD MinimumBlockSize;
//C           DWORD MaximumPartitionCount;
//C           DWORD FeaturesLow;
//C           DWORD FeaturesHigh;
//C           DWORD EOTWarningZoneSize;
//C         } TAPE_GET_DRIVE_PARAMETERS,*PTAPE_GET_DRIVE_PARAMETERS;
struct _TAPE_GET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
}
alias _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
alias _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;
//C         typedef struct _TAPE_SET_DRIVE_PARAMETERS {
//C           BOOLEAN ECC;
//C           BOOLEAN Compression;
//C           BOOLEAN DataPadding;
//C           BOOLEAN ReportSetmarks;
//C           DWORD EOTWarningZoneSize;
//C         } TAPE_SET_DRIVE_PARAMETERS,*PTAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_SET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
}
alias _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
alias _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;
//C         typedef struct _TAPE_GET_MEDIA_PARAMETERS {
//C           LARGE_INTEGER Capacity;
//C           LARGE_INTEGER Remaining;
//C           DWORD BlockSize;
//C           DWORD PartitionCount;
//C           BOOLEAN WriteProtected;
//C         } TAPE_GET_MEDIA_PARAMETERS,*PTAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS
{
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
}
alias _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
alias _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;
//C         typedef struct _TAPE_SET_MEDIA_PARAMETERS {
//C           DWORD BlockSize;
//C         } TAPE_SET_MEDIA_PARAMETERS,*PTAPE_SET_MEDIA_PARAMETERS;
struct _TAPE_SET_MEDIA_PARAMETERS
{
    DWORD BlockSize;
}
alias _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
alias _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;
//C         typedef struct _TAPE_CREATE_PARTITION {
//C           DWORD Method;
//C           DWORD Count;
//C           DWORD Size;
//C         } TAPE_CREATE_PARTITION,*PTAPE_CREATE_PARTITION;
struct _TAPE_CREATE_PARTITION
{
    DWORD Method;
    DWORD Count;
    DWORD Size;
}
alias _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
alias _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;
//C         typedef struct _TAPE_WMI_OPERATIONS {
//C           DWORD Method;
//C           DWORD DataBufferSize;
//C           PVOID DataBuffer;
//C         } TAPE_WMI_OPERATIONS,*PTAPE_WMI_OPERATIONS;
struct _TAPE_WMI_OPERATIONS
{
    DWORD Method;
    DWORD DataBufferSize;
    PVOID DataBuffer;
}
alias _TAPE_WMI_OPERATIONS TAPE_WMI_OPERATIONS;
alias _TAPE_WMI_OPERATIONS *PTAPE_WMI_OPERATIONS;
//C         typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
//C           TapeDriveProblemNone,TapeDriveReadWriteWarning,TapeDriveReadWriteError,TapeDriveReadWarning,TapeDriveWriteWarning,TapeDriveReadError,TapeDriveWriteError,TapeDriveHardwareError,TapeDriveUnsupportedMedia,TapeDriveScsiConnectionError,TapeDriveTimetoClean,TapeDriveCleanDriveNow,TapeDriveMediaLifeExpired,TapeDriveSnappedTape
//C         } TAPE_DRIVE_PROBLEM_TYPE;
enum _TAPE_DRIVE_PROBLEM_TYPE
{
    TapeDriveProblemNone,
    TapeDriveReadWriteWarning,
    TapeDriveReadWriteError,
    TapeDriveReadWarning,
    TapeDriveWriteWarning,
    TapeDriveReadError,
    TapeDriveWriteError,
    TapeDriveHardwareError,
    TapeDriveUnsupportedMedia,
    TapeDriveScsiConnectionError,
    TapeDriveTimetoClean,
    TapeDriveCleanDriveNow,
    TapeDriveMediaLifeExpired,
    TapeDriveSnappedTape,
}
alias _TAPE_DRIVE_PROBLEM_TYPE TAPE_DRIVE_PROBLEM_TYPE;
//C         struct _TEB *NtCurrentTeb(void);
_TEB * NtCurrentTeb();
//C         PVOID GetCurrentFiber(void);
PVOID  GetCurrentFiber();
//C         PVOID GetFiberData(void);
PVOID  GetFiberData();
//C     typedef UINT_PTR WPARAM;
alias UINT_PTR WPARAM;
//C     typedef LONG_PTR LPARAM;
alias LONG_PTR LPARAM;
//C     typedef LONG_PTR LRESULT;
alias LONG_PTR LRESULT;
//C     struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HWND__
{
    int unused;
}
alias HWND__ *HWND;
//C     struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;
struct HHOOK__
{
    int unused;
}
alias HHOOK__ *HHOOK;
//C     typedef WORD ATOM;
alias WORD ATOM;
//C     typedef HANDLE *SPHANDLE;
alias HANDLE *SPHANDLE;
//C     typedef HANDLE *LPHANDLE;
alias HANDLE *LPHANDLE;
//C     typedef HANDLE HGLOBAL;
alias HANDLE HGLOBAL;
//C     typedef HANDLE HLOCAL;
alias HANDLE HLOCAL;
//C     typedef HANDLE GLOBALHANDLE;
alias HANDLE GLOBALHANDLE;
//C     typedef HANDLE LOCALHANDLE;
alias HANDLE LOCALHANDLE;
//C     typedef INT_PTR ( *FARPROC)();
alias INT_PTR  function()FARPROC;
//C     typedef INT_PTR ( *NEARPROC)();
alias INT_PTR  function()NEARPROC;
//C     typedef INT_PTR ( *PROC)();
alias INT_PTR  function()PROC;
//C     typedef void *HGDIOBJ;
alias void *HGDIOBJ;
//C     struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
struct HKEY__
{
    int unused;
}
alias HKEY__ *HKEY;
//C     typedef HKEY *PHKEY;
alias HKEY *PHKEY;
//C     struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
struct HACCEL__
{
    int unused;
}
alias HACCEL__ *HACCEL;
//C     struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBITMAP__
{
    int unused;
}
alias HBITMAP__ *HBITMAP;
//C     struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
struct HBRUSH__
{
    int unused;
}
alias HBRUSH__ *HBRUSH;
//C     struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HCOLORSPACE__
{
    int unused;
}
alias HCOLORSPACE__ *HCOLORSPACE;
//C     struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
struct HDC__
{
    int unused;
}
alias HDC__ *HDC;
//C     struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;
struct HGLRC__
{
    int unused;
}
alias HGLRC__ *HGLRC;
//C     struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HDESK__
{
    int unused;
}
alias HDESK__ *HDESK;
//C     struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct HENHMETAFILE__
{
    int unused;
}
alias HENHMETAFILE__ *HENHMETAFILE;
//C     struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
struct HFONT__
{
    int unused;
}
alias HFONT__ *HFONT;
//C     struct HICON__ { int unused; }; typedef struct HICON__ *HICON;
struct HICON__
{
    int unused;
}
alias HICON__ *HICON;
//C     struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
struct HMENU__
{
    int unused;
}
alias HMENU__ *HMENU;
//C     struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HMETAFILE__
{
    int unused;
}
alias HMETAFILE__ *HMETAFILE;
//C     struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
struct HINSTANCE__
{
    int unused;
}
alias HINSTANCE__ *HINSTANCE;
//C     typedef HINSTANCE HMODULE;
alias HINSTANCE HMODULE;
//C     struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPALETTE__
{
    int unused;
}
alias HPALETTE__ *HPALETTE;
//C     struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
struct HPEN__
{
    int unused;
}
alias HPEN__ *HPEN;
//C     struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRGN__
{
    int unused;
}
alias HRGN__ *HRGN;
//C     struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HRSRC__
{
    int unused;
}
alias HRSRC__ *HRSRC;
//C     struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HSTR__
{
    int unused;
}
alias HSTR__ *HSTR;
//C     struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HTASK__
{
    int unused;
}
alias HTASK__ *HTASK;
//C     struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HWINSTA__
{
    int unused;
}
alias HWINSTA__ *HWINSTA;
//C     struct HKL__ { int unused; }; typedef struct HKL__ *HKL;
struct HKL__
{
    int unused;
}
alias HKL__ *HKL;
//C     struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HMONITOR__
{
    int unused;
}
alias HMONITOR__ *HMONITOR;
//C     struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct HWINEVENTHOOK__
{
    int unused;
}
alias HWINEVENTHOOK__ *HWINEVENTHOOK;
//C     struct HUMPD__ { int unused; }; typedef struct HUMPD__ *HUMPD;
struct HUMPD__
{
    int unused;
}
alias HUMPD__ *HUMPD;
//C     typedef int HFILE;
alias int HFILE;
//C     typedef HICON HCURSOR;
alias HICON HCURSOR;
//C     typedef DWORD COLORREF;
alias DWORD COLORREF;
//C     typedef DWORD *LPCOLORREF;
alias DWORD *LPCOLORREF;
//C     typedef struct tagRECT {
//C       LONG left;
//C       LONG top;
//C       LONG right;
//C       LONG bottom;
//C     } RECT,*PRECT,*NPRECT,*LPRECT;
struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
}
alias tagRECT RECT;
alias tagRECT *PRECT;
alias tagRECT *NPRECT;
alias tagRECT *LPRECT;
//C     typedef const RECT *LPCRECT;
alias RECT *LPCRECT;
//C     typedef struct _RECTL {
//C       LONG left;
//C       LONG top;
//C       LONG right;
//C       LONG bottom;
//C     } RECTL,*PRECTL,*LPRECTL;
struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
}
alias _RECTL RECTL;
alias _RECTL *PRECTL;
alias _RECTL *LPRECTL;
//C     typedef const RECTL *LPCRECTL;
alias RECTL *LPCRECTL;
//C     typedef struct tagPOINT {
//C       LONG x;
//C       LONG y;
//C     } POINT,*PPOINT,*NPPOINT,*LPPOINT;
struct tagPOINT
{
    LONG x;
    LONG y;
}
alias tagPOINT POINT;
alias tagPOINT *PPOINT;
alias tagPOINT *NPPOINT;
alias tagPOINT *LPPOINT;
//C     typedef struct _POINTL {
//C       LONG x;
//C       LONG y;
//C     } POINTL,*PPOINTL;
struct _POINTL
{
    LONG x;
    LONG y;
}
alias _POINTL POINTL;
alias _POINTL *PPOINTL;
//C     typedef struct tagSIZE {
//C       LONG cx;
//C       LONG cy;
//C     } SIZE,*PSIZE,*LPSIZE;
struct tagSIZE
{
    LONG cx;
    LONG cy;
}
alias tagSIZE SIZE;
alias tagSIZE *PSIZE;
alias tagSIZE *LPSIZE;
//C     typedef SIZE SIZEL;
alias SIZE SIZEL;
//C     typedef SIZE *PSIZEL,*LPSIZEL;
alias SIZE *PSIZEL;
alias SIZE *LPSIZEL;
//C     typedef struct tagPOINTS {
//C       SHORT x;
//C       SHORT y;
//C     } POINTS,*PPOINTS,*LPPOINTS;
struct tagPOINTS
{
    SHORT x;
    SHORT y;
}
alias tagPOINTS POINTS;
alias tagPOINTS *PPOINTS;
alias tagPOINTS *LPPOINTS;
//C     typedef struct _FILETIME {
//C       DWORD dwLowDateTime;
//C       DWORD dwHighDateTime;
//C     } FILETIME,*PFILETIME,*LPFILETIME;
struct _FILETIME
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
}
alias _FILETIME FILETIME;
alias _FILETIME *PFILETIME;
alias _FILETIME *LPFILETIME;
//C       typedef struct _OVERLAPPED {
//C         ULONG_PTR Internal;
//C         ULONG_PTR InternalHigh;
//C          union {
//C            struct {
//C      DWORD Offset;
//C      DWORD OffsetHigh;
//C           };
struct _N53
{
    DWORD Offset;
    DWORD OffsetHigh;
}
//C           PVOID Pointer;
//C         };
union _N52
{
    DWORD Offset;
    DWORD OffsetHigh;
    PVOID Pointer;
}
//C         HANDLE hEvent;
//C       } OVERLAPPED,*LPOVERLAPPED;
struct _OVERLAPPED
{
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    DWORD Offset;
    DWORD OffsetHigh;
    PVOID Pointer;
    HANDLE hEvent;
}
alias _OVERLAPPED OVERLAPPED;
alias _OVERLAPPED *LPOVERLAPPED;
//C       typedef struct _SECURITY_ATTRIBUTES {
//C         DWORD nLength;
//C         LPVOID lpSecurityDescriptor;
//C         WINBOOL bInheritHandle;
//C       } SECURITY_ATTRIBUTES,*PSECURITY_ATTRIBUTES,*LPSECURITY_ATTRIBUTES;
struct _SECURITY_ATTRIBUTES
{
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    WINBOOL bInheritHandle;
}
alias _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
alias _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;
alias _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;
//C       typedef struct _PROCESS_INFORMATION {
//C         HANDLE hProcess;
//C         HANDLE hThread;
//C         DWORD dwProcessId;
//C         DWORD dwThreadId;
//C       } PROCESS_INFORMATION,*PPROCESS_INFORMATION,*LPPROCESS_INFORMATION;
struct _PROCESS_INFORMATION
{
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
}
alias _PROCESS_INFORMATION PROCESS_INFORMATION;
alias _PROCESS_INFORMATION *PPROCESS_INFORMATION;
alias _PROCESS_INFORMATION *LPPROCESS_INFORMATION;
//C       typedef struct _SYSTEMTIME {
//C         WORD wYear;
//C         WORD wMonth;
//C         WORD wDayOfWeek;
//C         WORD wDay;
//C         WORD wHour;
//C         WORD wMinute;
//C         WORD wSecond;
//C         WORD wMilliseconds;
//C       } SYSTEMTIME,*PSYSTEMTIME,*LPSYSTEMTIME;
struct _SYSTEMTIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
}
alias _SYSTEMTIME SYSTEMTIME;
alias _SYSTEMTIME *PSYSTEMTIME;
alias _SYSTEMTIME *LPSYSTEMTIME;
//C       typedef DWORD ( *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter);
alias DWORD  function(LPVOID lpThreadParameter)PTHREAD_START_ROUTINE;
//C       typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
alias PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
//C       typedef void ( *PFIBER_START_ROUTINE)(LPVOID lpFiberParameter);
alias void  function(LPVOID lpFiberParameter)PFIBER_START_ROUTINE;
//C       typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
alias PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
//C       typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
alias RTL_CRITICAL_SECTION CRITICAL_SECTION;
//C       typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
alias PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
//C       typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
alias PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
//C       typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
alias RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
//C       typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
alias PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
//C       typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
alias PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
//C        PVOID EncodePointer(PVOID Ptr);
PVOID  EncodePointer(PVOID Ptr);
//C        PVOID DecodePointer(PVOID Ptr);
PVOID  DecodePointer(PVOID Ptr);
//C        PVOID EncodeSystemPointer(PVOID Ptr);
PVOID  EncodeSystemPointer(PVOID Ptr);
//C        PVOID DecodeSystemPointer(PVOID Ptr);
PVOID  DecodeSystemPointer(PVOID Ptr);
//C       typedef LPVOID LPLDT_ENTRY;
alias LPVOID LPLDT_ENTRY;
//C       typedef struct _COMMPROP {
//C         WORD wPacketLength;
//C         WORD wPacketVersion;
//C         DWORD dwServiceMask;
//C         DWORD dwReserved1;
//C         DWORD dwMaxTxQueue;
//C         DWORD dwMaxRxQueue;
//C         DWORD dwMaxBaud;
//C         DWORD dwProvSubType;
//C         DWORD dwProvCapabilities;
//C         DWORD dwSettableParams;
//C         DWORD dwSettableBaud;
//C         WORD wSettableData;
//C         WORD wSettableStopParity;
//C         DWORD dwCurrentTxQueue;
//C         DWORD dwCurrentRxQueue;
//C         DWORD dwProvSpec1;
//C         DWORD dwProvSpec2;
//C         WCHAR wcProvChar[1];
//C       } COMMPROP,*LPCOMMPROP;
struct _COMMPROP
{
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR [1]wcProvChar;
}
alias _COMMPROP COMMPROP;
alias _COMMPROP *LPCOMMPROP;
//C       typedef struct _COMSTAT {
//C         DWORD fCtsHold : 1;
//C         DWORD fDsrHold : 1;
//C         DWORD fRlsdHold : 1;
//C         DWORD fXoffHold : 1;
//C         DWORD fXoffSent : 1;
//C         DWORD fEof : 1;
//C         DWORD fTxim : 1;
//C         DWORD fReserved : 25;
//C         DWORD cbInQue;
//C         DWORD cbOutQue;
//C       } COMSTAT,*LPCOMSTAT;
struct _COMSTAT
{
    DWORD __bitfield1;
    DWORD fCtsHold() { return (__bitfield1 >> 0) & 0x1; }
    DWORD fDsrHold() { return (__bitfield1 >> 1) & 0x1; }
    DWORD fRlsdHold() { return (__bitfield1 >> 2) & 0x1; }
    DWORD fXoffHold() { return (__bitfield1 >> 3) & 0x1; }
    DWORD fXoffSent() { return (__bitfield1 >> 4) & 0x1; }
    DWORD fEof() { return (__bitfield1 >> 5) & 0x1; }
    DWORD fTxim() { return (__bitfield1 >> 6) & 0x1; }
    DWORD fReserved() { return (__bitfield1 >> 7) & 0x1ffffff; }
    DWORD cbInQue;
    DWORD cbOutQue;
}
alias _COMSTAT COMSTAT;
alias _COMSTAT *LPCOMSTAT;
//C       typedef struct _DCB {
//C         DWORD DCBlength;
//C         DWORD BaudRate;
//C         DWORD fBinary: 1;
//C         DWORD fParity: 1;
//C         DWORD fOutxCtsFlow:1;
//C         DWORD fOutxDsrFlow:1;
//C         DWORD fDtrControl:2;
//C         DWORD fDsrSensitivity:1;
//C         DWORD fTXContinueOnXoff: 1;
//C         DWORD fOutX: 1;
//C         DWORD fInX: 1;
//C         DWORD fErrorChar: 1;
//C         DWORD fNull: 1;
//C         DWORD fRtsControl:2;
//C         DWORD fAbortOnError:1;
//C         DWORD fDummy2:17;
//C         WORD wReserved;
//C         WORD XonLim;
//C         WORD XoffLim;
//C         BYTE ByteSize;
//C         BYTE Parity;
//C         BYTE StopBits;
//C         char XonChar;
//C         char XoffChar;
//C         char ErrorChar;
//C         char EofChar;
//C         char EvtChar;
//C         WORD wReserved1;
//C       } DCB,*LPDCB;
struct _DCB
{
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD __bitfield1;
    DWORD fBinary() { return (__bitfield1 >> 0) & 0x1; }
    DWORD fParity() { return (__bitfield1 >> 1) & 0x1; }
    DWORD fOutxCtsFlow() { return (__bitfield1 >> 2) & 0x1; }
    DWORD fOutxDsrFlow() { return (__bitfield1 >> 3) & 0x1; }
    DWORD fDtrControl() { return (__bitfield1 >> 4) & 0x3; }
    DWORD fDsrSensitivity() { return (__bitfield1 >> 6) & 0x1; }
    DWORD fTXContinueOnXoff() { return (__bitfield1 >> 7) & 0x1; }
    DWORD fOutX() { return (__bitfield1 >> 8) & 0x1; }
    DWORD fInX() { return (__bitfield1 >> 9) & 0x1; }
    DWORD fErrorChar() { return (__bitfield1 >> 10) & 0x1; }
    DWORD fNull() { return (__bitfield1 >> 11) & 0x1; }
    DWORD fRtsControl() { return (__bitfield1 >> 12) & 0x3; }
    DWORD fAbortOnError() { return (__bitfield1 >> 14) & 0x1; }
    DWORD fDummy2() { return (__bitfield1 >> 15) & 0x1ffff; }
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
}
alias _DCB DCB;
alias _DCB *LPDCB;
//C       typedef struct _COMMTIMEOUTS {
//C         DWORD ReadIntervalTimeout;
//C         DWORD ReadTotalTimeoutMultiplier;
//C         DWORD ReadTotalTimeoutConstant;
//C         DWORD WriteTotalTimeoutMultiplier;
//C         DWORD WriteTotalTimeoutConstant;
//C       } COMMTIMEOUTS,*LPCOMMTIMEOUTS;
struct _COMMTIMEOUTS
{
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
}
alias _COMMTIMEOUTS COMMTIMEOUTS;
alias _COMMTIMEOUTS *LPCOMMTIMEOUTS;
//C       typedef struct _COMMCONFIG {
//C         DWORD dwSize;
//C         WORD wVersion;
//C         WORD wReserved;
//C         DCB dcb;
//C         DWORD dwProviderSubType;
//C         DWORD dwProviderOffset;
//C         DWORD dwProviderSize;
//C         WCHAR wcProviderData[1];
//C       } COMMCONFIG,*LPCOMMCONFIG;
struct _COMMCONFIG
{
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR [1]wcProviderData;
}
alias _COMMCONFIG COMMCONFIG;
alias _COMMCONFIG *LPCOMMCONFIG;
//C       typedef struct _SYSTEM_INFO {
//C          union {
//C           DWORD dwOemId;
//C            struct {
//C      WORD wProcessorArchitecture;
//C      WORD wReserved;
//C           } ;
struct _N55
{
    WORD wProcessorArchitecture;
    WORD wReserved;
}
//C         } ;
union _N54
{
    DWORD dwOemId;
    WORD wProcessorArchitecture;
    WORD wReserved;
}
//C         DWORD dwPageSize;
//C         LPVOID lpMinimumApplicationAddress;
//C         LPVOID lpMaximumApplicationAddress;
//C         DWORD_PTR dwActiveProcessorMask;
//C         DWORD dwNumberOfProcessors;
//C         DWORD dwProcessorType;
//C         DWORD dwAllocationGranularity;
//C         WORD wProcessorLevel;
//C         WORD wProcessorRevision;
//C       } SYSTEM_INFO,*LPSYSTEM_INFO;
struct _SYSTEM_INFO
{
    DWORD dwOemId;
    WORD wProcessorArchitecture;
    WORD wReserved;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
}
alias _SYSTEM_INFO SYSTEM_INFO;
alias _SYSTEM_INFO *LPSYSTEM_INFO;
//C       typedef struct _MEMORYSTATUS {
//C         DWORD dwLength;
//C         DWORD dwMemoryLoad;
//C         SIZE_T dwTotalPhys;
//C         SIZE_T dwAvailPhys;
//C         SIZE_T dwTotalPageFile;
//C         SIZE_T dwAvailPageFile;
//C         SIZE_T dwTotalVirtual;
//C         SIZE_T dwAvailVirtual;
//C       } MEMORYSTATUS,*LPMEMORYSTATUS;
struct _MEMORYSTATUS
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
}
alias _MEMORYSTATUS MEMORYSTATUS;
alias _MEMORYSTATUS *LPMEMORYSTATUS;
//C       typedef struct _EXCEPTION_DEBUG_INFO {
//C         EXCEPTION_RECORD ExceptionRecord;
//C         DWORD dwFirstChance;
//C       } EXCEPTION_DEBUG_INFO,*LPEXCEPTION_DEBUG_INFO;
struct _EXCEPTION_DEBUG_INFO
{
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
}
alias _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
alias _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;
//C       typedef struct _CREATE_THREAD_DEBUG_INFO {
//C         HANDLE hThread;
//C         LPVOID lpThreadLocalBase;
//C         LPTHREAD_START_ROUTINE lpStartAddress;
//C       } CREATE_THREAD_DEBUG_INFO,*LPCREATE_THREAD_DEBUG_INFO;
struct _CREATE_THREAD_DEBUG_INFO
{
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
}
alias _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
alias _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;
//C       typedef struct _CREATE_PROCESS_DEBUG_INFO {
//C         HANDLE hFile;
//C         HANDLE hProcess;
//C         HANDLE hThread;
//C         LPVOID lpBaseOfImage;
//C         DWORD dwDebugInfoFileOffset;
//C         DWORD nDebugInfoSize;
//C         LPVOID lpThreadLocalBase;
//C         LPTHREAD_START_ROUTINE lpStartAddress;
//C         LPVOID lpImageName;
//C         WORD fUnicode;
//C       } CREATE_PROCESS_DEBUG_INFO,*LPCREATE_PROCESS_DEBUG_INFO;
struct _CREATE_PROCESS_DEBUG_INFO
{
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
}
alias _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
alias _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;
//C       typedef struct _EXIT_THREAD_DEBUG_INFO {
//C         DWORD dwExitCode;
//C       } EXIT_THREAD_DEBUG_INFO,*LPEXIT_THREAD_DEBUG_INFO;
struct _EXIT_THREAD_DEBUG_INFO
{
    DWORD dwExitCode;
}
alias _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
alias _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;
//C       typedef struct _EXIT_PROCESS_DEBUG_INFO {
//C         DWORD dwExitCode;
//C       } EXIT_PROCESS_DEBUG_INFO,*LPEXIT_PROCESS_DEBUG_INFO;
struct _EXIT_PROCESS_DEBUG_INFO
{
    DWORD dwExitCode;
}
alias _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
alias _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;
//C       typedef struct _LOAD_DLL_DEBUG_INFO {
//C         HANDLE hFile;
//C         LPVOID lpBaseOfDll;
//C         DWORD dwDebugInfoFileOffset;
//C         DWORD nDebugInfoSize;
//C         LPVOID lpImageName;
//C         WORD fUnicode;
//C       } LOAD_DLL_DEBUG_INFO,*LPLOAD_DLL_DEBUG_INFO;
struct _LOAD_DLL_DEBUG_INFO
{
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
}
alias _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
alias _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;
//C       typedef struct _UNLOAD_DLL_DEBUG_INFO {
//C         LPVOID lpBaseOfDll;
//C       } UNLOAD_DLL_DEBUG_INFO,*LPUNLOAD_DLL_DEBUG_INFO;
struct _UNLOAD_DLL_DEBUG_INFO
{
    LPVOID lpBaseOfDll;
}
alias _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
alias _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;
//C       typedef struct _OUTPUT_DEBUG_STRING_INFO {
//C         LPSTR lpDebugStringData;
//C         WORD fUnicode;
//C         WORD nDebugStringLength;
//C       } OUTPUT_DEBUG_STRING_INFO,*LPOUTPUT_DEBUG_STRING_INFO;
struct _OUTPUT_DEBUG_STRING_INFO
{
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
}
alias _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
alias _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;
//C       typedef struct _RIP_INFO {
//C         DWORD dwError;
//C         DWORD dwType;
//C       } RIP_INFO,*LPRIP_INFO;
struct _RIP_INFO
{
    DWORD dwError;
    DWORD dwType;
}
alias _RIP_INFO RIP_INFO;
alias _RIP_INFO *LPRIP_INFO;
//C       typedef struct _DEBUG_EVENT {
//C         DWORD dwDebugEventCode;
//C         DWORD dwProcessId;
//C         DWORD dwThreadId;
//C         union {
//C           EXCEPTION_DEBUG_INFO Exception;
//C           CREATE_THREAD_DEBUG_INFO CreateThread;
//C           CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
//C           EXIT_THREAD_DEBUG_INFO ExitThread;
//C           EXIT_PROCESS_DEBUG_INFO ExitProcess;
//C           LOAD_DLL_DEBUG_INFO LoadDll;
//C           UNLOAD_DLL_DEBUG_INFO UnloadDll;
//C           OUTPUT_DEBUG_STRING_INFO DebugString;
//C           RIP_INFO RipInfo;
//C         } u;
union _N56
{
    EXCEPTION_DEBUG_INFO Exception;
    CREATE_THREAD_DEBUG_INFO CreateThread;
    CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
    EXIT_THREAD_DEBUG_INFO ExitThread;
    EXIT_PROCESS_DEBUG_INFO ExitProcess;
    LOAD_DLL_DEBUG_INFO LoadDll;
    UNLOAD_DLL_DEBUG_INFO UnloadDll;
    OUTPUT_DEBUG_STRING_INFO DebugString;
    RIP_INFO RipInfo;
}
//C       } DEBUG_EVENT,*LPDEBUG_EVENT;
struct _DEBUG_EVENT
{
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    _N56 u;
}
alias _DEBUG_EVENT DEBUG_EVENT;
alias _DEBUG_EVENT *LPDEBUG_EVENT;
//C       typedef PCONTEXT LPCONTEXT;
alias PCONTEXT LPCONTEXT;
//C       typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
alias PEXCEPTION_RECORD LPEXCEPTION_RECORD;
//C       typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
alias PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
//C       typedef struct _OFSTRUCT {
//C         BYTE cBytes;
//C         BYTE fFixedDisk;
//C         WORD nErrCode;
//C         WORD Reserved1;
//C         WORD Reserved2;
//C         CHAR szPathName[128];
//C       } OFSTRUCT,*LPOFSTRUCT,*POFSTRUCT;
struct _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR [128]szPathName;
}
alias _OFSTRUCT OFSTRUCT;
alias _OFSTRUCT *LPOFSTRUCT;
alias _OFSTRUCT *POFSTRUCT;
//C       LONG  _InterlockedIncrement(LONG volatile *Addend);
LONG  _InterlockedIncrement(LONG *Addend);
//C       LONG  _InterlockedDecrement(LONG volatile *Addend);
LONG  _InterlockedDecrement(LONG *Addend);
//C       LONG  _InterlockedExchange(LONG volatile *Target,LONG Value);
LONG  _InterlockedExchange(LONG *Target, LONG Value);
//C       LONG  _InterlockedExchangeAdd(LONG volatile *Addend,LONG Value);
LONG  _InterlockedExchangeAdd(LONG *Addend, LONG Value);
//C       LONG  _InterlockedCompareExchange(LONG volatile *Destination,LONG ExChange,LONG Comperand);
LONG  _InterlockedCompareExchange(LONG *Destination, LONG ExChange, LONG Comperand);
//C       PVOID  _InterlockedCompareExchangePointer(PVOID volatile *Destination,PVOID Exchange,PVOID Comperand);
PVOID  _InterlockedCompareExchangePointer(PVOID *Destination, PVOID Exchange, PVOID Comperand);
//C       PVOID  _InterlockedExchangePointer(PVOID volatile *Target,PVOID Value);
PVOID  _InterlockedExchangePointer(PVOID *Target, PVOID Value);
//C       LONG64  _InterlockedAnd64(LONG64 volatile *Destination,LONG64 Value);
LONG64  _InterlockedAnd64(LONG64 *Destination, LONG64 Value);
//C       LONG64  _InterlockedOr64(LONG64 volatile *Destination,LONG64 Value);
LONG64  _InterlockedOr64(LONG64 *Destination, LONG64 Value);
//C       LONG64  _InterlockedXor64(LONG64 volatile *Destination,LONG64 Value);
LONG64  _InterlockedXor64(LONG64 *Destination, LONG64 Value);
//C       LONG64  _InterlockedIncrement64(LONG64 volatile *Addend);
LONG64  _InterlockedIncrement64(LONG64 *Addend);
//C       LONG64  _InterlockedDecrement64(LONG64 volatile *Addend);
LONG64  _InterlockedDecrement64(LONG64 *Addend);
//C       LONG64  _InterlockedExchange64(LONG64 volatile *Target,LONG64 Value);
LONG64  _InterlockedExchange64(LONG64 *Target, LONG64 Value);
//C       LONG64  _InterlockedExchangeAdd64(LONG64 volatile *Addend,LONG64 Value);
LONG64  _InterlockedExchangeAdd64(LONG64 *Addend, LONG64 Value);
//C       LONG64  _InterlockedCompareExchange64(LONG64 volatile *Destination,LONG64 ExChange,LONG64 Comperand);
LONG64  _InterlockedCompareExchange64(LONG64 *Destination, LONG64 ExChange, LONG64 Comperand);
//C        void InitializeSListHead(PSLIST_HEADER ListHead);
void  InitializeSListHead(PSLIST_HEADER ListHead);
//C        PSLIST_ENTRY InterlockedPopEntrySList(PSLIST_HEADER ListHead);
PSLIST_ENTRY  InterlockedPopEntrySList(PSLIST_HEADER ListHead);
//C        PSLIST_ENTRY InterlockedPushEntrySList(PSLIST_HEADER ListHead,PSLIST_ENTRY ListEntry);
PSLIST_ENTRY  InterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
//C        PSLIST_ENTRY InterlockedFlushSList(PSLIST_HEADER ListHead);
PSLIST_ENTRY  InterlockedFlushSList(PSLIST_HEADER ListHead);
//C        USHORT QueryDepthSList(PSLIST_HEADER ListHead);
USHORT  QueryDepthSList(PSLIST_HEADER ListHead);
//C        WINBOOL FreeResource(HGLOBAL hResData);
WINBOOL  FreeResource(HGLOBAL hResData);
//C        LPVOID LockResource(HGLOBAL hResData);
LPVOID  LockResource(HGLOBAL hResData);
//C       int WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,int nShowCmd);
extern (Windows):
//C       int wWinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPWSTR lpCmdLine,int nShowCmd);
//C        WINBOOL FreeLibrary(HMODULE hLibModule);
extern (System):
WINBOOL  FreeLibrary(HMODULE hLibModule);
//C         void FreeLibraryAndExitThread(HMODULE hLibModule,DWORD dwExitCode);
void  FreeLibraryAndExitThread(HMODULE hLibModule, DWORD dwExitCode);
//C        WINBOOL DisableThreadLibraryCalls(HMODULE hLibModule);
WINBOOL  DisableThreadLibraryCalls(HMODULE hLibModule);
//C        FARPROC GetProcAddress(HMODULE hModule,LPCSTR lpProcName);
FARPROC  GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
//C        DWORD GetVersion(void);
DWORD  GetVersion();
//C        HGLOBAL GlobalAlloc(UINT uFlags,SIZE_T dwBytes);
HGLOBAL  GlobalAlloc(UINT uFlags, SIZE_T dwBytes);
//C        HGLOBAL GlobalReAlloc(HGLOBAL hMem,SIZE_T dwBytes,UINT uFlags);
HGLOBAL  GlobalReAlloc(HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags);
//C        SIZE_T GlobalSize(HGLOBAL hMem);
SIZE_T  GlobalSize(HGLOBAL hMem);
//C        UINT GlobalFlags(HGLOBAL hMem);
UINT  GlobalFlags(HGLOBAL hMem);
//C        LPVOID GlobalLock(HGLOBAL hMem);
LPVOID  GlobalLock(HGLOBAL hMem);
//C        HGLOBAL GlobalHandle(LPCVOID pMem);
HGLOBAL  GlobalHandle(LPCVOID pMem);
//C        WINBOOL GlobalUnlock(HGLOBAL hMem);
WINBOOL  GlobalUnlock(HGLOBAL hMem);
//C        HGLOBAL GlobalFree(HGLOBAL hMem);
HGLOBAL  GlobalFree(HGLOBAL hMem);
//C        SIZE_T GlobalCompact(DWORD dwMinFree);
SIZE_T  GlobalCompact(DWORD dwMinFree);
//C        void GlobalFix(HGLOBAL hMem);
void  GlobalFix(HGLOBAL hMem);
//C        void GlobalUnfix(HGLOBAL hMem);
void  GlobalUnfix(HGLOBAL hMem);
//C        LPVOID GlobalWire(HGLOBAL hMem);
LPVOID  GlobalWire(HGLOBAL hMem);
//C        WINBOOL GlobalUnWire(HGLOBAL hMem);
WINBOOL  GlobalUnWire(HGLOBAL hMem);
//C        void GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer);
void  GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer);
//C       typedef struct _MEMORYSTATUSEX {
//C         DWORD dwLength;
//C         DWORD dwMemoryLoad;
//C         DWORDLONG ullTotalPhys;
//C         DWORDLONG ullAvailPhys;
//C         DWORDLONG ullTotalPageFile;
//C         DWORDLONG ullAvailPageFile;
//C         DWORDLONG ullTotalVirtual;
//C         DWORDLONG ullAvailVirtual;
//C         DWORDLONG ullAvailExtendedVirtual;
//C       } MEMORYSTATUSEX,*LPMEMORYSTATUSEX;
struct _MEMORYSTATUSEX
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
}
alias _MEMORYSTATUSEX MEMORYSTATUSEX;
alias _MEMORYSTATUSEX *LPMEMORYSTATUSEX;
//C        WINBOOL GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer);
WINBOOL  GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer);
//C        HLOCAL LocalAlloc(UINT uFlags,SIZE_T uBytes);
HLOCAL  LocalAlloc(UINT uFlags, SIZE_T uBytes);
//C        HLOCAL LocalReAlloc(HLOCAL hMem,SIZE_T uBytes,UINT uFlags);
HLOCAL  LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
//C        LPVOID LocalLock(HLOCAL hMem);
LPVOID  LocalLock(HLOCAL hMem);
//C        HLOCAL LocalHandle(LPCVOID pMem);
HLOCAL  LocalHandle(LPCVOID pMem);
//C        WINBOOL LocalUnlock(HLOCAL hMem);
WINBOOL  LocalUnlock(HLOCAL hMem);
//C        SIZE_T LocalSize(HLOCAL hMem);
SIZE_T  LocalSize(HLOCAL hMem);
//C        UINT LocalFlags(HLOCAL hMem);
UINT  LocalFlags(HLOCAL hMem);
//C        HLOCAL LocalFree(HLOCAL hMem);
HLOCAL  LocalFree(HLOCAL hMem);
//C        SIZE_T LocalShrink(HLOCAL hMem,UINT cbNewSize);
SIZE_T  LocalShrink(HLOCAL hMem, UINT cbNewSize);
//C        SIZE_T LocalCompact(UINT uMinFree);
SIZE_T  LocalCompact(UINT uMinFree);
//C        WINBOOL FlushInstructionCache(HANDLE hProcess,LPCVOID lpBaseAddress,SIZE_T dwSize);
WINBOOL  FlushInstructionCache(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize);
//C        LPVOID VirtualAlloc(LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect);
LPVOID  VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
//C        WINBOOL VirtualFree(LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType);
WINBOOL  VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
//C        WINBOOL VirtualProtect(LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect);
WINBOOL  VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
//C        SIZE_T VirtualQuery(LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,SIZE_T dwLength);
SIZE_T  VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
//C        LPVOID VirtualAllocEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect);
LPVOID  VirtualAllocEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
//C        UINT GetWriteWatch(DWORD dwFlags,PVOID lpBaseAddress,SIZE_T dwRegionSize,PVOID *lpAddresses,ULONG_PTR *lpdwCount,PULONG lpdwGranularity);
UINT  GetWriteWatch(DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, PULONG lpdwGranularity);
//C        UINT ResetWriteWatch(LPVOID lpBaseAddress,SIZE_T dwRegionSize);
UINT  ResetWriteWatch(LPVOID lpBaseAddress, SIZE_T dwRegionSize);
//C        SIZE_T GetLargePageMinimum(void);
SIZE_T  GetLargePageMinimum();
//C        UINT EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature,PVOID pFirmwareTableEnumBuffer,DWORD BufferSize);
UINT  EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize);
//C        UINT GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature,DWORD FirmwareTableID,PVOID pFirmwareTableBuffer,DWORD BufferSize);
UINT  GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize);
//C        WINBOOL VirtualFreeEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType);
WINBOOL  VirtualFreeEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
//C        WINBOOL VirtualProtectEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect);
WINBOOL  VirtualProtectEx(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
//C        SIZE_T VirtualQueryEx(HANDLE hProcess,LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,SIZE_T dwLength);
SIZE_T  VirtualQueryEx(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
//C        HANDLE HeapCreate(DWORD flOptions,SIZE_T dwInitialSize,SIZE_T dwMaximumSize);
HANDLE  HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
//C        WINBOOL HeapDestroy(HANDLE hHeap);
WINBOOL  HeapDestroy(HANDLE hHeap);
//C        LPVOID HeapAlloc(HANDLE hHeap,DWORD dwFlags,SIZE_T dwBytes);
LPVOID  HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
//C        LPVOID HeapReAlloc(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem,SIZE_T dwBytes);
LPVOID  HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes);
//C        WINBOOL HeapFree(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem);
WINBOOL  HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
//C        SIZE_T HeapSize(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem);
SIZE_T  HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
//C        WINBOOL HeapValidate(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem);
WINBOOL  HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
//C        SIZE_T HeapCompact(HANDLE hHeap,DWORD dwFlags);
SIZE_T  HeapCompact(HANDLE hHeap, DWORD dwFlags);
//C        HANDLE GetProcessHeap(void);
HANDLE  GetProcessHeap();
//C        DWORD GetProcessHeaps(DWORD NumberOfHeaps,PHANDLE ProcessHeaps);
DWORD  GetProcessHeaps(DWORD NumberOfHeaps, PHANDLE ProcessHeaps);
//C       typedef struct _PROCESS_HEAP_ENTRY {
//C         PVOID lpData;
//C         DWORD cbData;
//C         BYTE cbOverhead;
//C         BYTE iRegionIndex;
//C         WORD wFlags;
//C          union {
//C           struct {
//C      HANDLE hMem;
//C      DWORD dwReserved[3];
//C           } Block;
struct _N58
{
    HANDLE hMem;
    DWORD [3]dwReserved;
}
//C           struct {
//C      DWORD dwCommittedSize;
//C      DWORD dwUnCommittedSize;
//C      LPVOID lpFirstBlock;
//C      LPVOID lpLastBlock;
//C           } Region;
struct _N59
{
    DWORD dwCommittedSize;
    DWORD dwUnCommittedSize;
    LPVOID lpFirstBlock;
    LPVOID lpLastBlock;
}
//C         } ;
union _N57
{
    _N58 Block;
    _N59 Region;
}
//C       } PROCESS_HEAP_ENTRY,*LPPROCESS_HEAP_ENTRY,*PPROCESS_HEAP_ENTRY;
struct _PROCESS_HEAP_ENTRY
{
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    _N58 Block;
    _N59 Region;
}
alias _PROCESS_HEAP_ENTRY PROCESS_HEAP_ENTRY;
alias _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;
alias _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;
//C        WINBOOL HeapLock(HANDLE hHeap);
WINBOOL  HeapLock(HANDLE hHeap);
//C        WINBOOL HeapUnlock(HANDLE hHeap);
WINBOOL  HeapUnlock(HANDLE hHeap);
//C        WINBOOL HeapWalk(HANDLE hHeap,LPPROCESS_HEAP_ENTRY lpEntry);
WINBOOL  HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);
//C        WINBOOL HeapSetInformation(HANDLE HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength);
WINBOOL  HeapSetInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength);
//C        WINBOOL HeapQueryInformation(HANDLE HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength);
WINBOOL  HeapQueryInformation(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength);
//C        WINBOOL GetBinaryTypeA(LPCSTR lpApplicationName,LPDWORD lpBinaryType);
WINBOOL  GetBinaryTypeA(LPCSTR lpApplicationName, LPDWORD lpBinaryType);
//C        WINBOOL GetBinaryTypeW(LPCWSTR lpApplicationName,LPDWORD lpBinaryType);
WINBOOL  GetBinaryTypeW(LPCWSTR lpApplicationName, LPDWORD lpBinaryType);
//C        DWORD GetShortPathNameA(LPCSTR lpszLongPath,LPSTR lpszShortPath,DWORD cchBuffer);
DWORD  GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer);
//C        DWORD GetShortPathNameW(LPCWSTR lpszLongPath,LPWSTR lpszShortPath,DWORD cchBuffer);
DWORD  GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);
//C        DWORD GetLongPathNameA(LPCSTR lpszShortPath,LPSTR lpszLongPath,DWORD cchBuffer);
DWORD  GetLongPathNameA(LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer);
//C        DWORD GetLongPathNameW(LPCWSTR lpszShortPath,LPWSTR lpszLongPath,DWORD cchBuffer);
DWORD  GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer);
//C        WINBOOL GetProcessAffinityMask(HANDLE hProcess,PDWORD_PTR lpProcessAffinityMask,PDWORD_PTR lpSystemAffinityMask);
WINBOOL  GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask);
//C        WINBOOL SetProcessAffinityMask(HANDLE hProcess,DWORD_PTR dwProcessAffinityMask);
WINBOOL  SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask);
//C        WINBOOL GetProcessDEPPolicy (HANDLE hProcess,LPDWORD lpFlags,PBOOL lpPermanent);
WINBOOL  GetProcessDEPPolicy(HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent);
//C        WINBOOL SetProcessDEPPolicy (DWORD dwFlags);
WINBOOL  SetProcessDEPPolicy(DWORD dwFlags);
//C        WINBOOL GetProcessHandleCount(HANDLE hProcess,PDWORD pdwHandleCount);
WINBOOL  GetProcessHandleCount(HANDLE hProcess, PDWORD pdwHandleCount);
//C        WINBOOL GetProcessTimes(HANDLE hProcess,LPFILETIME lpCreationTime,LPFILETIME lpExitTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime);
WINBOOL  GetProcessTimes(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
//C        WINBOOL GetProcessIoCounters(HANDLE hProcess,PIO_COUNTERS lpIoCounters);
WINBOOL  GetProcessIoCounters(HANDLE hProcess, PIO_COUNTERS lpIoCounters);
//C        WINBOOL GetProcessWorkingSetSize(HANDLE hProcess,PSIZE_T lpMinimumWorkingSetSize,PSIZE_T lpMaximumWorkingSetSize);
WINBOOL  GetProcessWorkingSetSize(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize);
//C        WINBOOL GetProcessWorkingSetSizeEx(HANDLE hProcess,PSIZE_T lpMinimumWorkingSetSize,PSIZE_T lpMaximumWorkingSetSize,PDWORD Flags);
WINBOOL  GetProcessWorkingSetSizeEx(HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags);
//C        WINBOOL SetProcessWorkingSetSize(HANDLE hProcess,SIZE_T dwMinimumWorkingSetSize,SIZE_T dwMaximumWorkingSetSize);
WINBOOL  SetProcessWorkingSetSize(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize);
//C        WINBOOL SetProcessWorkingSetSizeEx(HANDLE hProcess,SIZE_T dwMinimumWorkingSetSize,SIZE_T dwMaximumWorkingSetSize,DWORD Flags);
WINBOOL  SetProcessWorkingSetSizeEx(HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags);
//C        HANDLE OpenProcess(DWORD dwDesiredAccess,WINBOOL bInheritHandle,DWORD dwProcessId);
HANDLE  OpenProcess(DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwProcessId);
//C        HANDLE GetCurrentProcess(void);
HANDLE  GetCurrentProcess();
//C        DWORD GetCurrentProcessId(void);
DWORD  GetCurrentProcessId();
//C         void ExitProcess(UINT uExitCode);
void  ExitProcess(UINT uExitCode);
//C        WINBOOL TerminateProcess(HANDLE hProcess,UINT uExitCode);
WINBOOL  TerminateProcess(HANDLE hProcess, UINT uExitCode);
//C        WINBOOL GetExitCodeProcess(HANDLE hProcess,LPDWORD lpExitCode);
WINBOOL  GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode);
//C        void FatalExit(int ExitCode);
void  FatalExit(int ExitCode);
//C        LPCH GetEnvironmentStrings(void);
LPCH  GetEnvironmentStrings();
//C        LPWCH GetEnvironmentStringsW(void);
LPWCH  GetEnvironmentStringsW();
//C        WINBOOL SetEnvironmentStringsA(LPCH NewEnvironment);
WINBOOL  SetEnvironmentStringsA(LPCH NewEnvironment);
//C        WINBOOL SetEnvironmentStringsW(LPWCH NewEnvironment);
WINBOOL  SetEnvironmentStringsW(LPWCH NewEnvironment);
//C        WINBOOL FreeEnvironmentStringsA(LPCH);
WINBOOL  FreeEnvironmentStringsA(LPCH );
//C        WINBOOL FreeEnvironmentStringsW(LPWCH);
WINBOOL  FreeEnvironmentStringsW(LPWCH );
//C        void RaiseException(DWORD dwExceptionCode,DWORD dwExceptionFlags,DWORD nNumberOfArguments,const ULONG_PTR *lpArguments);
void  RaiseException(DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, ULONG_PTR *lpArguments);
//C        LONG UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo);
LONG  UnhandledExceptionFilter(_EXCEPTION_POINTERS *ExceptionInfo);
//C       typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *ExceptionInfo);
alias LONG  function(_EXCEPTION_POINTERS *ExceptionInfo)PTOP_LEVEL_EXCEPTION_FILTER;
//C       typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
alias PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
//C        LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
LPTOP_LEVEL_EXCEPTION_FILTER  SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
//C        LPVOID CreateFiber(SIZE_T dwStackSize,LPFIBER_START_ROUTINE lpStartAddress,LPVOID lpParameter);
LPVOID  CreateFiber(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
//C        LPVOID CreateFiberEx(SIZE_T dwStackCommitSize,SIZE_T dwStackReserveSize,DWORD dwFlags,LPFIBER_START_ROUTINE lpStartAddress,LPVOID lpParameter);
LPVOID  CreateFiberEx(SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
//C        void DeleteFiber(LPVOID lpFiber);
void  DeleteFiber(LPVOID lpFiber);
//C        LPVOID ConvertThreadToFiber(LPVOID lpParameter);
LPVOID  ConvertThreadToFiber(LPVOID lpParameter);
//C        LPVOID ConvertThreadToFiberEx(LPVOID lpParameter,DWORD dwFlags);
LPVOID  ConvertThreadToFiberEx(LPVOID lpParameter, DWORD dwFlags);
//C        WINBOOL ConvertFiberToThread(void);
WINBOOL  ConvertFiberToThread();
//C        void SwitchToFiber(LPVOID lpFiber);
void  SwitchToFiber(LPVOID lpFiber);
//C        WINBOOL SwitchToThread(void);
WINBOOL  SwitchToThread();
//C        HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId);
HANDLE  CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
//C        HANDLE CreateRemoteThread(HANDLE hProcess,LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId);
HANDLE  CreateRemoteThread(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
//C        HANDLE GetCurrentThread(void);
HANDLE  GetCurrentThread();
//C        DWORD GetCurrentThreadId(void);
DWORD  GetCurrentThreadId();
//C        WINBOOL SetThreadStackGuarantee (PULONG StackSizeInBytes);
WINBOOL  SetThreadStackGuarantee(PULONG StackSizeInBytes);
//C        DWORD GetProcessIdOfThread(HANDLE Thread);
DWORD  GetProcessIdOfThread(HANDLE Thread);
//C        DWORD GetThreadId(HANDLE Thread);
DWORD  GetThreadId(HANDLE Thread);
//C        DWORD GetProcessId(HANDLE Process);
DWORD  GetProcessId(HANDLE Process);
//C        DWORD GetCurrentProcessorNumber(void);
DWORD  GetCurrentProcessorNumber();
//C        DWORD_PTR SetThreadAffinityMask(HANDLE hThread,DWORD_PTR dwThreadAffinityMask);
DWORD_PTR  SetThreadAffinityMask(HANDLE hThread, DWORD_PTR dwThreadAffinityMask);
//C        DWORD SetThreadIdealProcessor(HANDLE hThread,DWORD dwIdealProcessor);
DWORD  SetThreadIdealProcessor(HANDLE hThread, DWORD dwIdealProcessor);
//C        WINBOOL SetProcessPriorityBoost(HANDLE hProcess,WINBOOL bDisablePriorityBoost);
WINBOOL  SetProcessPriorityBoost(HANDLE hProcess, WINBOOL bDisablePriorityBoost);
//C        WINBOOL GetProcessPriorityBoost(HANDLE hProcess,PBOOL pDisablePriorityBoost);
WINBOOL  GetProcessPriorityBoost(HANDLE hProcess, PBOOL pDisablePriorityBoost);
//C        WINBOOL RequestWakeupLatency(LATENCY_TIME latency);
WINBOOL  RequestWakeupLatency(LATENCY_TIME latency);
//C        WINBOOL IsSystemResumeAutomatic(void);
WINBOOL  IsSystemResumeAutomatic();
//C        HANDLE OpenThread(DWORD dwDesiredAccess,WINBOOL bInheritHandle,DWORD dwThreadId);
HANDLE  OpenThread(DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwThreadId);
//C        WINBOOL SetThreadPriority(HANDLE hThread,int nPriority);
WINBOOL  SetThreadPriority(HANDLE hThread, int nPriority);
//C        WINBOOL SetThreadPriorityBoost(HANDLE hThread,WINBOOL bDisablePriorityBoost);
WINBOOL  SetThreadPriorityBoost(HANDLE hThread, WINBOOL bDisablePriorityBoost);
//C        WINBOOL GetThreadPriorityBoost(HANDLE hThread,PBOOL pDisablePriorityBoost);
WINBOOL  GetThreadPriorityBoost(HANDLE hThread, PBOOL pDisablePriorityBoost);
//C        int GetThreadPriority(HANDLE hThread);
int  GetThreadPriority(HANDLE hThread);
//C        WINBOOL GetThreadTimes(HANDLE hThread,LPFILETIME lpCreationTime,LPFILETIME lpExitTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime);
WINBOOL  GetThreadTimes(HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
//C        WINBOOL GetThreadIOPendingFlag(HANDLE hThread,PBOOL lpIOIsPending);
WINBOOL  GetThreadIOPendingFlag(HANDLE hThread, PBOOL lpIOIsPending);
//C         void ExitThread(DWORD dwExitCode);
void  ExitThread(DWORD dwExitCode);
//C        WINBOOL TerminateThread(HANDLE hThread,DWORD dwExitCode);
WINBOOL  TerminateThread(HANDLE hThread, DWORD dwExitCode);
//C        WINBOOL GetExitCodeThread(HANDLE hThread,LPDWORD lpExitCode);
WINBOOL  GetExitCodeThread(HANDLE hThread, LPDWORD lpExitCode);
//C        WINBOOL GetThreadSelectorEntry(HANDLE hThread,DWORD dwSelector,LPLDT_ENTRY lpSelectorEntry);
WINBOOL  GetThreadSelectorEntry(HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry);
//C        EXECUTION_STATE SetThreadExecutionState(EXECUTION_STATE esFlags);
EXECUTION_STATE  SetThreadExecutionState(EXECUTION_STATE esFlags);
//C        DWORD GetLastError(void);
DWORD  GetLastError();
//C        void SetLastError(DWORD dwErrCode);
void  SetLastError(DWORD dwErrCode);
//C        WINBOOL GetOverlappedResult(HANDLE hFile,LPOVERLAPPED lpOverlapped,LPDWORD lpNumberOfBytesTransferred,WINBOOL bWait);
WINBOOL  GetOverlappedResult(HANDLE hFile, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, WINBOOL bWait);
//C        HANDLE CreateIoCompletionPort(HANDLE FileHandle,HANDLE ExistingCompletionPort,ULONG_PTR CompletionKey,DWORD NumberOfConcurrentThreads);
HANDLE  CreateIoCompletionPort(HANDLE FileHandle, HANDLE ExistingCompletionPort, ULONG_PTR CompletionKey, DWORD NumberOfConcurrentThreads);
//C        WINBOOL GetQueuedCompletionStatus(HANDLE CompletionPort,LPDWORD lpNumberOfBytesTransferred,PULONG_PTR lpCompletionKey,LPOVERLAPPED *lpOverlapped,DWORD dwMilliseconds);
WINBOOL  GetQueuedCompletionStatus(HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, PULONG_PTR lpCompletionKey, LPOVERLAPPED *lpOverlapped, DWORD dwMilliseconds);
//C        WINBOOL PostQueuedCompletionStatus(HANDLE CompletionPort,DWORD dwNumberOfBytesTransferred,ULONG_PTR dwCompletionKey,LPOVERLAPPED lpOverlapped);
WINBOOL  PostQueuedCompletionStatus(HANDLE CompletionPort, DWORD dwNumberOfBytesTransferred, ULONG_PTR dwCompletionKey, LPOVERLAPPED lpOverlapped);
//C        UINT SetErrorMode(UINT uMode);
UINT  SetErrorMode(UINT uMode);
//C        WINBOOL ReadProcessMemory(HANDLE hProcess,LPCVOID lpBaseAddress,LPVOID lpBuffer,SIZE_T nSize,SIZE_T *lpNumberOfBytesRead);
WINBOOL  ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
//C        WINBOOL WriteProcessMemory(HANDLE hProcess,LPVOID lpBaseAddress,LPCVOID lpBuffer,SIZE_T nSize,SIZE_T *lpNumberOfBytesWritten);
WINBOOL  WriteProcessMemory(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
//C        WINBOOL GetThreadContext(HANDLE hThread,LPCONTEXT lpContext);
WINBOOL  GetThreadContext(HANDLE hThread, LPCONTEXT lpContext);
//C        WINBOOL SetThreadContext(HANDLE hThread,const CONTEXT *lpContext);
WINBOOL  SetThreadContext(HANDLE hThread, CONTEXT *lpContext);
//C        DWORD SuspendThread(HANDLE hThread);
DWORD  SuspendThread(HANDLE hThread);
//C        DWORD ResumeThread(HANDLE hThread);
DWORD  ResumeThread(HANDLE hThread);
//C       typedef void ( *PAPCFUNC)(ULONG_PTR dwParam);
alias void  function(ULONG_PTR dwParam)PAPCFUNC;
//C        DWORD QueueUserAPC(PAPCFUNC pfnAPC,HANDLE hThread,ULONG_PTR dwData);
DWORD  QueueUserAPC(PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData);
//C        WINBOOL IsDebuggerPresent(void);
WINBOOL  IsDebuggerPresent();
//C        WINBOOL CheckRemoteDebuggerPresent(HANDLE hProcess,PBOOL pbDebuggerPresent);
WINBOOL  CheckRemoteDebuggerPresent(HANDLE hProcess, PBOOL pbDebuggerPresent);
//C        void DebugBreak(void);
void  DebugBreak();
//C        WINBOOL WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent,DWORD dwMilliseconds);
WINBOOL  WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds);
//C        WINBOOL ContinueDebugEvent(DWORD dwProcessId,DWORD dwThreadId,DWORD dwContinueStatus);
WINBOOL  ContinueDebugEvent(DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus);
//C        WINBOOL DebugActiveProcess(DWORD dwProcessId);
WINBOOL  DebugActiveProcess(DWORD dwProcessId);
//C        WINBOOL DebugActiveProcessStop(DWORD dwProcessId);
WINBOOL  DebugActiveProcessStop(DWORD dwProcessId);
//C        WINBOOL DebugSetProcessKillOnExit(WINBOOL KillOnExit);
WINBOOL  DebugSetProcessKillOnExit(WINBOOL KillOnExit);
//C        WINBOOL DebugBreakProcess(HANDLE Process);
WINBOOL  DebugBreakProcess(HANDLE Process);
//C        void InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
void  InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
//C        void EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
void  EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
//C        void LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
void  LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
//C        WINBOOL InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount);
WINBOOL  InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
//C        DWORD SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount);
DWORD  SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount);
//C        WINBOOL TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
WINBOOL  TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
//C        void DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
void  DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
//C        WINBOOL SetEvent(HANDLE hEvent);
WINBOOL  SetEvent(HANDLE hEvent);
//C        WINBOOL ResetEvent(HANDLE hEvent);
WINBOOL  ResetEvent(HANDLE hEvent);
//C        WINBOOL PulseEvent(HANDLE hEvent);
WINBOOL  PulseEvent(HANDLE hEvent);
//C        WINBOOL ReleaseSemaphore(HANDLE hSemaphore,LONG lReleaseCount,LPLONG lpPreviousCount);
WINBOOL  ReleaseSemaphore(HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount);
//C        WINBOOL ReleaseMutex(HANDLE hMutex);
WINBOOL  ReleaseMutex(HANDLE hMutex);
//C        DWORD WaitForSingleObject(HANDLE hHandle,DWORD dwMilliseconds);
DWORD  WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);
//C        DWORD WaitForMultipleObjects(DWORD nCount,const HANDLE *lpHandles,WINBOOL bWaitAll,DWORD dwMilliseconds);
DWORD  WaitForMultipleObjects(DWORD nCount, HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds);
//C        void Sleep(DWORD dwMilliseconds);
void  Sleep(DWORD dwMilliseconds);
//C        HGLOBAL LoadResource(HMODULE hModule,HRSRC hResInfo);
HGLOBAL  LoadResource(HMODULE hModule, HRSRC hResInfo);
//C        DWORD SizeofResource(HMODULE hModule,HRSRC hResInfo);
DWORD  SizeofResource(HMODULE hModule, HRSRC hResInfo);
//C        ATOM GlobalDeleteAtom(ATOM nAtom);
ATOM  GlobalDeleteAtom(ATOM nAtom);
//C        WINBOOL InitAtomTable(DWORD nSize);
WINBOOL  InitAtomTable(DWORD nSize);
//C        ATOM DeleteAtom(ATOM nAtom);
ATOM  DeleteAtom(ATOM nAtom);
//C        UINT SetHandleCount(UINT uNumber);
UINT  SetHandleCount(UINT uNumber);
//C        DWORD GetLogicalDrives(void);
DWORD  GetLogicalDrives();
//C        WINBOOL LockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh);
WINBOOL  LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh);
//C        WINBOOL UnlockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh);
WINBOOL  UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh);
//C        WINBOOL LockFileEx(HANDLE hFile,DWORD dwFlags,DWORD dwReserved,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh,LPOVERLAPPED lpOverlapped);
WINBOOL  LockFileEx(HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped);
//C        WINBOOL UnlockFileEx(HANDLE hFile,DWORD dwReserved,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh,LPOVERLAPPED lpOverlapped);
WINBOOL  UnlockFileEx(HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped);
//C       typedef struct _BY_HANDLE_FILE_INFORMATION {
//C         DWORD dwFileAttributes;
//C         FILETIME ftCreationTime;
//C         FILETIME ftLastAccessTime;
//C         FILETIME ftLastWriteTime;
//C         DWORD dwVolumeSerialNumber;
//C         DWORD nFileSizeHigh;
//C         DWORD nFileSizeLow;
//C         DWORD nNumberOfLinks;
//C         DWORD nFileIndexHigh;
//C         DWORD nFileIndexLow;
//C       } BY_HANDLE_FILE_INFORMATION,*PBY_HANDLE_FILE_INFORMATION,*LPBY_HANDLE_FILE_INFORMATION;
struct _BY_HANDLE_FILE_INFORMATION
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
}
alias _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
alias _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;
alias _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;
//C        WINBOOL GetFileInformationByHandle(HANDLE hFile,LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
WINBOOL  GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
//C        DWORD GetFileType(HANDLE hFile);
DWORD  GetFileType(HANDLE hFile);
//C        DWORD GetFileSize(HANDLE hFile,LPDWORD lpFileSizeHigh);
DWORD  GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);
//C        WINBOOL GetFileSizeEx(HANDLE hFile,PLARGE_INTEGER lpFileSize);
WINBOOL  GetFileSizeEx(HANDLE hFile, PLARGE_INTEGER lpFileSize);
//C        HANDLE GetStdHandle(DWORD nStdHandle);
HANDLE  GetStdHandle(DWORD nStdHandle);
//C        WINBOOL SetStdHandle(DWORD nStdHandle,HANDLE hHandle);
WINBOOL  SetStdHandle(DWORD nStdHandle, HANDLE hHandle);
//C        WINBOOL WriteFile(HANDLE hFile,LPCVOID lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped);
WINBOOL  WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
//C        WINBOOL ReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped);
WINBOOL  ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
//C        WINBOOL FlushFileBuffers(HANDLE hFile);
WINBOOL  FlushFileBuffers(HANDLE hFile);
//C        WINBOOL DeviceIoControl(HANDLE hDevice,DWORD dwIoControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped);
WINBOOL  DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
//C        WINBOOL RequestDeviceWakeup(HANDLE hDevice);
WINBOOL  RequestDeviceWakeup(HANDLE hDevice);
//C        WINBOOL CancelDeviceWakeupRequest(HANDLE hDevice);
WINBOOL  CancelDeviceWakeupRequest(HANDLE hDevice);
//C        WINBOOL GetDevicePowerState(HANDLE hDevice,WINBOOL *pfOn);
WINBOOL  GetDevicePowerState(HANDLE hDevice, WINBOOL *pfOn);
//C        WINBOOL SetMessageWaitingIndicator(HANDLE hMsgIndicator,ULONG ulMsgCount);
WINBOOL  SetMessageWaitingIndicator(HANDLE hMsgIndicator, ULONG ulMsgCount);
//C        WINBOOL SetEndOfFile(HANDLE hFile);
WINBOOL  SetEndOfFile(HANDLE hFile);
//C        DWORD SetFilePointer(HANDLE hFile,LONG lDistanceToMove,PLONG lpDistanceToMoveHigh,DWORD dwMoveMethod);
DWORD  SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
//C        WINBOOL SetFilePointerEx(HANDLE hFile,LARGE_INTEGER liDistanceToMove,PLARGE_INTEGER lpNewFilePointer,DWORD dwMoveMethod);
WINBOOL  SetFilePointerEx(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod);
//C        WINBOOL FindClose(HANDLE hFindFile);
WINBOOL  FindClose(HANDLE hFindFile);
//C        WINBOOL GetFileTime(HANDLE hFile,LPFILETIME lpCreationTime,LPFILETIME lpLastAccessTime,LPFILETIME lpLastWriteTime);
WINBOOL  GetFileTime(HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime);
//C        WINBOOL SetFileTime(HANDLE hFile,const FILETIME *lpCreationTime,const FILETIME *lpLastAccessTime,const FILETIME *lpLastWriteTime);
WINBOOL  SetFileTime(HANDLE hFile, FILETIME *lpCreationTime, FILETIME *lpLastAccessTime, FILETIME *lpLastWriteTime);
//C        WINBOOL SetFileValidData(HANDLE hFile,LONGLONG ValidDataLength);
WINBOOL  SetFileValidData(HANDLE hFile, LONGLONG ValidDataLength);
//C        WINBOOL SetFileShortNameA(HANDLE hFile,LPCSTR lpShortName);
WINBOOL  SetFileShortNameA(HANDLE hFile, LPCSTR lpShortName);
//C        WINBOOL SetFileShortNameW(HANDLE hFile,LPCWSTR lpShortName);
WINBOOL  SetFileShortNameW(HANDLE hFile, LPCWSTR lpShortName);
//C        WINBOOL CloseHandle(HANDLE hObject);
WINBOOL  CloseHandle(HANDLE hObject);
//C        WINBOOL DuplicateHandle(HANDLE hSourceProcessHandle,HANDLE hSourceHandle,HANDLE hTargetProcessHandle,LPHANDLE lpTargetHandle,DWORD dwDesiredAccess,WINBOOL bInheritHandle,DWORD dwOptions);
WINBOOL  DuplicateHandle(HANDLE hSourceProcessHandle, HANDLE hSourceHandle, HANDLE hTargetProcessHandle, LPHANDLE lpTargetHandle, DWORD dwDesiredAccess, WINBOOL bInheritHandle, DWORD dwOptions);
//C        WINBOOL GetHandleInformation(HANDLE hObject,LPDWORD lpdwFlags);
WINBOOL  GetHandleInformation(HANDLE hObject, LPDWORD lpdwFlags);
//C        WINBOOL SetHandleInformation(HANDLE hObject,DWORD dwMask,DWORD dwFlags);
WINBOOL  SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags);
//C        DWORD LoadModule(LPCSTR lpModuleName,LPVOID lpParameterBlock);
DWORD  LoadModule(LPCSTR lpModuleName, LPVOID lpParameterBlock);
//C        UINT WinExec(LPCSTR lpCmdLine,UINT uCmdShow);
UINT  WinExec(LPCSTR lpCmdLine, UINT uCmdShow);
//C        WINBOOL ClearCommBreak(HANDLE hFile);
WINBOOL  ClearCommBreak(HANDLE hFile);
//C        WINBOOL ClearCommError(HANDLE hFile,LPDWORD lpErrors,LPCOMSTAT lpStat);
WINBOOL  ClearCommError(HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat);
//C        WINBOOL SetupComm(HANDLE hFile,DWORD dwInQueue,DWORD dwOutQueue);
WINBOOL  SetupComm(HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue);
//C        WINBOOL EscapeCommFunction(HANDLE hFile,DWORD dwFunc);
WINBOOL  EscapeCommFunction(HANDLE hFile, DWORD dwFunc);
//C        WINBOOL GetCommConfig(HANDLE hCommDev,LPCOMMCONFIG lpCC,LPDWORD lpdwSize);
WINBOOL  GetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
//C        WINBOOL GetCommMask(HANDLE hFile,LPDWORD lpEvtMask);
WINBOOL  GetCommMask(HANDLE hFile, LPDWORD lpEvtMask);
//C        WINBOOL GetCommProperties(HANDLE hFile,LPCOMMPROP lpCommProp);
WINBOOL  GetCommProperties(HANDLE hFile, LPCOMMPROP lpCommProp);
//C        WINBOOL GetCommModemStatus(HANDLE hFile,LPDWORD lpModemStat);
WINBOOL  GetCommModemStatus(HANDLE hFile, LPDWORD lpModemStat);
//C        WINBOOL GetCommState(HANDLE hFile,LPDCB lpDCB);
WINBOOL  GetCommState(HANDLE hFile, LPDCB lpDCB);
//C        WINBOOL GetCommTimeouts(HANDLE hFile,LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL  GetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
//C        WINBOOL PurgeComm(HANDLE hFile,DWORD dwFlags);
WINBOOL  PurgeComm(HANDLE hFile, DWORD dwFlags);
//C        WINBOOL SetCommBreak(HANDLE hFile);
WINBOOL  SetCommBreak(HANDLE hFile);
//C        WINBOOL SetCommConfig(HANDLE hCommDev,LPCOMMCONFIG lpCC,DWORD dwSize);
WINBOOL  SetCommConfig(HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize);
//C        WINBOOL SetCommMask(HANDLE hFile,DWORD dwEvtMask);
WINBOOL  SetCommMask(HANDLE hFile, DWORD dwEvtMask);
//C        WINBOOL SetCommState(HANDLE hFile,LPDCB lpDCB);
WINBOOL  SetCommState(HANDLE hFile, LPDCB lpDCB);
//C        WINBOOL SetCommTimeouts(HANDLE hFile,LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL  SetCommTimeouts(HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts);
//C        WINBOOL TransmitCommChar(HANDLE hFile,char cChar);
WINBOOL  TransmitCommChar(HANDLE hFile, char cChar);
//C        WINBOOL WaitCommEvent(HANDLE hFile,LPDWORD lpEvtMask,LPOVERLAPPED lpOverlapped);
WINBOOL  WaitCommEvent(HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped);
//C        DWORD SetTapePosition(HANDLE hDevice,DWORD dwPositionMethod,DWORD dwPartition,DWORD dwOffsetLow,DWORD dwOffsetHigh,WINBOOL bImmediate);
DWORD  SetTapePosition(HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, WINBOOL bImmediate);
//C        DWORD GetTapePosition(HANDLE hDevice,DWORD dwPositionType,LPDWORD lpdwPartition,LPDWORD lpdwOffsetLow,LPDWORD lpdwOffsetHigh);
DWORD  GetTapePosition(HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh);
//C        DWORD PrepareTape(HANDLE hDevice,DWORD dwOperation,WINBOOL bImmediate);
DWORD  PrepareTape(HANDLE hDevice, DWORD dwOperation, WINBOOL bImmediate);
//C        DWORD EraseTape(HANDLE hDevice,DWORD dwEraseType,WINBOOL bImmediate);
DWORD  EraseTape(HANDLE hDevice, DWORD dwEraseType, WINBOOL bImmediate);
//C        DWORD CreateTapePartition(HANDLE hDevice,DWORD dwPartitionMethod,DWORD dwCount,DWORD dwSize);
DWORD  CreateTapePartition(HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize);
//C        DWORD WriteTapemark(HANDLE hDevice,DWORD dwTapemarkType,DWORD dwTapemarkCount,WINBOOL bImmediate);
DWORD  WriteTapemark(HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, WINBOOL bImmediate);
//C        DWORD GetTapeStatus(HANDLE hDevice);
DWORD  GetTapeStatus(HANDLE hDevice);
//C        DWORD GetTapeParameters(HANDLE hDevice,DWORD dwOperation,LPDWORD lpdwSize,LPVOID lpTapeInformation);
DWORD  GetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation);
//C        DWORD SetTapeParameters(HANDLE hDevice,DWORD dwOperation,LPVOID lpTapeInformation);
DWORD  SetTapeParameters(HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation);
//C        WINBOOL Beep(DWORD dwFreq,DWORD dwDuration);
WINBOOL  Beep(DWORD dwFreq, DWORD dwDuration);
//C        int MulDiv(int nNumber,int nNumerator,int nDenominator);
int  MulDiv(int nNumber, int nNumerator, int nDenominator);
//C        void GetSystemTime(LPSYSTEMTIME lpSystemTime);
void  GetSystemTime(LPSYSTEMTIME lpSystemTime);
//C        void GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
void  GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
//C        WINBOOL SetSystemTime(const SYSTEMTIME *lpSystemTime);
WINBOOL  SetSystemTime(SYSTEMTIME *lpSystemTime);
//C        void GetLocalTime(LPSYSTEMTIME lpSystemTime);
void  GetLocalTime(LPSYSTEMTIME lpSystemTime);
//C        WINBOOL SetLocalTime(const SYSTEMTIME *lpSystemTime);
WINBOOL  SetLocalTime(SYSTEMTIME *lpSystemTime);
//C        void GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
void  GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
//C        WINBOOL SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize,SIZE_T MaximumFileCacheSize,DWORD Flags);
WINBOOL  SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags);
//C        WINBOOL GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize,PSIZE_T lpMaximumFileCacheSize,PDWORD lpFlags);
WINBOOL  GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags);
//C        WINBOOL GetSystemRegistryQuota(PDWORD pdwQuotaAllowed,PDWORD pdwQuotaUsed);
WINBOOL  GetSystemRegistryQuota(PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed);
//C       WINBOOL GetSystemTimes(LPFILETIME lpIdleTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime);
WINBOOL  GetSystemTimes(LPFILETIME lpIdleTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime);
//C        void GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);
void  GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);
//C        WINBOOL IsProcessorFeaturePresent(DWORD ProcessorFeature);
WINBOOL  IsProcessorFeaturePresent(DWORD ProcessorFeature);
//C       typedef struct _TIME_ZONE_INFORMATION {
//C         LONG Bias;
//C         WCHAR StandardName[32];
//C         SYSTEMTIME StandardDate;
//C         LONG StandardBias;
//C         WCHAR DaylightName[32];
//C         SYSTEMTIME DaylightDate;
//C         LONG DaylightBias;
//C       } TIME_ZONE_INFORMATION,*PTIME_ZONE_INFORMATION,*LPTIME_ZONE_INFORMATION;
struct _TIME_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR [32]StandardName;
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR [32]DaylightName;
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
}
alias _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
alias _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;
alias _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;
//C        WINBOOL SystemTimeToTzSpecificLocalTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation,LPSYSTEMTIME lpUniversalTime,LPSYSTEMTIME lpLocalTime);
WINBOOL  SystemTimeToTzSpecificLocalTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation, LPSYSTEMTIME lpUniversalTime, LPSYSTEMTIME lpLocalTime);
//C        WINBOOL TzSpecificLocalTimeToSystemTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation,LPSYSTEMTIME lpLocalTime,LPSYSTEMTIME lpUniversalTime);
WINBOOL  TzSpecificLocalTimeToSystemTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation, LPSYSTEMTIME lpLocalTime, LPSYSTEMTIME lpUniversalTime);
//C        DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
DWORD  GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
//C        WINBOOL SetTimeZoneInformation(const TIME_ZONE_INFORMATION *lpTimeZoneInformation);
WINBOOL  SetTimeZoneInformation(TIME_ZONE_INFORMATION *lpTimeZoneInformation);
//C        WINBOOL SystemTimeToFileTime(const SYSTEMTIME *lpSystemTime,LPFILETIME lpFileTime);
WINBOOL  SystemTimeToFileTime(SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
//C        WINBOOL FileTimeToLocalFileTime(const FILETIME *lpFileTime,LPFILETIME lpLocalFileTime);
WINBOOL  FileTimeToLocalFileTime(FILETIME *lpFileTime, LPFILETIME lpLocalFileTime);
//C        WINBOOL LocalFileTimeToFileTime(const FILETIME *lpLocalFileTime,LPFILETIME lpFileTime);
WINBOOL  LocalFileTimeToFileTime(FILETIME *lpLocalFileTime, LPFILETIME lpFileTime);
//C        WINBOOL FileTimeToSystemTime(const FILETIME *lpFileTime,LPSYSTEMTIME lpSystemTime);
WINBOOL  FileTimeToSystemTime(FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime);
//C        LONG CompareFileTime(const FILETIME *lpFileTime1,const FILETIME *lpFileTime2);
LONG  CompareFileTime(FILETIME *lpFileTime1, FILETIME *lpFileTime2);
//C        WINBOOL FileTimeToDosDateTime(const FILETIME *lpFileTime,LPWORD lpFatDate,LPWORD lpFatTime);
WINBOOL  FileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime);
//C        WINBOOL DosDateTimeToFileTime(WORD wFatDate,WORD wFatTime,LPFILETIME lpFileTime);
WINBOOL  DosDateTimeToFileTime(WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime);
//C        DWORD GetTickCount(void);
DWORD  GetTickCount();
//C        WINBOOL SetSystemTimeAdjustment(DWORD dwTimeAdjustment,WINBOOL bTimeAdjustmentDisabled);
WINBOOL  SetSystemTimeAdjustment(DWORD dwTimeAdjustment, WINBOOL bTimeAdjustmentDisabled);
//C        WINBOOL GetSystemTimeAdjustment(PDWORD lpTimeAdjustment,PDWORD lpTimeIncrement,PBOOL lpTimeAdjustmentDisabled);
WINBOOL  GetSystemTimeAdjustment(PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled);
//C        DWORD FormatMessageA(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPSTR lpBuffer,DWORD nSize,va_list *Arguments);
DWORD  FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
//C        DWORD FormatMessageW(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPWSTR lpBuffer,DWORD nSize,va_list *Arguments);
DWORD  FormatMessageW(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments);
//C        WINBOOL CreatePipe(PHANDLE hReadPipe,PHANDLE hWritePipe,LPSECURITY_ATTRIBUTES lpPipeAttributes,DWORD nSize);
WINBOOL  CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
//C        WINBOOL ConnectNamedPipe(HANDLE hNamedPipe,LPOVERLAPPED lpOverlapped);
WINBOOL  ConnectNamedPipe(HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped);
//C        WINBOOL DisconnectNamedPipe(HANDLE hNamedPipe);
WINBOOL  DisconnectNamedPipe(HANDLE hNamedPipe);
//C        WINBOOL SetNamedPipeHandleState(HANDLE hNamedPipe,LPDWORD lpMode,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout);
WINBOOL  SetNamedPipeHandleState(HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout);
//C        WINBOOL GetNamedPipeInfo(HANDLE hNamedPipe,LPDWORD lpFlags,LPDWORD lpOutBufferSize,LPDWORD lpInBufferSize,LPDWORD lpMaxInstances);
WINBOOL  GetNamedPipeInfo(HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances);
//C        WINBOOL PeekNamedPipe(HANDLE hNamedPipe,LPVOID lpBuffer,DWORD nBufferSize,LPDWORD lpBytesRead,LPDWORD lpTotalBytesAvail,LPDWORD lpBytesLeftThisMessage);
WINBOOL  PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage);
//C        WINBOOL TransactNamedPipe(HANDLE hNamedPipe,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,LPOVERLAPPED lpOverlapped);
WINBOOL  TransactNamedPipe(HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped);
//C        HANDLE CreateMailslotA(LPCSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE  CreateMailslotA(LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        HANDLE CreateMailslotW(LPCWSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE  CreateMailslotW(LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL GetMailslotInfo(HANDLE hMailslot,LPDWORD lpMaxMessageSize,LPDWORD lpNextSize,LPDWORD lpMessageCount,LPDWORD lpReadTimeout);
WINBOOL  GetMailslotInfo(HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout);
//C        WINBOOL SetMailslotInfo(HANDLE hMailslot,DWORD lReadTimeout);
WINBOOL  SetMailslotInfo(HANDLE hMailslot, DWORD lReadTimeout);
//C        LPVOID MapViewOfFile(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap);
LPVOID  MapViewOfFile(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap);
//C        WINBOOL FlushViewOfFile(LPCVOID lpBaseAddress,SIZE_T dwNumberOfBytesToFlush);
WINBOOL  FlushViewOfFile(LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush);
//C        WINBOOL UnmapViewOfFile(LPCVOID lpBaseAddress);
WINBOOL  UnmapViewOfFile(LPCVOID lpBaseAddress);
//C        WINBOOL EncryptFileA(LPCSTR lpFileName);
WINBOOL  EncryptFileA(LPCSTR lpFileName);
//C        WINBOOL EncryptFileW(LPCWSTR lpFileName);
WINBOOL  EncryptFileW(LPCWSTR lpFileName);
//C        WINBOOL DecryptFileA(LPCSTR lpFileName,DWORD dwReserved);
WINBOOL  DecryptFileA(LPCSTR lpFileName, DWORD dwReserved);
//C        WINBOOL DecryptFileW(LPCWSTR lpFileName,DWORD dwReserved);
WINBOOL  DecryptFileW(LPCWSTR lpFileName, DWORD dwReserved);
//C        WINBOOL FileEncryptionStatusA(LPCSTR lpFileName,LPDWORD lpStatus);
WINBOOL  FileEncryptionStatusA(LPCSTR lpFileName, LPDWORD lpStatus);
//C        WINBOOL FileEncryptionStatusW(LPCWSTR lpFileName,LPDWORD lpStatus);
WINBOOL  FileEncryptionStatusW(LPCWSTR lpFileName, LPDWORD lpStatus);
//C       typedef DWORD ( *PFE_EXPORT_FUNC)(PBYTE pbData,PVOID pvCallbackContext,ULONG ulLength);
alias DWORD  function(PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength)PFE_EXPORT_FUNC;
//C       typedef DWORD ( *PFE_IMPORT_FUNC)(PBYTE pbData,PVOID pvCallbackContext,PULONG ulLength);
alias DWORD  function(PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength)PFE_IMPORT_FUNC;
//C        DWORD OpenEncryptedFileRawA(LPCSTR lpFileName,ULONG ulFlags,PVOID *pvContext);
DWORD  OpenEncryptedFileRawA(LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
//C        DWORD OpenEncryptedFileRawW(LPCWSTR lpFileName,ULONG ulFlags,PVOID *pvContext);
DWORD  OpenEncryptedFileRawW(LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext);
//C        DWORD ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback,PVOID pvCallbackContext,PVOID pvContext);
DWORD  ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext);
//C        DWORD WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback,PVOID pvCallbackContext,PVOID pvContext);
DWORD  WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext);
//C        void CloseEncryptedFileRaw(PVOID pvContext);
void  CloseEncryptedFileRaw(PVOID pvContext);
//C        int lstrcmpA(LPCSTR lpString1,LPCSTR lpString2);
int  lstrcmpA(LPCSTR lpString1, LPCSTR lpString2);
//C        int lstrcmpW(LPCWSTR lpString1,LPCWSTR lpString2);
int  lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2);
//C        int lstrcmpiA(LPCSTR lpString1,LPCSTR lpString2);
int  lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2);
//C        int lstrcmpiW(LPCWSTR lpString1,LPCWSTR lpString2);
int  lstrcmpiW(LPCWSTR lpString1, LPCWSTR lpString2);
//C        LPSTR lstrcpynA(LPSTR lpString1,LPCSTR lpString2,int iMaxLength);
LPSTR  lstrcpynA(LPSTR lpString1, LPCSTR lpString2, int iMaxLength);
//C        LPWSTR lstrcpynW(LPWSTR lpString1,LPCWSTR lpString2,int iMaxLength);
LPWSTR  lstrcpynW(LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength);
//C        LPSTR lstrcpyA(LPSTR lpString1,LPCSTR lpString2);
LPSTR  lstrcpyA(LPSTR lpString1, LPCSTR lpString2);
//C        LPWSTR lstrcpyW(LPWSTR lpString1,LPCWSTR lpString2);
LPWSTR  lstrcpyW(LPWSTR lpString1, LPCWSTR lpString2);
//C        LPSTR lstrcatA(LPSTR lpString1,LPCSTR lpString2);
LPSTR  lstrcatA(LPSTR lpString1, LPCSTR lpString2);
//C        LPWSTR lstrcatW(LPWSTR lpString1,LPCWSTR lpString2);
LPWSTR  lstrcatW(LPWSTR lpString1, LPCWSTR lpString2);
//C        int lstrlenA(LPCSTR lpString);
int  lstrlenA(LPCSTR lpString);
//C        int lstrlenW(LPCWSTR lpString);
int  lstrlenW(LPCWSTR lpString);
//C        HFILE OpenFile(LPCSTR lpFileName,LPOFSTRUCT lpReOpenBuff,UINT uStyle);
HFILE  OpenFile(LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle);
//C        HFILE _lopen(LPCSTR lpPathName,int iReadWrite);
HFILE  _lopen(LPCSTR lpPathName, int iReadWrite);
//C        HFILE _lcreat(LPCSTR lpPathName,int iAttribute);
HFILE  _lcreat(LPCSTR lpPathName, int iAttribute);
//C        UINT _lread(HFILE hFile,LPVOID lpBuffer,UINT uBytes);
UINT  _lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes);
//C        UINT _lwrite(HFILE hFile,LPCCH lpBuffer,UINT uBytes);
UINT  _lwrite(HFILE hFile, LPCCH lpBuffer, UINT uBytes);
//C        long _hread(HFILE hFile,LPVOID lpBuffer,long lBytes);
int  _hread(HFILE hFile, LPVOID lpBuffer, int lBytes);
//C        long _hwrite(HFILE hFile,LPCCH lpBuffer,long lBytes);
int  _hwrite(HFILE hFile, LPCCH lpBuffer, int lBytes);
//C        HFILE _lclose(HFILE hFile);
HFILE  _lclose(HFILE hFile);
//C        LONG _llseek(HFILE hFile,LONG lOffset,int iOrigin);
LONG  _llseek(HFILE hFile, LONG lOffset, int iOrigin);
//C        WINBOOL IsTextUnicode(const void *lpv,int iSize,LPINT lpiResult);
WINBOOL  IsTextUnicode(void *lpv, int iSize, LPINT lpiResult);
//C        DWORD FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback);
DWORD  FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback);
//C        PVOID FlsGetValue(DWORD dwFlsIndex);
PVOID  FlsGetValue(DWORD dwFlsIndex);
//C        WINBOOL FlsSetValue(DWORD dwFlsIndex,PVOID lpFlsData);
WINBOOL  FlsSetValue(DWORD dwFlsIndex, PVOID lpFlsData);
//C        WINBOOL FlsFree(DWORD dwFlsIndex);
WINBOOL  FlsFree(DWORD dwFlsIndex);
//C        DWORD TlsAlloc(void);
DWORD  TlsAlloc();
//C        LPVOID TlsGetValue(DWORD dwTlsIndex);
LPVOID  TlsGetValue(DWORD dwTlsIndex);
//C        WINBOOL TlsSetValue(DWORD dwTlsIndex,LPVOID lpTlsValue);
WINBOOL  TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue);
//C        WINBOOL TlsFree(DWORD dwTlsIndex);
WINBOOL  TlsFree(DWORD dwTlsIndex);
//C       typedef void ( *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwErrorCode,DWORD dwNumberOfBytesTransfered,LPOVERLAPPED lpOverlapped);
alias void  function(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped)LPOVERLAPPED_COMPLETION_ROUTINE;
//C        DWORD SleepEx(DWORD dwMilliseconds,WINBOOL bAlertable);
DWORD  SleepEx(DWORD dwMilliseconds, WINBOOL bAlertable);
//C        DWORD WaitForSingleObjectEx(HANDLE hHandle,DWORD dwMilliseconds,WINBOOL bAlertable);
DWORD  WaitForSingleObjectEx(HANDLE hHandle, DWORD dwMilliseconds, WINBOOL bAlertable);
//C        DWORD WaitForMultipleObjectsEx(DWORD nCount,const HANDLE *lpHandles,WINBOOL bWaitAll,DWORD dwMilliseconds,WINBOOL bAlertable);
DWORD  WaitForMultipleObjectsEx(DWORD nCount, HANDLE *lpHandles, WINBOOL bWaitAll, DWORD dwMilliseconds, WINBOOL bAlertable);
//C        DWORD SignalObjectAndWait(HANDLE hObjectToSignal,HANDLE hObjectToWaitOn,DWORD dwMilliseconds,WINBOOL bAlertable);
DWORD  SignalObjectAndWait(HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, WINBOOL bAlertable);
//C        WINBOOL ReadFileEx(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
WINBOOL  ReadFileEx(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
//C        WINBOOL WriteFileEx(HANDLE hFile,LPCVOID lpBuffer,DWORD nNumberOfBytesToWrite,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
WINBOOL  WriteFileEx(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
//C        WINBOOL BackupRead(HANDLE hFile,LPBYTE lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,WINBOOL bAbort,WINBOOL bProcessSecurity,LPVOID *lpContext);
WINBOOL  BackupRead(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
//C        WINBOOL BackupSeek(HANDLE hFile,DWORD dwLowBytesToSeek,DWORD dwHighBytesToSeek,LPDWORD lpdwLowByteSeeked,LPDWORD lpdwHighByteSeeked,LPVOID *lpContext);
WINBOOL  BackupSeek(HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext);
//C        WINBOOL BackupWrite(HANDLE hFile,LPBYTE lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,WINBOOL bAbort,WINBOOL bProcessSecurity,LPVOID *lpContext);
WINBOOL  BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, WINBOOL bAbort, WINBOOL bProcessSecurity, LPVOID *lpContext);
//C       typedef struct _WIN32_STREAM_ID {
//C         DWORD dwStreamId;
//C         DWORD dwStreamAttributes;
//C         LARGE_INTEGER Size;
//C         DWORD dwStreamNameSize;
//C         WCHAR cStreamName[1];
//C       } WIN32_STREAM_ID,*LPWIN32_STREAM_ID;
struct _WIN32_STREAM_ID
{
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR [1]cStreamName;
}
alias _WIN32_STREAM_ID WIN32_STREAM_ID;
alias _WIN32_STREAM_ID *LPWIN32_STREAM_ID;
//C        WINBOOL ReadFileScatter(HANDLE hFile,FILE_SEGMENT_ELEMENT aSegmentArray[],DWORD nNumberOfBytesToRead,LPDWORD lpReserved,LPOVERLAPPED lpOverlapped);
WINBOOL  ReadFileScatter(HANDLE hFile, FILE_SEGMENT_ELEMENT *aSegmentArray, DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
//C        WINBOOL WriteFileGather(HANDLE hFile,FILE_SEGMENT_ELEMENT aSegmentArray[],DWORD nNumberOfBytesToWrite,LPDWORD lpReserved,LPOVERLAPPED lpOverlapped);
WINBOOL  WriteFileGather(HANDLE hFile, FILE_SEGMENT_ELEMENT *aSegmentArray, DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped);
//C       typedef struct _STARTUPINFOA {
//C         DWORD cb;
//C         LPSTR lpReserved;
//C         LPSTR lpDesktop;
//C         LPSTR lpTitle;
//C         DWORD dwX;
//C         DWORD dwY;
//C         DWORD dwXSize;
//C         DWORD dwYSize;
//C         DWORD dwXCountChars;
//C         DWORD dwYCountChars;
//C         DWORD dwFillAttribute;
//C         DWORD dwFlags;
//C         WORD wShowWindow;
//C         WORD cbReserved2;
//C         LPBYTE lpReserved2;
//C         HANDLE hStdInput;
//C         HANDLE hStdOutput;
//C         HANDLE hStdError;
//C       } STARTUPINFOA,*LPSTARTUPINFOA;
struct _STARTUPINFOA
{
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
}
alias _STARTUPINFOA STARTUPINFOA;
alias _STARTUPINFOA *LPSTARTUPINFOA;
//C       typedef struct _STARTUPINFOW {
//C         DWORD cb;
//C         LPWSTR lpReserved;
//C         LPWSTR lpDesktop;
//C         LPWSTR lpTitle;
//C         DWORD dwX;
//C         DWORD dwY;
//C         DWORD dwXSize;
//C         DWORD dwYSize;
//C         DWORD dwXCountChars;
//C         DWORD dwYCountChars;
//C         DWORD dwFillAttribute;
//C         DWORD dwFlags;
//C         WORD wShowWindow;
//C         WORD cbReserved2;
//C         LPBYTE lpReserved2;
//C         HANDLE hStdInput;
//C         HANDLE hStdOutput;
//C         HANDLE hStdError;
//C       } STARTUPINFOW,*LPSTARTUPINFOW;
struct _STARTUPINFOW
{
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
}
alias _STARTUPINFOW STARTUPINFOW;
alias _STARTUPINFOW *LPSTARTUPINFOW;
//C       typedef STARTUPINFOA STARTUPINFO;
alias STARTUPINFOA STARTUPINFO;
//C       typedef LPSTARTUPINFOA LPSTARTUPINFO;
alias LPSTARTUPINFOA LPSTARTUPINFO;
//C       typedef struct _WIN32_FIND_DATAA {
//C         DWORD dwFileAttributes;
//C         FILETIME ftCreationTime;
//C         FILETIME ftLastAccessTime;
//C         FILETIME ftLastWriteTime;
//C         DWORD nFileSizeHigh;
//C         DWORD nFileSizeLow;
//C         DWORD dwReserved0;
//C         DWORD dwReserved1;
//C         CHAR cFileName[260];
//C         CHAR cAlternateFileName[14];
//C       } WIN32_FIND_DATAA,*PWIN32_FIND_DATAA,*LPWIN32_FIND_DATAA;
struct _WIN32_FIND_DATAA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR [260]cFileName;
    CHAR [14]cAlternateFileName;
}
alias _WIN32_FIND_DATAA WIN32_FIND_DATAA;
alias _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;
alias _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;
//C       typedef struct _WIN32_FIND_DATAW {
//C         DWORD dwFileAttributes;
//C         FILETIME ftCreationTime;
//C         FILETIME ftLastAccessTime;
//C         FILETIME ftLastWriteTime;
//C         DWORD nFileSizeHigh;
//C         DWORD nFileSizeLow;
//C         DWORD dwReserved0;
//C         DWORD dwReserved1;
//C         WCHAR cFileName[260];
//C         WCHAR cAlternateFileName[14];
//C       } WIN32_FIND_DATAW,*PWIN32_FIND_DATAW,*LPWIN32_FIND_DATAW;
struct _WIN32_FIND_DATAW
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR [260]cFileName;
    WCHAR [14]cAlternateFileName;
}
alias _WIN32_FIND_DATAW WIN32_FIND_DATAW;
alias _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;
alias _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;
//C       typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
alias WIN32_FIND_DATAA WIN32_FIND_DATA;
//C       typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
alias PWIN32_FIND_DATAA PWIN32_FIND_DATA;
//C       typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
alias LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
//C       typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
//C         DWORD dwFileAttributes;
//C         FILETIME ftCreationTime;
//C         FILETIME ftLastAccessTime;
//C         FILETIME ftLastWriteTime;
//C         DWORD nFileSizeHigh;
//C         DWORD nFileSizeLow;
//C       } WIN32_FILE_ATTRIBUTE_DATA,*LPWIN32_FILE_ATTRIBUTE_DATA;
struct _WIN32_FILE_ATTRIBUTE_DATA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
}
alias _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
alias _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;
//C        HANDLE CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes,WINBOOL bInitialOwner,LPCSTR lpName);
HANDLE  CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCSTR lpName);
//C        HANDLE CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes,WINBOOL bInitialOwner,LPCWSTR lpName);
HANDLE  CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes, WINBOOL bInitialOwner, LPCWSTR lpName);
//C        HANDLE OpenMutexA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName);
HANDLE  OpenMutexA(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
//C        HANDLE OpenMutexW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName);
HANDLE  OpenMutexW(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
//C        HANDLE CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes,WINBOOL bManualReset,WINBOOL bInitialState,LPCSTR lpName);
HANDLE  CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCSTR lpName);
//C        HANDLE CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes,WINBOOL bManualReset,WINBOOL bInitialState,LPCWSTR lpName);
HANDLE  CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, WINBOOL bManualReset, WINBOOL bInitialState, LPCWSTR lpName);
//C        HANDLE OpenEventA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName);
HANDLE  OpenEventA(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
//C        HANDLE OpenEventW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName);
HANDLE  OpenEventW(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
//C        HANDLE CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCSTR lpName);
HANDLE  CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName);
//C        HANDLE CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCWSTR lpName);
HANDLE  CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName);
//C        HANDLE OpenSemaphoreA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName);
HANDLE  OpenSemaphoreA(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
//C        HANDLE OpenSemaphoreW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName);
HANDLE  OpenSemaphoreW(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
//C       typedef void ( *PTIMERAPCROUTINE)(LPVOID lpArgToCompletionRoutine,DWORD dwTimerLowValue,DWORD dwTimerHighValue);
alias void  function(LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue)PTIMERAPCROUTINE;
//C        HANDLE CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes,WINBOOL bManualReset,LPCSTR lpTimerName);
HANDLE  CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCSTR lpTimerName);
//C        HANDLE CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes,WINBOOL bManualReset,LPCWSTR lpTimerName);
HANDLE  CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes, WINBOOL bManualReset, LPCWSTR lpTimerName);
//C        HANDLE OpenWaitableTimerA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpTimerName);
HANDLE  OpenWaitableTimerA(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpTimerName);
//C        HANDLE OpenWaitableTimerW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpTimerName);
HANDLE  OpenWaitableTimerW(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpTimerName);
//C        WINBOOL SetWaitableTimer(HANDLE hTimer,const LARGE_INTEGER *lpDueTime,LONG lPeriod,PTIMERAPCROUTINE pfnCompletionRoutine,LPVOID lpArgToCompletionRoutine,WINBOOL fResume);
WINBOOL  SetWaitableTimer(HANDLE hTimer, LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, WINBOOL fResume);
//C        WINBOOL CancelWaitableTimer(HANDLE hTimer);
WINBOOL  CancelWaitableTimer(HANDLE hTimer);
//C        HANDLE CreateFileMappingA(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCSTR lpName);
HANDLE  CreateFileMappingA(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName);
//C        HANDLE CreateFileMappingW(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCWSTR lpName);
HANDLE  CreateFileMappingW(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName);
//C        HANDLE OpenFileMappingA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName);
HANDLE  OpenFileMappingA(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
//C        HANDLE OpenFileMappingW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName);
HANDLE  OpenFileMappingW(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
//C        DWORD GetLogicalDriveStringsA(DWORD nBufferLength,LPSTR lpBuffer);
DWORD  GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer);
//C        DWORD GetLogicalDriveStringsW(DWORD nBufferLength,LPWSTR lpBuffer);
DWORD  GetLogicalDriveStringsW(DWORD nBufferLength, LPWSTR lpBuffer);
//C       typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
//C         LowMemoryResourceNotification,HighMemoryResourceNotification
//C       } MEMORY_RESOURCE_NOTIFICATION_TYPE;
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE
{
    LowMemoryResourceNotification,
    HighMemoryResourceNotification,
}
alias _MEMORY_RESOURCE_NOTIFICATION_TYPE MEMORY_RESOURCE_NOTIFICATION_TYPE;
//C        HANDLE CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
HANDLE  CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
//C        WINBOOL QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle,PBOOL ResourceState);
WINBOOL  QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle, PBOOL ResourceState);
//C        HMODULE LoadLibraryA(LPCSTR lpLibFileName);
HMODULE  LoadLibraryA(LPCSTR lpLibFileName);
//C        HMODULE LoadLibraryW(LPCWSTR lpLibFileName);
HMODULE  LoadLibraryW(LPCWSTR lpLibFileName);
//C        HMODULE LoadLibraryExA(LPCSTR lpLibFileName,HANDLE hFile,DWORD dwFlags);
HMODULE  LoadLibraryExA(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
//C        HMODULE LoadLibraryExW(LPCWSTR lpLibFileName,HANDLE hFile,DWORD dwFlags);
HMODULE  LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);
//C        DWORD GetModuleFileNameA(HMODULE hModule,LPCH lpFilename,DWORD nSize);
DWORD  GetModuleFileNameA(HMODULE hModule, LPCH lpFilename, DWORD nSize);
//C        DWORD GetModuleFileNameW(HMODULE hModule,LPWCH lpFilename,DWORD nSize);
DWORD  GetModuleFileNameW(HMODULE hModule, LPWCH lpFilename, DWORD nSize);
//C        HMODULE GetModuleHandleA(LPCSTR lpModuleName);
HMODULE  GetModuleHandleA(LPCSTR lpModuleName);
//C        HMODULE GetModuleHandleW(LPCWSTR lpModuleName);
HMODULE  GetModuleHandleW(LPCWSTR lpModuleName);
//C       typedef WINBOOL ( *PGET_MODULE_HANDLE_EXA)(DWORD dwFlags,LPCSTR lpModuleName,HMODULE *phModule);
alias WINBOOL  function(DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule)PGET_MODULE_HANDLE_EXA;
//C       typedef WINBOOL ( *PGET_MODULE_HANDLE_EXW)(DWORD dwFlags,LPCWSTR lpModuleName,HMODULE *phModule);
alias WINBOOL  function(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule)PGET_MODULE_HANDLE_EXW;
//C        WINBOOL GetModuleHandleExA(DWORD dwFlags,LPCSTR lpModuleName,HMODULE *phModule);
WINBOOL  GetModuleHandleExA(DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule);
//C        WINBOOL GetModuleHandleExW(DWORD dwFlags,LPCWSTR lpModuleName,HMODULE *phModule);
WINBOOL  GetModuleHandleExW(DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule);
//C        WINBOOL NeedCurrentDirectoryForExePathA(LPCSTR ExeName);
WINBOOL  NeedCurrentDirectoryForExePathA(LPCSTR ExeName);
//C        WINBOOL NeedCurrentDirectoryForExePathW(LPCWSTR ExeName);
WINBOOL  NeedCurrentDirectoryForExePathW(LPCWSTR ExeName);
//C        WINBOOL CreateProcessA(LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL  CreateProcessA(LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
//C        WINBOOL CreateProcessW(LPCWSTR lpApplicationName,LPWSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL  CreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
//C        DWORD AddLocalAlternateComputerNameA(LPCSTR lpDnsFQHostname,ULONG ulFlags);
DWORD  AddLocalAlternateComputerNameA(LPCSTR lpDnsFQHostname, ULONG ulFlags);
//C        DWORD AddLocalAlternateComputerNameW(LPCWSTR lpDnsFQHostname,ULONG ulFlags);
DWORD  AddLocalAlternateComputerNameW(LPCWSTR lpDnsFQHostname, ULONG ulFlags);
//C        WINBOOL SetProcessShutdownParameters(DWORD dwLevel,DWORD dwFlags);
WINBOOL  SetProcessShutdownParameters(DWORD dwLevel, DWORD dwFlags);
//C        WINBOOL GetProcessShutdownParameters(LPDWORD lpdwLevel,LPDWORD lpdwFlags);
WINBOOL  GetProcessShutdownParameters(LPDWORD lpdwLevel, LPDWORD lpdwFlags);
//C        DWORD GetProcessVersion(DWORD ProcessId);
DWORD  GetProcessVersion(DWORD ProcessId);
//C        void FatalAppExitA(UINT uAction,LPCSTR lpMessageText);
void  FatalAppExitA(UINT uAction, LPCSTR lpMessageText);
//C        void FatalAppExitW(UINT uAction,LPCWSTR lpMessageText);
void  FatalAppExitW(UINT uAction, LPCWSTR lpMessageText);
//C        void GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo);
void  GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo);
//C        void GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo);
void  GetStartupInfoW(LPSTARTUPINFOW lpStartupInfo);
//C        LPSTR GetCommandLineA(void);
LPSTR  GetCommandLineA();
//C        LPWSTR GetCommandLineW(void);
LPWSTR  GetCommandLineW();
//C        DWORD GetEnvironmentVariableA(LPCSTR lpName,LPSTR lpBuffer,DWORD nSize);
DWORD  GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize);
//C        DWORD GetEnvironmentVariableW(LPCWSTR lpName,LPWSTR lpBuffer,DWORD nSize);
DWORD  GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize);
//C        WINBOOL SetEnvironmentVariableA(LPCSTR lpName,LPCSTR lpValue);
WINBOOL  SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue);
//C        WINBOOL SetEnvironmentVariableW(LPCWSTR lpName,LPCWSTR lpValue);
WINBOOL  SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue);
//C        DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc,LPSTR lpDst,DWORD nSize);
DWORD  ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize);
//C        DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc,LPWSTR lpDst,DWORD nSize);
DWORD  ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
//C        DWORD GetFirmwareEnvironmentVariableA(LPCSTR lpName,LPCSTR lpGuid,PVOID pBuffer,DWORD nSize);
DWORD  GetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize);
//C        DWORD GetFirmwareEnvironmentVariableW(LPCWSTR lpName,LPCWSTR lpGuid,PVOID pBuffer,DWORD nSize);
DWORD  GetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize);
//C        WINBOOL SetFirmwareEnvironmentVariableA(LPCSTR lpName,LPCSTR lpGuid,PVOID pValue,DWORD nSize);
WINBOOL  SetFirmwareEnvironmentVariableA(LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize);
//C        WINBOOL SetFirmwareEnvironmentVariableW(LPCWSTR lpName,LPCWSTR lpGuid,PVOID pValue,DWORD nSize);
WINBOOL  SetFirmwareEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize);
//C        void OutputDebugStringA(LPCSTR lpOutputString);
void  OutputDebugStringA(LPCSTR lpOutputString);
//C        void OutputDebugStringW(LPCWSTR lpOutputString);
void  OutputDebugStringW(LPCWSTR lpOutputString);
//C        HRSRC FindResourceA(HMODULE hModule,LPCSTR lpName,LPCSTR lpType);
HRSRC  FindResourceA(HMODULE hModule, LPCSTR lpName, LPCSTR lpType);
//C        HRSRC FindResourceW(HMODULE hModule,LPCWSTR lpName,LPCWSTR lpType);
HRSRC  FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);
//C        HRSRC FindResourceExA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,WORD wLanguage);
HRSRC  FindResourceExA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage);
//C        HRSRC FindResourceExW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,WORD wLanguage);
HRSRC  FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage);
//C       typedef enum _DEP_SYSTEM_POLICY_TYPE {
//C         AlwaysOff = 0,
//C         AlwaysOn = 1,
//C         OptIn = 2,
//C         OptOut = 3
//C       } DEP_SYSTEM_POLICY_TYPE;
enum _DEP_SYSTEM_POLICY_TYPE
{
    AlwaysOff,
    AlwaysOn,
    OptIn,
    OptOut,
}
alias _DEP_SYSTEM_POLICY_TYPE DEP_SYSTEM_POLICY_TYPE;
//C        DEP_SYSTEM_POLICY_TYPE GetSystemDEPPolicy (void);
DEP_SYSTEM_POLICY_TYPE  GetSystemDEPPolicy();
//C       typedef WINBOOL ( *ENUMRESTYPEPROCA)(HMODULE hModule,LPSTR lpType,LONG_PTR lParam);
alias WINBOOL  function(HMODULE hModule, LPSTR lpType, LONG_PTR lParam)ENUMRESTYPEPROCA;
//C       typedef WINBOOL ( *ENUMRESTYPEPROCW)(HMODULE hModule,LPWSTR lpType,LONG_PTR lParam);
alias WINBOOL  function(HMODULE hModule, LPWSTR lpType, LONG_PTR lParam)ENUMRESTYPEPROCW;
//C       typedef WINBOOL ( *ENUMRESNAMEPROCA)(HMODULE hModule,LPCSTR lpType,LPSTR lpName,LONG_PTR lParam);
alias WINBOOL  function(HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam)ENUMRESNAMEPROCA;
//C       typedef WINBOOL ( *ENUMRESNAMEPROCW)(HMODULE hModule,LPCWSTR lpType,LPWSTR lpName,LONG_PTR lParam);
alias WINBOOL  function(HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam)ENUMRESNAMEPROCW;
//C       typedef WINBOOL ( *ENUMRESLANGPROCA)(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,WORD wLanguage,LONG_PTR lParam);
alias WINBOOL  function(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam)ENUMRESLANGPROCA;
//C       typedef WINBOOL ( *ENUMRESLANGPROCW)(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,WORD wLanguage,LONG_PTR lParam);
alias WINBOOL  function(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam)ENUMRESLANGPROCW;
//C        WINBOOL EnumResourceTypesA(HMODULE hModule,ENUMRESTYPEPROCA lpEnumFunc,LONG_PTR lParam);
WINBOOL  EnumResourceTypesA(HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam);
//C        WINBOOL EnumResourceTypesW(HMODULE hModule,ENUMRESTYPEPROCW lpEnumFunc,LONG_PTR lParam);
WINBOOL  EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);
//C        WINBOOL EnumResourceNamesA(HMODULE hModule,LPCSTR lpType,ENUMRESNAMEPROCA lpEnumFunc,LONG_PTR lParam);
WINBOOL  EnumResourceNamesA(HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam);
//C        WINBOOL EnumResourceNamesW(HMODULE hModule,LPCWSTR lpType,ENUMRESNAMEPROCW lpEnumFunc,LONG_PTR lParam);
WINBOOL  EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);
//C        WINBOOL EnumResourceLanguagesA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROCA lpEnumFunc,LONG_PTR lParam);
WINBOOL  EnumResourceLanguagesA(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam);
//C        WINBOOL EnumResourceLanguagesW(HMODULE hModule,LPCWSTR lpType,LPCWSTR lpName,ENUMRESLANGPROCW lpEnumFunc,LONG_PTR lParam);
WINBOOL  EnumResourceLanguagesW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam);
//C        HANDLE BeginUpdateResourceA(LPCSTR pFileName,WINBOOL bDeleteExistingResources);
HANDLE  BeginUpdateResourceA(LPCSTR pFileName, WINBOOL bDeleteExistingResources);
//C        HANDLE BeginUpdateResourceW(LPCWSTR pFileName,WINBOOL bDeleteExistingResources);
HANDLE  BeginUpdateResourceW(LPCWSTR pFileName, WINBOOL bDeleteExistingResources);
//C        WINBOOL UpdateResourceA(HANDLE hUpdate,LPCSTR lpType,LPCSTR lpName,WORD wLanguage,LPVOID lpData,DWORD cb);
WINBOOL  UpdateResourceA(HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
//C        WINBOOL UpdateResourceW(HANDLE hUpdate,LPCWSTR lpType,LPCWSTR lpName,WORD wLanguage,LPVOID lpData,DWORD cb);
WINBOOL  UpdateResourceW(HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb);
//C        WINBOOL EndUpdateResourceA(HANDLE hUpdate,WINBOOL fDiscard);
WINBOOL  EndUpdateResourceA(HANDLE hUpdate, WINBOOL fDiscard);
//C        WINBOOL EndUpdateResourceW(HANDLE hUpdate,WINBOOL fDiscard);
WINBOOL  EndUpdateResourceW(HANDLE hUpdate, WINBOOL fDiscard);
//C        ATOM GlobalAddAtomA(LPCSTR lpString);
ATOM  GlobalAddAtomA(LPCSTR lpString);
//C        ATOM GlobalAddAtomW(LPCWSTR lpString);
ATOM  GlobalAddAtomW(LPCWSTR lpString);
//C        ATOM GlobalFindAtomA(LPCSTR lpString);
ATOM  GlobalFindAtomA(LPCSTR lpString);
//C        ATOM GlobalFindAtomW(LPCWSTR lpString);
ATOM  GlobalFindAtomW(LPCWSTR lpString);
//C        UINT GlobalGetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize);
UINT  GlobalGetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize);
//C        UINT GlobalGetAtomNameW(ATOM nAtom,LPWSTR lpBuffer,int nSize);
UINT  GlobalGetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize);
//C        ATOM AddAtomA(LPCSTR lpString);
ATOM  AddAtomA(LPCSTR lpString);
//C        ATOM AddAtomW(LPCWSTR lpString);
ATOM  AddAtomW(LPCWSTR lpString);
//C        ATOM FindAtomA(LPCSTR lpString);
ATOM  FindAtomA(LPCSTR lpString);
//C        ATOM FindAtomW(LPCWSTR lpString);
ATOM  FindAtomW(LPCWSTR lpString);
//C        UINT GetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize);
UINT  GetAtomNameA(ATOM nAtom, LPSTR lpBuffer, int nSize);
//C        UINT GetAtomNameW(ATOM nAtom,LPWSTR lpBuffer,int nSize);
UINT  GetAtomNameW(ATOM nAtom, LPWSTR lpBuffer, int nSize);
//C        UINT GetProfileIntA(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault);
UINT  GetProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
//C        UINT GetProfileIntW(LPCWSTR lpAppName,LPCWSTR lpKeyName,INT nDefault);
UINT  GetProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault);
//C        DWORD GetProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize);
DWORD  GetProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
//C        DWORD GetProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpDefault,LPWSTR lpReturnedString,DWORD nSize);
DWORD  GetProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize);
//C        WINBOOL WriteProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString);
WINBOOL  WriteProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString);
//C        WINBOOL WriteProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpString);
WINBOOL  WriteProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString);
//C        DWORD GetProfileSectionA(LPCSTR lpAppName,LPSTR lpReturnedString,DWORD nSize);
DWORD  GetProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize);
//C        DWORD GetProfileSectionW(LPCWSTR lpAppName,LPWSTR lpReturnedString,DWORD nSize);
DWORD  GetProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize);
//C        WINBOOL WriteProfileSectionA(LPCSTR lpAppName,LPCSTR lpString);
WINBOOL  WriteProfileSectionA(LPCSTR lpAppName, LPCSTR lpString);
//C        WINBOOL WriteProfileSectionW(LPCWSTR lpAppName,LPCWSTR lpString);
WINBOOL  WriteProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString);
//C        UINT GetPrivateProfileIntA(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault,LPCSTR lpFileName);
UINT  GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
//C        UINT GetPrivateProfileIntW(LPCWSTR lpAppName,LPCWSTR lpKeyName,INT nDefault,LPCWSTR lpFileName);
UINT  GetPrivateProfileIntW(LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName);
//C        DWORD GetPrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName);
DWORD  GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
//C        DWORD GetPrivateProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpDefault,LPWSTR lpReturnedString,DWORD nSize,LPCWSTR lpFileName);
DWORD  GetPrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
//C        WINBOOL WritePrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString,LPCSTR lpFileName);
WINBOOL  WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
//C        WINBOOL WritePrivateProfileStringW(LPCWSTR lpAppName,LPCWSTR lpKeyName,LPCWSTR lpString,LPCWSTR lpFileName);
WINBOOL  WritePrivateProfileStringW(LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName);
//C        DWORD GetPrivateProfileSectionA(LPCSTR lpAppName,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName);
DWORD  GetPrivateProfileSectionA(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
//C        DWORD GetPrivateProfileSectionW(LPCWSTR lpAppName,LPWSTR lpReturnedString,DWORD nSize,LPCWSTR lpFileName);
DWORD  GetPrivateProfileSectionW(LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName);
//C        WINBOOL WritePrivateProfileSectionA(LPCSTR lpAppName,LPCSTR lpString,LPCSTR lpFileName);
WINBOOL  WritePrivateProfileSectionA(LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName);
//C        WINBOOL WritePrivateProfileSectionW(LPCWSTR lpAppName,LPCWSTR lpString,LPCWSTR lpFileName);
WINBOOL  WritePrivateProfileSectionW(LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName);
//C        DWORD GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer,DWORD nSize,LPCSTR lpFileName);
DWORD  GetPrivateProfileSectionNamesA(LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName);
//C        DWORD GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer,DWORD nSize,LPCWSTR lpFileName);
DWORD  GetPrivateProfileSectionNamesW(LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName);
//C        WINBOOL GetPrivateProfileStructA(LPCSTR lpszSection,LPCSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCSTR szFile);
WINBOOL  GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
//C        WINBOOL GetPrivateProfileStructW(LPCWSTR lpszSection,LPCWSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCWSTR szFile);
WINBOOL  GetPrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
//C        WINBOOL WritePrivateProfileStructA(LPCSTR lpszSection,LPCSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCSTR szFile);
WINBOOL  WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
//C        WINBOOL WritePrivateProfileStructW(LPCWSTR lpszSection,LPCWSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCWSTR szFile);
WINBOOL  WritePrivateProfileStructW(LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile);
//C        UINT GetDriveTypeA(LPCSTR lpRootPathName);
UINT  GetDriveTypeA(LPCSTR lpRootPathName);
//C        UINT GetDriveTypeW(LPCWSTR lpRootPathName);
UINT  GetDriveTypeW(LPCWSTR lpRootPathName);
//C        UINT GetSystemDirectoryA(LPSTR lpBuffer,UINT uSize);
UINT  GetSystemDirectoryA(LPSTR lpBuffer, UINT uSize);
//C        UINT GetSystemDirectoryW(LPWSTR lpBuffer,UINT uSize);
UINT  GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize);
//C        DWORD GetTempPathA(DWORD nBufferLength,LPSTR lpBuffer);
DWORD  GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer);
//C        DWORD GetTempPathW(DWORD nBufferLength,LPWSTR lpBuffer);
DWORD  GetTempPathW(DWORD nBufferLength, LPWSTR lpBuffer);
//C        UINT GetTempFileNameA(LPCSTR lpPathName,LPCSTR lpPrefixString,UINT uUnique,LPSTR lpTempFileName);
UINT  GetTempFileNameA(LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName);
//C        UINT GetTempFileNameW(LPCWSTR lpPathName,LPCWSTR lpPrefixString,UINT uUnique,LPWSTR lpTempFileName);
UINT  GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);
//C        UINT GetWindowsDirectoryA(LPSTR lpBuffer,UINT uSize);
UINT  GetWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
//C        UINT GetWindowsDirectoryW(LPWSTR lpBuffer,UINT uSize);
UINT  GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
//C        UINT GetSystemWindowsDirectoryA(LPSTR lpBuffer,UINT uSize);
UINT  GetSystemWindowsDirectoryA(LPSTR lpBuffer, UINT uSize);
//C        UINT GetSystemWindowsDirectoryW(LPWSTR lpBuffer,UINT uSize);
UINT  GetSystemWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize);
//C        UINT GetSystemWow64DirectoryA(LPSTR lpBuffer,UINT uSize);
UINT  GetSystemWow64DirectoryA(LPSTR lpBuffer, UINT uSize);
//C        UINT GetSystemWow64DirectoryW(LPWSTR lpBuffer,UINT uSize);
UINT  GetSystemWow64DirectoryW(LPWSTR lpBuffer, UINT uSize);
//C        BOOLEAN Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection);
BOOLEAN  Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection);
//C        WINBOOL Wow64DisableWow64FsRedirection(PVOID *OldValue);
WINBOOL  Wow64DisableWow64FsRedirection(PVOID *OldValue);
//C        WINBOOL Wow64RevertWow64FsRedirection(PVOID OlValue);
WINBOOL  Wow64RevertWow64FsRedirection(PVOID OlValue);
//C       typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR lpBuffer,UINT uSize);
alias UINT  function(LPSTR lpBuffer, UINT uSize)PGET_SYSTEM_WOW64_DIRECTORY_A;
//C       typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR lpBuffer,UINT uSize);
alias UINT  function(LPWSTR lpBuffer, UINT uSize)PGET_SYSTEM_WOW64_DIRECTORY_W;
//C        WINBOOL SetCurrentDirectoryA(LPCSTR lpPathName);
WINBOOL  SetCurrentDirectoryA(LPCSTR lpPathName);
//C        WINBOOL SetCurrentDirectoryW(LPCWSTR lpPathName);
WINBOOL  SetCurrentDirectoryW(LPCWSTR lpPathName);
//C        DWORD GetCurrentDirectoryA(DWORD nBufferLength,LPSTR lpBuffer);
DWORD  GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
//C        DWORD GetCurrentDirectoryW(DWORD nBufferLength,LPWSTR lpBuffer);
DWORD  GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
//C        WINBOOL SetDllDirectoryA(LPCSTR lpPathName);
WINBOOL  SetDllDirectoryA(LPCSTR lpPathName);
//C        WINBOOL SetDllDirectoryW(LPCWSTR lpPathName);
WINBOOL  SetDllDirectoryW(LPCWSTR lpPathName);
//C        DWORD GetDllDirectoryA(DWORD nBufferLength,LPSTR lpBuffer);
DWORD  GetDllDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
//C        DWORD GetDllDirectoryW(DWORD nBufferLength,LPWSTR lpBuffer);
DWORD  GetDllDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer);
//C        WINBOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters);
WINBOOL  GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
//C        WINBOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters);
WINBOOL  GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters);
//C        WINBOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes);
WINBOOL  GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
//C        WINBOOL GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes);
WINBOOL  GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);
//C        WINBOOL CreateDirectoryA(LPCSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL  CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL CreateDirectoryW(LPCWSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL  CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL CreateDirectoryExA(LPCSTR lpTemplateDirectory,LPCSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL  CreateDirectoryExA(LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL CreateDirectoryExW(LPCWSTR lpTemplateDirectory,LPCWSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL  CreateDirectoryExW(LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL RemoveDirectoryA(LPCSTR lpPathName);
WINBOOL  RemoveDirectoryA(LPCSTR lpPathName);
//C        WINBOOL RemoveDirectoryW(LPCWSTR lpPathName);
WINBOOL  RemoveDirectoryW(LPCWSTR lpPathName);
//C        DWORD GetFullPathNameA(LPCSTR lpFileName,DWORD nBufferLength,LPSTR lpBuffer,LPSTR *lpFilePart);
DWORD  GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
//C        DWORD GetFullPathNameW(LPCWSTR lpFileName,DWORD nBufferLength,LPWSTR lpBuffer,LPWSTR *lpFilePart);
DWORD  GetFullPathNameW(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
//C        WINBOOL DefineDosDeviceA(DWORD dwFlags,LPCSTR lpDeviceName,LPCSTR lpTargetPath);
WINBOOL  DefineDosDeviceA(DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath);
//C        WINBOOL DefineDosDeviceW(DWORD dwFlags,LPCWSTR lpDeviceName,LPCWSTR lpTargetPath);
WINBOOL  DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath);
//C        DWORD QueryDosDeviceA(LPCSTR lpDeviceName,LPSTR lpTargetPath,DWORD ucchMax);
DWORD  QueryDosDeviceA(LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax);
//C        DWORD QueryDosDeviceW(LPCWSTR lpDeviceName,LPWSTR lpTargetPath,DWORD ucchMax);
DWORD  QueryDosDeviceW(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax);
//C        HANDLE CreateFileA(LPCSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile);
HANDLE  CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
//C        HANDLE CreateFileW(LPCWSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile);
HANDLE  CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
//C        HANDLE ReOpenFile(HANDLE hOriginalFile,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwFlagsAndAttributes);
HANDLE  ReOpenFile(HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes);
//C        WINBOOL SetFileAttributesA(LPCSTR lpFileName,DWORD dwFileAttributes);
WINBOOL  SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes);
//C        WINBOOL SetFileAttributesW(LPCWSTR lpFileName,DWORD dwFileAttributes);
WINBOOL  SetFileAttributesW(LPCWSTR lpFileName, DWORD dwFileAttributes);
//C        DWORD GetFileAttributesA(LPCSTR lpFileName);
DWORD  GetFileAttributesA(LPCSTR lpFileName);
//C        DWORD GetFileAttributesW(LPCWSTR lpFileName);
DWORD  GetFileAttributesW(LPCWSTR lpFileName);
//C       typedef enum _GET_FILEEX_INFO_LEVELS {
//C         GetFileExInfoStandard,GetFileExMaxInfoLevel
//C       } GET_FILEEX_INFO_LEVELS;
enum _GET_FILEEX_INFO_LEVELS
{
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel,
}
alias _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
//C        WINBOOL GetFileAttributesExA(LPCSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation);
WINBOOL  GetFileAttributesExA(LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
//C        WINBOOL GetFileAttributesExW(LPCWSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation);
WINBOOL  GetFileAttributesExW(LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation);
//C        DWORD GetCompressedFileSizeA(LPCSTR lpFileName,LPDWORD lpFileSizeHigh);
DWORD  GetCompressedFileSizeA(LPCSTR lpFileName, LPDWORD lpFileSizeHigh);
//C        DWORD GetCompressedFileSizeW(LPCWSTR lpFileName,LPDWORD lpFileSizeHigh);
DWORD  GetCompressedFileSizeW(LPCWSTR lpFileName, LPDWORD lpFileSizeHigh);
//C        WINBOOL DeleteFileA(LPCSTR lpFileName);
WINBOOL  DeleteFileA(LPCSTR lpFileName);
//C        WINBOOL DeleteFileW(LPCWSTR lpFileName);
WINBOOL  DeleteFileW(LPCWSTR lpFileName);
//C        WINBOOL CheckNameLegalDOS8Dot3A(LPCSTR lpName,LPSTR lpOemName,DWORD OemNameSize,PBOOL pbNameContainsSpaces,PBOOL pbNameLegal);
WINBOOL  CheckNameLegalDOS8Dot3A(LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
//C        WINBOOL CheckNameLegalDOS8Dot3W(LPCWSTR lpName,LPSTR lpOemName,DWORD OemNameSize,PBOOL pbNameContainsSpaces,PBOOL pbNameLegal);
WINBOOL  CheckNameLegalDOS8Dot3W(LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal);
//C       typedef enum _FINDEX_INFO_LEVELS {
//C         FindExInfoStandard,FindExInfoMaxInfoLevel
//C       } FINDEX_INFO_LEVELS;
enum _FINDEX_INFO_LEVELS
{
    FindExInfoStandard,
    FindExInfoMaxInfoLevel,
}
alias _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
//C       typedef enum _FINDEX_SEARCH_OPS {
//C         FindExSearchNameMatch,FindExSearchLimitToDirectories,FindExSearchLimitToDevices,FindExSearchMaxSearchOp
//C       } FINDEX_SEARCH_OPS;
enum _FINDEX_SEARCH_OPS
{
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp,
}
alias _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
//C        HANDLE FindFirstFileExA(LPCSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags);
HANDLE  FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
//C        HANDLE FindFirstFileExW(LPCWSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags);
HANDLE  FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags);
//C        HANDLE FindFirstFileA(LPCSTR lpFileName,LPWIN32_FIND_DATAA lpFindFileData);
HANDLE  FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
//C        HANDLE FindFirstFileW(LPCWSTR lpFileName,LPWIN32_FIND_DATAW lpFindFileData);
HANDLE  FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
//C        WINBOOL FindNextFileA(HANDLE hFindFile,LPWIN32_FIND_DATAA lpFindFileData);
WINBOOL  FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
//C        WINBOOL FindNextFileW(HANDLE hFindFile,LPWIN32_FIND_DATAW lpFindFileData);
WINBOOL  FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
//C        DWORD SearchPathA(LPCSTR lpPath,LPCSTR lpFileName,LPCSTR lpExtension,DWORD nBufferLength,LPSTR lpBuffer,LPSTR *lpFilePart);
DWORD  SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart);
//C        DWORD SearchPathW(LPCWSTR lpPath,LPCWSTR lpFileName,LPCWSTR lpExtension,DWORD nBufferLength,LPWSTR lpBuffer,LPWSTR *lpFilePart);
DWORD  SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart);
//C        WINBOOL CopyFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,WINBOOL bFailIfExists);
WINBOOL  CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, WINBOOL bFailIfExists);
//C        WINBOOL CopyFileW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,WINBOOL bFailIfExists);
WINBOOL  CopyFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, WINBOOL bFailIfExists);
//C       typedef DWORD ( *LPPROGRESS_ROUTINE)(LARGE_INTEGER TotalFileSize,LARGE_INTEGER TotalBytesTransferred,LARGE_INTEGER StreamSize,LARGE_INTEGER StreamBytesTransferred,DWORD dwStreamNumber,DWORD dwCallbackReason,HANDLE hSourceFile,HANDLE hDestinationFile,LPVOID lpData);
alias DWORD  function(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData)LPPROGRESS_ROUTINE;
//C        WINBOOL CopyFileExA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags);
WINBOOL  CopyFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
//C        WINBOOL CopyFileExW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags);
WINBOOL  CopyFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags);
//C        WINBOOL MoveFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName);
WINBOOL  MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName);
//C        WINBOOL MoveFileW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName);
WINBOOL  MoveFileW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);
//C        WINBOOL MoveFileExA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,DWORD dwFlags);
WINBOOL  MoveFileExA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags);
//C        WINBOOL MoveFileExW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,DWORD dwFlags);
WINBOOL  MoveFileExW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags);
//C        WINBOOL MoveFileWithProgressA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags);
WINBOOL  MoveFileWithProgressA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
//C        WINBOOL MoveFileWithProgressW(LPCWSTR lpExistingFileName,LPCWSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags);
WINBOOL  MoveFileWithProgressW(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags);
//C        WINBOOL ReplaceFileA(LPCSTR lpReplacedFileName,LPCSTR lpReplacementFileName,LPCSTR lpBackupFileName,DWORD dwReplaceFlags,LPVOID lpExclude,LPVOID lpReserved);
WINBOOL  ReplaceFileA(LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
//C        WINBOOL ReplaceFileW(LPCWSTR lpReplacedFileName,LPCWSTR lpReplacementFileName,LPCWSTR lpBackupFileName,DWORD dwReplaceFlags,LPVOID lpExclude,LPVOID lpReserved);
WINBOOL  ReplaceFileW(LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved);
//C        WINBOOL CreateHardLinkA(LPCSTR lpFileName,LPCSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL  CreateHardLinkA(LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL CreateHardLinkW(LPCWSTR lpFileName,LPCWSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
WINBOOL  CreateHardLinkW(LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C       typedef enum _STREAM_INFO_LEVELS {
//C         FindStreamInfoStandard,FindStreamInfoMaxInfoLevel
//C       } STREAM_INFO_LEVELS;
enum _STREAM_INFO_LEVELS
{
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel,
}
alias _STREAM_INFO_LEVELS STREAM_INFO_LEVELS;
//C       typedef struct _WIN32_FIND_STREAM_DATA {
//C         LARGE_INTEGER StreamSize;
//C         WCHAR cStreamName[260 + 36];
//C       } WIN32_FIND_STREAM_DATA,*PWIN32_FIND_STREAM_DATA;
struct _WIN32_FIND_STREAM_DATA
{
    LARGE_INTEGER StreamSize;
    WCHAR [296]cStreamName;
}
alias _WIN32_FIND_STREAM_DATA WIN32_FIND_STREAM_DATA;
alias _WIN32_FIND_STREAM_DATA *PWIN32_FIND_STREAM_DATA;
//C       HANDLE FindFirstStreamW(LPCWSTR lpFileName,STREAM_INFO_LEVELS InfoLevel,LPVOID lpFindStreamData,DWORD dwFlags);
HANDLE  FindFirstStreamW(LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags);
//C       WINBOOL FindNextStreamW(HANDLE hFindStream,LPVOID lpFindStreamData);
WINBOOL  FindNextStreamW(HANDLE hFindStream, LPVOID lpFindStreamData);
//C        HANDLE CreateNamedPipeA(LPCSTR lpName,DWORD dwOpenMode,DWORD dwPipeMode,DWORD nMaxInstances,DWORD nOutBufferSize,DWORD nInBufferSize,DWORD nDefaultTimeOut,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE  CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        HANDLE CreateNamedPipeW(LPCWSTR lpName,DWORD dwOpenMode,DWORD dwPipeMode,DWORD nMaxInstances,DWORD nOutBufferSize,DWORD nInBufferSize,DWORD nDefaultTimeOut,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE  CreateNamedPipeW(LPCWSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        WINBOOL GetNamedPipeHandleStateA(HANDLE hNamedPipe,LPDWORD lpState,LPDWORD lpCurInstances,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout,LPSTR lpUserName,DWORD nMaxUserNameSize);
WINBOOL  GetNamedPipeHandleStateA(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize);
//C        WINBOOL GetNamedPipeHandleStateW(HANDLE hNamedPipe,LPDWORD lpState,LPDWORD lpCurInstances,LPDWORD lpMaxCollectionCount,LPDWORD lpCollectDataTimeout,LPWSTR lpUserName,DWORD nMaxUserNameSize);
WINBOOL  GetNamedPipeHandleStateW(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserName, DWORD nMaxUserNameSize);
//C        WINBOOL CallNamedPipeA(LPCSTR lpNamedPipeName,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,DWORD nTimeOut);
WINBOOL  CallNamedPipeA(LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
//C        WINBOOL CallNamedPipeW(LPCWSTR lpNamedPipeName,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesRead,DWORD nTimeOut);
WINBOOL  CallNamedPipeW(LPCWSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
//C        WINBOOL WaitNamedPipeA(LPCSTR lpNamedPipeName,DWORD nTimeOut);
WINBOOL  WaitNamedPipeA(LPCSTR lpNamedPipeName, DWORD nTimeOut);
//C        WINBOOL WaitNamedPipeW(LPCWSTR lpNamedPipeName,DWORD nTimeOut);
WINBOOL  WaitNamedPipeW(LPCWSTR lpNamedPipeName, DWORD nTimeOut);
//C        WINBOOL SetVolumeLabelA(LPCSTR lpRootPathName,LPCSTR lpVolumeName);
WINBOOL  SetVolumeLabelA(LPCSTR lpRootPathName, LPCSTR lpVolumeName);
//C        WINBOOL SetVolumeLabelW(LPCWSTR lpRootPathName,LPCWSTR lpVolumeName);
WINBOOL  SetVolumeLabelW(LPCWSTR lpRootPathName, LPCWSTR lpVolumeName);
//C        void SetFileApisToOEM(void);
void  SetFileApisToOEM();
//C        void SetFileApisToANSI(void);
void  SetFileApisToANSI();
//C        WINBOOL AreFileApisANSI(void);
WINBOOL  AreFileApisANSI();
//C        WINBOOL GetVolumeInformationA(LPCSTR lpRootPathName,LPSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize);
WINBOOL  GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
//C        WINBOOL GetVolumeInformationW(LPCWSTR lpRootPathName,LPWSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPWSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize);
WINBOOL  GetVolumeInformationW(LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize);
//C        WINBOOL CancelIo(HANDLE hFile);
WINBOOL  CancelIo(HANDLE hFile);
//C        WINBOOL ClearEventLogA(HANDLE hEventLog,LPCSTR lpBackupFileName);
WINBOOL  ClearEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName);
//C        WINBOOL ClearEventLogW(HANDLE hEventLog,LPCWSTR lpBackupFileName);
WINBOOL  ClearEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName);
//C        WINBOOL BackupEventLogA(HANDLE hEventLog,LPCSTR lpBackupFileName);
WINBOOL  BackupEventLogA(HANDLE hEventLog, LPCSTR lpBackupFileName);
//C        WINBOOL BackupEventLogW(HANDLE hEventLog,LPCWSTR lpBackupFileName);
WINBOOL  BackupEventLogW(HANDLE hEventLog, LPCWSTR lpBackupFileName);
//C        WINBOOL CloseEventLog(HANDLE hEventLog);
WINBOOL  CloseEventLog(HANDLE hEventLog);
//C        WINBOOL DeregisterEventSource(HANDLE hEventLog);
WINBOOL  DeregisterEventSource(HANDLE hEventLog);
//C        WINBOOL NotifyChangeEventLog(HANDLE hEventLog,HANDLE hEvent);
WINBOOL  NotifyChangeEventLog(HANDLE hEventLog, HANDLE hEvent);
//C        WINBOOL GetNumberOfEventLogRecords(HANDLE hEventLog,PDWORD NumberOfRecords);
WINBOOL  GetNumberOfEventLogRecords(HANDLE hEventLog, PDWORD NumberOfRecords);
//C        WINBOOL GetOldestEventLogRecord(HANDLE hEventLog,PDWORD OldestRecord);
WINBOOL  GetOldestEventLogRecord(HANDLE hEventLog, PDWORD OldestRecord);
//C        HANDLE OpenEventLogA(LPCSTR lpUNCServerName,LPCSTR lpSourceName);
HANDLE  OpenEventLogA(LPCSTR lpUNCServerName, LPCSTR lpSourceName);
//C        HANDLE OpenEventLogW(LPCWSTR lpUNCServerName,LPCWSTR lpSourceName);
HANDLE  OpenEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
//C        HANDLE RegisterEventSourceA(LPCSTR lpUNCServerName,LPCSTR lpSourceName);
HANDLE  RegisterEventSourceA(LPCSTR lpUNCServerName, LPCSTR lpSourceName);
//C        HANDLE RegisterEventSourceW(LPCWSTR lpUNCServerName,LPCWSTR lpSourceName);
HANDLE  RegisterEventSourceW(LPCWSTR lpUNCServerName, LPCWSTR lpSourceName);
//C        HANDLE OpenBackupEventLogA(LPCSTR lpUNCServerName,LPCSTR lpFileName);
HANDLE  OpenBackupEventLogA(LPCSTR lpUNCServerName, LPCSTR lpFileName);
//C        HANDLE OpenBackupEventLogW(LPCWSTR lpUNCServerName,LPCWSTR lpFileName);
HANDLE  OpenBackupEventLogW(LPCWSTR lpUNCServerName, LPCWSTR lpFileName);
//C        WINBOOL ReadEventLogA(HANDLE hEventLog,DWORD dwReadFlags,DWORD dwRecordOffset,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,DWORD *pnBytesRead,DWORD *pnMinNumberOfBytesNeeded);
WINBOOL  ReadEventLogA(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
//C        WINBOOL ReadEventLogW(HANDLE hEventLog,DWORD dwReadFlags,DWORD dwRecordOffset,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,DWORD *pnBytesRead,DWORD *pnMinNumberOfBytesNeeded);
WINBOOL  ReadEventLogW(HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded);
//C        WINBOOL ReportEventA(HANDLE hEventLog,WORD wType,WORD wCategory,DWORD dwEventID,PSID lpUserSid,WORD wNumStrings,DWORD dwDataSize,LPCSTR *lpStrings,LPVOID lpRawData);
WINBOOL  ReportEventA(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData);
//C        WINBOOL ReportEventW(HANDLE hEventLog,WORD wType,WORD wCategory,DWORD dwEventID,PSID lpUserSid,WORD wNumStrings,DWORD dwDataSize,LPCWSTR *lpStrings,LPVOID lpRawData);
WINBOOL  ReportEventW(HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData);
//C       typedef struct _EVENTLOG_FULL_INFORMATION {
//C         DWORD dwFull;
//C       } EVENTLOG_FULL_INFORMATION,*LPEVENTLOG_FULL_INFORMATION;
struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
alias _EVENTLOG_FULL_INFORMATION EVENTLOG_FULL_INFORMATION;
alias _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION;
//C        WINBOOL GetEventLogInformation(HANDLE hEventLog,DWORD dwInfoLevel,LPVOID lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  GetEventLogInformation(HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL DuplicateToken(HANDLE ExistingTokenHandle,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,PHANDLE DuplicateTokenHandle);
WINBOOL  DuplicateToken(HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle);
//C        WINBOOL GetKernelObjectSecurity(HANDLE Handle,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded);
WINBOOL  GetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
//C        WINBOOL ImpersonateNamedPipeClient(HANDLE hNamedPipe);
WINBOOL  ImpersonateNamedPipeClient(HANDLE hNamedPipe);
//C        WINBOOL ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
WINBOOL  ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
//C        WINBOOL RevertToSelf(void);
WINBOOL  RevertToSelf();
//C        WINBOOL SetThreadToken (PHANDLE Thread,HANDLE Token);
WINBOOL  SetThreadToken(PHANDLE Thread, HANDLE Token);
//C        WINBOOL AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus);
WINBOOL  AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
//C        WINBOOL AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID PrincipalSelfSid,HANDLE ClientToken,DWORD DesiredAccess,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus);
WINBOOL  AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus);
//C        WINBOOL AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID PrincipalSelfSid,HANDLE ClientToken,DWORD DesiredAccess,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccessList,LPDWORD AccessStatusList);
WINBOOL  AccessCheckByTypeResultList(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList);
//C        WINBOOL OpenProcessToken(HANDLE ProcessHandle,DWORD DesiredAccess,PHANDLE TokenHandle);
WINBOOL  OpenProcessToken(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
//C        WINBOOL OpenThreadToken(HANDLE ThreadHandle,DWORD DesiredAccess,WINBOOL OpenAsSelf,PHANDLE TokenHandle);
WINBOOL  OpenThreadToken(HANDLE ThreadHandle, DWORD DesiredAccess, WINBOOL OpenAsSelf, PHANDLE TokenHandle);
//C        WINBOOL GetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength,PDWORD ReturnLength);
WINBOOL  GetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
//C        WINBOOL SetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength);
WINBOOL  SetTokenInformation(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength);
//C        WINBOOL AdjustTokenPrivileges(HANDLE TokenHandle,WINBOOL DisableAllPrivileges,PTOKEN_PRIVILEGES NewState,DWORD BufferLength,PTOKEN_PRIVILEGES PreviousState,PDWORD ReturnLength);
WINBOOL  AdjustTokenPrivileges(HANDLE TokenHandle, WINBOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
//C        WINBOOL AdjustTokenGroups(HANDLE TokenHandle,WINBOOL ResetToDefault,PTOKEN_GROUPS NewState,DWORD BufferLength,PTOKEN_GROUPS PreviousState,PDWORD ReturnLength);
WINBOOL  AdjustTokenGroups(HANDLE TokenHandle, WINBOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength);
//C        WINBOOL PrivilegeCheck(HANDLE ClientToken,PPRIVILEGE_SET RequiredPrivileges,LPBOOL pfResult);
WINBOOL  PrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
//C        WINBOOL AccessCheckAndAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPSTR ObjectTypeName,LPSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPWSTR ObjectTypeName,LPWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckByTypeAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPCWSTR ObjectTypeName,LPCWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckByTypeAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckByTypeResultListAndAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPCWSTR ObjectTypeName,LPCWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckByTypeResultListAndAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,LPCSTR ObjectTypeName,LPCSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckByTypeResultListAndAuditAlarmByHandleA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
//C        WINBOOL AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,LPCWSTR ObjectTypeName,LPCWSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,PSID PrincipalSelfSid,DWORD DesiredAccess,AUDIT_EVENT_TYPE AuditType,DWORD Flags,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,WINBOOL ObjectCreation,LPDWORD GrantedAccess,LPDWORD AccessStatusList,LPBOOL pfGenerateOnClose);
WINBOOL  AccessCheckByTypeResultListAndAuditAlarmByHandleW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCWSTR ObjectTypeName, LPCWSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, WINBOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose);
//C        WINBOOL ObjectOpenAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,LPSTR ObjectTypeName,LPSTR ObjectName,PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,DWORD GrantedAccess,PPRIVILEGE_SET Privileges,WINBOOL ObjectCreation,WINBOOL AccessGranted,LPBOOL GenerateOnClose);
WINBOOL  ObjectOpenAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);
//C        WINBOOL ObjectOpenAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,LPWSTR ObjectTypeName,LPWSTR ObjectName,PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,DWORD GrantedAccess,PPRIVILEGE_SET Privileges,WINBOOL ObjectCreation,WINBOOL AccessGranted,LPBOOL GenerateOnClose);
WINBOOL  ObjectOpenAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, LPWSTR ObjectTypeName, LPWSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, WINBOOL ObjectCreation, WINBOOL AccessGranted, LPBOOL GenerateOnClose);
//C        WINBOOL ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,DWORD DesiredAccess,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted);
WINBOOL  ObjectPrivilegeAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
//C        WINBOOL ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,DWORD DesiredAccess,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted);
WINBOOL  ObjectPrivilegeAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
//C        WINBOOL ObjectCloseAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose);
WINBOOL  ObjectCloseAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
//C        WINBOOL ObjectCloseAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose);
WINBOOL  ObjectCloseAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
//C        WINBOOL ObjectDeleteAuditAlarmA(LPCSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose);
WINBOOL  ObjectDeleteAuditAlarmA(LPCSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
//C        WINBOOL ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName,LPVOID HandleId,WINBOOL GenerateOnClose);
WINBOOL  ObjectDeleteAuditAlarmW(LPCWSTR SubsystemName, LPVOID HandleId, WINBOOL GenerateOnClose);
//C        WINBOOL PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName,LPCSTR ServiceName,HANDLE ClientToken,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted);
WINBOOL  PrivilegedServiceAuditAlarmA(LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
//C        WINBOOL PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName,LPCWSTR ServiceName,HANDLE ClientToken,PPRIVILEGE_SET Privileges,WINBOOL AccessGranted);
WINBOOL  PrivilegedServiceAuditAlarmW(LPCWSTR SubsystemName, LPCWSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, WINBOOL AccessGranted);
//C        WINBOOL IsWellKnownSid(PSID pSid,WELL_KNOWN_SID_TYPE WellKnownSidType);
WINBOOL  IsWellKnownSid(PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType);
//C        WINBOOL CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType,PSID DomainSid,PSID pSid,DWORD *cbSid);
WINBOOL  CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid);
//C        WINBOOL EqualDomainSid(PSID pSid1,PSID pSid2,WINBOOL *pfEqual);
WINBOOL  EqualDomainSid(PSID pSid1, PSID pSid2, WINBOOL *pfEqual);
//C        WINBOOL GetWindowsAccountDomainSid(PSID pSid,PSID pDomainSid,DWORD *cbDomainSid);
WINBOOL  GetWindowsAccountDomainSid(PSID pSid, PSID pDomainSid, DWORD *cbDomainSid);
//C        WINBOOL IsValidSid(PSID pSid);
WINBOOL  IsValidSid(PSID pSid);
//C        WINBOOL EqualSid(PSID pSid1,PSID pSid2);
WINBOOL  EqualSid(PSID pSid1, PSID pSid2);
//C        WINBOOL EqualPrefixSid(PSID pSid1,PSID pSid2);
WINBOOL  EqualPrefixSid(PSID pSid1, PSID pSid2);
//C        DWORD GetSidLengthRequired (UCHAR nSubAuthorityCount);
DWORD  GetSidLengthRequired(UCHAR nSubAuthorityCount);
//C        WINBOOL AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,BYTE nSubAuthorityCount,DWORD nSubAuthority0,DWORD nSubAuthority1,DWORD nSubAuthority2,DWORD nSubAuthority3,DWORD nSubAuthority4,DWORD nSubAuthority5,DWORD nSubAuthority6,DWORD nSubAuthority7,PSID *pSid);
WINBOOL  AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid);
//C        PVOID FreeSid(PSID pSid);
PVOID  FreeSid(PSID pSid);
//C        WINBOOL InitializeSid(PSID Sid,PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,BYTE nSubAuthorityCount);
WINBOOL  InitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount);
//C        PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority(PSID pSid);
PSID_IDENTIFIER_AUTHORITY  GetSidIdentifierAuthority(PSID pSid);
//C        PDWORD GetSidSubAuthority(PSID pSid,DWORD nSubAuthority);
PDWORD  GetSidSubAuthority(PSID pSid, DWORD nSubAuthority);
//C        PUCHAR GetSidSubAuthorityCount(PSID pSid);
PUCHAR  GetSidSubAuthorityCount(PSID pSid);
//C        DWORD GetLengthSid(PSID pSid);
DWORD  GetLengthSid(PSID pSid);
//C        WINBOOL CopySid(DWORD nDestinationSidLength,PSID pDestinationSid,PSID pSourceSid);
WINBOOL  CopySid(DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid);
//C        WINBOOL AreAllAccessesGranted(DWORD GrantedAccess,DWORD DesiredAccess);
WINBOOL  AreAllAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess);
//C        WINBOOL AreAnyAccessesGranted(DWORD GrantedAccess,DWORD DesiredAccess);
WINBOOL  AreAnyAccessesGranted(DWORD GrantedAccess, DWORD DesiredAccess);
//C        void MapGenericMask(PDWORD AccessMask,PGENERIC_MAPPING GenericMapping);
void  MapGenericMask(PDWORD AccessMask, PGENERIC_MAPPING GenericMapping);
//C        WINBOOL IsValidAcl(PACL pAcl);
WINBOOL  IsValidAcl(PACL pAcl);
//C        WINBOOL InitializeAcl(PACL pAcl,DWORD nAclLength,DWORD dwAclRevision);
WINBOOL  InitializeAcl(PACL pAcl, DWORD nAclLength, DWORD dwAclRevision);
//C        WINBOOL GetAclInformation(PACL pAcl,LPVOID pAclInformation,DWORD nAclInformationLength,ACL_INFORMATION_CLASS dwAclInformationClass);
WINBOOL  GetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
//C        WINBOOL SetAclInformation(PACL pAcl,LPVOID pAclInformation,DWORD nAclInformationLength,ACL_INFORMATION_CLASS dwAclInformationClass);
WINBOOL  SetAclInformation(PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass);
//C        WINBOOL AddAce(PACL pAcl,DWORD dwAceRevision,DWORD dwStartingAceIndex,LPVOID pAceList,DWORD nAceListLength);
WINBOOL  AddAce(PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength);
//C        WINBOOL DeleteAce(PACL pAcl,DWORD dwAceIndex);
WINBOOL  DeleteAce(PACL pAcl, DWORD dwAceIndex);
//C        WINBOOL GetAce(PACL pAcl,DWORD dwAceIndex,LPVOID *pAce);
WINBOOL  GetAce(PACL pAcl, DWORD dwAceIndex, LPVOID *pAce);
//C        WINBOOL AddAccessAllowedAce(PACL pAcl,DWORD dwAceRevision,DWORD AccessMask,PSID pSid);
WINBOOL  AddAccessAllowedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
//C        WINBOOL AddAccessAllowedAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid);
WINBOOL  AddAccessAllowedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
//C        WINBOOL AddAccessDeniedAce(PACL pAcl,DWORD dwAceRevision,DWORD AccessMask,PSID pSid);
WINBOOL  AddAccessDeniedAce(PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid);
//C        WINBOOL AddAccessDeniedAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid);
WINBOOL  AddAccessDeniedAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid);
//C        WINBOOL AddAuditAccessAce(PACL pAcl,DWORD dwAceRevision,DWORD dwAccessMask,PSID pSid,WINBOOL bAuditSuccess,WINBOOL bAuditFailure);
WINBOOL  AddAuditAccessAce(PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
//C        WINBOOL AddAuditAccessAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD dwAccessMask,PSID pSid,WINBOOL bAuditSuccess,WINBOOL bAuditFailure);
WINBOOL  AddAuditAccessAceEx(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
//C        WINBOOL AddAccessAllowedObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID *ObjectTypeGuid,GUID *InheritedObjectTypeGuid,PSID pSid);
WINBOOL  AddAccessAllowedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
//C        WINBOOL AddAccessDeniedObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID *ObjectTypeGuid,GUID *InheritedObjectTypeGuid,PSID pSid);
WINBOOL  AddAccessDeniedObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid);
//C        WINBOOL AddAuditAccessObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID *ObjectTypeGuid,GUID *InheritedObjectTypeGuid,PSID pSid,WINBOOL bAuditSuccess,WINBOOL bAuditFailure);
WINBOOL  AddAuditAccessObjectAce(PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, WINBOOL bAuditSuccess, WINBOOL bAuditFailure);
//C        WINBOOL FindFirstFreeAce(PACL pAcl,LPVOID *pAce);
WINBOOL  FindFirstFreeAce(PACL pAcl, LPVOID *pAce);
//C        WINBOOL InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD dwRevision);
WINBOOL  InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision);
//C        WINBOOL IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor);
WINBOOL  IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor);
//C        DWORD GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor);
DWORD  GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor);
//C        WINBOOL GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSECURITY_DESCRIPTOR_CONTROL pControl,LPDWORD lpdwRevision);
WINBOOL  GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision);
//C        WINBOOL SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor,SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
WINBOOL  SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
//C        WINBOOL SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,WINBOOL bDaclPresent,PACL pDacl,WINBOOL bDaclDefaulted);
WINBOOL  SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bDaclPresent, PACL pDacl, WINBOOL bDaclDefaulted);
//C        WINBOOL GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,LPBOOL lpbDaclPresent,PACL *pDacl,LPBOOL lpbDaclDefaulted);
WINBOOL  GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted);
//C        WINBOOL SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,WINBOOL bSaclPresent,PACL pSacl,WINBOOL bSaclDefaulted);
WINBOOL  SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, WINBOOL bSaclPresent, PACL pSacl, WINBOOL bSaclDefaulted);
//C        WINBOOL GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,LPBOOL lpbSaclPresent,PACL *pSacl,LPBOOL lpbSaclDefaulted);
WINBOOL  GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted);
//C        WINBOOL SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pOwner,WINBOOL bOwnerDefaulted);
WINBOOL  SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, WINBOOL bOwnerDefaulted);
//C        WINBOOL GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID *pOwner,LPBOOL lpbOwnerDefaulted);
WINBOOL  GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted);
//C        WINBOOL SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pGroup,WINBOOL bGroupDefaulted);
WINBOOL  SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, WINBOOL bGroupDefaulted);
//C        WINBOOL GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID *pGroup,LPBOOL lpbGroupDefaulted);
WINBOOL  GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted);
//C        DWORD SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor,PUCHAR RMControl);
DWORD  SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
//C        DWORD GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor,PUCHAR RMControl);
DWORD  GetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl);
//C        WINBOOL CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR *NewDescriptor,WINBOOL IsDirectoryObject,HANDLE Token,PGENERIC_MAPPING GenericMapping);
WINBOOL  CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, WINBOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping);
//C        WINBOOL ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,PSECURITY_DESCRIPTOR *NewSecurityDescriptor,GUID *ObjectType,BOOLEAN IsDirectoryObject,PGENERIC_MAPPING GenericMapping);
WINBOOL  ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping);
//C        WINBOOL CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR *NewDescriptor,GUID *ObjectType,WINBOOL IsContainerObject,ULONG AutoInheritFlags,HANDLE Token,PGENERIC_MAPPING GenericMapping);
WINBOOL  CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
//C        WINBOOL CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR *NewDescriptor,GUID **ObjectTypes,ULONG GuidCount,WINBOOL IsContainerObject,ULONG AutoInheritFlags,HANDLE Token,PGENERIC_MAPPING GenericMapping);
WINBOOL  CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, WINBOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping);
//C        WINBOOL SetPrivateObjectSecurity (SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ModificationDescriptor,PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,PGENERIC_MAPPING GenericMapping,HANDLE Token);
WINBOOL  SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token);
//C        WINBOOL SetPrivateObjectSecurityEx (SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ModificationDescriptor,PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,ULONG AutoInheritFlags,PGENERIC_MAPPING GenericMapping,HANDLE Token);
WINBOOL  SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token);
//C        WINBOOL GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ResultantDescriptor,DWORD DescriptorLength,PDWORD ReturnLength);
WINBOOL  GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength);
//C        WINBOOL DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR *ObjectDescriptor);
WINBOOL  DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR *ObjectDescriptor);
//C        WINBOOL MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,LPDWORD lpdwBufferLength);
WINBOOL  MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength);
//C        WINBOOL MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,LPDWORD lpdwAbsoluteSecurityDescriptorSize,PACL pDacl,LPDWORD lpdwDaclSize,PACL pSacl,LPDWORD lpdwSaclSize,PSID pOwner,LPDWORD lpdwOwnerSize,PSID pPrimaryGroup,LPDWORD lpdwPrimaryGroupSize);
WINBOOL  MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize);
//C        WINBOOL MakeAbsoluteSD2(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,LPDWORD lpdwBufferSize);
WINBOOL  MakeAbsoluteSD2(PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferSize);
//C        WINBOOL SetFileSecurityA(LPCSTR lpFileName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
WINBOOL  SetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
//C        WINBOOL SetFileSecurityW(LPCWSTR lpFileName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
WINBOOL  SetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
//C        WINBOOL GetFileSecurityA(LPCSTR lpFileName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded);
WINBOOL  GetFileSecurityA(LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
//C        WINBOOL GetFileSecurityW(LPCWSTR lpFileName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded);
WINBOOL  GetFileSecurityW(LPCWSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded);
//C        WINBOOL SetKernelObjectSecurity(HANDLE Handle,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR SecurityDescriptor);
WINBOOL  SetKernelObjectSecurity(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
//C        HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName,WINBOOL bWatchSubtree,DWORD dwNotifyFilter);
HANDLE  FindFirstChangeNotificationA(LPCSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
//C        HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName,WINBOOL bWatchSubtree,DWORD dwNotifyFilter);
HANDLE  FindFirstChangeNotificationW(LPCWSTR lpPathName, WINBOOL bWatchSubtree, DWORD dwNotifyFilter);
//C        WINBOOL FindNextChangeNotification(HANDLE hChangeHandle);
WINBOOL  FindNextChangeNotification(HANDLE hChangeHandle);
//C        WINBOOL FindCloseChangeNotification(HANDLE hChangeHandle);
WINBOOL  FindCloseChangeNotification(HANDLE hChangeHandle);
//C        WINBOOL ReadDirectoryChangesW(HANDLE hDirectory,LPVOID lpBuffer,DWORD nBufferLength,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
WINBOOL  ReadDirectoryChangesW(HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
//C        WINBOOL VirtualLock(LPVOID lpAddress,SIZE_T dwSize);
WINBOOL  VirtualLock(LPVOID lpAddress, SIZE_T dwSize);
//C        WINBOOL VirtualUnlock(LPVOID lpAddress,SIZE_T dwSize);
WINBOOL  VirtualUnlock(LPVOID lpAddress, SIZE_T dwSize);
//C        LPVOID MapViewOfFileEx(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap,LPVOID lpBaseAddress);
LPVOID  MapViewOfFileEx(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress);
//C        WINBOOL SetPriorityClass(HANDLE hProcess,DWORD dwPriorityClass);
WINBOOL  SetPriorityClass(HANDLE hProcess, DWORD dwPriorityClass);
//C        DWORD GetPriorityClass(HANDLE hProcess);
DWORD  GetPriorityClass(HANDLE hProcess);
//C        WINBOOL IsBadReadPtr(const void *lp,UINT_PTR ucb);
WINBOOL  IsBadReadPtr(void *lp, UINT_PTR ucb);
//C        WINBOOL IsBadWritePtr(LPVOID lp,UINT_PTR ucb);
WINBOOL  IsBadWritePtr(LPVOID lp, UINT_PTR ucb);
//C        WINBOOL IsBadHugeReadPtr(const void *lp,UINT_PTR ucb);
WINBOOL  IsBadHugeReadPtr(void *lp, UINT_PTR ucb);
//C        WINBOOL IsBadHugeWritePtr(LPVOID lp,UINT_PTR ucb);
WINBOOL  IsBadHugeWritePtr(LPVOID lp, UINT_PTR ucb);
//C        WINBOOL IsBadCodePtr(FARPROC lpfn);
WINBOOL  IsBadCodePtr(FARPROC lpfn);
//C        WINBOOL IsBadStringPtrA(LPCSTR lpsz,UINT_PTR ucchMax);
WINBOOL  IsBadStringPtrA(LPCSTR lpsz, UINT_PTR ucchMax);
//C        WINBOOL IsBadStringPtrW(LPCWSTR lpsz,UINT_PTR ucchMax);
WINBOOL  IsBadStringPtrW(LPCWSTR lpsz, UINT_PTR ucchMax);
//C        WINBOOL LookupAccountSidA(LPCSTR lpSystemName,PSID Sid,LPSTR Name,LPDWORD cchName,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse);
WINBOOL  LookupAccountSidA(LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
//C        WINBOOL LookupAccountSidW(LPCWSTR lpSystemName,PSID Sid,LPWSTR Name,LPDWORD cchName,LPWSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse);
WINBOOL  LookupAccountSidW(LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
//C        WINBOOL LookupAccountNameA(LPCSTR lpSystemName,LPCSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse);
WINBOOL  LookupAccountNameA(LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
//C        WINBOOL LookupAccountNameW(LPCWSTR lpSystemName,LPCWSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPWSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse);
WINBOOL  LookupAccountNameW(LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse);
//C        WINBOOL LookupPrivilegeValueA(LPCSTR lpSystemName,LPCSTR lpName,PLUID lpLuid);
WINBOOL  LookupPrivilegeValueA(LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid);
//C        WINBOOL LookupPrivilegeValueW(LPCWSTR lpSystemName,LPCWSTR lpName,PLUID lpLuid);
WINBOOL  LookupPrivilegeValueW(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
//C        WINBOOL LookupPrivilegeNameA(LPCSTR lpSystemName,PLUID lpLuid,LPSTR lpName,LPDWORD cchName);
WINBOOL  LookupPrivilegeNameA(LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName);
//C        WINBOOL LookupPrivilegeNameW(LPCWSTR lpSystemName,PLUID lpLuid,LPWSTR lpName,LPDWORD cchName);
WINBOOL  LookupPrivilegeNameW(LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
//C        WINBOOL LookupPrivilegeDisplayNameA(LPCSTR lpSystemName,LPCSTR lpName,LPSTR lpDisplayName,LPDWORD cchDisplayName,LPDWORD lpLanguageId);
WINBOOL  LookupPrivilegeDisplayNameA(LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
//C        WINBOOL LookupPrivilegeDisplayNameW(LPCWSTR lpSystemName,LPCWSTR lpName,LPWSTR lpDisplayName,LPDWORD cchDisplayName,LPDWORD lpLanguageId);
WINBOOL  LookupPrivilegeDisplayNameW(LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId);
//C        WINBOOL AllocateLocallyUniqueId(PLUID Luid);
WINBOOL  AllocateLocallyUniqueId(PLUID Luid);
//C        WINBOOL BuildCommDCBA(LPCSTR lpDef,LPDCB lpDCB);
WINBOOL  BuildCommDCBA(LPCSTR lpDef, LPDCB lpDCB);
//C        WINBOOL BuildCommDCBW(LPCWSTR lpDef,LPDCB lpDCB);
WINBOOL  BuildCommDCBW(LPCWSTR lpDef, LPDCB lpDCB);
//C        WINBOOL BuildCommDCBAndTimeoutsA(LPCSTR lpDef,LPDCB lpDCB,LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL  BuildCommDCBAndTimeoutsA(LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
//C        WINBOOL BuildCommDCBAndTimeoutsW(LPCWSTR lpDef,LPDCB lpDCB,LPCOMMTIMEOUTS lpCommTimeouts);
WINBOOL  BuildCommDCBAndTimeoutsW(LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
//C        WINBOOL CommConfigDialogA(LPCSTR lpszName,HWND hWnd,LPCOMMCONFIG lpCC);
WINBOOL  CommConfigDialogA(LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
//C        WINBOOL CommConfigDialogW(LPCWSTR lpszName,HWND hWnd,LPCOMMCONFIG lpCC);
WINBOOL  CommConfigDialogW(LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC);
//C        WINBOOL GetDefaultCommConfigA(LPCSTR lpszName,LPCOMMCONFIG lpCC,LPDWORD lpdwSize);
WINBOOL  GetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
//C        WINBOOL GetDefaultCommConfigW(LPCWSTR lpszName,LPCOMMCONFIG lpCC,LPDWORD lpdwSize);
WINBOOL  GetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize);
//C        WINBOOL SetDefaultCommConfigA(LPCSTR lpszName,LPCOMMCONFIG lpCC,DWORD dwSize);
WINBOOL  SetDefaultCommConfigA(LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
//C        WINBOOL SetDefaultCommConfigW(LPCWSTR lpszName,LPCOMMCONFIG lpCC,DWORD dwSize);
WINBOOL  SetDefaultCommConfigW(LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize);
//C        WINBOOL GetComputerNameA(LPSTR lpBuffer,LPDWORD nSize);
WINBOOL  GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize);
//C        WINBOOL GetComputerNameW(LPWSTR lpBuffer,LPDWORD nSize);
WINBOOL  GetComputerNameW(LPWSTR lpBuffer, LPDWORD nSize);
//C        WINBOOL SetComputerNameA(LPCSTR lpComputerName);
WINBOOL  SetComputerNameA(LPCSTR lpComputerName);
//C        WINBOOL SetComputerNameW(LPCWSTR lpComputerName);
WINBOOL  SetComputerNameW(LPCWSTR lpComputerName);
//C       typedef enum _COMPUTER_NAME_FORMAT {
//C         ComputerNameNetBIOS,ComputerNameDnsHostname,ComputerNameDnsDomain,ComputerNameDnsFullyQualified,ComputerNamePhysicalNetBIOS,ComputerNamePhysicalDnsHostname,ComputerNamePhysicalDnsDomain,ComputerNamePhysicalDnsFullyQualified,ComputerNameMax
//C       } COMPUTER_NAME_FORMAT;
enum _COMPUTER_NAME_FORMAT
{
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax,
}
alias _COMPUTER_NAME_FORMAT COMPUTER_NAME_FORMAT;
//C        WINBOOL GetComputerNameExA(COMPUTER_NAME_FORMAT NameType,LPSTR lpBuffer,LPDWORD nSize);
WINBOOL  GetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize);
//C        WINBOOL GetComputerNameExW(COMPUTER_NAME_FORMAT NameType,LPWSTR lpBuffer,LPDWORD nSize);
WINBOOL  GetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
//C        WINBOOL SetComputerNameExA(COMPUTER_NAME_FORMAT NameType,LPCSTR lpBuffer);
WINBOOL  SetComputerNameExA(COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer);
//C        WINBOOL SetComputerNameExW(COMPUTER_NAME_FORMAT NameType,LPCWSTR lpBuffer);
WINBOOL  SetComputerNameExW(COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer);
//C        WINBOOL DnsHostnameToComputerNameA(LPCSTR Hostname,LPSTR ComputerName,LPDWORD nSize);
WINBOOL  DnsHostnameToComputerNameA(LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize);
//C        WINBOOL DnsHostnameToComputerNameW(LPCWSTR Hostname,LPWSTR ComputerName,LPDWORD nSize);
WINBOOL  DnsHostnameToComputerNameW(LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize);
//C        WINBOOL GetUserNameA(LPSTR lpBuffer,LPDWORD pcbBuffer);
WINBOOL  GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer);
//C        WINBOOL GetUserNameW(LPWSTR lpBuffer,LPDWORD pcbBuffer);
WINBOOL  GetUserNameW(LPWSTR lpBuffer, LPDWORD pcbBuffer);
//C        WINBOOL LogonUserA(LPCSTR lpszUsername,LPCSTR lpszDomain,LPCSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken);
WINBOOL  LogonUserA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
//C        WINBOOL LogonUserW(LPCWSTR lpszUsername,LPCWSTR lpszDomain,LPCWSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken);
WINBOOL  LogonUserW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken);
//C        WINBOOL LogonUserExA(LPCSTR lpszUsername,LPCSTR lpszDomain,LPCSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken,PSID *ppLogonSid,PVOID *ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits);
WINBOOL  LogonUserExA(LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
//C        WINBOOL LogonUserExW(LPCWSTR lpszUsername,LPCWSTR lpszDomain,LPCWSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken,PSID *ppLogonSid,PVOID *ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits);
WINBOOL  LogonUserExW(LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits);
//C        WINBOOL ImpersonateLoggedOnUser(HANDLE hToken);
WINBOOL  ImpersonateLoggedOnUser(HANDLE hToken);
//C        WINBOOL CreateProcessAsUserA(HANDLE hToken,LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL  CreateProcessAsUserA(HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
//C        WINBOOL CreateProcessAsUserW(HANDLE hToken,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,WINBOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL  CreateProcessAsUserW(HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, WINBOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
//C        WINBOOL CreateProcessWithLogonW(LPCWSTR lpUsername,LPCWSTR lpDomain,LPCWSTR lpPassword,DWORD dwLogonFlags,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL  CreateProcessWithLogonW(LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
//C        WINBOOL CreateProcessWithTokenW(HANDLE hToken,DWORD dwLogonFlags,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
WINBOOL  CreateProcessWithTokenW(HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
//C        WINBOOL ImpersonateAnonymousToken(HANDLE ThreadHandle);
WINBOOL  ImpersonateAnonymousToken(HANDLE ThreadHandle);
//C        WINBOOL DuplicateTokenEx(HANDLE hExistingToken,DWORD dwDesiredAccess,LPSECURITY_ATTRIBUTES lpTokenAttributes,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,TOKEN_TYPE TokenType,PHANDLE phNewToken);
WINBOOL  DuplicateTokenEx(HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
//C        WINBOOL CreateRestrictedToken(HANDLE ExistingTokenHandle,DWORD Flags,DWORD DisableSidCount,PSID_AND_ATTRIBUTES SidsToDisable,DWORD DeletePrivilegeCount,PLUID_AND_ATTRIBUTES PrivilegesToDelete,DWORD RestrictedSidCount,PSID_AND_ATTRIBUTES SidsToRestrict,PHANDLE NewTokenHandle);
WINBOOL  CreateRestrictedToken(HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle);
//C        WINBOOL IsTokenRestricted(HANDLE TokenHandle);
WINBOOL  IsTokenRestricted(HANDLE TokenHandle);
//C        WINBOOL IsTokenUntrusted(HANDLE TokenHandle);
WINBOOL  IsTokenUntrusted(HANDLE TokenHandle);
//C        WINBOOL CheckTokenMembership(HANDLE TokenHandle,PSID SidToCheck,PBOOL IsMember);
WINBOOL  CheckTokenMembership(HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember);
//C       typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
alias WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
//C        WINBOOL RegisterWaitForSingleObject(PHANDLE phNewWaitObject,HANDLE hObject,WAITORTIMERCALLBACK Callback,PVOID Context,ULONG dwMilliseconds,ULONG dwFlags);
WINBOOL  RegisterWaitForSingleObject(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
//C        HANDLE RegisterWaitForSingleObjectEx(HANDLE hObject,WAITORTIMERCALLBACK Callback,PVOID Context,ULONG dwMilliseconds,ULONG dwFlags);
HANDLE  RegisterWaitForSingleObjectEx(HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
//C        WINBOOL UnregisterWait(HANDLE WaitHandle);
WINBOOL  UnregisterWait(HANDLE WaitHandle);
//C        WINBOOL UnregisterWaitEx(HANDLE WaitHandle,HANDLE CompletionEvent);
WINBOOL  UnregisterWaitEx(HANDLE WaitHandle, HANDLE CompletionEvent);
//C        WINBOOL QueueUserWorkItem(LPTHREAD_START_ROUTINE Function,PVOID Context,ULONG Flags);
WINBOOL  QueueUserWorkItem(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
//C        WINBOOL BindIoCompletionCallback(HANDLE FileHandle,LPOVERLAPPED_COMPLETION_ROUTINE Function,ULONG Flags);
WINBOOL  BindIoCompletionCallback(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags);
//C        HANDLE CreateTimerQueue(void);
HANDLE  CreateTimerQueue();
//C        WINBOOL CreateTimerQueueTimer(PHANDLE phNewTimer,HANDLE TimerQueue,WAITORTIMERCALLBACK Callback,PVOID Parameter,DWORD DueTime,DWORD Period,ULONG Flags);
WINBOOL  CreateTimerQueueTimer(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
//C        WINBOOL ChangeTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer,ULONG DueTime,ULONG Period);
WINBOOL  ChangeTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
//C        WINBOOL DeleteTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer,HANDLE CompletionEvent);
WINBOOL  DeleteTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);
//C        WINBOOL DeleteTimerQueueEx(HANDLE TimerQueue,HANDLE CompletionEvent);
WINBOOL  DeleteTimerQueueEx(HANDLE TimerQueue, HANDLE CompletionEvent);
//C        HANDLE SetTimerQueueTimer(HANDLE TimerQueue,WAITORTIMERCALLBACK Callback,PVOID Parameter,DWORD DueTime,DWORD Period,WINBOOL PreferIo);
HANDLE  SetTimerQueueTimer(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, WINBOOL PreferIo);
//C        WINBOOL CancelTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer);
WINBOOL  CancelTimerQueueTimer(HANDLE TimerQueue, HANDLE Timer);
//C        WINBOOL DeleteTimerQueue(HANDLE TimerQueue);
WINBOOL  DeleteTimerQueue(HANDLE TimerQueue);
//C       typedef struct tagHW_PROFILE_INFOA {
//C         DWORD dwDockInfo;
//C         CHAR szHwProfileGuid[39];
//C         CHAR szHwProfileName[80];
//C       } HW_PROFILE_INFOA,*LPHW_PROFILE_INFOA;
struct tagHW_PROFILE_INFOA
{
    DWORD dwDockInfo;
    CHAR [39]szHwProfileGuid;
    CHAR [80]szHwProfileName;
}
alias tagHW_PROFILE_INFOA HW_PROFILE_INFOA;
alias tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;
//C       typedef struct tagHW_PROFILE_INFOW {
//C         DWORD dwDockInfo;
//C         WCHAR szHwProfileGuid[39];
//C         WCHAR szHwProfileName[80];
//C       } HW_PROFILE_INFOW,*LPHW_PROFILE_INFOW;
struct tagHW_PROFILE_INFOW
{
    DWORD dwDockInfo;
    WCHAR [39]szHwProfileGuid;
    WCHAR [80]szHwProfileName;
}
alias tagHW_PROFILE_INFOW HW_PROFILE_INFOW;
alias tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;
//C       typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
alias HW_PROFILE_INFOA HW_PROFILE_INFO;
//C       typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
alias LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
//C        WINBOOL GetCurrentHwProfileA (LPHW_PROFILE_INFOA lpHwProfileInfo);
WINBOOL  GetCurrentHwProfileA(LPHW_PROFILE_INFOA lpHwProfileInfo);
//C        WINBOOL GetCurrentHwProfileW (LPHW_PROFILE_INFOW lpHwProfileInfo);
WINBOOL  GetCurrentHwProfileW(LPHW_PROFILE_INFOW lpHwProfileInfo);
//C        WINBOOL QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
WINBOOL  QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount);
//C        WINBOOL QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency);
WINBOOL  QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency);
//C        WINBOOL GetVersionExA(LPOSVERSIONINFOA lpVersionInformation);
WINBOOL  GetVersionExA(LPOSVERSIONINFOA lpVersionInformation);
//C        WINBOOL GetVersionExW(LPOSVERSIONINFOW lpVersionInformation);
WINBOOL  GetVersionExW(LPOSVERSIONINFOW lpVersionInformation);
//C        WINBOOL VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation,DWORD dwTypeMask,DWORDLONG dwlConditionMask);
WINBOOL  VerifyVersionInfoA(LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
//C        WINBOOL VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation,DWORD dwTypeMask,DWORDLONG dwlConditionMask);
WINBOOL  VerifyVersionInfoW(LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask);
//C       typedef struct _SYSTEM_POWER_STATUS {
//C         BYTE ACLineStatus;
//C         BYTE BatteryFlag;
//C         BYTE BatteryLifePercent;
//C         BYTE Reserved1;
//C         DWORD BatteryLifeTime;
//C         DWORD BatteryFullLifeTime;
//C       } SYSTEM_POWER_STATUS,*LPSYSTEM_POWER_STATUS;
struct _SYSTEM_POWER_STATUS
{
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}
alias _SYSTEM_POWER_STATUS SYSTEM_POWER_STATUS;
alias _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;
//C       WINBOOL GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
WINBOOL  GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
//C       WINBOOL SetSystemPowerState(WINBOOL fSuspend,WINBOOL fForce);
WINBOOL  SetSystemPowerState(WINBOOL fSuspend, WINBOOL fForce);
//C        WINBOOL AllocateUserPhysicalPages(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR PageArray);
WINBOOL  AllocateUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
//C        WINBOOL FreeUserPhysicalPages(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR PageArray);
WINBOOL  FreeUserPhysicalPages(HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray);
//C        WINBOOL MapUserPhysicalPages(PVOID VirtualAddress,ULONG_PTR NumberOfPages,PULONG_PTR PageArray);
WINBOOL  MapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
//C        WINBOOL MapUserPhysicalPagesScatter(PVOID *VirtualAddresses,ULONG_PTR NumberOfPages,PULONG_PTR PageArray);
WINBOOL  MapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray);
//C        HANDLE CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes,LPCSTR lpName);
HANDLE  CreateJobObjectA(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName);
//C        HANDLE CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes,LPCWSTR lpName);
HANDLE  CreateJobObjectW(LPSECURITY_ATTRIBUTES lpJobAttributes, LPCWSTR lpName);
//C        HANDLE OpenJobObjectA(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCSTR lpName);
HANDLE  OpenJobObjectA(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCSTR lpName);
//C        HANDLE OpenJobObjectW(DWORD dwDesiredAccess,WINBOOL bInheritHandle,LPCWSTR lpName);
HANDLE  OpenJobObjectW(DWORD dwDesiredAccess, WINBOOL bInheritHandle, LPCWSTR lpName);
//C        WINBOOL AssignProcessToJobObject(HANDLE hJob,HANDLE hProcess);
WINBOOL  AssignProcessToJobObject(HANDLE hJob, HANDLE hProcess);
//C        WINBOOL TerminateJobObject(HANDLE hJob,UINT uExitCode);
WINBOOL  TerminateJobObject(HANDLE hJob, UINT uExitCode);
//C        WINBOOL QueryInformationJobObject(HANDLE hJob,JOBOBJECTINFOCLASS JobObjectInformationClass,LPVOID lpJobObjectInformation,DWORD cbJobObjectInformationLength,LPDWORD lpReturnLength);
WINBOOL  QueryInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength, LPDWORD lpReturnLength);
//C        WINBOOL SetInformationJobObject(HANDLE hJob,JOBOBJECTINFOCLASS JobObjectInformationClass,LPVOID lpJobObjectInformation,DWORD cbJobObjectInformationLength);
WINBOOL  SetInformationJobObject(HANDLE hJob, JOBOBJECTINFOCLASS JobObjectInformationClass, LPVOID lpJobObjectInformation, DWORD cbJobObjectInformationLength);
//C        WINBOOL IsProcessInJob(HANDLE ProcessHandle,HANDLE JobHandle,PBOOL Result);
WINBOOL  IsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle, PBOOL Result);
//C        WINBOOL CreateJobSet(ULONG NumJob,PJOB_SET_ARRAY UserJobSet,ULONG Flags);
WINBOOL  CreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
//C        PVOID AddVectoredExceptionHandler (ULONG First,PVECTORED_EXCEPTION_HANDLER Handler);
PVOID  AddVectoredExceptionHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
//C        ULONG RemoveVectoredExceptionHandler(PVOID Handle);
ULONG  RemoveVectoredExceptionHandler(PVOID Handle);
//C        PVOID AddVectoredContinueHandler (ULONG First,PVECTORED_EXCEPTION_HANDLER Handler);
PVOID  AddVectoredContinueHandler(ULONG First, PVECTORED_EXCEPTION_HANDLER Handler);
//C        ULONG RemoveVectoredContinueHandler(PVOID Handle);
ULONG  RemoveVectoredContinueHandler(PVOID Handle);
//C        HANDLE FindFirstVolumeA(LPSTR lpszVolumeName,DWORD cchBufferLength);
HANDLE  FindFirstVolumeA(LPSTR lpszVolumeName, DWORD cchBufferLength);
//C        HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName,DWORD cchBufferLength);
HANDLE  FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength);
//C        WINBOOL FindNextVolumeA(HANDLE hFindVolume,LPSTR lpszVolumeName,DWORD cchBufferLength);
WINBOOL  FindNextVolumeA(HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength);
//C        WINBOOL FindNextVolumeW(HANDLE hFindVolume,LPWSTR lpszVolumeName,DWORD cchBufferLength);
WINBOOL  FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength);
//C        WINBOOL FindVolumeClose(HANDLE hFindVolume);
WINBOOL  FindVolumeClose(HANDLE hFindVolume);
//C        HANDLE FindFirstVolumeMountPointA(LPCSTR lpszRootPathName,LPSTR lpszVolumeMountPoint,DWORD cchBufferLength);
HANDLE  FindFirstVolumeMountPointA(LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
//C        HANDLE FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName,LPWSTR lpszVolumeMountPoint,DWORD cchBufferLength);
HANDLE  FindFirstVolumeMountPointW(LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
//C        WINBOOL FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint,LPSTR lpszVolumeMountPoint,DWORD cchBufferLength);
WINBOOL  FindNextVolumeMountPointA(HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength);
//C        WINBOOL FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint,LPWSTR lpszVolumeMountPoint,DWORD cchBufferLength);
WINBOOL  FindNextVolumeMountPointW(HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength);
//C        WINBOOL FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint);
WINBOOL  FindVolumeMountPointClose(HANDLE hFindVolumeMountPoint);
//C        WINBOOL SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint,LPCSTR lpszVolumeName);
WINBOOL  SetVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName);
//C        WINBOOL SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint,LPCWSTR lpszVolumeName);
WINBOOL  SetVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName);
//C        WINBOOL DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint);
WINBOOL  DeleteVolumeMountPointA(LPCSTR lpszVolumeMountPoint);
//C        WINBOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint);
WINBOOL  DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint);
//C        WINBOOL GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint,LPSTR lpszVolumeName,DWORD cchBufferLength);
WINBOOL  GetVolumeNameForVolumeMountPointA(LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength);
//C        WINBOOL GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint,LPWSTR lpszVolumeName,DWORD cchBufferLength);
WINBOOL  GetVolumeNameForVolumeMountPointW(LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength);
//C        WINBOOL GetVolumePathNameA(LPCSTR lpszFileName,LPSTR lpszVolumePathName,DWORD cchBufferLength);
WINBOOL  GetVolumePathNameA(LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength);
//C        WINBOOL GetVolumePathNameW(LPCWSTR lpszFileName,LPWSTR lpszVolumePathName,DWORD cchBufferLength);
WINBOOL  GetVolumePathNameW(LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength);
//C        WINBOOL GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName,LPCH lpszVolumePathNames,DWORD cchBufferLength,PDWORD lpcchReturnLength);
WINBOOL  GetVolumePathNamesForVolumeNameA(LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
//C        WINBOOL GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName,LPWCH lpszVolumePathNames,DWORD cchBufferLength,PDWORD lpcchReturnLength);
WINBOOL  GetVolumePathNamesForVolumeNameW(LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength);
//C       typedef struct tagACTCTXA {
//C         ULONG cbSize;
//C         DWORD dwFlags;
//C         LPCSTR lpSource;
//C         USHORT wProcessorArchitecture;
//C         LANGID wLangId;
//C         LPCSTR lpAssemblyDirectory;
//C         LPCSTR lpResourceName;
//C         LPCSTR lpApplicationName;
//C         HMODULE hModule;
//C       } ACTCTXA,*PACTCTXA;
struct tagACTCTXA
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
}
alias tagACTCTXA ACTCTXA;
alias tagACTCTXA *PACTCTXA;
//C       typedef struct tagACTCTXW {
//C         ULONG cbSize;
//C         DWORD dwFlags;
//C         LPCWSTR lpSource;
//C         USHORT wProcessorArchitecture;
//C         LANGID wLangId;
//C         LPCWSTR lpAssemblyDirectory;
//C         LPCWSTR lpResourceName;
//C         LPCWSTR lpApplicationName;
//C         HMODULE hModule;
//C       } ACTCTXW,*PACTCTXW;
struct tagACTCTXW
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
}
alias tagACTCTXW ACTCTXW;
alias tagACTCTXW *PACTCTXW;
//C       typedef const ACTCTXA *PCACTCTXA;
alias ACTCTXA *PCACTCTXA;
//C       typedef const ACTCTXW *PCACTCTXW;
alias ACTCTXW *PCACTCTXW;
//C       typedef ACTCTXA ACTCTX;
alias ACTCTXA ACTCTX;
//C       typedef PACTCTXA PACTCTX;
alias PACTCTXA PACTCTX;
//C       typedef PCACTCTXA PCACTCTX;
alias PCACTCTXA PCACTCTX;
//C        HANDLE CreateActCtxA(PCACTCTXA pActCtx);
HANDLE  CreateActCtxA(PCACTCTXA pActCtx);
//C        HANDLE CreateActCtxW(PCACTCTXW pActCtx);
HANDLE  CreateActCtxW(PCACTCTXW pActCtx);
//C        void AddRefActCtx(HANDLE hActCtx);
void  AddRefActCtx(HANDLE hActCtx);
//C        void ReleaseActCtx(HANDLE hActCtx);
void  ReleaseActCtx(HANDLE hActCtx);
//C        WINBOOL ZombifyActCtx(HANDLE hActCtx);
WINBOOL  ZombifyActCtx(HANDLE hActCtx);
//C        WINBOOL ActivateActCtx(HANDLE hActCtx,ULONG_PTR *lpCookie);
WINBOOL  ActivateActCtx(HANDLE hActCtx, ULONG_PTR *lpCookie);
//C        WINBOOL DeactivateActCtx(DWORD dwFlags,ULONG_PTR ulCookie);
WINBOOL  DeactivateActCtx(DWORD dwFlags, ULONG_PTR ulCookie);
//C        WINBOOL GetCurrentActCtx(HANDLE *lphActCtx);
WINBOOL  GetCurrentActCtx(HANDLE *lphActCtx);
//C       typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
//C         ULONG cbSize;
//C         ULONG ulDataFormatVersion;
//C         PVOID lpData;
//C         ULONG ulLength;
//C         PVOID lpSectionGlobalData;
//C         ULONG ulSectionGlobalDataLength;
//C         PVOID lpSectionBase;
//C         ULONG ulSectionTotalLength;
//C         HANDLE hActCtx;
//C         ULONG ulAssemblyRosterIndex;
//C       } ACTCTX_SECTION_KEYED_DATA_2600,*PACTCTX_SECTION_KEYED_DATA_2600;
struct tagACTCTX_SECTION_KEYED_DATA_2600
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
}
alias tagACTCTX_SECTION_KEYED_DATA_2600 ACTCTX_SECTION_KEYED_DATA_2600;
alias tagACTCTX_SECTION_KEYED_DATA_2600 *PACTCTX_SECTION_KEYED_DATA_2600;
//C       typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;
alias ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;
//C       typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
//C         PVOID lpInformation;
//C         PVOID lpSectionBase;
//C         ULONG ulSectionLength;
//C         PVOID lpSectionGlobalDataBase;
//C         ULONG ulSectionGlobalDataLength;
//C       } ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,*PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
}
alias tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
alias tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
//C       typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
alias ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
//C       typedef struct tagACTCTX_SECTION_KEYED_DATA {
//C         ULONG cbSize;
//C         ULONG ulDataFormatVersion;
//C         PVOID lpData;
//C         ULONG ulLength;
//C         PVOID lpSectionGlobalData;
//C         ULONG ulSectionGlobalDataLength;
//C         PVOID lpSectionBase;
//C         ULONG ulSectionTotalLength;
//C         HANDLE hActCtx;
//C         ULONG ulAssemblyRosterIndex;
//C         ULONG ulFlags;
//C         ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
//C       } ACTCTX_SECTION_KEYED_DATA,*PACTCTX_SECTION_KEYED_DATA;
struct tagACTCTX_SECTION_KEYED_DATA
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
}
alias tagACTCTX_SECTION_KEYED_DATA ACTCTX_SECTION_KEYED_DATA;
alias tagACTCTX_SECTION_KEYED_DATA *PACTCTX_SECTION_KEYED_DATA;
//C       typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;
alias ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;
//C        WINBOOL FindActCtxSectionStringA(DWORD dwFlags,const GUID *lpExtensionGuid,ULONG ulSectionId,LPCSTR lpStringToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData);
WINBOOL  FindActCtxSectionStringA(DWORD dwFlags, GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
//C        WINBOOL FindActCtxSectionStringW(DWORD dwFlags,const GUID *lpExtensionGuid,ULONG ulSectionId,LPCWSTR lpStringToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData);
WINBOOL  FindActCtxSectionStringW(DWORD dwFlags, GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
//C        WINBOOL FindActCtxSectionGuid(DWORD dwFlags,const GUID *lpExtensionGuid,ULONG ulSectionId,const GUID *lpGuidToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData);
WINBOOL  FindActCtxSectionGuid(DWORD dwFlags, GUID *lpExtensionGuid, ULONG ulSectionId, GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData);
//C       typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
//C         HANDLE hActCtx;
//C         DWORD dwFlags;
//C       } ACTIVATION_CONTEXT_BASIC_INFORMATION,*PACTIVATION_CONTEXT_BASIC_INFORMATION;
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
    HANDLE hActCtx;
    DWORD dwFlags;
}
alias _ACTIVATION_CONTEXT_BASIC_INFORMATION ACTIVATION_CONTEXT_BASIC_INFORMATION;
alias _ACTIVATION_CONTEXT_BASIC_INFORMATION *PACTIVATION_CONTEXT_BASIC_INFORMATION;
//C       typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
alias _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
//C        WINBOOL QueryActCtxW(DWORD dwFlags,HANDLE hActCtx,PVOID pvSubInstance,ULONG ulInfoClass,PVOID pvBuffer,SIZE_T cbBuffer,SIZE_T *pcbWrittenOrRequired);
WINBOOL  QueryActCtxW(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired);
//C       typedef WINBOOL ( *PQUERYACTCTXW_FUNC)(DWORD dwFlags,HANDLE hActCtx,PVOID pvSubInstance,ULONG ulInfoClass,PVOID pvBuffer,SIZE_T cbBuffer,SIZE_T *pcbWrittenOrRequired);
alias WINBOOL  function(DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired)PQUERYACTCTXW_FUNC;
//C        WINBOOL ProcessIdToSessionId(DWORD dwProcessId,DWORD *pSessionId);
WINBOOL  ProcessIdToSessionId(DWORD dwProcessId, DWORD *pSessionId);
//C        DWORD WTSGetActiveConsoleSessionId();
DWORD  WTSGetActiveConsoleSessionId();
//C        WINBOOL IsWow64Process(HANDLE hProcess,PBOOL Wow64Process);
WINBOOL  IsWow64Process(HANDLE hProcess, PBOOL Wow64Process);
//C        WINBOOL GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,PDWORD ReturnedLength);
WINBOOL  GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength);
//C        WINBOOL GetNumaHighestNodeNumber(PULONG HighestNodeNumber);
WINBOOL  GetNumaHighestNodeNumber(PULONG HighestNodeNumber);
//C        WINBOOL GetNumaProcessorNode(UCHAR Processor,PUCHAR NodeNumber);
WINBOOL  GetNumaProcessorNode(UCHAR Processor, PUCHAR NodeNumber);
//C        WINBOOL GetNumaNodeProcessorMask(UCHAR Node,PULONGLONG ProcessorMask);
WINBOOL  GetNumaNodeProcessorMask(UCHAR Node, PULONGLONG ProcessorMask);
//C        WINBOOL GetNumaAvailableMemoryNode(UCHAR Node,PULONGLONG AvailableBytes);
WINBOOL  GetNumaAvailableMemoryNode(UCHAR Node, PULONGLONG AvailableBytes);
//C       typedef struct _DRAWPATRECT {
//C         POINT ptPosition;
//C         POINT ptSize;
//C         WORD wStyle;
//C         WORD wPattern;
//C       } DRAWPATRECT,*PDRAWPATRECT;
struct _DRAWPATRECT
{
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
}
alias _DRAWPATRECT DRAWPATRECT;
alias _DRAWPATRECT *PDRAWPATRECT;
//C       typedef struct _PSINJECTDATA {
//C         DWORD DataBytes;
//C         WORD InjectionPoint;
//C         WORD PageNumber;
//C       } PSINJECTDATA,*PPSINJECTDATA;
struct _PSINJECTDATA
{
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
}
alias _PSINJECTDATA PSINJECTDATA;
alias _PSINJECTDATA *PPSINJECTDATA;
//C       typedef struct _PSFEATURE_OUTPUT {
//C         WINBOOL bPageIndependent;
//C         WINBOOL bSetPageDevice;
//C       } PSFEATURE_OUTPUT,*PPSFEATURE_OUTPUT;
struct _PSFEATURE_OUTPUT
{
    WINBOOL bPageIndependent;
    WINBOOL bSetPageDevice;
}
alias _PSFEATURE_OUTPUT PSFEATURE_OUTPUT;
alias _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT;
//C       typedef struct _PSFEATURE_CUSTPAPER {
//C         LONG lOrientation;
//C         LONG lWidth;
//C         LONG lHeight;
//C         LONG lWidthOffset;
//C         LONG lHeightOffset;
//C       } PSFEATURE_CUSTPAPER,*PPSFEATURE_CUSTPAPER;
struct _PSFEATURE_CUSTPAPER
{
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
}
alias _PSFEATURE_CUSTPAPER PSFEATURE_CUSTPAPER;
alias _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER;
//C       typedef struct tagXFORM {
//C         FLOAT eM11;
//C         FLOAT eM12;
//C         FLOAT eM21;
//C         FLOAT eM22;
//C         FLOAT eDx;
//C         FLOAT eDy;
//C       } XFORM,*PXFORM,*LPXFORM;
struct tagXFORM
{
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
}
alias tagXFORM XFORM;
alias tagXFORM *PXFORM;
alias tagXFORM *LPXFORM;
//C       typedef struct tagBITMAP {
//C         LONG bmType;
//C         LONG bmWidth;
//C         LONG bmHeight;
//C         LONG bmWidthBytes;
//C         WORD bmPlanes;
//C         WORD bmBitsPixel;
//C         LPVOID bmBits;
//C       } BITMAP,*PBITMAP,*NPBITMAP,*LPBITMAP;
struct tagBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
}
alias tagBITMAP BITMAP;
alias tagBITMAP *PBITMAP;
alias tagBITMAP *NPBITMAP;
alias tagBITMAP *LPBITMAP;
//C       typedef struct tagRGBTRIPLE {
//C         BYTE rgbtBlue;
//C         BYTE rgbtGreen;
//C         BYTE rgbtRed;
//C       } RGBTRIPLE;
struct tagRGBTRIPLE
{
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
}
alias tagRGBTRIPLE RGBTRIPLE;
//C       typedef struct tagRGBQUAD {
//C         BYTE rgbBlue;
//C         BYTE rgbGreen;
//C         BYTE rgbRed;
//C         BYTE rgbReserved;
//C       } RGBQUAD;
struct tagRGBQUAD
{
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
}
alias tagRGBQUAD RGBQUAD;
//C       typedef RGBQUAD *LPRGBQUAD;
alias RGBQUAD *LPRGBQUAD;
//C       typedef LONG LCSCSTYPE;
alias LONG LCSCSTYPE;
//C       typedef LONG LCSGAMUTMATCH;
alias LONG LCSGAMUTMATCH;
//C       typedef long FXPT16DOT16,*LPFXPT16DOT16;
alias int FXPT16DOT16;
alias int *LPFXPT16DOT16;
//C       typedef long FXPT2DOT30,*LPFXPT2DOT30;
alias int FXPT2DOT30;
alias int *LPFXPT2DOT30;
//C       typedef struct tagCIEXYZ {
//C         FXPT2DOT30 ciexyzX;
//C         FXPT2DOT30 ciexyzY;
//C         FXPT2DOT30 ciexyzZ;
//C       } CIEXYZ;
struct tagCIEXYZ
{
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
}
alias tagCIEXYZ CIEXYZ;
//C       typedef CIEXYZ *LPCIEXYZ;
alias CIEXYZ *LPCIEXYZ;
//C       typedef struct tagICEXYZTRIPLE {
//C         CIEXYZ ciexyzRed;
//C         CIEXYZ ciexyzGreen;
//C         CIEXYZ ciexyzBlue;
//C       } CIEXYZTRIPLE;
struct tagICEXYZTRIPLE
{
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
}
alias tagICEXYZTRIPLE CIEXYZTRIPLE;
//C       typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
alias CIEXYZTRIPLE *LPCIEXYZTRIPLE;
//C       typedef struct tagLOGCOLORSPACEA {
//C         DWORD lcsSignature;
//C         DWORD lcsVersion;
//C         DWORD lcsSize;
//C         LCSCSTYPE lcsCSType;
//C         LCSGAMUTMATCH lcsIntent;
//C         CIEXYZTRIPLE lcsEndpoints;
//C         DWORD lcsGammaRed;
//C         DWORD lcsGammaGreen;
//C         DWORD lcsGammaBlue;
//C         CHAR lcsFilename[260];
//C       } LOGCOLORSPACEA,*LPLOGCOLORSPACEA;
struct tagLOGCOLORSPACEA
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR [260]lcsFilename;
}
alias tagLOGCOLORSPACEA LOGCOLORSPACEA;
alias tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;
//C       typedef struct tagLOGCOLORSPACEW {
//C         DWORD lcsSignature;
//C         DWORD lcsVersion;
//C         DWORD lcsSize;
//C         LCSCSTYPE lcsCSType;
//C         LCSGAMUTMATCH lcsIntent;
//C         CIEXYZTRIPLE lcsEndpoints;
//C         DWORD lcsGammaRed;
//C         DWORD lcsGammaGreen;
//C         DWORD lcsGammaBlue;
//C         WCHAR lcsFilename[260];
//C       } LOGCOLORSPACEW,*LPLOGCOLORSPACEW;
struct tagLOGCOLORSPACEW
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR [260]lcsFilename;
}
alias tagLOGCOLORSPACEW LOGCOLORSPACEW;
alias tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;
//C       typedef LOGCOLORSPACEA LOGCOLORSPACE;
alias LOGCOLORSPACEA LOGCOLORSPACE;
//C       typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
alias LPLOGCOLORSPACEA LPLOGCOLORSPACE;
//C       typedef struct tagBITMAPCOREHEADER {
//C         DWORD bcSize;
//C         WORD bcWidth;
//C         WORD bcHeight;
//C         WORD bcPlanes;
//C         WORD bcBitCount;
//C       } BITMAPCOREHEADER,*LPBITMAPCOREHEADER,*PBITMAPCOREHEADER;
struct tagBITMAPCOREHEADER
{
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
}
alias tagBITMAPCOREHEADER BITMAPCOREHEADER;
alias tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;
alias tagBITMAPCOREHEADER *PBITMAPCOREHEADER;
//C       typedef struct tagBITMAPINFOHEADER {
//C         DWORD biSize;
//C         LONG biWidth;
//C         LONG biHeight;
//C         WORD biPlanes;
//C         WORD biBitCount;
//C         DWORD biCompression;
//C         DWORD biSizeImage;
//C         LONG biXPelsPerMeter;
//C         LONG biYPelsPerMeter;
//C         DWORD biClrUsed;
//C         DWORD biClrImportant;
//C       } BITMAPINFOHEADER,*LPBITMAPINFOHEADER,*PBITMAPINFOHEADER;
struct tagBITMAPINFOHEADER
{
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
}
alias tagBITMAPINFOHEADER BITMAPINFOHEADER;
alias tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;
alias tagBITMAPINFOHEADER *PBITMAPINFOHEADER;
//C       typedef struct {
//C         DWORD bV4Size;
//C         LONG bV4Width;
//C         LONG bV4Height;
//C         WORD bV4Planes;
//C         WORD bV4BitCount;
//C         DWORD bV4V4Compression;
//C         DWORD bV4SizeImage;
//C         LONG bV4XPelsPerMeter;
//C         LONG bV4YPelsPerMeter;
//C         DWORD bV4ClrUsed;
//C         DWORD bV4ClrImportant;
//C         DWORD bV4RedMask;
//C         DWORD bV4GreenMask;
//C         DWORD bV4BlueMask;
//C         DWORD bV4AlphaMask;
//C         DWORD bV4CSType;
//C         CIEXYZTRIPLE bV4Endpoints;
//C         DWORD bV4GammaRed;
//C         DWORD bV4GammaGreen;
//C         DWORD bV4GammaBlue;
//C       } BITMAPV4HEADER,*LPBITMAPV4HEADER,*PBITMAPV4HEADER;
struct _N60
{
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
}
alias _N60 BITMAPV4HEADER;
alias _N60 *LPBITMAPV4HEADER;
alias _N60 *PBITMAPV4HEADER;
//C       typedef struct {
//C         DWORD bV5Size;
//C         LONG bV5Width;
//C         LONG bV5Height;
//C         WORD bV5Planes;
//C         WORD bV5BitCount;
//C         DWORD bV5Compression;
//C         DWORD bV5SizeImage;
//C         LONG bV5XPelsPerMeter;
//C         LONG bV5YPelsPerMeter;
//C         DWORD bV5ClrUsed;
//C         DWORD bV5ClrImportant;
//C         DWORD bV5RedMask;
//C         DWORD bV5GreenMask;
//C         DWORD bV5BlueMask;
//C         DWORD bV5AlphaMask;
//C         DWORD bV5CSType;
//C         CIEXYZTRIPLE bV5Endpoints;
//C         DWORD bV5GammaRed;
//C         DWORD bV5GammaGreen;
//C         DWORD bV5GammaBlue;
//C         DWORD bV5Intent;
//C         DWORD bV5ProfileData;
//C         DWORD bV5ProfileSize;
//C         DWORD bV5Reserved;
//C       } BITMAPV5HEADER,*LPBITMAPV5HEADER,*PBITMAPV5HEADER;
struct _N61
{
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
}
alias _N61 BITMAPV5HEADER;
alias _N61 *LPBITMAPV5HEADER;
alias _N61 *PBITMAPV5HEADER;
//C       typedef struct tagBITMAPINFO {
//C         BITMAPINFOHEADER bmiHeader;
//C         RGBQUAD bmiColors[1];
//C       } BITMAPINFO,*LPBITMAPINFO,*PBITMAPINFO;
struct tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD [1]bmiColors;
}
alias tagBITMAPINFO BITMAPINFO;
alias tagBITMAPINFO *LPBITMAPINFO;
alias tagBITMAPINFO *PBITMAPINFO;
//C       typedef struct tagBITMAPCOREINFO {
//C         BITMAPCOREHEADER bmciHeader;
//C         RGBTRIPLE bmciColors[1];
//C       } BITMAPCOREINFO,*LPBITMAPCOREINFO,*PBITMAPCOREINFO;
struct tagBITMAPCOREINFO
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE [1]bmciColors;
}
alias tagBITMAPCOREINFO BITMAPCOREINFO;
alias tagBITMAPCOREINFO *LPBITMAPCOREINFO;
alias tagBITMAPCOREINFO *PBITMAPCOREINFO;
//C       typedef struct tagBITMAPFILEHEADER {
//C         WORD bfType;
//C         DWORD bfSize;
//C         WORD bfReserved1;
//C         WORD bfReserved2;
//C         DWORD bfOffBits;
//C       } BITMAPFILEHEADER,*LPBITMAPFILEHEADER,*PBITMAPFILEHEADER;
struct tagBITMAPFILEHEADER
{
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
}
alias tagBITMAPFILEHEADER BITMAPFILEHEADER;
alias tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;
alias tagBITMAPFILEHEADER *PBITMAPFILEHEADER;
//C       typedef struct tagFONTSIGNATURE {
//C         DWORD fsUsb[4];
//C         DWORD fsCsb[2];
//C       } FONTSIGNATURE,*PFONTSIGNATURE,*LPFONTSIGNATURE;
struct tagFONTSIGNATURE
{
    DWORD [4]fsUsb;
    DWORD [2]fsCsb;
}
alias tagFONTSIGNATURE FONTSIGNATURE;
alias tagFONTSIGNATURE *PFONTSIGNATURE;
alias tagFONTSIGNATURE *LPFONTSIGNATURE;
//C       typedef struct tagCHARSETINFO {
//C         UINT ciCharset;
//C         UINT ciACP;
//C         FONTSIGNATURE fs;
//C       } CHARSETINFO,*PCHARSETINFO,*NPCHARSETINFO,*LPCHARSETINFO;
struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
}
alias tagCHARSETINFO CHARSETINFO;
alias tagCHARSETINFO *PCHARSETINFO;
alias tagCHARSETINFO *NPCHARSETINFO;
alias tagCHARSETINFO *LPCHARSETINFO;
//C       typedef struct tagLOCALESIGNATURE {
//C         DWORD lsUsb[4];
//C         DWORD lsCsbDefault[2];
//C         DWORD lsCsbSupported[2];
//C       } LOCALESIGNATURE,*PLOCALESIGNATURE,*LPLOCALESIGNATURE;
struct tagLOCALESIGNATURE
{
    DWORD [4]lsUsb;
    DWORD [2]lsCsbDefault;
    DWORD [2]lsCsbSupported;
}
alias tagLOCALESIGNATURE LOCALESIGNATURE;
alias tagLOCALESIGNATURE *PLOCALESIGNATURE;
alias tagLOCALESIGNATURE *LPLOCALESIGNATURE;
//C       typedef struct tagHANDLETABLE {
//C         HGDIOBJ objectHandle[1];
//C       } HANDLETABLE,*PHANDLETABLE,*LPHANDLETABLE;
struct tagHANDLETABLE
{
    HGDIOBJ [1]objectHandle;
}
alias tagHANDLETABLE HANDLETABLE;
alias tagHANDLETABLE *PHANDLETABLE;
alias tagHANDLETABLE *LPHANDLETABLE;
//C       typedef struct tagMETARECORD {
//C         DWORD rdSize;
//C         WORD rdFunction;
//C         WORD rdParm[1];
//C       } METARECORD;
struct tagMETARECORD
{
    DWORD rdSize;
    WORD rdFunction;
    WORD [1]rdParm;
}
alias tagMETARECORD METARECORD;
//C       typedef struct tagMETARECORD *PMETARECORD;
alias tagMETARECORD *PMETARECORD;
//C       typedef struct tagMETARECORD *LPMETARECORD;
alias tagMETARECORD *LPMETARECORD;
//C       typedef struct tagMETAFILEPICT {
//C         LONG mm;
//C         LONG xExt;
//C         LONG yExt;
//C         HMETAFILE hMF;
//C       } METAFILEPICT,*LPMETAFILEPICT;
struct tagMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
}
alias tagMETAFILEPICT METAFILEPICT;
alias tagMETAFILEPICT *LPMETAFILEPICT;
//C       typedef struct tagMETAHEADER {
//C         WORD mtType;
//C         WORD mtHeaderSize;
//C         WORD mtVersion;
//C         DWORD mtSize;
//C         WORD mtNoObjects;
//C         DWORD mtMaxRecord;
//C         WORD mtNoParameters;
//C       } METAHEADER;
struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
}
alias tagMETAHEADER METAHEADER;
//C       typedef struct tagMETAHEADER *PMETAHEADER;
alias tagMETAHEADER *PMETAHEADER;
//C       typedef struct tagMETAHEADER *LPMETAHEADER;
alias tagMETAHEADER *LPMETAHEADER;
//C       typedef struct tagENHMETARECORD {
//C         DWORD iType;
//C         DWORD nSize;
//C         DWORD dParm[1];
//C       } ENHMETARECORD,*PENHMETARECORD,*LPENHMETARECORD;
struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD [1]dParm;
}
alias tagENHMETARECORD ENHMETARECORD;
alias tagENHMETARECORD *PENHMETARECORD;
alias tagENHMETARECORD *LPENHMETARECORD;
//C       typedef struct tagENHMETAHEADER {
//C         DWORD iType;
//C         DWORD nSize;
//C         RECTL rclBounds;
//C         RECTL rclFrame;
//C         DWORD dSignature;
//C         DWORD nVersion;
//C         DWORD nBytes;
//C         DWORD nRecords;
//C         WORD nHandles;
//C         WORD sReserved;
//C         DWORD nDescription;
//C         DWORD offDescription;
//C         DWORD nPalEntries;
//C         SIZEL szlDevice;
//C         SIZEL szlMillimeters;
//C         DWORD cbPixelFormat;
//C         DWORD offPixelFormat;
//C         DWORD bOpenGL;
//C         SIZEL szlMicrometers;
//C       } ENHMETAHEADER,*PENHMETAHEADER,*LPENHMETAHEADER;
struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
}
alias tagENHMETAHEADER ENHMETAHEADER;
alias tagENHMETAHEADER *PENHMETAHEADER;
alias tagENHMETAHEADER *LPENHMETAHEADER;
//C       typedef BYTE BCHAR;
alias BYTE BCHAR;
//C       typedef struct tagTEXTMETRICA {
//C         LONG tmHeight;
//C         LONG tmAscent;
//C         LONG tmDescent;
//C         LONG tmInternalLeading;
//C         LONG tmExternalLeading;
//C         LONG tmAveCharWidth;
//C         LONG tmMaxCharWidth;
//C         LONG tmWeight;
//C         LONG tmOverhang;
//C         LONG tmDigitizedAspectX;
//C         LONG tmDigitizedAspectY;
//C         BYTE tmFirstChar;
//C         BYTE tmLastChar;
//C         BYTE tmDefaultChar;
//C         BYTE tmBreakChar;
//C         BYTE tmItalic;
//C         BYTE tmUnderlined;
//C         BYTE tmStruckOut;
//C         BYTE tmPitchAndFamily;
//C         BYTE tmCharSet;
//C       } TEXTMETRICA,*PTEXTMETRICA,*NPTEXTMETRICA,*LPTEXTMETRICA;
struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
}
alias tagTEXTMETRICA TEXTMETRICA;
alias tagTEXTMETRICA *PTEXTMETRICA;
alias tagTEXTMETRICA *NPTEXTMETRICA;
alias tagTEXTMETRICA *LPTEXTMETRICA;
//C       typedef struct tagTEXTMETRICW {
//C         LONG tmHeight;
//C         LONG tmAscent;
//C         LONG tmDescent;
//C         LONG tmInternalLeading;
//C         LONG tmExternalLeading;
//C         LONG tmAveCharWidth;
//C         LONG tmMaxCharWidth;
//C         LONG tmWeight;
//C         LONG tmOverhang;
//C         LONG tmDigitizedAspectX;
//C         LONG tmDigitizedAspectY;
//C         WCHAR tmFirstChar;
//C         WCHAR tmLastChar;
//C         WCHAR tmDefaultChar;
//C         WCHAR tmBreakChar;
//C         BYTE tmItalic;
//C         BYTE tmUnderlined;
//C         BYTE tmStruckOut;
//C         BYTE tmPitchAndFamily;
//C         BYTE tmCharSet;
//C       } TEXTMETRICW,*PTEXTMETRICW,*NPTEXTMETRICW,*LPTEXTMETRICW;
struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
}
alias tagTEXTMETRICW TEXTMETRICW;
alias tagTEXTMETRICW *PTEXTMETRICW;
alias tagTEXTMETRICW *NPTEXTMETRICW;
alias tagTEXTMETRICW *LPTEXTMETRICW;
//C       typedef TEXTMETRICA TEXTMETRIC;
alias TEXTMETRICA TEXTMETRIC;
//C       typedef PTEXTMETRICA PTEXTMETRIC;
alias PTEXTMETRICA PTEXTMETRIC;
//C       typedef NPTEXTMETRICA NPTEXTMETRIC;
alias NPTEXTMETRICA NPTEXTMETRIC;
//C       typedef LPTEXTMETRICA LPTEXTMETRIC;
alias LPTEXTMETRICA LPTEXTMETRIC;
//C       typedef struct tagNEWTEXTMETRICA {
//C         LONG tmHeight;
//C         LONG tmAscent;
//C         LONG tmDescent;
//C         LONG tmInternalLeading;
//C         LONG tmExternalLeading;
//C         LONG tmAveCharWidth;
//C         LONG tmMaxCharWidth;
//C         LONG tmWeight;
//C         LONG tmOverhang;
//C         LONG tmDigitizedAspectX;
//C         LONG tmDigitizedAspectY;
//C         BYTE tmFirstChar;
//C         BYTE tmLastChar;
//C         BYTE tmDefaultChar;
//C         BYTE tmBreakChar;
//C         BYTE tmItalic;
//C         BYTE tmUnderlined;
//C         BYTE tmStruckOut;
//C         BYTE tmPitchAndFamily;
//C         BYTE tmCharSet;
//C         DWORD ntmFlags;
//C         UINT ntmSizeEM;
//C         UINT ntmCellHeight;
//C         UINT ntmAvgWidth;
//C       } NEWTEXTMETRICA,*PNEWTEXTMETRICA,*NPNEWTEXTMETRICA,*LPNEWTEXTMETRICA;
struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
}
alias tagNEWTEXTMETRICA NEWTEXTMETRICA;
alias tagNEWTEXTMETRICA *PNEWTEXTMETRICA;
alias tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;
alias tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;
//C       typedef struct tagNEWTEXTMETRICW {
//C         LONG tmHeight;
//C         LONG tmAscent;
//C         LONG tmDescent;
//C         LONG tmInternalLeading;
//C         LONG tmExternalLeading;
//C         LONG tmAveCharWidth;
//C         LONG tmMaxCharWidth;
//C         LONG tmWeight;
//C         LONG tmOverhang;
//C         LONG tmDigitizedAspectX;
//C         LONG tmDigitizedAspectY;
//C         WCHAR tmFirstChar;
//C         WCHAR tmLastChar;
//C         WCHAR tmDefaultChar;
//C         WCHAR tmBreakChar;
//C         BYTE tmItalic;
//C         BYTE tmUnderlined;
//C         BYTE tmStruckOut;
//C         BYTE tmPitchAndFamily;
//C         BYTE tmCharSet;
//C         DWORD ntmFlags;
//C         UINT ntmSizeEM;
//C         UINT ntmCellHeight;
//C         UINT ntmAvgWidth;
//C       } NEWTEXTMETRICW,*PNEWTEXTMETRICW,*NPNEWTEXTMETRICW,*LPNEWTEXTMETRICW;
struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
}
alias tagNEWTEXTMETRICW NEWTEXTMETRICW;
alias tagNEWTEXTMETRICW *PNEWTEXTMETRICW;
alias tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;
alias tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;
//C       typedef NEWTEXTMETRICA NEWTEXTMETRIC;
alias NEWTEXTMETRICA NEWTEXTMETRIC;
//C       typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
alias PNEWTEXTMETRICA PNEWTEXTMETRIC;
//C       typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
alias NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
//C       typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
alias LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
//C       typedef struct tagNEWTEXTMETRICEXA {
//C         NEWTEXTMETRICA ntmTm;
//C         FONTSIGNATURE ntmFontSig;
//C       } NEWTEXTMETRICEXA;
struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}
alias tagNEWTEXTMETRICEXA NEWTEXTMETRICEXA;
//C       typedef struct tagNEWTEXTMETRICEXW {
//C         NEWTEXTMETRICW ntmTm;
//C         FONTSIGNATURE ntmFontSig;
//C       } NEWTEXTMETRICEXW;
struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}
alias tagNEWTEXTMETRICEXW NEWTEXTMETRICEXW;
//C       typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
alias NEWTEXTMETRICEXA NEWTEXTMETRICEX;
//C       typedef struct tagPELARRAY {
//C         LONG paXCount;
//C         LONG paYCount;
//C         LONG paXExt;
//C         LONG paYExt;
//C         BYTE paRGBs;
//C       } PELARRAY,*PPELARRAY,*NPPELARRAY,*LPPELARRAY;
struct tagPELARRAY
{
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
}
alias tagPELARRAY PELARRAY;
alias tagPELARRAY *PPELARRAY;
alias tagPELARRAY *NPPELARRAY;
alias tagPELARRAY *LPPELARRAY;
//C       typedef struct tagLOGBRUSH {
//C         UINT lbStyle;
//C         COLORREF lbColor;
//C         ULONG_PTR lbHatch;
//C       } LOGBRUSH,*PLOGBRUSH,*NPLOGBRUSH,*LPLOGBRUSH;
struct tagLOGBRUSH
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
}
alias tagLOGBRUSH LOGBRUSH;
alias tagLOGBRUSH *PLOGBRUSH;
alias tagLOGBRUSH *NPLOGBRUSH;
alias tagLOGBRUSH *LPLOGBRUSH;
//C       typedef struct tagLOGBRUSH32 {
//C         UINT lbStyle;
//C         COLORREF lbColor;
//C         ULONG lbHatch;
//C       } LOGBRUSH32,*PLOGBRUSH32,*NPLOGBRUSH32,*LPLOGBRUSH32;
struct tagLOGBRUSH32
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
}
alias tagLOGBRUSH32 LOGBRUSH32;
alias tagLOGBRUSH32 *PLOGBRUSH32;
alias tagLOGBRUSH32 *NPLOGBRUSH32;
alias tagLOGBRUSH32 *LPLOGBRUSH32;
//C       typedef LOGBRUSH PATTERN;
alias LOGBRUSH PATTERN;
//C       typedef PATTERN *PPATTERN;
alias PATTERN *PPATTERN;
//C       typedef PATTERN *NPPATTERN;
alias PATTERN *NPPATTERN;
//C       typedef PATTERN *LPPATTERN;
alias PATTERN *LPPATTERN;
//C       typedef struct tagLOGPEN {
//C         UINT lopnStyle;
//C         POINT lopnWidth;
//C         COLORREF lopnColor;
//C       } LOGPEN,*PLOGPEN,*NPLOGPEN,*LPLOGPEN;
struct tagLOGPEN
{
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
}
alias tagLOGPEN LOGPEN;
alias tagLOGPEN *PLOGPEN;
alias tagLOGPEN *NPLOGPEN;
alias tagLOGPEN *LPLOGPEN;
//C       typedef struct tagEXTLOGPEN {
//C         DWORD elpPenStyle;
//C         DWORD elpWidth;
//C         UINT elpBrushStyle;
//C         COLORREF elpColor;
//C         ULONG_PTR elpHatch;
//C         DWORD elpNumEntries;
//C         DWORD elpStyleEntry[1];
//C       } EXTLOGPEN,*PEXTLOGPEN,*NPEXTLOGPEN,*LPEXTLOGPEN;
struct tagEXTLOGPEN
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD [1]elpStyleEntry;
}
alias tagEXTLOGPEN EXTLOGPEN;
alias tagEXTLOGPEN *PEXTLOGPEN;
alias tagEXTLOGPEN *NPEXTLOGPEN;
alias tagEXTLOGPEN *LPEXTLOGPEN;
//C       typedef struct tagPALETTEENTRY {
//C         BYTE peRed;
//C         BYTE peGreen;
//C         BYTE peBlue;
//C         BYTE peFlags;
//C       } PALETTEENTRY,*PPALETTEENTRY,*LPPALETTEENTRY;
struct tagPALETTEENTRY
{
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
}
alias tagPALETTEENTRY PALETTEENTRY;
alias tagPALETTEENTRY *PPALETTEENTRY;
alias tagPALETTEENTRY *LPPALETTEENTRY;
//C       typedef struct tagLOGPALETTE {
//C         WORD palVersion;
//C         WORD palNumEntries;
//C         PALETTEENTRY palPalEntry[1];
//C       } LOGPALETTE,*PLOGPALETTE,*NPLOGPALETTE,*LPLOGPALETTE;
struct tagLOGPALETTE
{
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY [1]palPalEntry;
}
alias tagLOGPALETTE LOGPALETTE;
alias tagLOGPALETTE *PLOGPALETTE;
alias tagLOGPALETTE *NPLOGPALETTE;
alias tagLOGPALETTE *LPLOGPALETTE;
//C       typedef struct tagLOGFONTA {
//C         LONG lfHeight;
//C         LONG lfWidth;
//C         LONG lfEscapement;
//C         LONG lfOrientation;
//C         LONG lfWeight;
//C         BYTE lfItalic;
//C         BYTE lfUnderline;
//C         BYTE lfStrikeOut;
//C         BYTE lfCharSet;
//C         BYTE lfOutPrecision;
//C         BYTE lfClipPrecision;
//C         BYTE lfQuality;
//C         BYTE lfPitchAndFamily;
//C         CHAR lfFaceName[32];
//C       } LOGFONTA,*PLOGFONTA,*NPLOGFONTA,*LPLOGFONTA;
struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR [32]lfFaceName;
}
alias tagLOGFONTA LOGFONTA;
alias tagLOGFONTA *PLOGFONTA;
alias tagLOGFONTA *NPLOGFONTA;
alias tagLOGFONTA *LPLOGFONTA;
//C       typedef struct tagLOGFONTW {
//C         LONG lfHeight;
//C         LONG lfWidth;
//C         LONG lfEscapement;
//C         LONG lfOrientation;
//C         LONG lfWeight;
//C         BYTE lfItalic;
//C         BYTE lfUnderline;
//C         BYTE lfStrikeOut;
//C         BYTE lfCharSet;
//C         BYTE lfOutPrecision;
//C         BYTE lfClipPrecision;
//C         BYTE lfQuality;
//C         BYTE lfPitchAndFamily;
//C         WCHAR lfFaceName[32];
//C       } LOGFONTW,*PLOGFONTW,*NPLOGFONTW,*LPLOGFONTW;
struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR [32]lfFaceName;
}
alias tagLOGFONTW LOGFONTW;
alias tagLOGFONTW *PLOGFONTW;
alias tagLOGFONTW *NPLOGFONTW;
alias tagLOGFONTW *LPLOGFONTW;
//C       typedef LOGFONTA LOGFONT;
alias LOGFONTA LOGFONT;
//C       typedef PLOGFONTA PLOGFONT;
alias PLOGFONTA PLOGFONT;
//C       typedef NPLOGFONTA NPLOGFONT;
alias NPLOGFONTA NPLOGFONT;
//C       typedef LPLOGFONTA LPLOGFONT;
alias LPLOGFONTA LPLOGFONT;
//C       typedef struct tagENUMLOGFONTA {
//C         LOGFONTA elfLogFont;
//C         BYTE elfFullName[64];
//C         BYTE elfStyle[32];
//C       } ENUMLOGFONTA,*LPENUMLOGFONTA;
struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE [64]elfFullName;
    BYTE [32]elfStyle;
}
alias tagENUMLOGFONTA ENUMLOGFONTA;
alias tagENUMLOGFONTA *LPENUMLOGFONTA;
//C       typedef struct tagENUMLOGFONTW {
//C         LOGFONTW elfLogFont;
//C         WCHAR elfFullName[64];
//C         WCHAR elfStyle[32];
//C       } ENUMLOGFONTW,*LPENUMLOGFONTW;
struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR [64]elfFullName;
    WCHAR [32]elfStyle;
}
alias tagENUMLOGFONTW ENUMLOGFONTW;
alias tagENUMLOGFONTW *LPENUMLOGFONTW;
//C       typedef ENUMLOGFONTA ENUMLOGFONT;
alias ENUMLOGFONTA ENUMLOGFONT;
//C       typedef LPENUMLOGFONTA LPENUMLOGFONT;
alias LPENUMLOGFONTA LPENUMLOGFONT;
//C       typedef struct tagENUMLOGFONTEXA {
//C         LOGFONTA elfLogFont;
//C         BYTE elfFullName[64];
//C         BYTE elfStyle[32];
//C         BYTE elfScript[32];
//C       } ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;
struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE [64]elfFullName;
    BYTE [32]elfStyle;
    BYTE [32]elfScript;
}
alias tagENUMLOGFONTEXA ENUMLOGFONTEXA;
alias tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;
//C       typedef struct tagENUMLOGFONTEXW {
//C         LOGFONTW elfLogFont;
//C         WCHAR elfFullName[64];
//C         WCHAR elfStyle[32];
//C         WCHAR elfScript[32];
//C       } ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;
struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR [64]elfFullName;
    WCHAR [32]elfStyle;
    WCHAR [32]elfScript;
}
alias tagENUMLOGFONTEXW ENUMLOGFONTEXW;
alias tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;
//C       typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
alias ENUMLOGFONTEXA ENUMLOGFONTEX;
//C       typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
alias LPENUMLOGFONTEXA LPENUMLOGFONTEX;
//C       typedef struct tagPANOSE {
//C         BYTE bFamilyType;
//C         BYTE bSerifStyle;
//C         BYTE bWeight;
//C         BYTE bProportion;
//C         BYTE bContrast;
//C         BYTE bStrokeVariation;
//C         BYTE bArmStyle;
//C         BYTE bLetterform;
//C         BYTE bMidline;
//C         BYTE bXHeight;
//C       } PANOSE,*LPPANOSE;
struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
}
alias tagPANOSE PANOSE;
alias tagPANOSE *LPPANOSE;
//C       typedef struct tagEXTLOGFONTA {
//C         LOGFONTA elfLogFont;
//C         BYTE elfFullName[64];
//C         BYTE elfStyle[32];
//C         DWORD elfVersion;
//C         DWORD elfStyleSize;
//C         DWORD elfMatch;
//C         DWORD elfReserved;
//C         BYTE elfVendorId[4];
//C         DWORD elfCulture;
//C         PANOSE elfPanose;
//C       } EXTLOGFONTA,*PEXTLOGFONTA,*NPEXTLOGFONTA,*LPEXTLOGFONTA;
struct tagEXTLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE [64]elfFullName;
    BYTE [32]elfStyle;
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE [4]elfVendorId;
    DWORD elfCulture;
    PANOSE elfPanose;
}
alias tagEXTLOGFONTA EXTLOGFONTA;
alias tagEXTLOGFONTA *PEXTLOGFONTA;
alias tagEXTLOGFONTA *NPEXTLOGFONTA;
alias tagEXTLOGFONTA *LPEXTLOGFONTA;
//C       typedef struct tagEXTLOGFONTW {
//C         LOGFONTW elfLogFont;
//C         WCHAR elfFullName[64];
//C         WCHAR elfStyle[32];
//C         DWORD elfVersion;
//C         DWORD elfStyleSize;
//C         DWORD elfMatch;
//C         DWORD elfReserved;
//C         BYTE elfVendorId[4];
//C         DWORD elfCulture;
//C         PANOSE elfPanose;
//C       } EXTLOGFONTW,*PEXTLOGFONTW,*NPEXTLOGFONTW,*LPEXTLOGFONTW;
struct tagEXTLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR [64]elfFullName;
    WCHAR [32]elfStyle;
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE [4]elfVendorId;
    DWORD elfCulture;
    PANOSE elfPanose;
}
alias tagEXTLOGFONTW EXTLOGFONTW;
alias tagEXTLOGFONTW *PEXTLOGFONTW;
alias tagEXTLOGFONTW *NPEXTLOGFONTW;
alias tagEXTLOGFONTW *LPEXTLOGFONTW;
//C       typedef EXTLOGFONTA EXTLOGFONT;
alias EXTLOGFONTA EXTLOGFONT;
//C       typedef PEXTLOGFONTA PEXTLOGFONT;
alias PEXTLOGFONTA PEXTLOGFONT;
//C       typedef NPEXTLOGFONTA NPEXTLOGFONT;
alias NPEXTLOGFONTA NPEXTLOGFONT;
//C       typedef LPEXTLOGFONTA LPEXTLOGFONT;
alias LPEXTLOGFONTA LPEXTLOGFONT;
//C       typedef struct _devicemodeA {
//C         BYTE dmDeviceName[32];
//C         WORD dmSpecVersion;
//C         WORD dmDriverVersion;
//C         WORD dmSize;
//C         WORD dmDriverExtra;
//C         DWORD dmFields;
//C          union {
//C            struct {
//C      short dmOrientation;
//C      short dmPaperSize;
//C      short dmPaperLength;
//C      short dmPaperWidth;
//C      short dmScale;
//C      short dmCopies;
//C      short dmDefaultSource;
//C      short dmPrintQuality;
//C           };
struct _N63
{
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
}
//C           struct {
//C      POINTL dmPosition;
//C      DWORD dmDisplayOrientation;
//C      DWORD dmDisplayFixedOutput;
//C           };
struct _N64
{
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
}
//C         };
union _N62
{
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
}
//C         short dmColor;
//C         short dmDuplex;
//C         short dmYResolution;
//C         short dmTTOption;
//C         short dmCollate;
//C         BYTE dmFormName[32];
//C         WORD dmLogPixels;
//C         DWORD dmBitsPerPel;
//C         DWORD dmPelsWidth;
//C         DWORD dmPelsHeight;
//C          union {
//C           DWORD dmDisplayFlags;
//C           DWORD dmNup;
//C         };
union _N65
{
    DWORD dmDisplayFlags;
    DWORD dmNup;
}
//C         DWORD dmDisplayFrequency;
//C         DWORD dmICMMethod;
//C         DWORD dmICMIntent;
//C         DWORD dmMediaType;
//C         DWORD dmDitherType;
//C         DWORD dmReserved1;
//C         DWORD dmReserved2;
//C         DWORD dmPanningWidth;
//C         DWORD dmPanningHeight;
//C       } DEVMODEA,*PDEVMODEA,*NPDEVMODEA,*LPDEVMODEA;
struct _devicemodeA
{
    BYTE [32]dmDeviceName;
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE [32]dmFormName;
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    DWORD dmDisplayFlags;
    DWORD dmNup;
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
}
alias _devicemodeA DEVMODEA;
alias _devicemodeA *PDEVMODEA;
alias _devicemodeA *NPDEVMODEA;
alias _devicemodeA *LPDEVMODEA;
//C       typedef struct _devicemodeW {
//C         WCHAR dmDeviceName[32];
//C         WORD dmSpecVersion;
//C         WORD dmDriverVersion;
//C         WORD dmSize;
//C         WORD dmDriverExtra;
//C         DWORD dmFields;
//C          union {
//C            struct {
//C      short dmOrientation;
//C      short dmPaperSize;
//C      short dmPaperLength;
//C      short dmPaperWidth;
//C      short dmScale;
//C      short dmCopies;
//C      short dmDefaultSource;
//C      short dmPrintQuality;
//C           };
struct _N67
{
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
}
//C            struct {
//C      POINTL dmPosition;
//C      DWORD dmDisplayOrientation;
//C      DWORD dmDisplayFixedOutput;
//C           };
struct _N68
{
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
}
//C         };
union _N66
{
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
}
//C         short dmColor;
//C         short dmDuplex;
//C         short dmYResolution;
//C         short dmTTOption;
//C         short dmCollate;
//C         WCHAR dmFormName[32];
//C         WORD dmLogPixels;
//C         DWORD dmBitsPerPel;
//C         DWORD dmPelsWidth;
//C         DWORD dmPelsHeight;
//C          union {
//C           DWORD dmDisplayFlags;
//C           DWORD dmNup;
//C         };
union _N69
{
    DWORD dmDisplayFlags;
    DWORD dmNup;
}
//C         DWORD dmDisplayFrequency;
//C         DWORD dmICMMethod;
//C         DWORD dmICMIntent;
//C         DWORD dmMediaType;
//C         DWORD dmDitherType;
//C         DWORD dmReserved1;
//C         DWORD dmReserved2;
//C         DWORD dmPanningWidth;
//C         DWORD dmPanningHeight;
//C       } DEVMODEW,*PDEVMODEW,*NPDEVMODEW,*LPDEVMODEW;
struct _devicemodeW
{
    WCHAR [32]dmDeviceName;
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR [32]dmFormName;
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    DWORD dmDisplayFlags;
    DWORD dmNup;
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
}
alias _devicemodeW DEVMODEW;
alias _devicemodeW *PDEVMODEW;
alias _devicemodeW *NPDEVMODEW;
alias _devicemodeW *LPDEVMODEW;
//C       typedef DEVMODEA DEVMODE;
alias DEVMODEA DEVMODE;
//C       typedef PDEVMODEA PDEVMODE;
alias PDEVMODEA PDEVMODE;
//C       typedef NPDEVMODEA NPDEVMODE;
alias NPDEVMODEA NPDEVMODE;
//C       typedef LPDEVMODEA LPDEVMODE;
alias LPDEVMODEA LPDEVMODE;
//C       typedef struct _DISPLAY_DEVICEA {
//C         DWORD cb;
//C         CHAR DeviceName[32];
//C         CHAR DeviceString[128];
//C         DWORD StateFlags;
//C         CHAR DeviceID[128];
//C         CHAR DeviceKey[128];
//C       } DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;
struct _DISPLAY_DEVICEA
{
    DWORD cb;
    CHAR [32]DeviceName;
    CHAR [128]DeviceString;
    DWORD StateFlags;
    CHAR [128]DeviceID;
    CHAR [128]DeviceKey;
}
alias _DISPLAY_DEVICEA DISPLAY_DEVICEA;
alias _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;
alias _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;
//C       typedef struct _DISPLAY_DEVICEW {
//C         DWORD cb;
//C         WCHAR DeviceName[32];
//C         WCHAR DeviceString[128];
//C         DWORD StateFlags;
//C         WCHAR DeviceID[128];
//C         WCHAR DeviceKey[128];
//C       } DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;
struct _DISPLAY_DEVICEW
{
    DWORD cb;
    WCHAR [32]DeviceName;
    WCHAR [128]DeviceString;
    DWORD StateFlags;
    WCHAR [128]DeviceID;
    WCHAR [128]DeviceKey;
}
alias _DISPLAY_DEVICEW DISPLAY_DEVICEW;
alias _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;
alias _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;
//C       typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
alias DISPLAY_DEVICEA DISPLAY_DEVICE;
//C       typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
alias PDISPLAY_DEVICEA PDISPLAY_DEVICE;
//C       typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
alias LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
//C       typedef struct _RGNDATAHEADER {
//C         DWORD dwSize;
//C         DWORD iType;
//C         DWORD nCount;
//C         DWORD nRgnSize;
//C         RECT rcBound;
//C       } RGNDATAHEADER,*PRGNDATAHEADER;
struct _RGNDATAHEADER
{
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
}
alias _RGNDATAHEADER RGNDATAHEADER;
alias _RGNDATAHEADER *PRGNDATAHEADER;
//C       typedef struct _RGNDATA {
//C         RGNDATAHEADER rdh;
//C         char Buffer[1];
//C       } RGNDATA,*PRGNDATA,*NPRGNDATA,*LPRGNDATA;
struct _RGNDATA
{
    RGNDATAHEADER rdh;
    char [1]Buffer;
}
alias _RGNDATA RGNDATA;
alias _RGNDATA *PRGNDATA;
alias _RGNDATA *NPRGNDATA;
alias _RGNDATA *LPRGNDATA;
//C       typedef struct _ABC {
//C         int abcA;
//C         UINT abcB;
//C         int abcC;
//C       } ABC,*PABC,*NPABC,*LPABC;
struct _ABC
{
    int abcA;
    UINT abcB;
    int abcC;
}
alias _ABC ABC;
alias _ABC *PABC;
alias _ABC *NPABC;
alias _ABC *LPABC;
//C       typedef struct _ABCFLOAT {
//C         FLOAT abcfA;
//C         FLOAT abcfB;
//C         FLOAT abcfC;
//C       } ABCFLOAT,*PABCFLOAT,*NPABCFLOAT,*LPABCFLOAT;
struct _ABCFLOAT
{
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
}
alias _ABCFLOAT ABCFLOAT;
alias _ABCFLOAT *PABCFLOAT;
alias _ABCFLOAT *NPABCFLOAT;
alias _ABCFLOAT *LPABCFLOAT;
//C       typedef struct _OUTLINETEXTMETRICA {
//C         UINT otmSize;
//C         TEXTMETRICA otmTextMetrics;
//C         BYTE otmFiller;
//C         PANOSE otmPanoseNumber;
//C         UINT otmfsSelection;
//C         UINT otmfsType;
//C         int otmsCharSlopeRise;
//C         int otmsCharSlopeRun;
//C         int otmItalicAngle;
//C         UINT otmEMSquare;
//C         int otmAscent;
//C         int otmDescent;
//C         UINT otmLineGap;
//C         UINT otmsCapEmHeight;
//C         UINT otmsXHeight;
//C         RECT otmrcFontBox;
//C         int otmMacAscent;
//C         int otmMacDescent;
//C         UINT otmMacLineGap;
//C         UINT otmusMinimumPPEM;
//C         POINT otmptSubscriptSize;
//C         POINT otmptSubscriptOffset;
//C         POINT otmptSuperscriptSize;
//C         POINT otmptSuperscriptOffset;
//C         UINT otmsStrikeoutSize;
//C         int otmsStrikeoutPosition;
//C         int otmsUnderscoreSize;
//C         int otmsUnderscorePosition;
//C         PSTR otmpFamilyName;
//C         PSTR otmpFaceName;
//C         PSTR otmpStyleName;
//C         PSTR otmpFullName;
//C       } OUTLINETEXTMETRICA,*POUTLINETEXTMETRICA,*NPOUTLINETEXTMETRICA,*LPOUTLINETEXTMETRICA;
struct _OUTLINETEXTMETRICA
{
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
}
alias _OUTLINETEXTMETRICA OUTLINETEXTMETRICA;
alias _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;
alias _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;
alias _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;
//C       typedef struct _OUTLINETEXTMETRICW {
//C         UINT otmSize;
//C         TEXTMETRICW otmTextMetrics;
//C         BYTE otmFiller;
//C         PANOSE otmPanoseNumber;
//C         UINT otmfsSelection;
//C         UINT otmfsType;
//C         int otmsCharSlopeRise;
//C         int otmsCharSlopeRun;
//C         int otmItalicAngle;
//C         UINT otmEMSquare;
//C         int otmAscent;
//C         int otmDescent;
//C         UINT otmLineGap;
//C         UINT otmsCapEmHeight;
//C         UINT otmsXHeight;
//C         RECT otmrcFontBox;
//C         int otmMacAscent;
//C         int otmMacDescent;
//C         UINT otmMacLineGap;
//C         UINT otmusMinimumPPEM;
//C         POINT otmptSubscriptSize;
//C         POINT otmptSubscriptOffset;
//C         POINT otmptSuperscriptSize;
//C         POINT otmptSuperscriptOffset;
//C         UINT otmsStrikeoutSize;
//C         int otmsStrikeoutPosition;
//C         int otmsUnderscoreSize;
//C         int otmsUnderscorePosition;
//C         PSTR otmpFamilyName;
//C         PSTR otmpFaceName;
//C         PSTR otmpStyleName;
//C         PSTR otmpFullName;
//C       } OUTLINETEXTMETRICW,*POUTLINETEXTMETRICW,*NPOUTLINETEXTMETRICW,*LPOUTLINETEXTMETRICW;
struct _OUTLINETEXTMETRICW
{
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
}
alias _OUTLINETEXTMETRICW OUTLINETEXTMETRICW;
alias _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;
alias _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;
alias _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;
//C       typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
alias OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
//C       typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
alias POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
//C       typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
alias NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
//C       typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
alias LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
//C       typedef struct tagPOLYTEXTA {
//C         int x;
//C         int y;
//C         UINT n;
//C         LPCSTR lpstr;
//C         UINT uiFlags;
//C         RECT rcl;
//C         int *pdx;
//C       } POLYTEXTA,*PPOLYTEXTA,*NPPOLYTEXTA,*LPPOLYTEXTA;
struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
}
alias tagPOLYTEXTA POLYTEXTA;
alias tagPOLYTEXTA *PPOLYTEXTA;
alias tagPOLYTEXTA *NPPOLYTEXTA;
alias tagPOLYTEXTA *LPPOLYTEXTA;
//C       typedef struct tagPOLYTEXTW {
//C         int x;
//C         int y;
//C         UINT n;
//C         LPCWSTR lpstr;
//C         UINT uiFlags;
//C         RECT rcl;
//C         int *pdx;
//C       } POLYTEXTW,*PPOLYTEXTW,*NPPOLYTEXTW,*LPPOLYTEXTW;
struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
}
alias tagPOLYTEXTW POLYTEXTW;
alias tagPOLYTEXTW *PPOLYTEXTW;
alias tagPOLYTEXTW *NPPOLYTEXTW;
alias tagPOLYTEXTW *LPPOLYTEXTW;
//C       typedef POLYTEXTA POLYTEXT;
alias POLYTEXTA POLYTEXT;
//C       typedef PPOLYTEXTA PPOLYTEXT;
alias PPOLYTEXTA PPOLYTEXT;
//C       typedef NPPOLYTEXTA NPPOLYTEXT;
alias NPPOLYTEXTA NPPOLYTEXT;
//C       typedef LPPOLYTEXTA LPPOLYTEXT;
alias LPPOLYTEXTA LPPOLYTEXT;
//C       typedef struct _FIXED {
//C         WORD fract;
//C         short value;
//C       } FIXED;
struct _FIXED
{
    WORD fract;
    short value;
}
alias _FIXED FIXED;
//C       typedef struct _MAT2 {
//C         FIXED eM11;
//C         FIXED eM12;
//C         FIXED eM21;
//C         FIXED eM22;
//C       } MAT2,*LPMAT2;
struct _MAT2
{
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
}
alias _MAT2 MAT2;
alias _MAT2 *LPMAT2;
//C       typedef struct _GLYPHMETRICS {
//C         UINT gmBlackBoxX;
//C         UINT gmBlackBoxY;
//C         POINT gmptGlyphOrigin;
//C         short gmCellIncX;
//C         short gmCellIncY;
//C       } GLYPHMETRICS,*LPGLYPHMETRICS;
struct _GLYPHMETRICS
{
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
}
alias _GLYPHMETRICS GLYPHMETRICS;
alias _GLYPHMETRICS *LPGLYPHMETRICS;
//C       typedef struct tagPOINTFX {
//C         FIXED x;
//C         FIXED y;
//C       } POINTFX,*LPPOINTFX;
struct tagPOINTFX
{
    FIXED x;
    FIXED y;
}
alias tagPOINTFX POINTFX;
alias tagPOINTFX *LPPOINTFX;
//C       typedef struct tagTTPOLYCURVE {
//C         WORD wType;
//C         WORD cpfx;
//C         POINTFX apfx[1];
//C       } TTPOLYCURVE,*LPTTPOLYCURVE;
struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX [1]apfx;
}
alias tagTTPOLYCURVE TTPOLYCURVE;
alias tagTTPOLYCURVE *LPTTPOLYCURVE;
//C       typedef struct tagTTPOLYGONHEADER {
//C         DWORD cb;
//C         DWORD dwType;
//C         POINTFX pfxStart;
//C       } TTPOLYGONHEADER,*LPTTPOLYGONHEADER;
struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
}
alias tagTTPOLYGONHEADER TTPOLYGONHEADER;
alias tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;
//C       typedef struct tagGCP_RESULTSA {
//C         DWORD lStructSize;
//C         LPSTR lpOutString;
//C         UINT *lpOrder;
//C         int *lpDx;
//C         int *lpCaretPos;
//C         LPSTR lpClass;
//C         LPWSTR lpGlyphs;
//C         UINT nGlyphs;
//C         int nMaxFit;
//C       } GCP_RESULTSA,*LPGCP_RESULTSA;
struct tagGCP_RESULTSA
{
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
}
alias tagGCP_RESULTSA GCP_RESULTSA;
alias tagGCP_RESULTSA *LPGCP_RESULTSA;
//C       typedef struct tagGCP_RESULTSW {
//C         DWORD lStructSize;
//C         LPWSTR lpOutString;
//C         UINT *lpOrder;
//C         int *lpDx;
//C         int *lpCaretPos;
//C         LPSTR lpClass;
//C         LPWSTR lpGlyphs;
//C         UINT nGlyphs;
//C         int nMaxFit;
//C       } GCP_RESULTSW,*LPGCP_RESULTSW;
struct tagGCP_RESULTSW
{
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
}
alias tagGCP_RESULTSW GCP_RESULTSW;
alias tagGCP_RESULTSW *LPGCP_RESULTSW;
//C       typedef GCP_RESULTSA GCP_RESULTS;
alias GCP_RESULTSA GCP_RESULTS;
//C       typedef LPGCP_RESULTSA LPGCP_RESULTS;
alias LPGCP_RESULTSA LPGCP_RESULTS;
//C       typedef struct _RASTERIZER_STATUS {
//C         short nSize;
//C         short wFlags;
//C         short nLanguageID;
//C       } RASTERIZER_STATUS,*LPRASTERIZER_STATUS;
struct _RASTERIZER_STATUS
{
    short nSize;
    short wFlags;
    short nLanguageID;
}
alias _RASTERIZER_STATUS RASTERIZER_STATUS;
alias _RASTERIZER_STATUS *LPRASTERIZER_STATUS;
//C       typedef struct tagPIXELFORMATDESCRIPTOR {
//C         WORD nSize;
//C         WORD nVersion;
//C         DWORD dwFlags;
//C         BYTE iPixelType;
//C         BYTE cColorBits;
//C         BYTE cRedBits;
//C         BYTE cRedShift;
//C         BYTE cGreenBits;
//C         BYTE cGreenShift;
//C         BYTE cBlueBits;
//C         BYTE cBlueShift;
//C         BYTE cAlphaBits;
//C         BYTE cAlphaShift;
//C         BYTE cAccumBits;
//C         BYTE cAccumRedBits;
//C         BYTE cAccumGreenBits;
//C         BYTE cAccumBlueBits;
//C         BYTE cAccumAlphaBits;
//C         BYTE cDepthBits;
//C         BYTE cStencilBits;
//C         BYTE cAuxBuffers;
//C         BYTE iLayerType;
//C         BYTE bReserved;
//C         DWORD dwLayerMask;
//C         DWORD dwVisibleMask;
//C         DWORD dwDamageMask;
//C       } PIXELFORMATDESCRIPTOR,*PPIXELFORMATDESCRIPTOR,*LPPIXELFORMATDESCRIPTOR;
struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
}
alias tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;
alias tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;
alias tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;
//C       typedef int ( *OLDFONTENUMPROCA)(const LOGFONTA *,const TEXTMETRICA *,DWORD,LPARAM);
alias int  function(LOGFONTA *, TEXTMETRICA *, DWORD , LPARAM )OLDFONTENUMPROCA;
//C       typedef int ( *OLDFONTENUMPROCW)(const LOGFONTW *,const TEXTMETRICW *,DWORD,LPARAM);
alias int  function(LOGFONTW *, TEXTMETRICW *, DWORD , LPARAM )OLDFONTENUMPROCW;
//C       typedef OLDFONTENUMPROCA FONTENUMPROCA;
alias OLDFONTENUMPROCA FONTENUMPROCA;
//C       typedef OLDFONTENUMPROCW FONTENUMPROCW;
alias OLDFONTENUMPROCW FONTENUMPROCW;
//C       typedef FONTENUMPROCA FONTENUMPROC;
alias FONTENUMPROCA FONTENUMPROC;
//C       typedef int ( *GOBJENUMPROC)(LPVOID,LPARAM);
alias int  function(LPVOID , LPARAM )GOBJENUMPROC;
//C       typedef void ( *LINEDDAPROC)(int,int,LPARAM);
alias void  function(int , int , LPARAM )LINEDDAPROC;
//C        int AddFontResourceA(LPCSTR);
int  AddFontResourceA(LPCSTR );
//C        int AddFontResourceW(LPCWSTR);
int  AddFontResourceW(LPCWSTR );
//C        WINBOOL AnimatePalette(HPALETTE hPal,UINT iStartIndex,UINT cEntries,const PALETTEENTRY *ppe);
WINBOOL  AnimatePalette(HPALETTE hPal, UINT iStartIndex, UINT cEntries, PALETTEENTRY *ppe);
//C        WINBOOL Arc(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
WINBOOL  Arc(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
//C        WINBOOL BitBlt(HDC hdc,int x,int y,int cx,int cy,HDC hdcSrc,int x1,int y1,DWORD rop);
WINBOOL  BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
//C        WINBOOL CancelDC(HDC hdc);
WINBOOL  CancelDC(HDC hdc);
//C        WINBOOL Chord(HDC hdc,int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4);
WINBOOL  Chord(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
//C        int ChoosePixelFormat(HDC hdc,const PIXELFORMATDESCRIPTOR *ppfd);
int  ChoosePixelFormat(HDC hdc, PIXELFORMATDESCRIPTOR *ppfd);
//C        HMETAFILE CloseMetaFile(HDC hdc);
HMETAFILE  CloseMetaFile(HDC hdc);
//C        int CombineRgn(HRGN hrgnDst,HRGN hrgnSrc1,HRGN hrgnSrc2,int iMode);
int  CombineRgn(HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
//C        HMETAFILE CopyMetaFileA(HMETAFILE,LPCSTR);
HMETAFILE  CopyMetaFileA(HMETAFILE , LPCSTR );
//C        HMETAFILE CopyMetaFileW(HMETAFILE,LPCWSTR);
HMETAFILE  CopyMetaFileW(HMETAFILE , LPCWSTR );
//C        HBITMAP CreateBitmap(int nWidth,int nHeight,UINT nPlanes,UINT nBitCount,const void *lpBits);
HBITMAP  CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, void *lpBits);
//C        HBITMAP CreateBitmapIndirect(const BITMAP *pbm);
HBITMAP  CreateBitmapIndirect(BITMAP *pbm);
//C        HBRUSH CreateBrushIndirect(const LOGBRUSH *plbrush);
HBRUSH  CreateBrushIndirect(LOGBRUSH *plbrush);
//C        HBITMAP CreateCompatibleBitmap(HDC hdc,int cx,int cy);
HBITMAP  CreateCompatibleBitmap(HDC hdc, int cx, int cy);
//C        HBITMAP CreateDiscardableBitmap(HDC hdc,int cx,int cy);
HBITMAP  CreateDiscardableBitmap(HDC hdc, int cx, int cy);
//C        HDC CreateCompatibleDC(HDC hdc);
HDC  CreateCompatibleDC(HDC hdc);
//C        HDC CreateDCA(LPCSTR pwszDriver,LPCSTR pwszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
HDC  CreateDCA(LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, DEVMODEA *pdm);
//C        HDC CreateDCW(LPCWSTR pwszDriver,LPCWSTR pwszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
HDC  CreateDCW(LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, DEVMODEW *pdm);
//C        HBITMAP CreateDIBitmap(HDC hdc,const BITMAPINFOHEADER *pbmih,DWORD flInit,const void *pjBits,const BITMAPINFO *pbmi,UINT iUsage);
HBITMAP  CreateDIBitmap(HDC hdc, BITMAPINFOHEADER *pbmih, DWORD flInit, void *pjBits, BITMAPINFO *pbmi, UINT iUsage);
//C        HBRUSH CreateDIBPatternBrush(HGLOBAL h,UINT iUsage);
HBRUSH  CreateDIBPatternBrush(HGLOBAL h, UINT iUsage);
//C        HBRUSH CreateDIBPatternBrushPt(const void *lpPackedDIB,UINT iUsage);
HBRUSH  CreateDIBPatternBrushPt(void *lpPackedDIB, UINT iUsage);
//C        HRGN CreateEllipticRgn(int x1,int y1,int x2,int y2);
HRGN  CreateEllipticRgn(int x1, int y1, int x2, int y2);
//C        HRGN CreateEllipticRgnIndirect(const RECT *lprect);
HRGN  CreateEllipticRgnIndirect(RECT *lprect);
//C        HFONT CreateFontIndirectA(const LOGFONTA *lplf);
HFONT  CreateFontIndirectA(LOGFONTA *lplf);
//C        HFONT CreateFontIndirectW(const LOGFONTW *lplf);
HFONT  CreateFontIndirectW(LOGFONTW *lplf);
//C        HFONT CreateFontA(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCSTR pszFaceName);
HFONT  CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
//C        HFONT CreateFontW(int cHeight,int cWidth,int cEscapement,int cOrientation,int cWeight,DWORD bItalic,DWORD bUnderline,DWORD bStrikeOut,DWORD iCharSet,DWORD iOutPrecision,DWORD iClipPrecision,DWORD iQuality,DWORD iPitchAndFamily,LPCWSTR pszFaceName);
HFONT  CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
//C        HBRUSH CreateHatchBrush(int iHatch,COLORREF color);
HBRUSH  CreateHatchBrush(int iHatch, COLORREF color);
//C        HDC CreateICA(LPCSTR pszDriver,LPCSTR pszDevice,LPCSTR pszPort,const DEVMODEA *pdm);
HDC  CreateICA(LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, DEVMODEA *pdm);
//C        HDC CreateICW(LPCWSTR pszDriver,LPCWSTR pszDevice,LPCWSTR pszPort,const DEVMODEW *pdm);
HDC  CreateICW(LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, DEVMODEW *pdm);
//C        HDC CreateMetaFileA(LPCSTR pszFile);
HDC  CreateMetaFileA(LPCSTR pszFile);
//C        HDC CreateMetaFileW(LPCWSTR pszFile);
HDC  CreateMetaFileW(LPCWSTR pszFile);
//C        HPALETTE CreatePalette(const LOGPALETTE *plpal);
HPALETTE  CreatePalette(LOGPALETTE *plpal);
//C        HPEN CreatePen(int iStyle,int cWidth,COLORREF color);
HPEN  CreatePen(int iStyle, int cWidth, COLORREF color);
//C        HPEN CreatePenIndirect(const LOGPEN *plpen);
HPEN  CreatePenIndirect(LOGPEN *plpen);
//C        HRGN CreatePolyPolygonRgn(const POINT *pptl,const INT *pc,int cPoly,int iMode);
HRGN  CreatePolyPolygonRgn(POINT *pptl, INT *pc, int cPoly, int iMode);
//C        HBRUSH CreatePatternBrush(HBITMAP hbm);
HBRUSH  CreatePatternBrush(HBITMAP hbm);
//C        HRGN CreateRectRgn(int x1,int y1,int x2,int y2);
HRGN  CreateRectRgn(int x1, int y1, int x2, int y2);
//C        HRGN CreateRectRgnIndirect(const RECT *lprect);
HRGN  CreateRectRgnIndirect(RECT *lprect);
//C        HRGN CreateRoundRectRgn(int x1,int y1,int x2,int y2,int w,int h);
HRGN  CreateRoundRectRgn(int x1, int y1, int x2, int y2, int w, int h);
//C        WINBOOL CreateScalableFontResourceA(DWORD fdwHidden,LPCSTR lpszFont,LPCSTR lpszFile,LPCSTR lpszPath);
WINBOOL  CreateScalableFontResourceA(DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
//C        WINBOOL CreateScalableFontResourceW(DWORD fdwHidden,LPCWSTR lpszFont,LPCWSTR lpszFile,LPCWSTR lpszPath);
WINBOOL  CreateScalableFontResourceW(DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
//C        HBRUSH CreateSolidBrush(COLORREF color);
HBRUSH  CreateSolidBrush(COLORREF color);
//C        WINBOOL DeleteDC(HDC hdc);
WINBOOL  DeleteDC(HDC hdc);
//C        WINBOOL DeleteMetaFile(HMETAFILE hmf);
WINBOOL  DeleteMetaFile(HMETAFILE hmf);
//C        WINBOOL DeleteObject(HGDIOBJ ho);
WINBOOL  DeleteObject(HGDIOBJ ho);
//C        int DescribePixelFormat(HDC hdc,int iPixelFormat,UINT nBytes,LPPIXELFORMATDESCRIPTOR ppfd);
int  DescribePixelFormat(HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
//C       typedef UINT ( *LPFNDEVMODE)(HWND,HMODULE,LPDEVMODE,LPSTR,LPSTR,LPDEVMODE,LPSTR,UINT);
alias UINT  function(HWND , HMODULE , LPDEVMODE , LPSTR , LPSTR , LPDEVMODE , LPSTR , UINT )LPFNDEVMODE;
//C       typedef DWORD ( *LPFNDEVCAPS)(LPSTR,LPSTR,UINT,LPSTR,LPDEVMODE);
alias DWORD  function(LPSTR , LPSTR , UINT , LPSTR , LPDEVMODE )LPFNDEVCAPS;
//C        int DeviceCapabilitiesA(LPCSTR pDevice,LPCSTR pPort,WORD fwCapability,LPSTR pOutput,const DEVMODEA *pDevMode);
int  DeviceCapabilitiesA(LPCSTR pDevice, LPCSTR pPort, WORD fwCapability, LPSTR pOutput, DEVMODEA *pDevMode);
//C        int DeviceCapabilitiesW(LPCWSTR pDevice,LPCWSTR pPort,WORD fwCapability,LPWSTR pOutput,const DEVMODEW *pDevMode);
int  DeviceCapabilitiesW(LPCWSTR pDevice, LPCWSTR pPort, WORD fwCapability, LPWSTR pOutput, DEVMODEW *pDevMode);
//C        int DrawEscape(HDC hdc,int iEscape,int cjIn,LPCSTR lpIn);
int  DrawEscape(HDC hdc, int iEscape, int cjIn, LPCSTR lpIn);
//C        WINBOOL Ellipse(HDC hdc,int left,int top,int right,int bottom);
WINBOOL  Ellipse(HDC hdc, int left, int top, int right, int bottom);
//C        int EnumFontFamiliesExA(HDC hdc,LPLOGFONTA lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam,DWORD dwFlags);
int  EnumFontFamiliesExA(HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
//C        int EnumFontFamiliesExW(HDC hdc,LPLOGFONTW lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam,DWORD dwFlags);
int  EnumFontFamiliesExW(HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
//C        int EnumFontFamiliesA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
int  EnumFontFamiliesA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
//C        int EnumFontFamiliesW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
int  EnumFontFamiliesW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
//C        int EnumFontsA(HDC hdc,LPCSTR lpLogfont,FONTENUMPROCA lpProc,LPARAM lParam);
int  EnumFontsA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
//C        int EnumFontsW(HDC hdc,LPCWSTR lpLogfont,FONTENUMPROCW lpProc,LPARAM lParam);
int  EnumFontsW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
//C        int EnumObjects(HDC hdc,int nType,GOBJENUMPROC lpFunc,LPARAM lParam);
int  EnumObjects(HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);
//C        WINBOOL EqualRgn(HRGN hrgn1,HRGN hrgn2);
WINBOOL  EqualRgn(HRGN hrgn1, HRGN hrgn2);
//C        int Escape(HDC hdc,int iEscape,int cjIn,LPCSTR pvIn,LPVOID pvOut);
int  Escape(HDC hdc, int iEscape, int cjIn, LPCSTR pvIn, LPVOID pvOut);
//C        int ExtEscape(HDC hdc,int iEscape,int cjInput,LPCSTR lpInData,int cjOutput,LPSTR lpOutData);
int  ExtEscape(HDC hdc, int iEscape, int cjInput, LPCSTR lpInData, int cjOutput, LPSTR lpOutData);
//C        int ExcludeClipRect(HDC hdc,int left,int top,int right,int bottom);
int  ExcludeClipRect(HDC hdc, int left, int top, int right, int bottom);
//C        HRGN ExtCreateRegion(const XFORM *lpx,DWORD nCount,const RGNDATA *lpData);
HRGN  ExtCreateRegion(XFORM *lpx, DWORD nCount, RGNDATA *lpData);
//C        WINBOOL ExtFloodFill(HDC hdc,int x,int y,COLORREF color,UINT type);
WINBOOL  ExtFloodFill(HDC hdc, int x, int y, COLORREF color, UINT type);
//C        WINBOOL FillRgn(HDC hdc,HRGN hrgn,HBRUSH hbr);
WINBOOL  FillRgn(HDC hdc, HRGN hrgn, HBRUSH hbr);
//C        WINBOOL FloodFill(HDC hdc,int x,int y,COLORREF color);
WINBOOL  FloodFill(HDC hdc, int x, int y, COLORREF color);
//C        WINBOOL FrameRgn(HDC hdc,HRGN hrgn,HBRUSH hbr,int w,int h);
WINBOOL  FrameRgn(HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
//C        int GetROP2(HDC hdc);
int  GetROP2(HDC hdc);
//C        WINBOOL GetAspectRatioFilterEx(HDC hdc,LPSIZE lpsize);
WINBOOL  GetAspectRatioFilterEx(HDC hdc, LPSIZE lpsize);
//C        COLORREF GetBkColor(HDC hdc);
COLORREF  GetBkColor(HDC hdc);
//C        COLORREF GetDCBrushColor(HDC hdc);
COLORREF  GetDCBrushColor(HDC hdc);
//C        COLORREF GetDCPenColor(HDC hdc);
COLORREF  GetDCPenColor(HDC hdc);
//C        int GetBkMode(HDC hdc);
int  GetBkMode(HDC hdc);
//C        LONG GetBitmapBits(HBITMAP hbit,LONG cb,LPVOID lpvBits);
LONG  GetBitmapBits(HBITMAP hbit, LONG cb, LPVOID lpvBits);
//C        WINBOOL GetBitmapDimensionEx(HBITMAP hbit,LPSIZE lpsize);
WINBOOL  GetBitmapDimensionEx(HBITMAP hbit, LPSIZE lpsize);
//C        UINT GetBoundsRect(HDC hdc,LPRECT lprect,UINT flags);
UINT  GetBoundsRect(HDC hdc, LPRECT lprect, UINT flags);
//C        WINBOOL GetBrushOrgEx(HDC hdc,LPPOINT lppt);
WINBOOL  GetBrushOrgEx(HDC hdc, LPPOINT lppt);
//C        WINBOOL GetCharWidthA(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
WINBOOL  GetCharWidthA(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
//C        WINBOOL GetCharWidthW(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
WINBOOL  GetCharWidthW(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
//C        WINBOOL GetCharWidth32A(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
WINBOOL  GetCharWidth32A(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
//C        WINBOOL GetCharWidth32W(HDC hdc,UINT iFirst,UINT iLast,LPINT lpBuffer);
WINBOOL  GetCharWidth32W(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
//C        WINBOOL GetCharWidthFloatA(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
WINBOOL  GetCharWidthFloatA(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
//C        WINBOOL GetCharWidthFloatW(HDC hdc,UINT iFirst,UINT iLast,PFLOAT lpBuffer);
WINBOOL  GetCharWidthFloatW(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
//C        WINBOOL GetCharABCWidthsA(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
WINBOOL  GetCharABCWidthsA(HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
//C        WINBOOL GetCharABCWidthsW(HDC hdc,UINT wFirst,UINT wLast,LPABC lpABC);
WINBOOL  GetCharABCWidthsW(HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC);
//C        WINBOOL GetCharABCWidthsFloatA(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
WINBOOL  GetCharABCWidthsFloatA(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
//C        WINBOOL GetCharABCWidthsFloatW(HDC hdc,UINT iFirst,UINT iLast,LPABCFLOAT lpABC);
WINBOOL  GetCharABCWidthsFloatW(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
//C        int GetClipBox(HDC hdc,LPRECT lprect);
int  GetClipBox(HDC hdc, LPRECT lprect);
//C        int GetClipRgn(HDC hdc,HRGN hrgn);
int  GetClipRgn(HDC hdc, HRGN hrgn);
//C        int GetMetaRgn(HDC hdc,HRGN hrgn);
int  GetMetaRgn(HDC hdc, HRGN hrgn);
//C        HGDIOBJ GetCurrentObject(HDC hdc,UINT type);
HGDIOBJ  GetCurrentObject(HDC hdc, UINT type);
//C        WINBOOL GetCurrentPositionEx(HDC hdc,LPPOINT lppt);
WINBOOL  GetCurrentPositionEx(HDC hdc, LPPOINT lppt);
//C        int GetDeviceCaps(HDC hdc,int index);
int  GetDeviceCaps(HDC hdc, int index);
//C        int GetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,LPVOID lpvBits,LPBITMAPINFO lpbmi,UINT usage);
int  GetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
//C        DWORD GetFontData (HDC hdc,DWORD dwTable,DWORD dwOffset,PVOID pvBuffer,DWORD cjBuffer);
DWORD  GetFontData(HDC hdc, DWORD dwTable, DWORD dwOffset, PVOID pvBuffer, DWORD cjBuffer);
//C        DWORD GetGlyphOutlineA(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
DWORD  GetGlyphOutlineA(HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, MAT2 *lpmat2);
//C        DWORD GetGlyphOutlineW(HDC hdc,UINT uChar,UINT fuFormat,LPGLYPHMETRICS lpgm,DWORD cjBuffer,LPVOID pvBuffer,const MAT2 *lpmat2);
DWORD  GetGlyphOutlineW(HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, MAT2 *lpmat2);
//C        int GetGraphicsMode(HDC hdc);
int  GetGraphicsMode(HDC hdc);
//C        int GetMapMode(HDC hdc);
int  GetMapMode(HDC hdc);
//C        UINT GetMetaFileBitsEx(HMETAFILE hMF,UINT cbBuffer,LPVOID lpData);
UINT  GetMetaFileBitsEx(HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
//C        HMETAFILE GetMetaFileA(LPCSTR lpName);
HMETAFILE  GetMetaFileA(LPCSTR lpName);
//C        HMETAFILE GetMetaFileW(LPCWSTR lpName);
HMETAFILE  GetMetaFileW(LPCWSTR lpName);
//C        COLORREF GetNearestColor(HDC hdc,COLORREF color);
COLORREF  GetNearestColor(HDC hdc, COLORREF color);
//C        UINT GetNearestPaletteIndex(HPALETTE h,COLORREF color);
UINT  GetNearestPaletteIndex(HPALETTE h, COLORREF color);
//C        DWORD GetObjectType(HGDIOBJ h);
DWORD  GetObjectType(HGDIOBJ h);
//C        UINT GetOutlineTextMetricsA(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICA potm);
UINT  GetOutlineTextMetricsA(HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICA potm);
//C        UINT GetOutlineTextMetricsW(HDC hdc,UINT cjCopy,LPOUTLINETEXTMETRICW potm);
UINT  GetOutlineTextMetricsW(HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICW potm);
//C        UINT GetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
UINT  GetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
//C        COLORREF GetPixel(HDC hdc,int x,int y);
COLORREF  GetPixel(HDC hdc, int x, int y);
//C        int GetPixelFormat(HDC hdc);
int  GetPixelFormat(HDC hdc);
//C        int GetPolyFillMode(HDC hdc);
int  GetPolyFillMode(HDC hdc);
//C        WINBOOL GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,UINT cjBytes);
WINBOOL  GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat, UINT cjBytes);
//C        int GetRandomRgn (HDC hdc,HRGN hrgn,INT i);
int  GetRandomRgn(HDC hdc, HRGN hrgn, INT i);
//C        DWORD GetRegionData(HRGN hrgn,DWORD nCount,LPRGNDATA lpRgnData);
DWORD  GetRegionData(HRGN hrgn, DWORD nCount, LPRGNDATA lpRgnData);
//C        int GetRgnBox(HRGN hrgn,LPRECT lprc);
int  GetRgnBox(HRGN hrgn, LPRECT lprc);
//C        HGDIOBJ GetStockObject(int i);
HGDIOBJ  GetStockObject(int i);
//C        int GetStretchBltMode(HDC hdc);
int  GetStretchBltMode(HDC hdc);
//C        UINT GetSystemPaletteEntries(HDC hdc,UINT iStart,UINT cEntries,LPPALETTEENTRY pPalEntries);
UINT  GetSystemPaletteEntries(HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries);
//C        UINT GetSystemPaletteUse(HDC hdc);
UINT  GetSystemPaletteUse(HDC hdc);
//C        int GetTextCharacterExtra(HDC hdc);
int  GetTextCharacterExtra(HDC hdc);
//C        UINT GetTextAlign(HDC hdc);
UINT  GetTextAlign(HDC hdc);
//C        COLORREF GetTextColor(HDC hdc);
COLORREF  GetTextColor(HDC hdc);
//C        WINBOOL GetTextExtentPointA(HDC hdc,LPCSTR lpString,int c,LPSIZE lpsz);
WINBOOL  GetTextExtentPointA(HDC hdc, LPCSTR lpString, int c, LPSIZE lpsz);
//C        WINBOOL GetTextExtentPointW(HDC hdc,LPCWSTR lpString,int c,LPSIZE lpsz);
WINBOOL  GetTextExtentPointW(HDC hdc, LPCWSTR lpString, int c, LPSIZE lpsz);
//C        WINBOOL GetTextExtentPoint32A(HDC hdc,LPCSTR lpString,int c,LPSIZE psizl);
WINBOOL  GetTextExtentPoint32A(HDC hdc, LPCSTR lpString, int c, LPSIZE psizl);
//C        WINBOOL GetTextExtentPoint32W(HDC hdc,LPCWSTR lpString,int c,LPSIZE psizl);
WINBOOL  GetTextExtentPoint32W(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl);
//C        WINBOOL GetTextExtentExPointA(HDC hdc,LPCSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
WINBOOL  GetTextExtentExPointA(HDC hdc, LPCSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
//C        WINBOOL GetTextExtentExPointW(HDC hdc,LPCWSTR lpszString,int cchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
WINBOOL  GetTextExtentExPointW(HDC hdc, LPCWSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
//C        int GetTextCharset(HDC hdc);
int  GetTextCharset(HDC hdc);
//C        int GetTextCharsetInfo(HDC hdc,LPFONTSIGNATURE lpSig,DWORD dwFlags);
int  GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
//C        WINBOOL TranslateCharsetInfo(DWORD *lpSrc,LPCHARSETINFO lpCs,DWORD dwFlags);
WINBOOL  TranslateCharsetInfo(DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
//C        DWORD GetFontLanguageInfo(HDC hdc);
DWORD  GetFontLanguageInfo(HDC hdc);
//C        DWORD GetCharacterPlacementA(HDC hdc,LPCSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSA lpResults,DWORD dwFlags);
DWORD  GetCharacterPlacementA(HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
//C        DWORD GetCharacterPlacementW(HDC hdc,LPCWSTR lpString,int nCount,int nMexExtent,LPGCP_RESULTSW lpResults,DWORD dwFlags);
DWORD  GetCharacterPlacementW(HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
//C       typedef struct tagWCRANGE {
//C         WCHAR wcLow;
//C         USHORT cGlyphs;
//C       } WCRANGE,*PWCRANGE,*LPWCRANGE;
struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
}
alias tagWCRANGE WCRANGE;
alias tagWCRANGE *PWCRANGE;
alias tagWCRANGE *LPWCRANGE;
//C       typedef struct tagGLYPHSET {
//C         DWORD cbThis;
//C         DWORD flAccel;
//C         DWORD cGlyphsSupported;
//C         DWORD cRanges;
//C         WCRANGE ranges[1];
//C       } GLYPHSET,*PGLYPHSET,*LPGLYPHSET;
struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE [1]ranges;
}
alias tagGLYPHSET GLYPHSET;
alias tagGLYPHSET *PGLYPHSET;
alias tagGLYPHSET *LPGLYPHSET;
//C        DWORD GetFontUnicodeRanges(HDC hdc,LPGLYPHSET lpgs);
DWORD  GetFontUnicodeRanges(HDC hdc, LPGLYPHSET lpgs);
//C        DWORD GetGlyphIndicesA(HDC hdc,LPCSTR lpstr,int c,LPWORD pgi,DWORD fl);
DWORD  GetGlyphIndicesA(HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
//C        DWORD GetGlyphIndicesW(HDC hdc,LPCWSTR lpstr,int c,LPWORD pgi,DWORD fl);
DWORD  GetGlyphIndicesW(HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);
//C        WINBOOL GetTextExtentPointI(HDC hdc,LPWORD pgiIn,int cgi,LPSIZE psize);
WINBOOL  GetTextExtentPointI(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
//C        WINBOOL GetTextExtentExPointI (HDC hdc,LPWORD lpwszString,int cwchString,int nMaxExtent,LPINT lpnFit,LPINT lpnDx,LPSIZE lpSize);
WINBOOL  GetTextExtentExPointI(HDC hdc, LPWORD lpwszString, int cwchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize);
//C        WINBOOL GetCharWidthI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPINT piWidths);
WINBOOL  GetCharWidthI(HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT piWidths);
//C        WINBOOL GetCharABCWidthsI(HDC hdc,UINT giFirst,UINT cgi,LPWORD pgi,LPABC pabc);
WINBOOL  GetCharABCWidthsI(HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC pabc);
//C       typedef struct tagDESIGNVECTOR {
//C         DWORD dvReserved;
//C         DWORD dvNumAxes;
//C         LONG dvValues[16];
//C       } DESIGNVECTOR,*PDESIGNVECTOR,*LPDESIGNVECTOR;
struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG [16]dvValues;
}
alias tagDESIGNVECTOR DESIGNVECTOR;
alias tagDESIGNVECTOR *PDESIGNVECTOR;
alias tagDESIGNVECTOR *LPDESIGNVECTOR;
//C        int AddFontResourceExA(LPCSTR name,DWORD fl,PVOID res);
int  AddFontResourceExA(LPCSTR name, DWORD fl, PVOID res);
//C        int AddFontResourceExW(LPCWSTR name,DWORD fl,PVOID res);
int  AddFontResourceExW(LPCWSTR name, DWORD fl, PVOID res);
//C        WINBOOL RemoveFontResourceExA(LPCSTR name,DWORD fl,PVOID pdv);
WINBOOL  RemoveFontResourceExA(LPCSTR name, DWORD fl, PVOID pdv);
//C        WINBOOL RemoveFontResourceExW(LPCWSTR name,DWORD fl,PVOID pdv);
WINBOOL  RemoveFontResourceExW(LPCWSTR name, DWORD fl, PVOID pdv);
//C        HANDLE AddFontMemResourceEx(PVOID pFileView,DWORD cjSize,PVOID pvResrved,DWORD *pNumFonts);
HANDLE  AddFontMemResourceEx(PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD *pNumFonts);
//C        WINBOOL RemoveFontMemResourceEx(HANDLE h);
WINBOOL  RemoveFontMemResourceEx(HANDLE h);
//C       typedef struct tagAXISINFOA {
//C         LONG axMinValue;
//C         LONG axMaxValue;
//C         BYTE axAxisName[16];
//C       } AXISINFOA,*PAXISINFOA,*LPAXISINFOA;
struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE [16]axAxisName;
}
alias tagAXISINFOA AXISINFOA;
alias tagAXISINFOA *PAXISINFOA;
alias tagAXISINFOA *LPAXISINFOA;
//C       typedef struct tagAXISINFOW {
//C         LONG axMinValue;
//C         LONG axMaxValue;
//C         WCHAR axAxisName[16];
//C       } AXISINFOW,*PAXISINFOW,*LPAXISINFOW;
struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR [16]axAxisName;
}
alias tagAXISINFOW AXISINFOW;
alias tagAXISINFOW *PAXISINFOW;
alias tagAXISINFOW *LPAXISINFOW;
//C       typedef AXISINFOA AXISINFO;
alias AXISINFOA AXISINFO;
//C       typedef PAXISINFOA PAXISINFO;
alias PAXISINFOA PAXISINFO;
//C       typedef LPAXISINFOA LPAXISINFO;
alias LPAXISINFOA LPAXISINFO;
//C       typedef struct tagAXESLISTA {
//C         DWORD axlReserved;
//C         DWORD axlNumAxes;
//C         AXISINFOA axlAxisInfo[16];
//C       } AXESLISTA,*PAXESLISTA,*LPAXESLISTA;
struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA [16]axlAxisInfo;
}
alias tagAXESLISTA AXESLISTA;
alias tagAXESLISTA *PAXESLISTA;
alias tagAXESLISTA *LPAXESLISTA;
//C       typedef struct tagAXESLISTW {
//C         DWORD axlReserved;
//C         DWORD axlNumAxes;
//C         AXISINFOW axlAxisInfo[16];
//C       } AXESLISTW,*PAXESLISTW,*LPAXESLISTW;
struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW [16]axlAxisInfo;
}
alias tagAXESLISTW AXESLISTW;
alias tagAXESLISTW *PAXESLISTW;
alias tagAXESLISTW *LPAXESLISTW;
//C       typedef AXESLISTA AXESLIST;
alias AXESLISTA AXESLIST;
//C       typedef PAXESLISTA PAXESLIST;
alias PAXESLISTA PAXESLIST;
//C       typedef LPAXESLISTA LPAXESLIST;
alias LPAXESLISTA LPAXESLIST;
//C       typedef struct tagENUMLOGFONTEXDVA {
//C         ENUMLOGFONTEXA elfEnumLogfontEx;
//C         DESIGNVECTOR elfDesignVector;
//C       } ENUMLOGFONTEXDVA,*PENUMLOGFONTEXDVA,*LPENUMLOGFONTEXDVA;
struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
}
alias tagENUMLOGFONTEXDVA ENUMLOGFONTEXDVA;
alias tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;
alias tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;
//C       typedef struct tagENUMLOGFONTEXDVW {
//C         ENUMLOGFONTEXW elfEnumLogfontEx;
//C         DESIGNVECTOR elfDesignVector;
//C       } ENUMLOGFONTEXDVW,*PENUMLOGFONTEXDVW,*LPENUMLOGFONTEXDVW;
struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
}
alias tagENUMLOGFONTEXDVW ENUMLOGFONTEXDVW;
alias tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;
alias tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;
//C       typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
alias ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
//C       typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
alias PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
//C       typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
alias LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
//C        HFONT CreateFontIndirectExA(const ENUMLOGFONTEXDVA *);
HFONT  CreateFontIndirectExA(ENUMLOGFONTEXDVA *);
//C        HFONT CreateFontIndirectExW(const ENUMLOGFONTEXDVW *);
HFONT  CreateFontIndirectExW(ENUMLOGFONTEXDVW *);
//C       typedef struct tagENUMTEXTMETRICA {
//C         NEWTEXTMETRICEXA etmNewTextMetricEx;
//C         AXESLISTA etmAxesList;
//C       } ENUMTEXTMETRICA,*PENUMTEXTMETRICA,*LPENUMTEXTMETRICA;
struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
}
alias tagENUMTEXTMETRICA ENUMTEXTMETRICA;
alias tagENUMTEXTMETRICA *PENUMTEXTMETRICA;
alias tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;
//C       typedef struct tagENUMTEXTMETRICW
//C       {
//C         NEWTEXTMETRICEXW etmNewTextMetricEx;
//C         AXESLISTW etmAxesList;
//C       } ENUMTEXTMETRICW,*PENUMTEXTMETRICW,*LPENUMTEXTMETRICW;
struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
}
alias tagENUMTEXTMETRICW ENUMTEXTMETRICW;
alias tagENUMTEXTMETRICW *PENUMTEXTMETRICW;
alias tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;
//C       typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
alias ENUMTEXTMETRICA ENUMTEXTMETRIC;
//C       typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
alias PENUMTEXTMETRICA PENUMTEXTMETRIC;
//C       typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
alias LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
//C        WINBOOL GetViewportExtEx(HDC hdc,LPSIZE lpsize);
WINBOOL  GetViewportExtEx(HDC hdc, LPSIZE lpsize);
//C        WINBOOL GetViewportOrgEx(HDC hdc,LPPOINT lppoint);
WINBOOL  GetViewportOrgEx(HDC hdc, LPPOINT lppoint);
//C        WINBOOL GetWindowExtEx(HDC hdc,LPSIZE lpsize);
WINBOOL  GetWindowExtEx(HDC hdc, LPSIZE lpsize);
//C        WINBOOL GetWindowOrgEx(HDC hdc,LPPOINT lppoint);
WINBOOL  GetWindowOrgEx(HDC hdc, LPPOINT lppoint);
//C        int IntersectClipRect(HDC hdc,int left,int top,int right,int bottom);
int  IntersectClipRect(HDC hdc, int left, int top, int right, int bottom);
//C        WINBOOL InvertRgn(HDC hdc,HRGN hrgn);
WINBOOL  InvertRgn(HDC hdc, HRGN hrgn);
//C        WINBOOL LineDDA(int xStart,int yStart,int xEnd,int yEnd,LINEDDAPROC lpProc,LPARAM data);
WINBOOL  LineDDA(int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
//C        WINBOOL LineTo(HDC hdc,int x,int y);
WINBOOL  LineTo(HDC hdc, int x, int y);
//C        WINBOOL MaskBlt(HDC hdcDest,int xDest,int yDest,int width,int height,HDC hdcSrc,int xSrc,int ySrc,HBITMAP hbmMask,int xMask,int yMask,DWORD rop);
WINBOOL  MaskBlt(HDC hdcDest, int xDest, int yDest, int width, int height, HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
//C        WINBOOL PlgBlt(HDC hdcDest,const POINT *lpPoint,HDC hdcSrc,int xSrc,int ySrc,int width,int height,HBITMAP hbmMask,int xMask,int yMask);
WINBOOL  PlgBlt(HDC hdcDest, POINT *lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width, int height, HBITMAP hbmMask, int xMask, int yMask);
//C        int OffsetClipRgn(HDC hdc,int x,int y);
int  OffsetClipRgn(HDC hdc, int x, int y);
//C        int OffsetRgn(HRGN hrgn,int x,int y);
int  OffsetRgn(HRGN hrgn, int x, int y);
//C        WINBOOL PatBlt(HDC hdc,int x,int y,int w,int h,DWORD rop);
WINBOOL  PatBlt(HDC hdc, int x, int y, int w, int h, DWORD rop);
//C        WINBOOL Pie(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
WINBOOL  Pie(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
//C        WINBOOL PlayMetaFile(HDC hdc,HMETAFILE hmf);
WINBOOL  PlayMetaFile(HDC hdc, HMETAFILE hmf);
//C        WINBOOL PaintRgn(HDC hdc,HRGN hrgn);
WINBOOL  PaintRgn(HDC hdc, HRGN hrgn);
//C        WINBOOL PolyPolygon(HDC hdc,const POINT *apt,const INT *asz,int csz);
WINBOOL  PolyPolygon(HDC hdc, POINT *apt, INT *asz, int csz);
//C        WINBOOL PtInRegion(HRGN hrgn,int x,int y);
WINBOOL  PtInRegion(HRGN hrgn, int x, int y);
//C        WINBOOL PtVisible(HDC hdc,int x,int y);
WINBOOL  PtVisible(HDC hdc, int x, int y);
//C        WINBOOL RectInRegion(HRGN hrgn,const RECT *lprect);
WINBOOL  RectInRegion(HRGN hrgn, RECT *lprect);
//C        WINBOOL RectVisible(HDC hdc,const RECT *lprect);
WINBOOL  RectVisible(HDC hdc, RECT *lprect);
//C        WINBOOL Rectangle(HDC hdc,int left,int top,int right,int bottom);
WINBOOL  Rectangle(HDC hdc, int left, int top, int right, int bottom);
//C        WINBOOL RestoreDC(HDC hdc,int nSavedDC);
WINBOOL  RestoreDC(HDC hdc, int nSavedDC);
//C        HDC ResetDCA(HDC hdc,const DEVMODEA *lpdm);
HDC  ResetDCA(HDC hdc, DEVMODEA *lpdm);
//C        HDC ResetDCW(HDC hdc,const DEVMODEW *lpdm);
HDC  ResetDCW(HDC hdc, DEVMODEW *lpdm);
//C        UINT RealizePalette(HDC hdc);
UINT  RealizePalette(HDC hdc);
//C        WINBOOL RemoveFontResourceA(LPCSTR lpFileName);
WINBOOL  RemoveFontResourceA(LPCSTR lpFileName);
//C        WINBOOL RemoveFontResourceW(LPCWSTR lpFileName);
WINBOOL  RemoveFontResourceW(LPCWSTR lpFileName);
//C        WINBOOL RoundRect(HDC hdc,int left,int top,int right,int bottom,int width,int height);
WINBOOL  RoundRect(HDC hdc, int left, int top, int right, int bottom, int width, int height);
//C        WINBOOL ResizePalette(HPALETTE hpal,UINT n);
WINBOOL  ResizePalette(HPALETTE hpal, UINT n);
//C        int SaveDC(HDC hdc);
int  SaveDC(HDC hdc);
//C        int SelectClipRgn(HDC hdc,HRGN hrgn);
int  SelectClipRgn(HDC hdc, HRGN hrgn);
//C        int ExtSelectClipRgn(HDC hdc,HRGN hrgn,int mode);
int  ExtSelectClipRgn(HDC hdc, HRGN hrgn, int mode);
//C        int SetMetaRgn(HDC hdc);
int  SetMetaRgn(HDC hdc);
//C        HGDIOBJ SelectObject(HDC hdc,HGDIOBJ h);
HGDIOBJ  SelectObject(HDC hdc, HGDIOBJ h);
//C        HPALETTE SelectPalette(HDC hdc,HPALETTE hPal,WINBOOL bForceBkgd);
HPALETTE  SelectPalette(HDC hdc, HPALETTE hPal, WINBOOL bForceBkgd);
//C        COLORREF SetBkColor(HDC hdc,COLORREF color);
COLORREF  SetBkColor(HDC hdc, COLORREF color);
//C        COLORREF SetDCBrushColor(HDC hdc,COLORREF color);
COLORREF  SetDCBrushColor(HDC hdc, COLORREF color);
//C        COLORREF SetDCPenColor(HDC hdc,COLORREF color);
COLORREF  SetDCPenColor(HDC hdc, COLORREF color);
//C        int SetBkMode(HDC hdc,int mode);
int  SetBkMode(HDC hdc, int mode);
//C        LONG SetBitmapBits(HBITMAP hbm,DWORD cb,const void *pvBits);
LONG  SetBitmapBits(HBITMAP hbm, DWORD cb, void *pvBits);
//C        UINT SetBoundsRect(HDC hdc,const RECT *lprect,UINT flags);
UINT  SetBoundsRect(HDC hdc, RECT *lprect, UINT flags);
//C        int SetDIBits(HDC hdc,HBITMAP hbm,UINT start,UINT cLines,const void *lpBits,const BITMAPINFO *lpbmi,UINT ColorUse);
int  SetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, void *lpBits, BITMAPINFO *lpbmi, UINT ColorUse);
//C        int SetDIBitsToDevice(HDC hdc,int xDest,int yDest,DWORD w,DWORD h,int xSrc,int ySrc,UINT StartScan,UINT cLines,const void *lpvBits,const BITMAPINFO *lpbmi,UINT ColorUse);
int  SetDIBitsToDevice(HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc, int ySrc, UINT StartScan, UINT cLines, void *lpvBits, BITMAPINFO *lpbmi, UINT ColorUse);
//C        DWORD SetMapperFlags(HDC hdc,DWORD flags);
DWORD  SetMapperFlags(HDC hdc, DWORD flags);
//C        int SetGraphicsMode(HDC hdc,int iMode);
int  SetGraphicsMode(HDC hdc, int iMode);
//C        int SetMapMode(HDC hdc,int iMode);
int  SetMapMode(HDC hdc, int iMode);
//C        DWORD SetLayout(HDC hdc,DWORD l);
DWORD  SetLayout(HDC hdc, DWORD l);
//C        DWORD GetLayout(HDC hdc);
DWORD  GetLayout(HDC hdc);
//C        HMETAFILE SetMetaFileBitsEx(UINT cbBuffer,const BYTE *lpData);
HMETAFILE  SetMetaFileBitsEx(UINT cbBuffer, BYTE *lpData);
//C        UINT SetPaletteEntries(HPALETTE hpal,UINT iStart,UINT cEntries,const PALETTEENTRY *pPalEntries);
UINT  SetPaletteEntries(HPALETTE hpal, UINT iStart, UINT cEntries, PALETTEENTRY *pPalEntries);
//C        COLORREF SetPixel(HDC hdc,int x,int y,COLORREF color);
COLORREF  SetPixel(HDC hdc, int x, int y, COLORREF color);
//C        WINBOOL SetPixelV(HDC hdc,int x,int y,COLORREF color);
WINBOOL  SetPixelV(HDC hdc, int x, int y, COLORREF color);
//C        WINBOOL SetPixelFormat(HDC hdc,int format,const PIXELFORMATDESCRIPTOR *ppfd);
WINBOOL  SetPixelFormat(HDC hdc, int format, PIXELFORMATDESCRIPTOR *ppfd);
//C        int SetPolyFillMode(HDC hdc,int mode);
int  SetPolyFillMode(HDC hdc, int mode);
//C        WINBOOL StretchBlt(HDC hdcDest,int xDest,int yDest,int wDest,int hDest,HDC hdcSrc,int xSrc,int ySrc,int wSrc,int hSrc,DWORD rop);
WINBOOL  StretchBlt(HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
//C        WINBOOL SetRectRgn(HRGN hrgn,int left,int top,int right,int bottom);
WINBOOL  SetRectRgn(HRGN hrgn, int left, int top, int right, int bottom);
//C        int StretchDIBits(HDC hdc,int xDest,int yDest,int DestWidth,int DestHeight,int xSrc,int ySrc,int SrcWidth,int SrcHeight,const void *lpBits,const BITMAPINFO *lpbmi,UINT iUsage,DWORD rop);
int  StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, void *lpBits, BITMAPINFO *lpbmi, UINT iUsage, DWORD rop);
//C        int SetROP2(HDC hdc,int rop2);
int  SetROP2(HDC hdc, int rop2);
//C        int SetStretchBltMode(HDC hdc,int mode);
int  SetStretchBltMode(HDC hdc, int mode);
//C        UINT SetSystemPaletteUse(HDC hdc,UINT use);
UINT  SetSystemPaletteUse(HDC hdc, UINT use);
//C        int SetTextCharacterExtra(HDC hdc,int extra);
int  SetTextCharacterExtra(HDC hdc, int extra);
//C        COLORREF SetTextColor(HDC hdc,COLORREF color);
COLORREF  SetTextColor(HDC hdc, COLORREF color);
//C        UINT SetTextAlign(HDC hdc,UINT align_);
UINT  SetTextAlign(HDC hdc, UINT align_);
//C        WINBOOL SetTextJustification(HDC hdc,int extra,int count);
WINBOOL  SetTextJustification(HDC hdc, int extra, int count);
//C        WINBOOL UpdateColors(HDC hdc);
WINBOOL  UpdateColors(HDC hdc);
//C       typedef USHORT COLOR16;
alias USHORT COLOR16;
//C       typedef struct _TRIVERTEX {
//C         LONG x;
//C         LONG y;
//C         COLOR16 Red;
//C         COLOR16 Green;
//C         COLOR16 Blue;
//C         COLOR16 Alpha;
//C       } TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;
struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}
alias _TRIVERTEX TRIVERTEX;
alias _TRIVERTEX *PTRIVERTEX;
alias _TRIVERTEX *LPTRIVERTEX;
//C       typedef struct _GRADIENT_TRIANGLE {
//C         ULONG Vertex1;
//C         ULONG Vertex2;
//C         ULONG Vertex3;
//C       } GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;
struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
}
alias _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
alias _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;
alias _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;
//C       typedef struct _GRADIENT_RECT {
//C         ULONG UpperLeft;
//C         ULONG LowerRight;
//C       } GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;
struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}
alias _GRADIENT_RECT GRADIENT_RECT;
alias _GRADIENT_RECT *PGRADIENT_RECT;
alias _GRADIENT_RECT *LPGRADIENT_RECT;
//C       typedef struct _BLENDFUNCTION {
//C         BYTE BlendOp;
//C         BYTE BlendFlags;
//C         BYTE SourceConstantAlpha;
//C         BYTE AlphaFormat;
//C       } BLENDFUNCTION,*PBLENDFUNCTION;
struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}
alias _BLENDFUNCTION BLENDFUNCTION;
alias _BLENDFUNCTION *PBLENDFUNCTION;
//C        WINBOOL AlphaBlend(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,BLENDFUNCTION ftn);
WINBOOL  AlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
//C        WINBOOL TransparentBlt(HDC hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,HDC hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,UINT crTransparent);
WINBOOL  TransparentBlt(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
//C        WINBOOL GradientFill(HDC hdc,PTRIVERTEX pVertex,ULONG nVertex,PVOID pMesh,ULONG nMesh,ULONG ulMode);
WINBOOL  GradientFill(HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode);
//C        WINBOOL PlayMetaFileRecord(HDC hdc,LPHANDLETABLE lpHandleTable,LPMETARECORD lpMR,UINT noObjs);
WINBOOL  PlayMetaFileRecord(HDC hdc, LPHANDLETABLE lpHandleTable, LPMETARECORD lpMR, UINT noObjs);
//C       typedef int ( *MFENUMPROC)(HDC hdc,HANDLETABLE *lpht,METARECORD *lpMR,int nObj,LPARAM lParam);
alias int  function(HDC hdc, HANDLETABLE *lpht, METARECORD *lpMR, int nObj, LPARAM lParam)MFENUMPROC;
//C        WINBOOL EnumMetaFile(HDC hdc,HMETAFILE hmf,MFENUMPROC lpProc,LPARAM lParam);
WINBOOL  EnumMetaFile(HDC hdc, HMETAFILE hmf, MFENUMPROC lpProc, LPARAM lParam);
//C       typedef int ( *ENHMFENUMPROC)(HDC hdc,HANDLETABLE *lpht,const ENHMETARECORD *lpmr,int hHandles,LPARAM data);
alias int  function(HDC hdc, HANDLETABLE *lpht, ENHMETARECORD *lpmr, int hHandles, LPARAM data)ENHMFENUMPROC;
//C        HENHMETAFILE CloseEnhMetaFile(HDC hdc);
HENHMETAFILE  CloseEnhMetaFile(HDC hdc);
//C        HENHMETAFILE CopyEnhMetaFileA(HENHMETAFILE hEnh,LPCSTR lpFileName);
HENHMETAFILE  CopyEnhMetaFileA(HENHMETAFILE hEnh, LPCSTR lpFileName);
//C        HENHMETAFILE CopyEnhMetaFileW(HENHMETAFILE hEnh,LPCWSTR lpFileName);
HENHMETAFILE  CopyEnhMetaFileW(HENHMETAFILE hEnh, LPCWSTR lpFileName);
//C        HDC CreateEnhMetaFileA(HDC hdc,LPCSTR lpFilename,const RECT *lprc,LPCSTR lpDesc);
HDC  CreateEnhMetaFileA(HDC hdc, LPCSTR lpFilename, RECT *lprc, LPCSTR lpDesc);
//C        HDC CreateEnhMetaFileW(HDC hdc,LPCWSTR lpFilename,const RECT *lprc,LPCWSTR lpDesc);
HDC  CreateEnhMetaFileW(HDC hdc, LPCWSTR lpFilename, RECT *lprc, LPCWSTR lpDesc);
//C        WINBOOL DeleteEnhMetaFile(HENHMETAFILE hmf);
WINBOOL  DeleteEnhMetaFile(HENHMETAFILE hmf);
//C        WINBOOL EnumEnhMetaFile(HDC hdc,HENHMETAFILE hmf,ENHMFENUMPROC lpProc,LPVOID lpParam,const RECT *lpRect);
WINBOOL  EnumEnhMetaFile(HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC lpProc, LPVOID lpParam, RECT *lpRect);
//C        HENHMETAFILE GetEnhMetaFileA(LPCSTR lpName);
HENHMETAFILE  GetEnhMetaFileA(LPCSTR lpName);
//C        HENHMETAFILE GetEnhMetaFileW(LPCWSTR lpName);
HENHMETAFILE  GetEnhMetaFileW(LPCWSTR lpName);
//C        UINT GetEnhMetaFileBits(HENHMETAFILE hEMF,UINT nSize,LPBYTE lpData);
UINT  GetEnhMetaFileBits(HENHMETAFILE hEMF, UINT nSize, LPBYTE lpData);
//C        UINT GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,UINT cchBuffer,LPSTR lpDescription);
UINT  GetEnhMetaFileDescriptionA(HENHMETAFILE hemf, UINT cchBuffer, LPSTR lpDescription);
//C        UINT GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,UINT cchBuffer,LPWSTR lpDescription);
UINT  GetEnhMetaFileDescriptionW(HENHMETAFILE hemf, UINT cchBuffer, LPWSTR lpDescription);
//C        UINT GetEnhMetaFileHeader(HENHMETAFILE hemf,UINT nSize,LPENHMETAHEADER lpEnhMetaHeader);
UINT  GetEnhMetaFileHeader(HENHMETAFILE hemf, UINT nSize, LPENHMETAHEADER lpEnhMetaHeader);
//C        UINT GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,UINT nNumEntries,LPPALETTEENTRY lpPaletteEntries);
UINT  GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf, UINT nNumEntries, LPPALETTEENTRY lpPaletteEntries);
//C        UINT GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,UINT cbBuffer,PIXELFORMATDESCRIPTOR *ppfd);
UINT  GetEnhMetaFilePixelFormat(HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR *ppfd);
//C        UINT GetWinMetaFileBits(HENHMETAFILE hemf,UINT cbData16,LPBYTE pData16,INT iMapMode,HDC hdcRef);
UINT  GetWinMetaFileBits(HENHMETAFILE hemf, UINT cbData16, LPBYTE pData16, INT iMapMode, HDC hdcRef);
//C        WINBOOL PlayEnhMetaFile(HDC hdc,HENHMETAFILE hmf,const RECT *lprect);
WINBOOL  PlayEnhMetaFile(HDC hdc, HENHMETAFILE hmf, RECT *lprect);
//C        WINBOOL PlayEnhMetaFileRecord(HDC hdc,LPHANDLETABLE pht,const ENHMETARECORD *pmr,UINT cht);
WINBOOL  PlayEnhMetaFileRecord(HDC hdc, LPHANDLETABLE pht, ENHMETARECORD *pmr, UINT cht);
//C        HENHMETAFILE SetEnhMetaFileBits(UINT nSize,const BYTE *pb);
HENHMETAFILE  SetEnhMetaFileBits(UINT nSize, BYTE *pb);
//C        HENHMETAFILE SetWinMetaFileBits(UINT nSize,const BYTE *lpMeta16Data,HDC hdcRef,const METAFILEPICT *lpMFP);
HENHMETAFILE  SetWinMetaFileBits(UINT nSize, BYTE *lpMeta16Data, HDC hdcRef, METAFILEPICT *lpMFP);
//C        WINBOOL GdiComment(HDC hdc,UINT nSize,const BYTE *lpData);
WINBOOL  GdiComment(HDC hdc, UINT nSize, BYTE *lpData);
//C        WINBOOL GetTextMetricsA(HDC hdc,LPTEXTMETRICA lptm);
WINBOOL  GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm);
//C        WINBOOL GetTextMetricsW(HDC hdc,LPTEXTMETRICW lptm);
WINBOOL  GetTextMetricsW(HDC hdc, LPTEXTMETRICW lptm);
//C       typedef struct tagDIBSECTION {
//C         BITMAP dsBm;
//C         BITMAPINFOHEADER dsBmih;
//C         DWORD dsBitfields[3];
//C         HANDLE dshSection;
//C         DWORD dsOffset;
//C       } DIBSECTION,*LPDIBSECTION,*PDIBSECTION;
struct tagDIBSECTION
{
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD [3]dsBitfields;
    HANDLE dshSection;
    DWORD dsOffset;
}
alias tagDIBSECTION DIBSECTION;
alias tagDIBSECTION *LPDIBSECTION;
alias tagDIBSECTION *PDIBSECTION;
//C        WINBOOL AngleArc(HDC hdc,int x,int y,DWORD r,FLOAT StartAngle,FLOAT SweepAngle);
WINBOOL  AngleArc(HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
//C        WINBOOL PolyPolyline(HDC hdc,const POINT *apt,const DWORD *asz,DWORD csz);
WINBOOL  PolyPolyline(HDC hdc, POINT *apt, DWORD *asz, DWORD csz);
//C        WINBOOL GetWorldTransform(HDC hdc,LPXFORM lpxf);
WINBOOL  GetWorldTransform(HDC hdc, LPXFORM lpxf);
//C        WINBOOL SetWorldTransform(HDC hdc,const XFORM *lpxf);
WINBOOL  SetWorldTransform(HDC hdc, XFORM *lpxf);
//C        WINBOOL ModifyWorldTransform(HDC hdc,const XFORM *lpxf,DWORD mode);
WINBOOL  ModifyWorldTransform(HDC hdc, XFORM *lpxf, DWORD mode);
//C        WINBOOL CombineTransform(LPXFORM lpxfOut,const XFORM *lpxf1,const XFORM *lpxf2);
WINBOOL  CombineTransform(LPXFORM lpxfOut, XFORM *lpxf1, XFORM *lpxf2);
//C        HBITMAP CreateDIBSection(HDC hdc,const BITMAPINFO *lpbmi,UINT usage,void **ppvBits,HANDLE hSection,DWORD offset);
HBITMAP  CreateDIBSection(HDC hdc, BITMAPINFO *lpbmi, UINT usage, void **ppvBits, HANDLE hSection, DWORD offset);
//C        UINT GetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,RGBQUAD *prgbq);
UINT  GetDIBColorTable(HDC hdc, UINT iStart, UINT cEntries, RGBQUAD *prgbq);
//C        UINT SetDIBColorTable(HDC hdc,UINT iStart,UINT cEntries,const RGBQUAD *prgbq);
UINT  SetDIBColorTable(HDC hdc, UINT iStart, UINT cEntries, RGBQUAD *prgbq);
//C       typedef struct tagCOLORADJUSTMENT {
//C         WORD caSize;
//C         WORD caFlags;
//C         WORD caIlluminantIndex;
//C         WORD caRedGamma;
//C         WORD caGreenGamma;
//C         WORD caBlueGamma;
//C         WORD caReferenceBlack;
//C         WORD caReferenceWhite;
//C         SHORT caContrast;
//C         SHORT caBrightness;
//C         SHORT caColorfulness;
//C         SHORT caRedGreenTint;
//C       } COLORADJUSTMENT,*PCOLORADJUSTMENT,*LPCOLORADJUSTMENT;
struct tagCOLORADJUSTMENT
{
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
}
alias tagCOLORADJUSTMENT COLORADJUSTMENT;
alias tagCOLORADJUSTMENT *PCOLORADJUSTMENT;
alias tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;
//C        WINBOOL SetColorAdjustment(HDC hdc,const COLORADJUSTMENT *lpca);
WINBOOL  SetColorAdjustment(HDC hdc, COLORADJUSTMENT *lpca);
//C        WINBOOL GetColorAdjustment(HDC hdc,LPCOLORADJUSTMENT lpca);
WINBOOL  GetColorAdjustment(HDC hdc, LPCOLORADJUSTMENT lpca);
//C        HPALETTE CreateHalftonePalette(HDC hdc);
HPALETTE  CreateHalftonePalette(HDC hdc);
//C       typedef WINBOOL ( *ABORTPROC)(HDC,int);
alias WINBOOL  function(HDC , int )ABORTPROC;
//C       typedef struct _DOCINFOA {
//C         int cbSize;
//C         LPCSTR lpszDocName;
//C         LPCSTR lpszOutput;
//C         LPCSTR lpszDatatype;
//C         DWORD fwType;
//C       } DOCINFOA,*LPDOCINFOA;
struct _DOCINFOA
{
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
}
alias _DOCINFOA DOCINFOA;
alias _DOCINFOA *LPDOCINFOA;
//C       typedef struct _DOCINFOW {
//C         int cbSize;
//C         LPCWSTR lpszDocName;
//C         LPCWSTR lpszOutput;
//C         LPCWSTR lpszDatatype;
//C         DWORD fwType;
//C       } DOCINFOW,*LPDOCINFOW;
struct _DOCINFOW
{
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
}
alias _DOCINFOW DOCINFOW;
alias _DOCINFOW *LPDOCINFOW;
//C       typedef DOCINFOA DOCINFO;
alias DOCINFOA DOCINFO;
//C       typedef LPDOCINFOA LPDOCINFO;
alias LPDOCINFOA LPDOCINFO;
//C        int StartDocA(HDC hdc,const DOCINFOA *lpdi);
int  StartDocA(HDC hdc, DOCINFOA *lpdi);
//C        int StartDocW(HDC hdc,const DOCINFOW *lpdi);
int  StartDocW(HDC hdc, DOCINFOW *lpdi);
//C        int EndDoc(HDC hdc);
int  EndDoc(HDC hdc);
//C        int StartPage(HDC hdc);
int  StartPage(HDC hdc);
//C        int EndPage(HDC hdc);
int  EndPage(HDC hdc);
//C        int AbortDoc(HDC hdc);
int  AbortDoc(HDC hdc);
//C        int SetAbortProc(HDC hdc,ABORTPROC lpProc);
int  SetAbortProc(HDC hdc, ABORTPROC lpProc);
//C        WINBOOL AbortPath(HDC hdc);
WINBOOL  AbortPath(HDC hdc);
//C        WINBOOL ArcTo(HDC hdc,int left,int top,int right,int bottom,int xr1,int yr1,int xr2,int yr2);
WINBOOL  ArcTo(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
//C        WINBOOL BeginPath(HDC hdc);
WINBOOL  BeginPath(HDC hdc);
//C        WINBOOL CloseFigure(HDC hdc);
WINBOOL  CloseFigure(HDC hdc);
//C        WINBOOL EndPath(HDC hdc);
WINBOOL  EndPath(HDC hdc);
//C        WINBOOL FillPath(HDC hdc);
WINBOOL  FillPath(HDC hdc);
//C        WINBOOL FlattenPath(HDC hdc);
WINBOOL  FlattenPath(HDC hdc);
//C        int GetPath(HDC hdc,LPPOINT apt,LPBYTE aj,int cpt);
int  GetPath(HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
//C        HRGN PathToRegion(HDC hdc);
HRGN  PathToRegion(HDC hdc);
//C        WINBOOL PolyDraw(HDC hdc,const POINT *apt,const BYTE *aj,int cpt);
WINBOOL  PolyDraw(HDC hdc, POINT *apt, BYTE *aj, int cpt);
//C        WINBOOL SelectClipPath(HDC hdc,int mode);
WINBOOL  SelectClipPath(HDC hdc, int mode);
//C        int SetArcDirection(HDC hdc,int dir);
int  SetArcDirection(HDC hdc, int dir);
//C        WINBOOL SetMiterLimit(HDC hdc,FLOAT limit,PFLOAT old);
WINBOOL  SetMiterLimit(HDC hdc, FLOAT limit, PFLOAT old);
//C        WINBOOL StrokeAndFillPath(HDC hdc);
WINBOOL  StrokeAndFillPath(HDC hdc);
//C        WINBOOL StrokePath(HDC hdc);
WINBOOL  StrokePath(HDC hdc);
//C        WINBOOL WidenPath(HDC hdc);
WINBOOL  WidenPath(HDC hdc);
//C        HPEN ExtCreatePen(DWORD iPenStyle,DWORD cWidth,const LOGBRUSH *plbrush,DWORD cStyle,const DWORD *pstyle);
HPEN  ExtCreatePen(DWORD iPenStyle, DWORD cWidth, LOGBRUSH *plbrush, DWORD cStyle, DWORD *pstyle);
//C        WINBOOL GetMiterLimit(HDC hdc,PFLOAT plimit);
WINBOOL  GetMiterLimit(HDC hdc, PFLOAT plimit);
//C        int GetArcDirection(HDC hdc);
int  GetArcDirection(HDC hdc);
//C        int GetObjectA(HANDLE h,int c,LPVOID pv);
int  GetObjectA(HANDLE h, int c, LPVOID pv);
//C        int GetObjectW(HANDLE h,int c,LPVOID pv);
int  GetObjectW(HANDLE h, int c, LPVOID pv);
//C        WINBOOL MoveToEx(HDC hdc,int x,int y,LPPOINT lppt);
WINBOOL  MoveToEx(HDC hdc, int x, int y, LPPOINT lppt);
//C        WINBOOL TextOutA(HDC hdc,int x,int y,LPCSTR lpString,int c);
WINBOOL  TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c);
//C        WINBOOL TextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int c);
WINBOOL  TextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int c);
//C        WINBOOL ExtTextOutA(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCSTR lpString,UINT c,const INT *lpDx);
WINBOOL  ExtTextOutA(HDC hdc, int x, int y, UINT options, RECT *lprect, LPCSTR lpString, UINT c, INT *lpDx);
//C        WINBOOL ExtTextOutW(HDC hdc,int x,int y,UINT options,const RECT *lprect,LPCWSTR lpString,UINT c,const INT *lpDx);
WINBOOL  ExtTextOutW(HDC hdc, int x, int y, UINT options, RECT *lprect, LPCWSTR lpString, UINT c, INT *lpDx);
//C        WINBOOL PolyTextOutA(HDC hdc,const POLYTEXTA *ppt,int nstrings);
WINBOOL  PolyTextOutA(HDC hdc, POLYTEXTA *ppt, int nstrings);
//C        WINBOOL PolyTextOutW(HDC hdc,const POLYTEXTW *ppt,int nstrings);
WINBOOL  PolyTextOutW(HDC hdc, POLYTEXTW *ppt, int nstrings);
//C        HRGN CreatePolygonRgn(const POINT *pptl,int cPoint,int iMode);
HRGN  CreatePolygonRgn(POINT *pptl, int cPoint, int iMode);
//C        WINBOOL DPtoLP(HDC hdc,LPPOINT lppt,int c);
WINBOOL  DPtoLP(HDC hdc, LPPOINT lppt, int c);
//C        WINBOOL LPtoDP(HDC hdc,LPPOINT lppt,int c);
WINBOOL  LPtoDP(HDC hdc, LPPOINT lppt, int c);
//C        WINBOOL Polygon(HDC hdc,const POINT *apt,int cpt);
WINBOOL  Polygon(HDC hdc, POINT *apt, int cpt);
//C        WINBOOL Polyline(HDC hdc,const POINT *apt,int cpt);
WINBOOL  Polyline(HDC hdc, POINT *apt, int cpt);
//C        WINBOOL PolyBezier(HDC hdc,const POINT *apt,DWORD cpt);
WINBOOL  PolyBezier(HDC hdc, POINT *apt, DWORD cpt);
//C        WINBOOL PolyBezierTo(HDC hdc,const POINT *apt,DWORD cpt);
WINBOOL  PolyBezierTo(HDC hdc, POINT *apt, DWORD cpt);
//C        WINBOOL PolylineTo(HDC hdc,const POINT *apt,DWORD cpt);
WINBOOL  PolylineTo(HDC hdc, POINT *apt, DWORD cpt);
//C        WINBOOL SetViewportExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
WINBOOL  SetViewportExtEx(HDC hdc, int x, int y, LPSIZE lpsz);
//C        WINBOOL SetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
WINBOOL  SetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
//C        WINBOOL SetWindowExtEx(HDC hdc,int x,int y,LPSIZE lpsz);
WINBOOL  SetWindowExtEx(HDC hdc, int x, int y, LPSIZE lpsz);
//C        WINBOOL SetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
WINBOOL  SetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
//C        WINBOOL OffsetViewportOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
WINBOOL  OffsetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
//C        WINBOOL OffsetWindowOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
WINBOOL  OffsetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
//C        WINBOOL ScaleViewportExtEx(HDC hdc,int xn,int dx,int yn,int yd,LPSIZE lpsz);
WINBOOL  ScaleViewportExtEx(HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
//C        WINBOOL ScaleWindowExtEx(HDC hdc,int xn,int xd,int yn,int yd,LPSIZE lpsz);
WINBOOL  ScaleWindowExtEx(HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
//C        WINBOOL SetBitmapDimensionEx(HBITMAP hbm,int w,int h,LPSIZE lpsz);
WINBOOL  SetBitmapDimensionEx(HBITMAP hbm, int w, int h, LPSIZE lpsz);
//C        WINBOOL SetBrushOrgEx(HDC hdc,int x,int y,LPPOINT lppt);
WINBOOL  SetBrushOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
//C        int GetTextFaceA(HDC hdc,int c,LPSTR lpName);
int  GetTextFaceA(HDC hdc, int c, LPSTR lpName);
//C        int GetTextFaceW(HDC hdc,int c,LPWSTR lpName);
int  GetTextFaceW(HDC hdc, int c, LPWSTR lpName);
//C       typedef struct tagKERNINGPAIR {
//C         WORD wFirst;
//C         WORD wSecond;
//C         int iKernAmount;
//C       } KERNINGPAIR,*LPKERNINGPAIR;
struct tagKERNINGPAIR
{
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
}
alias tagKERNINGPAIR KERNINGPAIR;
alias tagKERNINGPAIR *LPKERNINGPAIR;
//C        DWORD GetKerningPairsA(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
DWORD  GetKerningPairsA(HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
//C        DWORD GetKerningPairsW(HDC hdc,DWORD nPairs,LPKERNINGPAIR lpKernPair);
DWORD  GetKerningPairsW(HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair);
//C        WINBOOL GetDCOrgEx(HDC hdc,LPPOINT lppt);
WINBOOL  GetDCOrgEx(HDC hdc, LPPOINT lppt);
//C        WINBOOL FixBrushOrgEx(HDC hdc,int x,int y,LPPOINT ptl);
WINBOOL  FixBrushOrgEx(HDC hdc, int x, int y, LPPOINT ptl);
//C        WINBOOL UnrealizeObject(HGDIOBJ h);
WINBOOL  UnrealizeObject(HGDIOBJ h);
//C        WINBOOL GdiFlush();
WINBOOL  GdiFlush();
//C        DWORD GdiSetBatchLimit(DWORD dw);
DWORD  GdiSetBatchLimit(DWORD dw);
//C        DWORD GdiGetBatchLimit();
DWORD  GdiGetBatchLimit();
//C       typedef int ( *ICMENUMPROCA)(LPSTR,LPARAM);
alias int  function(LPSTR , LPARAM )ICMENUMPROCA;
//C       typedef int ( *ICMENUMPROCW)(LPWSTR,LPARAM);
alias int  function(LPWSTR , LPARAM )ICMENUMPROCW;
//C        int SetICMMode(HDC hdc,int mode);
int  SetICMMode(HDC hdc, int mode);
//C        WINBOOL CheckColorsInGamut(HDC hdc,LPVOID lpRGBTriple,LPVOID dlpBuffer,DWORD nCount);
WINBOOL  CheckColorsInGamut(HDC hdc, LPVOID lpRGBTriple, LPVOID dlpBuffer, DWORD nCount);
//C        HCOLORSPACE GetColorSpace(HDC hdc);
HCOLORSPACE  GetColorSpace(HDC hdc);
//C        WINBOOL GetLogColorSpaceA(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEA lpBuffer,DWORD nSize);
WINBOOL  GetLogColorSpaceA(HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize);
//C        WINBOOL GetLogColorSpaceW(HCOLORSPACE hColorSpace,LPLOGCOLORSPACEW lpBuffer,DWORD nSize);
WINBOOL  GetLogColorSpaceW(HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize);
//C        HCOLORSPACE CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
HCOLORSPACE  CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
//C        HCOLORSPACE CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
HCOLORSPACE  CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
//C        HCOLORSPACE SetColorSpace(HDC hdc,HCOLORSPACE hcs);
HCOLORSPACE  SetColorSpace(HDC hdc, HCOLORSPACE hcs);
//C        WINBOOL DeleteColorSpace(HCOLORSPACE hcs);
WINBOOL  DeleteColorSpace(HCOLORSPACE hcs);
//C        WINBOOL GetICMProfileA(HDC hdc,LPDWORD pBufSize,LPSTR pszFilename);
WINBOOL  GetICMProfileA(HDC hdc, LPDWORD pBufSize, LPSTR pszFilename);
//C        WINBOOL GetICMProfileW(HDC hdc,LPDWORD pBufSize,LPWSTR pszFilename);
WINBOOL  GetICMProfileW(HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename);
//C        WINBOOL SetICMProfileA(HDC hdc,LPSTR lpFileName);
WINBOOL  SetICMProfileA(HDC hdc, LPSTR lpFileName);
//C        WINBOOL SetICMProfileW(HDC hdc,LPWSTR lpFileName);
WINBOOL  SetICMProfileW(HDC hdc, LPWSTR lpFileName);
//C        WINBOOL GetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
WINBOOL  GetDeviceGammaRamp(HDC hdc, LPVOID lpRamp);
//C        WINBOOL SetDeviceGammaRamp(HDC hdc,LPVOID lpRamp);
WINBOOL  SetDeviceGammaRamp(HDC hdc, LPVOID lpRamp);
//C        WINBOOL ColorMatchToTarget(HDC hdc,HDC hdcTarget,DWORD action);
WINBOOL  ColorMatchToTarget(HDC hdc, HDC hdcTarget, DWORD action);
//C        int EnumICMProfilesA(HDC hdc,ICMENUMPROCA lpProc,LPARAM lParam);
int  EnumICMProfilesA(HDC hdc, ICMENUMPROCA lpProc, LPARAM lParam);
//C        int EnumICMProfilesW(HDC hdc,ICMENUMPROCW lpProc,LPARAM lParam);
int  EnumICMProfilesW(HDC hdc, ICMENUMPROCW lpProc, LPARAM lParam);
//C        WINBOOL UpdateICMRegKeyA(DWORD reserved,LPSTR lpszCMID,LPSTR lpszFileName,UINT command);
WINBOOL  UpdateICMRegKeyA(DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
//C        WINBOOL UpdateICMRegKeyW(DWORD reserved,LPWSTR lpszCMID,LPWSTR lpszFileName,UINT command);
WINBOOL  UpdateICMRegKeyW(DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
//C        WINBOOL ColorCorrectPalette(HDC hdc,HPALETTE hPal,DWORD deFirst,DWORD num);
WINBOOL  ColorCorrectPalette(HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
//C       typedef struct tagEMR {
//C         DWORD iType;
//C         DWORD nSize;
//C       } EMR,*PEMR;
struct tagEMR
{
    DWORD iType;
    DWORD nSize;
}
alias tagEMR EMR;
alias tagEMR *PEMR;
//C       typedef struct tagEMRTEXT {
//C         POINTL ptlReference;
//C         DWORD nChars;
//C         DWORD offString;
//C         DWORD fOptions;
//C         RECTL rcl;
//C         DWORD offDx;
//C       } EMRTEXT,*PEMRTEXT;
struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
}
alias tagEMRTEXT EMRTEXT;
alias tagEMRTEXT *PEMRTEXT;
//C       typedef struct tagABORTPATH {
//C         EMR emr;
//C       } EMRABORTPATH,*PEMRABORTPATH,EMRBEGINPATH,*PEMRBEGINPATH,EMRENDPATH,*PEMRENDPATH,EMRCLOSEFIGURE,*PEMRCLOSEFIGURE,EMRFLATTENPATH,*PEMRFLATTENPATH,EMRWIDENPATH,*PEMRWIDENPATH,EMRSETMETARGN,*PEMRSETMETARGN,EMRSAVEDC,*PEMRSAVEDC,EMRREALIZEPALETTE,*PEMRREALIZEPALETTE;
struct tagABORTPATH
{
    EMR emr;
}
alias tagABORTPATH EMRABORTPATH;
alias tagABORTPATH *PEMRABORTPATH;
alias tagABORTPATH EMRBEGINPATH;
alias tagABORTPATH *PEMRBEGINPATH;
alias tagABORTPATH EMRENDPATH;
alias tagABORTPATH *PEMRENDPATH;
alias tagABORTPATH EMRCLOSEFIGURE;
alias tagABORTPATH *PEMRCLOSEFIGURE;
alias tagABORTPATH EMRFLATTENPATH;
alias tagABORTPATH *PEMRFLATTENPATH;
alias tagABORTPATH EMRWIDENPATH;
alias tagABORTPATH *PEMRWIDENPATH;
alias tagABORTPATH EMRSETMETARGN;
alias tagABORTPATH *PEMRSETMETARGN;
alias tagABORTPATH EMRSAVEDC;
alias tagABORTPATH *PEMRSAVEDC;
alias tagABORTPATH EMRREALIZEPALETTE;
alias tagABORTPATH *PEMRREALIZEPALETTE;
//C       typedef struct tagEMRSELECTCLIPPATH {
//C         EMR emr;
//C         DWORD iMode;
//C       } EMRSELECTCLIPPATH,*PEMRSELECTCLIPPATH,EMRSETBKMODE,*PEMRSETBKMODE,EMRSETMAPMODE,*PEMRSETMAPMODE,EMRSETLAYOUT,*PEMRSETLAYOUT,
struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
}
alias tagEMRSELECTCLIPPATH EMRSELECTCLIPPATH;
alias tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;
alias tagEMRSELECTCLIPPATH EMRSETBKMODE;
alias tagEMRSELECTCLIPPATH *PEMRSETBKMODE;
alias tagEMRSELECTCLIPPATH EMRSETMAPMODE;
alias tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;
alias tagEMRSELECTCLIPPATH EMRSETLAYOUT;
alias tagEMRSELECTCLIPPATH *PEMRSETLAYOUT;
//C         EMRSETPOLYFILLMODE,*PEMRSETPOLYFILLMODE,EMRSETROP2,*PEMRSETROP2,EMRSETSTRETCHBLTMODE,*PEMRSETSTRETCHBLTMODE,EMRSETICMMODE,
alias tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
alias tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;
alias tagEMRSELECTCLIPPATH EMRSETROP2;
alias tagEMRSELECTCLIPPATH *PEMRSETROP2;
alias tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
alias tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;
alias tagEMRSELECTCLIPPATH EMRSETICMMODE;
//C         *PEMRSETICMMODE,EMRSETTEXTALIGN,*PEMRSETTEXTALIGN;
alias tagEMRSELECTCLIPPATH *PEMRSETICMMODE;
alias tagEMRSELECTCLIPPATH EMRSETTEXTALIGN;
alias tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;
//C       typedef struct tagEMRSETMITERLIMIT {
//C         EMR emr;
//C         FLOAT eMiterLimit;
//C       } EMRSETMITERLIMIT,*PEMRSETMITERLIMIT;
struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
}
alias tagEMRSETMITERLIMIT EMRSETMITERLIMIT;
alias tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;
//C       typedef struct tagEMRRESTOREDC {
//C         EMR emr;
//C         LONG iRelative;
//C       } EMRRESTOREDC,*PEMRRESTOREDC;
struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
}
alias tagEMRRESTOREDC EMRRESTOREDC;
alias tagEMRRESTOREDC *PEMRRESTOREDC;
//C       typedef struct tagEMRSETARCDIRECTION {
//C         EMR emr;
//C         DWORD iArcDirection;
//C       } EMRSETARCDIRECTION,*PEMRSETARCDIRECTION;
struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;
}
alias tagEMRSETARCDIRECTION EMRSETARCDIRECTION;
alias tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;
//C       typedef struct tagEMRSETMAPPERFLAGS {
//C         EMR emr;
//C         DWORD dwFlags;
//C       } EMRSETMAPPERFLAGS,*PEMRSETMAPPERFLAGS;
struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
}
alias tagEMRSETMAPPERFLAGS EMRSETMAPPERFLAGS;
alias tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;
//C       typedef struct tagEMRSETTEXTCOLOR {
//C         EMR emr;
//C         COLORREF crColor;
//C       } EMRSETBKCOLOR,*PEMRSETBKCOLOR,EMRSETTEXTCOLOR,*PEMRSETTEXTCOLOR;
struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
}
alias tagEMRSETTEXTCOLOR EMRSETBKCOLOR;
alias tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;
alias tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR;
alias tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;
//C       typedef struct tagEMRSELECTOBJECT {
//C         EMR emr;
//C         DWORD ihObject;
//C       } EMRSELECTOBJECT,*PEMRSELECTOBJECT,EMRDELETEOBJECT,*PEMRDELETEOBJECT;
struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
}
alias tagEMRSELECTOBJECT EMRSELECTOBJECT;
alias tagEMRSELECTOBJECT *PEMRSELECTOBJECT;
alias tagEMRSELECTOBJECT EMRDELETEOBJECT;
alias tagEMRSELECTOBJECT *PEMRDELETEOBJECT;
//C       typedef struct tagEMRSELECTPALETTE {
//C         EMR emr;
//C         DWORD ihPal;
//C       } EMRSELECTPALETTE,*PEMRSELECTPALETTE;
struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
}
alias tagEMRSELECTPALETTE EMRSELECTPALETTE;
alias tagEMRSELECTPALETTE *PEMRSELECTPALETTE;
//C       typedef struct tagEMRRESIZEPALETTE {
//C         EMR emr;
//C         DWORD ihPal;
//C         DWORD cEntries;
//C       } EMRRESIZEPALETTE,*PEMRRESIZEPALETTE;
struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
}
alias tagEMRRESIZEPALETTE EMRRESIZEPALETTE;
alias tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;
//C       typedef struct tagEMRSETPALETTEENTRIES {
//C         EMR emr;
//C         DWORD ihPal;
//C         DWORD iStart;
//C         DWORD cEntries;
//C         PALETTEENTRY aPalEntries[1];
//C       } EMRSETPALETTEENTRIES,*PEMRSETPALETTEENTRIES;
struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY [1]aPalEntries;
}
alias tagEMRSETPALETTEENTRIES EMRSETPALETTEENTRIES;
alias tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;
//C       typedef struct tagEMRSETCOLORADJUSTMENT {
//C         EMR emr;
//C         COLORADJUSTMENT ColorAdjustment;
//C       } EMRSETCOLORADJUSTMENT,*PEMRSETCOLORADJUSTMENT;
struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
}
alias tagEMRSETCOLORADJUSTMENT EMRSETCOLORADJUSTMENT;
alias tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;
//C       typedef struct tagEMRGDICOMMENT {
//C         EMR emr;
//C         DWORD cbData;
//C         BYTE Data[1];
//C       } EMRGDICOMMENT,*PEMRGDICOMMENT;
struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE [1]Data;
}
alias tagEMRGDICOMMENT EMRGDICOMMENT;
alias tagEMRGDICOMMENT *PEMRGDICOMMENT;
//C       typedef struct tagEMREOF {
//C         EMR emr;
//C         DWORD nPalEntries;
//C         DWORD offPalEntries;
//C         DWORD nSizeLast;
//C       } EMREOF,*PEMREOF;
struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
}
alias tagEMREOF EMREOF;
alias tagEMREOF *PEMREOF;
//C       typedef struct tagEMRLINETO {
//C         EMR emr;
//C         POINTL ptl;
//C       } EMRLINETO,*PEMRLINETO,EMRMOVETOEX,*PEMRMOVETOEX;
struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
}
alias tagEMRLINETO EMRLINETO;
alias tagEMRLINETO *PEMRLINETO;
alias tagEMRLINETO EMRMOVETOEX;
alias tagEMRLINETO *PEMRMOVETOEX;
//C       typedef struct tagEMROFFSETCLIPRGN {
//C         EMR emr;
//C         POINTL ptlOffset;
//C       } EMROFFSETCLIPRGN,*PEMROFFSETCLIPRGN;
struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
}
alias tagEMROFFSETCLIPRGN EMROFFSETCLIPRGN;
alias tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;
//C       typedef struct tagEMRFILLPATH {
//C         EMR emr;
//C         RECTL rclBounds;
//C       } EMRFILLPATH,*PEMRFILLPATH,EMRSTROKEANDFILLPATH,*PEMRSTROKEANDFILLPATH,EMRSTROKEPATH,*PEMRSTROKEPATH;
struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
}
alias tagEMRFILLPATH EMRFILLPATH;
alias tagEMRFILLPATH *PEMRFILLPATH;
alias tagEMRFILLPATH EMRSTROKEANDFILLPATH;
alias tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;
alias tagEMRFILLPATH EMRSTROKEPATH;
alias tagEMRFILLPATH *PEMRSTROKEPATH;
//C       typedef struct tagEMREXCLUDECLIPRECT {
//C         EMR emr;
//C         RECTL rclClip;
//C       } EMREXCLUDECLIPRECT,*PEMREXCLUDECLIPRECT,EMRINTERSECTCLIPRECT,*PEMRINTERSECTCLIPRECT;
struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
}
alias tagEMREXCLUDECLIPRECT EMREXCLUDECLIPRECT;
alias tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;
alias tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
alias tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;
//C       typedef struct tagEMRSETVIEWPORTORGEX {
//C         EMR emr;
//C         POINTL ptlOrigin;
//C       } EMRSETVIEWPORTORGEX,*PEMRSETVIEWPORTORGEX,EMRSETWINDOWORGEX,*PEMRSETWINDOWORGEX,EMRSETBRUSHORGEX,*PEMRSETBRUSHORGEX;
struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
}
alias tagEMRSETVIEWPORTORGEX EMRSETVIEWPORTORGEX;
alias tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;
alias tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
alias tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;
alias tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
alias tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;
//C       typedef struct tagEMRSETVIEWPORTEXTEX {
//C         EMR emr;
//C         SIZEL szlExtent;
//C       } EMRSETVIEWPORTEXTEX,*PEMRSETVIEWPORTEXTEX,EMRSETWINDOWEXTEX,*PEMRSETWINDOWEXTEX;
struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
}
alias tagEMRSETVIEWPORTEXTEX EMRSETVIEWPORTEXTEX;
alias tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;
alias tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
alias tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;
//C       typedef struct tagEMRSCALEVIEWPORTEXTEX {
//C         EMR emr;
//C         LONG xNum;
//C         LONG xDenom;
//C         LONG yNum;
//C         LONG yDenom;
//C       } EMRSCALEVIEWPORTEXTEX,*PEMRSCALEVIEWPORTEXTEX,EMRSCALEWINDOWEXTEX,*PEMRSCALEWINDOWEXTEX;
struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
}
alias tagEMRSCALEVIEWPORTEXTEX EMRSCALEVIEWPORTEXTEX;
alias tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;
alias tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
alias tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;
//C       typedef struct tagEMRSETWORLDTRANSFORM {
//C         EMR emr;
//C         XFORM xform;
//C       } EMRSETWORLDTRANSFORM,*PEMRSETWORLDTRANSFORM;
struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
}
alias tagEMRSETWORLDTRANSFORM EMRSETWORLDTRANSFORM;
alias tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;
//C       typedef struct tagEMRMODIFYWORLDTRANSFORM {
//C         EMR emr;
//C         XFORM xform;
//C         DWORD iMode;
//C       } EMRMODIFYWORLDTRANSFORM,*PEMRMODIFYWORLDTRANSFORM;
struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
}
alias tagEMRMODIFYWORLDTRANSFORM EMRMODIFYWORLDTRANSFORM;
alias tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;
//C       typedef struct tagEMRSETPIXELV {
//C         EMR emr;
//C         POINTL ptlPixel;
//C         COLORREF crColor;
//C       } EMRSETPIXELV,*PEMRSETPIXELV;
struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
}
alias tagEMRSETPIXELV EMRSETPIXELV;
alias tagEMRSETPIXELV *PEMRSETPIXELV;
//C       typedef struct tagEMREXTFLOODFILL {
//C         EMR emr;
//C         POINTL ptlStart;
//C         COLORREF crColor;
//C         DWORD iMode;
//C       } EMREXTFLOODFILL,*PEMREXTFLOODFILL;
struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
}
alias tagEMREXTFLOODFILL EMREXTFLOODFILL;
alias tagEMREXTFLOODFILL *PEMREXTFLOODFILL;
//C       typedef struct tagEMRELLIPSE {
//C         EMR emr;
//C         RECTL rclBox;
//C       } EMRELLIPSE,*PEMRELLIPSE,EMRRECTANGLE,*PEMRRECTANGLE;
struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
}
alias tagEMRELLIPSE EMRELLIPSE;
alias tagEMRELLIPSE *PEMRELLIPSE;
alias tagEMRELLIPSE EMRRECTANGLE;
alias tagEMRELLIPSE *PEMRRECTANGLE;
//C       typedef struct tagEMRROUNDRECT {
//C         EMR emr;
//C         RECTL rclBox;
//C         SIZEL szlCorner;
//C       } EMRROUNDRECT,*PEMRROUNDRECT;
struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
}
alias tagEMRROUNDRECT EMRROUNDRECT;
alias tagEMRROUNDRECT *PEMRROUNDRECT;
//C       typedef struct tagEMRARC {
//C         EMR emr;
//C         RECTL rclBox;
//C         POINTL ptlStart;
//C         POINTL ptlEnd;
//C       } EMRARC,*PEMRARC,EMRARCTO,*PEMRARCTO,EMRCHORD,*PEMRCHORD,EMRPIE,*PEMRPIE;
struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
}
alias tagEMRARC EMRARC;
alias tagEMRARC *PEMRARC;
alias tagEMRARC EMRARCTO;
alias tagEMRARC *PEMRARCTO;
alias tagEMRARC EMRCHORD;
alias tagEMRARC *PEMRCHORD;
alias tagEMRARC EMRPIE;
alias tagEMRARC *PEMRPIE;
//C       typedef struct tagEMRANGLEARC {
//C         EMR emr;
//C         POINTL ptlCenter;
//C         DWORD nRadius;
//C         FLOAT eStartAngle;
//C         FLOAT eSweepAngle;
//C       } EMRANGLEARC,*PEMRANGLEARC;
struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
}
alias tagEMRANGLEARC EMRANGLEARC;
alias tagEMRANGLEARC *PEMRANGLEARC;
//C       typedef struct tagEMRPOLYLINE {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cptl;
//C         POINTL aptl[1];
//C       } EMRPOLYLINE,*PEMRPOLYLINE,EMRPOLYBEZIER,*PEMRPOLYBEZIER,EMRPOLYGON,*PEMRPOLYGON,EMRPOLYBEZIERTO,*PEMRPOLYBEZIERTO,EMRPOLYLINETO,*PEMRPOLYLINETO;
struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL [1]aptl;
}
alias tagEMRPOLYLINE EMRPOLYLINE;
alias tagEMRPOLYLINE *PEMRPOLYLINE;
alias tagEMRPOLYLINE EMRPOLYBEZIER;
alias tagEMRPOLYLINE *PEMRPOLYBEZIER;
alias tagEMRPOLYLINE EMRPOLYGON;
alias tagEMRPOLYLINE *PEMRPOLYGON;
alias tagEMRPOLYLINE EMRPOLYBEZIERTO;
alias tagEMRPOLYLINE *PEMRPOLYBEZIERTO;
alias tagEMRPOLYLINE EMRPOLYLINETO;
alias tagEMRPOLYLINE *PEMRPOLYLINETO;
//C       typedef struct tagEMRPOLYLINE16 {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cpts;
//C         POINTS apts[1];
//C       } EMRPOLYLINE16,*PEMRPOLYLINE16,EMRPOLYBEZIER16,*PEMRPOLYBEZIER16,EMRPOLYGON16,*PEMRPOLYGON16,EMRPOLYBEZIERTO16,*PEMRPOLYBEZIERTO16,EMRPOLYLINETO16,*PEMRPOLYLINETO16;
struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS [1]apts;
}
alias tagEMRPOLYLINE16 EMRPOLYLINE16;
alias tagEMRPOLYLINE16 *PEMRPOLYLINE16;
alias tagEMRPOLYLINE16 EMRPOLYBEZIER16;
alias tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;
alias tagEMRPOLYLINE16 EMRPOLYGON16;
alias tagEMRPOLYLINE16 *PEMRPOLYGON16;
alias tagEMRPOLYLINE16 EMRPOLYBEZIERTO16;
alias tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;
alias tagEMRPOLYLINE16 EMRPOLYLINETO16;
alias tagEMRPOLYLINE16 *PEMRPOLYLINETO16;
//C       typedef struct tagEMRPOLYDRAW {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cptl;
//C         POINTL aptl[1];
//C         BYTE abTypes[1];
//C       } EMRPOLYDRAW,*PEMRPOLYDRAW;
struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL [1]aptl;
    BYTE [1]abTypes;
}
alias tagEMRPOLYDRAW EMRPOLYDRAW;
alias tagEMRPOLYDRAW *PEMRPOLYDRAW;
//C       typedef struct tagEMRPOLYDRAW16 {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cpts;
//C         POINTS apts[1];
//C         BYTE abTypes[1];
//C       } EMRPOLYDRAW16,*PEMRPOLYDRAW16;
struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS [1]apts;
    BYTE [1]abTypes;
}
alias tagEMRPOLYDRAW16 EMRPOLYDRAW16;
alias tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;
//C       typedef struct tagEMRPOLYPOLYLINE {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD nPolys;
//C         DWORD cptl;
//C         DWORD aPolyCounts[1];
//C         POINTL aptl[1];
//C       } EMRPOLYPOLYLINE,*PEMRPOLYPOLYLINE,EMRPOLYPOLYGON,*PEMRPOLYPOLYGON;
struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD [1]aPolyCounts;
    POINTL [1]aptl;
}
alias tagEMRPOLYPOLYLINE EMRPOLYPOLYLINE;
alias tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;
alias tagEMRPOLYPOLYLINE EMRPOLYPOLYGON;
alias tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;
//C       typedef struct tagEMRPOLYPOLYLINE16 {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD nPolys;
//C         DWORD cpts;
//C         DWORD aPolyCounts[1];
//C         POINTS apts[1];
//C       } EMRPOLYPOLYLINE16,*PEMRPOLYPOLYLINE16,EMRPOLYPOLYGON16,*PEMRPOLYPOLYGON16;
struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD [1]aPolyCounts;
    POINTS [1]apts;
}
alias tagEMRPOLYPOLYLINE16 EMRPOLYPOLYLINE16;
alias tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;
alias tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
alias tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;
//C       typedef struct tagEMRINVERTRGN {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cbRgnData;
//C         BYTE RgnData[1];
//C       } EMRINVERTRGN,*PEMRINVERTRGN,EMRPAINTRGN,*PEMRPAINTRGN;
struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE [1]RgnData;
}
alias tagEMRINVERTRGN EMRINVERTRGN;
alias tagEMRINVERTRGN *PEMRINVERTRGN;
alias tagEMRINVERTRGN EMRPAINTRGN;
alias tagEMRINVERTRGN *PEMRPAINTRGN;
//C       typedef struct tagEMRFILLRGN {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cbRgnData;
//C         DWORD ihBrush;
//C         BYTE RgnData[1];
//C       } EMRFILLRGN,*PEMRFILLRGN;
struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE [1]RgnData;
}
alias tagEMRFILLRGN EMRFILLRGN;
alias tagEMRFILLRGN *PEMRFILLRGN;
//C       typedef struct tagEMRFRAMERGN {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cbRgnData;
//C         DWORD ihBrush;
//C         SIZEL szlStroke;
//C         BYTE RgnData[1];
//C       } EMRFRAMERGN,*PEMRFRAMERGN;
struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE [1]RgnData;
}
alias tagEMRFRAMERGN EMRFRAMERGN;
alias tagEMRFRAMERGN *PEMRFRAMERGN;
//C       typedef struct tagEMREXTSELECTCLIPRGN {
//C         EMR emr;
//C         DWORD cbRgnData;
//C         DWORD iMode;
//C         BYTE RgnData[1];
//C       } EMREXTSELECTCLIPRGN,*PEMREXTSELECTCLIPRGN;
struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE [1]RgnData;
}
alias tagEMREXTSELECTCLIPRGN EMREXTSELECTCLIPRGN;
alias tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;
//C       typedef struct tagEMREXTTEXTOUTA {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD iGraphicsMode;
//C         FLOAT exScale;
//C         FLOAT eyScale;
//C         EMRTEXT emrtext;
//C       } EMREXTTEXTOUTA,*PEMREXTTEXTOUTA,EMREXTTEXTOUTW,*PEMREXTTEXTOUTW;
struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
}
alias tagEMREXTTEXTOUTA EMREXTTEXTOUTA;
alias tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;
alias tagEMREXTTEXTOUTA EMREXTTEXTOUTW;
alias tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;
//C       typedef struct tagEMRPOLYTEXTOUTA {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD iGraphicsMode;
//C         FLOAT exScale;
//C         FLOAT eyScale;
//C         LONG cStrings;
//C         EMRTEXT aemrtext[1];
//C       } EMRPOLYTEXTOUTA,*PEMRPOLYTEXTOUTA,EMRPOLYTEXTOUTW,*PEMRPOLYTEXTOUTW;
struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT [1]aemrtext;
}
alias tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTA;
alias tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;
alias tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
alias tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;
//C       typedef struct tagEMRBITBLT {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG cxDest;
//C         LONG cyDest;
//C         DWORD dwRop;
//C         LONG xSrc;
//C         LONG ySrc;
//C         XFORM xformSrc;
//C         COLORREF crBkColorSrc;
//C         DWORD iUsageSrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C       } EMRBITBLT,*PEMRBITBLT;
struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
}
alias tagEMRBITBLT EMRBITBLT;
alias tagEMRBITBLT *PEMRBITBLT;
//C       typedef struct tagEMRSTRETCHBLT {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG cxDest;
//C         LONG cyDest;
//C         DWORD dwRop;
//C         LONG xSrc;
//C         LONG ySrc;
//C         XFORM xformSrc;
//C         COLORREF crBkColorSrc;
//C         DWORD iUsageSrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         LONG cxSrc;
//C         LONG cySrc;
//C       } EMRSTRETCHBLT,*PEMRSTRETCHBLT;
struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}
alias tagEMRSTRETCHBLT EMRSTRETCHBLT;
alias tagEMRSTRETCHBLT *PEMRSTRETCHBLT;
//C       typedef struct tagEMRMASKBLT {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG cxDest;
//C         LONG cyDest;
//C         DWORD dwRop;
//C         LONG xSrc;
//C         LONG ySrc;
//C         XFORM xformSrc;
//C         COLORREF crBkColorSrc;
//C         DWORD iUsageSrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         LONG xMask;
//C         LONG yMask;
//C         DWORD iUsageMask;
//C         DWORD offBmiMask;
//C         DWORD cbBmiMask;
//C         DWORD offBitsMask;
//C         DWORD cbBitsMask;
//C       } EMRMASKBLT,*PEMRMASKBLT;
struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
}
alias tagEMRMASKBLT EMRMASKBLT;
alias tagEMRMASKBLT *PEMRMASKBLT;
//C       typedef struct tagEMRPLGBLT {
//C         EMR emr;
//C         RECTL rclBounds;
//C         POINTL aptlDest[3];
//C         LONG xSrc;
//C         LONG ySrc;
//C         LONG cxSrc;
//C         LONG cySrc;
//C         XFORM xformSrc;
//C         COLORREF crBkColorSrc;
//C         DWORD iUsageSrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         LONG xMask;
//C         LONG yMask;
//C         DWORD iUsageMask;
//C         DWORD offBmiMask;
//C         DWORD cbBmiMask;
//C         DWORD offBitsMask;
//C         DWORD cbBitsMask;
//C       } EMRPLGBLT,*PEMRPLGBLT;
struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL [3]aptlDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
}
alias tagEMRPLGBLT EMRPLGBLT;
alias tagEMRPLGBLT *PEMRPLGBLT;
//C       typedef struct tagEMRSETDIBITSTODEVICE {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG xSrc;
//C         LONG ySrc;
//C         LONG cxSrc;
//C         LONG cySrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         DWORD iUsageSrc;
//C         DWORD iStartScan;
//C         DWORD cScans;
//C       } EMRSETDIBITSTODEVICE,*PEMRSETDIBITSTODEVICE;
struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
}
alias tagEMRSETDIBITSTODEVICE EMRSETDIBITSTODEVICE;
alias tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;
//C       typedef struct tagEMRSTRETCHDIBITS {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG xSrc;
//C         LONG ySrc;
//C         LONG cxSrc;
//C         LONG cySrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         DWORD iUsageSrc;
//C         DWORD dwRop;
//C         LONG cxDest;
//C         LONG cyDest;
//C       } EMRSTRETCHDIBITS,*PEMRSTRETCHDIBITS;
struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
}
alias tagEMRSTRETCHDIBITS EMRSTRETCHDIBITS;
alias tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;
//C       typedef struct tagEMREXTCREATEFONTINDIRECTW {
//C         EMR emr;
//C         DWORD ihFont;
//C         EXTLOGFONTW elfw;
//C       } EMREXTCREATEFONTINDIRECTW,*PEMREXTCREATEFONTINDIRECTW;
struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
}
alias tagEMREXTCREATEFONTINDIRECTW EMREXTCREATEFONTINDIRECTW;
alias tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;
//C       typedef struct tagEMRCREATEPALETTE {
//C         EMR emr;
//C         DWORD ihPal;
//C         LOGPALETTE lgpl;
//C       } EMRCREATEPALETTE,*PEMRCREATEPALETTE;
struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
}
alias tagEMRCREATEPALETTE EMRCREATEPALETTE;
alias tagEMRCREATEPALETTE *PEMRCREATEPALETTE;
//C       typedef struct tagEMRCREATEPEN {
//C         EMR emr;
//C         DWORD ihPen;
//C         LOGPEN lopn;
//C       } EMRCREATEPEN,*PEMRCREATEPEN;
struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
}
alias tagEMRCREATEPEN EMRCREATEPEN;
alias tagEMRCREATEPEN *PEMRCREATEPEN;
//C       typedef struct tagEMREXTCREATEPEN {
//C         EMR emr;
//C         DWORD ihPen;
//C         DWORD offBmi;
//C         DWORD cbBmi;
//C         DWORD offBits;
//C         DWORD cbBits;
//C         EXTLOGPEN elp;
//C       } EMREXTCREATEPEN,*PEMREXTCREATEPEN;
struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN elp;
}
alias tagEMREXTCREATEPEN EMREXTCREATEPEN;
alias tagEMREXTCREATEPEN *PEMREXTCREATEPEN;
//C       typedef struct tagEMRCREATEBRUSHINDIRECT {
//C         EMR emr;
//C         DWORD ihBrush;
//C         LOGBRUSH32 lb;
//C       } EMRCREATEBRUSHINDIRECT,*PEMRCREATEBRUSHINDIRECT;
struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
}
alias tagEMRCREATEBRUSHINDIRECT EMRCREATEBRUSHINDIRECT;
alias tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;
//C       typedef struct tagEMRCREATEMONOBRUSH {
//C         EMR emr;
//C         DWORD ihBrush;
//C         DWORD iUsage;
//C         DWORD offBmi;
//C         DWORD cbBmi;
//C         DWORD offBits;
//C         DWORD cbBits;
//C       } EMRCREATEMONOBRUSH,*PEMRCREATEMONOBRUSH;
struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
}
alias tagEMRCREATEMONOBRUSH EMRCREATEMONOBRUSH;
alias tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;
//C       typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
//C         EMR emr;
//C         DWORD ihBrush;
//C         DWORD iUsage;
//C         DWORD offBmi;
//C         DWORD cbBmi;
//C         DWORD offBits;
//C         DWORD cbBits;
//C       } EMRCREATEDIBPATTERNBRUSHPT,*PEMRCREATEDIBPATTERNBRUSHPT;
struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
}
alias tagEMRCREATEDIBPATTERNBRUSHPT EMRCREATEDIBPATTERNBRUSHPT;
alias tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;
//C       typedef struct tagEMRFORMAT {
//C         DWORD dSignature;
//C         DWORD nVersion;
//C         DWORD cbData;
//C         DWORD offData;
//C       } EMRFORMAT,*PEMRFORMAT;
struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
}
alias tagEMRFORMAT EMRFORMAT;
alias tagEMRFORMAT *PEMRFORMAT;
//C       typedef struct tagEMRGLSRECORD {
//C         EMR emr;
//C         DWORD cbData;
//C         BYTE Data[1];
//C       } EMRGLSRECORD,*PEMRGLSRECORD;
struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE [1]Data;
}
alias tagEMRGLSRECORD EMRGLSRECORD;
alias tagEMRGLSRECORD *PEMRGLSRECORD;
//C       typedef struct tagEMRGLSBOUNDEDRECORD {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD cbData;
//C         BYTE Data[1];
//C       } EMRGLSBOUNDEDRECORD,*PEMRGLSBOUNDEDRECORD;
struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE [1]Data;
}
alias tagEMRGLSBOUNDEDRECORD EMRGLSBOUNDEDRECORD;
alias tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;
//C       typedef struct tagEMRPIXELFORMAT {
//C         EMR emr;
//C         PIXELFORMATDESCRIPTOR pfd;
//C       } EMRPIXELFORMAT,*PEMRPIXELFORMAT;
struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
}
alias tagEMRPIXELFORMAT EMRPIXELFORMAT;
alias tagEMRPIXELFORMAT *PEMRPIXELFORMAT;
//C       typedef struct tagEMRCREATECOLORSPACE {
//C         EMR emr;
//C         DWORD ihCS;
//C         LOGCOLORSPACEA lcs;
//C       } EMRCREATECOLORSPACE,*PEMRCREATECOLORSPACE;
struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
}
alias tagEMRCREATECOLORSPACE EMRCREATECOLORSPACE;
alias tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;
//C       typedef struct tagEMRSETCOLORSPACE {
//C         EMR emr;
//C         DWORD ihCS;
//C       } EMRSETCOLORSPACE,*PEMRSETCOLORSPACE,EMRSELECTCOLORSPACE,*PEMRSELECTCOLORSPACE,EMRDELETECOLORSPACE,*PEMRDELETECOLORSPACE;
struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
}
alias tagEMRSETCOLORSPACE EMRSETCOLORSPACE;
alias tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE;
alias tagEMRSETCOLORSPACE EMRSELECTCOLORSPACE;
alias tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE;
alias tagEMRSETCOLORSPACE EMRDELETECOLORSPACE;
alias tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE;
//C       typedef struct tagEMREXTESCAPE {
//C         EMR emr;
//C         INT iEscape;
//C         INT cbEscData;
//C         BYTE EscData[1];
//C       } EMREXTESCAPE,*PEMREXTESCAPE,EMRDRAWESCAPE,*PEMRDRAWESCAPE;
struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE [1]EscData;
}
alias tagEMREXTESCAPE EMREXTESCAPE;
alias tagEMREXTESCAPE *PEMREXTESCAPE;
alias tagEMREXTESCAPE EMRDRAWESCAPE;
alias tagEMREXTESCAPE *PEMRDRAWESCAPE;
//C       typedef struct tagEMRNAMEDESCAPE {
//C         EMR emr;
//C         INT iEscape;
//C         INT cbDriver;
//C         INT cbEscData;
//C         BYTE EscData[1];
//C       } EMRNAMEDESCAPE,*PEMRNAMEDESCAPE;
struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE [1]EscData;
}
alias tagEMRNAMEDESCAPE EMRNAMEDESCAPE;
alias tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE;
//C       typedef struct tagEMRSETICMPROFILE {
//C         EMR emr;
//C         DWORD dwFlags;
//C         DWORD cbName;
//C         DWORD cbData;
//C         BYTE Data[1];
//C       } EMRSETICMPROFILE,*PEMRSETICMPROFILE,EMRSETICMPROFILEA,*PEMRSETICMPROFILEA,EMRSETICMPROFILEW,*PEMRSETICMPROFILEW;
struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE [1]Data;
}
alias tagEMRSETICMPROFILE EMRSETICMPROFILE;
alias tagEMRSETICMPROFILE *PEMRSETICMPROFILE;
alias tagEMRSETICMPROFILE EMRSETICMPROFILEA;
alias tagEMRSETICMPROFILE *PEMRSETICMPROFILEA;
alias tagEMRSETICMPROFILE EMRSETICMPROFILEW;
alias tagEMRSETICMPROFILE *PEMRSETICMPROFILEW;
//C       typedef struct tagEMRCREATECOLORSPACEW {
//C         EMR emr;
//C         DWORD ihCS;
//C         LOGCOLORSPACEW lcs;
//C         DWORD dwFlags;
//C         DWORD cbData;
//C         BYTE Data[1];
//C       } EMRCREATECOLORSPACEW,*PEMRCREATECOLORSPACEW;
struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE [1]Data;
}
alias tagEMRCREATECOLORSPACEW EMRCREATECOLORSPACEW;
alias tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW;
//C       typedef struct tagCOLORMATCHTOTARGET {
//C         EMR emr;
//C         DWORD dwAction;
//C         DWORD dwFlags;
//C         DWORD cbName;
//C         DWORD cbData;
//C         BYTE Data[1];
//C       } EMRCOLORMATCHTOTARGET,*PEMRCOLORMATCHTOTARGET;
struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE [1]Data;
}
alias tagCOLORMATCHTOTARGET EMRCOLORMATCHTOTARGET;
alias tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET;
//C       typedef struct tagCOLORCORRECTPALETTE {
//C         EMR emr;
//C         DWORD ihPalette;
//C         DWORD nFirstEntry;
//C         DWORD nPalEntries;
//C         DWORD nReserved;
//C       } EMRCOLORCORRECTPALETTE,*PEMRCOLORCORRECTPALETTE;
struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
}
alias tagCOLORCORRECTPALETTE EMRCOLORCORRECTPALETTE;
alias tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE;
//C       typedef struct tagEMRALPHABLEND {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG cxDest;
//C         LONG cyDest;
//C         DWORD dwRop;
//C         LONG xSrc;
//C         LONG ySrc;
//C         XFORM xformSrc;
//C         COLORREF crBkColorSrc;
//C         DWORD iUsageSrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         LONG cxSrc;
//C         LONG cySrc;
//C       } EMRALPHABLEND,*PEMRALPHABLEND;
struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}
alias tagEMRALPHABLEND EMRALPHABLEND;
alias tagEMRALPHABLEND *PEMRALPHABLEND;
//C       typedef struct tagEMRGRADIENTFILL {
//C         EMR emr;
//C         RECTL rclBounds;
//C         DWORD nVer;
//C         DWORD nTri;
//C         ULONG ulMode;
//C         TRIVERTEX Ver[1];
//C       } EMRGRADIENTFILL,*PEMRGRADIENTFILL;
struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX [1]Ver;
}
alias tagEMRGRADIENTFILL EMRGRADIENTFILL;
alias tagEMRGRADIENTFILL *PEMRGRADIENTFILL;
//C       typedef struct tagEMRTRANSPARENTBLT {
//C         EMR emr;
//C         RECTL rclBounds;
//C         LONG xDest;
//C         LONG yDest;
//C         LONG cxDest;
//C         LONG cyDest;
//C         DWORD dwRop;
//C         LONG xSrc;
//C         LONG ySrc;
//C         XFORM xformSrc;
//C         COLORREF crBkColorSrc;
//C         DWORD iUsageSrc;
//C         DWORD offBmiSrc;
//C         DWORD cbBmiSrc;
//C         DWORD offBitsSrc;
//C         DWORD cbBitsSrc;
//C         LONG cxSrc;
//C         LONG cySrc;
//C       } EMRTRANSPARENTBLT,*PEMRTRANSPARENTBLT;
struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
}
alias tagEMRTRANSPARENTBLT EMRTRANSPARENTBLT;
alias tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT;
//C        WINBOOL wglCopyContext(HGLRC,HGLRC,UINT);
WINBOOL  wglCopyContext(HGLRC , HGLRC , UINT );
//C        HGLRC wglCreateContext();
HGLRC  wglCreateContext(HDC );
//C        HGLRC wglCreateLayerContext(HDC,int);
HGLRC  wglCreateLayerContext(HDC , int );
//C        WINBOOL wglDeleteContext(HGLRC);
WINBOOL  wglDeleteContext(HGLRC );
//C        HGLRC wglGetCurrentContext(void);
HGLRC  wglGetCurrentContext();
//C        HDC wglGetCurrentDC(void);
HDC  wglGetCurrentDC();
//C        PROC wglGetProcAddress(LPCSTR);
PROC  wglGetProcAddress(LPCSTR );
//C        WINBOOL wglMakeCurrent(HDC,HGLRC);
WINBOOL  wglMakeCurrent(HDC , HGLRC );
//C        WINBOOL wglShareLists(HGLRC,HGLRC);
WINBOOL  wglShareLists(HGLRC , HGLRC );
//C        WINBOOL wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
WINBOOL  wglUseFontBitmapsA(HDC , DWORD , DWORD , DWORD );
//C        WINBOOL wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);
WINBOOL  wglUseFontBitmapsW(HDC , DWORD , DWORD , DWORD );
//C        WINBOOL SwapBuffers();
WINBOOL  SwapBuffers(HDC );
//C       typedef struct _POINTFLOAT {
//C         FLOAT x;
//C         FLOAT y;
//C       } POINTFLOAT,*PPOINTFLOAT;
struct _POINTFLOAT
{
    FLOAT x;
    FLOAT y;
}
alias _POINTFLOAT POINTFLOAT;
alias _POINTFLOAT *PPOINTFLOAT;
//C       typedef struct _GLYPHMETRICSFLOAT {
//C         FLOAT gmfBlackBoxX;
//C         FLOAT gmfBlackBoxY;
//C         POINTFLOAT gmfptGlyphOrigin;
//C         FLOAT gmfCellIncX;
//C         FLOAT gmfCellIncY;
//C       } GLYPHMETRICSFLOAT,*PGLYPHMETRICSFLOAT,*LPGLYPHMETRICSFLOAT;
struct _GLYPHMETRICSFLOAT
{
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
}
alias _GLYPHMETRICSFLOAT GLYPHMETRICSFLOAT;
alias _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;
alias _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;
//C        WINBOOL wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
WINBOOL  wglUseFontOutlinesA(HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT );
//C        WINBOOL wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,LPGLYPHMETRICSFLOAT);
WINBOOL  wglUseFontOutlinesW(HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT );
//C       typedef struct tagLAYERPLANEDESCRIPTOR {
//C         WORD nSize;
//C         WORD nVersion;
//C         DWORD dwFlags;
//C         BYTE iPixelType;
//C         BYTE cColorBits;
//C         BYTE cRedBits;
//C         BYTE cRedShift;
//C         BYTE cGreenBits;
//C         BYTE cGreenShift;
//C         BYTE cBlueBits;
//C         BYTE cBlueShift;
//C         BYTE cAlphaBits;
//C         BYTE cAlphaShift;
//C         BYTE cAccumBits;
//C         BYTE cAccumRedBits;
//C         BYTE cAccumGreenBits;
//C         BYTE cAccumBlueBits;
//C         BYTE cAccumAlphaBits;
//C         BYTE cDepthBits;
//C         BYTE cStencilBits;
//C         BYTE cAuxBuffers;
//C         BYTE iLayerPlane;
//C         BYTE bReserved;
//C         COLORREF crTransparent;
//C       } LAYERPLANEDESCRIPTOR,*PLAYERPLANEDESCRIPTOR,*LPLAYERPLANEDESCRIPTOR;
struct tagLAYERPLANEDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
}
alias tagLAYERPLANEDESCRIPTOR LAYERPLANEDESCRIPTOR;
alias tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;
alias tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;
//C        WINBOOL wglDescribeLayerPlane(HDC,int,int,UINT,LPLAYERPLANEDESCRIPTOR);
WINBOOL  wglDescribeLayerPlane(HDC , int , int , UINT , LPLAYERPLANEDESCRIPTOR );
//C        int wglSetLayerPaletteEntries(HDC,int,int,int,const COLORREF *);
int  wglSetLayerPaletteEntries(HDC , int , int , int , COLORREF *);
//C        int wglGetLayerPaletteEntries(HDC,int,int,int,COLORREF *);
int  wglGetLayerPaletteEntries(HDC , int , int , int , COLORREF *);
//C        WINBOOL wglRealizeLayerPalette(HDC,int,WINBOOL);
WINBOOL  wglRealizeLayerPalette(HDC , int , WINBOOL );
//C        WINBOOL wglSwapLayerBuffers(HDC,UINT);
WINBOOL  wglSwapLayerBuffers(HDC , UINT );
//C       typedef struct _WGLSWAP {
//C         HDC hdc;
//C         UINT uiFlags;
//C       } WGLSWAP,*PWGLSWAP,*LPWGLSWAP;
struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
}
alias _WGLSWAP WGLSWAP;
alias _WGLSWAP *PWGLSWAP;
alias _WGLSWAP *LPWGLSWAP;
//C        DWORD wglSwapMultipleBuffers(UINT,const WGLSWAP *);
DWORD  wglSwapMultipleBuffers(UINT , WGLSWAP *);
//C       typedef HANDLE HDWP;
alias HANDLE HDWP;
//C       typedef void MENUTEMPLATEA;
alias void MENUTEMPLATEA;
//C       typedef void MENUTEMPLATEW;
alias void MENUTEMPLATEW;
//C       typedef PVOID LPMENUTEMPLATEA;
alias PVOID LPMENUTEMPLATEA;
//C       typedef PVOID LPMENUTEMPLATEW;
alias PVOID LPMENUTEMPLATEW;
//C       typedef MENUTEMPLATEA MENUTEMPLATE;
alias MENUTEMPLATEA MENUTEMPLATE;
//C       typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
alias LPMENUTEMPLATEA LPMENUTEMPLATE;
//C       typedef LRESULT ( *WNDPROC)(HWND,UINT,WPARAM,LPARAM);
alias LRESULT  function(HWND , UINT , WPARAM , LPARAM )WNDPROC;
//C       typedef INT_PTR ( *DLGPROC)(HWND,UINT,WPARAM,LPARAM);
alias INT_PTR  function(HWND , UINT , WPARAM , LPARAM )DLGPROC;
//C       typedef void ( *TIMERPROC)(HWND,UINT,UINT_PTR,DWORD);
alias void  function(HWND , UINT , UINT_PTR , DWORD )TIMERPROC;
//C       typedef WINBOOL ( *GRAYSTRINGPROC)(HDC,LPARAM,int);
alias WINBOOL  function(HDC , LPARAM , int )GRAYSTRINGPROC;
//C       typedef WINBOOL ( *WNDENUMPROC)(HWND,LPARAM);
alias WINBOOL  function(HWND , LPARAM )WNDENUMPROC;
//C       typedef LRESULT ( *HOOKPROC)(int code,WPARAM wParam,LPARAM lParam);
alias LRESULT  function(int code, WPARAM wParam, LPARAM lParam)HOOKPROC;
//C       typedef void ( *SENDASYNCPROC)(HWND,UINT,ULONG_PTR,LRESULT);
alias void  function(HWND , UINT , ULONG_PTR , LRESULT )SENDASYNCPROC;
//C       typedef WINBOOL ( *PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
alias WINBOOL  function(HWND , LPCSTR , HANDLE )PROPENUMPROCA;
//C       typedef WINBOOL ( *PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
alias WINBOOL  function(HWND , LPCWSTR , HANDLE )PROPENUMPROCW;
//C       typedef WINBOOL ( *PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,ULONG_PTR);
alias WINBOOL  function(HWND , LPSTR , HANDLE , ULONG_PTR )PROPENUMPROCEXA;
//C       typedef WINBOOL ( *PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,ULONG_PTR);
alias WINBOOL  function(HWND , LPWSTR , HANDLE , ULONG_PTR )PROPENUMPROCEXW;
//C       typedef int ( *EDITWORDBREAKPROCA)(LPSTR lpch,int ichCurrent,int cch,int code);
alias int  function(LPSTR lpch, int ichCurrent, int cch, int code)EDITWORDBREAKPROCA;
//C       typedef int ( *EDITWORDBREAKPROCW)(LPWSTR lpch,int ichCurrent,int cch,int code);
alias int  function(LPWSTR lpch, int ichCurrent, int cch, int code)EDITWORDBREAKPROCW;
//C       typedef WINBOOL ( *DRAWSTATEPROC)(HDC hdc,LPARAM lData,WPARAM wData,int cx,int cy);
alias WINBOOL  function(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy)DRAWSTATEPROC;
//C       typedef PROPENUMPROCA PROPENUMPROC;
alias PROPENUMPROCA PROPENUMPROC;
//C       typedef PROPENUMPROCEXA PROPENUMPROCEX;
alias PROPENUMPROCEXA PROPENUMPROCEX;
//C       typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
alias EDITWORDBREAKPROCA EDITWORDBREAKPROC;
//C       typedef WINBOOL ( *NAMEENUMPROCA)(LPSTR,LPARAM);
alias WINBOOL  function(LPSTR , LPARAM )NAMEENUMPROCA;
//C       typedef WINBOOL ( *NAMEENUMPROCW)(LPWSTR,LPARAM);
alias WINBOOL  function(LPWSTR , LPARAM )NAMEENUMPROCW;
//C       typedef NAMEENUMPROCA WINSTAENUMPROCA;
alias NAMEENUMPROCA WINSTAENUMPROCA;
//C       typedef NAMEENUMPROCA DESKTOPENUMPROCA;
alias NAMEENUMPROCA DESKTOPENUMPROCA;
//C       typedef NAMEENUMPROCW WINSTAENUMPROCW;
alias NAMEENUMPROCW WINSTAENUMPROCW;
//C       typedef NAMEENUMPROCW DESKTOPENUMPROCW;
alias NAMEENUMPROCW DESKTOPENUMPROCW;
//C       typedef WINSTAENUMPROCA WINSTAENUMPROC;
alias WINSTAENUMPROCA WINSTAENUMPROC;
//C       typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
alias DESKTOPENUMPROCA DESKTOPENUMPROC;
//C        int wvsprintfA(LPSTR,LPCSTR,va_list arglist);
int  wvsprintfA(LPSTR , LPCSTR , va_list arglist);
//C        int wvsprintfW(LPWSTR,LPCWSTR,va_list arglist);
int  wvsprintfW(LPWSTR , LPCWSTR , va_list arglist);
//C        int  wsprintfA(LPSTR,LPCSTR,...);
int  wsprintfA(LPSTR , LPCSTR ,...);
//C        int  wsprintfW(LPWSTR,LPCWSTR,...);
int  wsprintfW(LPWSTR , LPCWSTR ,...);
//C       typedef struct tagCBT_CREATEWNDA {
//C         struct tagCREATESTRUCTA *lpcs;
//C         HWND hwndInsertAfter;
//C       } CBT_CREATEWNDA,*LPCBT_CREATEWNDA;
struct tagCBT_CREATEWNDA
{
    tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
}
alias tagCBT_CREATEWNDA CBT_CREATEWNDA;
alias tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;
//C       typedef struct tagCBT_CREATEWNDW {
//C         struct tagCREATESTRUCTW *lpcs;
//C         HWND hwndInsertAfter;
//C       } CBT_CREATEWNDW,*LPCBT_CREATEWNDW;
struct tagCBT_CREATEWNDW
{
    tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
}
alias tagCBT_CREATEWNDW CBT_CREATEWNDW;
alias tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;
//C       typedef CBT_CREATEWNDA CBT_CREATEWND;
alias CBT_CREATEWNDA CBT_CREATEWND;
//C       typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
alias LPCBT_CREATEWNDA LPCBT_CREATEWND;
//C       typedef struct tagCBTACTIVATESTRUCT
//C       {
//C         WINBOOL fMouse;
//C         HWND hWndActive;
//C       } CBTACTIVATESTRUCT,*LPCBTACTIVATESTRUCT;
struct tagCBTACTIVATESTRUCT
{
    WINBOOL fMouse;
    HWND hWndActive;
}
alias tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
alias tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;
//C       typedef struct tagWTSSESSION_NOTIFICATION {
//C         DWORD cbSize;
//C         DWORD dwSessionId;
//C       } WTSSESSION_NOTIFICATION,*PWTSSESSION_NOTIFICATION;
struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;
}
alias tagWTSSESSION_NOTIFICATION WTSSESSION_NOTIFICATION;
alias tagWTSSESSION_NOTIFICATION *PWTSSESSION_NOTIFICATION;
//C       typedef struct {
//C         HWND hwnd;
//C         RECT rc;
//C       } SHELLHOOKINFO,*LPSHELLHOOKINFO;
struct _N70
{
    HWND hwnd;
    RECT rc;
}
alias _N70 SHELLHOOKINFO;
alias _N70 *LPSHELLHOOKINFO;
//C       typedef struct tagEVENTMSG {
//C         UINT message;
//C         UINT paramL;
//C         UINT paramH;
//C         DWORD time;
//C         HWND hwnd;
//C       } EVENTMSG,*PEVENTMSGMSG,*NPEVENTMSGMSG,*LPEVENTMSGMSG;
struct tagEVENTMSG
{
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
}
alias tagEVENTMSG EVENTMSG;
alias tagEVENTMSG *PEVENTMSGMSG;
alias tagEVENTMSG *NPEVENTMSGMSG;
alias tagEVENTMSG *LPEVENTMSGMSG;
//C       typedef struct tagEVENTMSG *PEVENTMSG,*NPEVENTMSG,*LPEVENTMSG;
alias tagEVENTMSG *PEVENTMSG;
alias tagEVENTMSG *NPEVENTMSG;
alias tagEVENTMSG *LPEVENTMSG;
//C       typedef struct tagCWPSTRUCT {
//C         LPARAM lParam;
//C         WPARAM wParam;
//C         UINT message;
//C         HWND hwnd;
//C       } CWPSTRUCT,*PCWPSTRUCT,*NPCWPSTRUCT,*LPCWPSTRUCT;
struct tagCWPSTRUCT
{
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
}
alias tagCWPSTRUCT CWPSTRUCT;
alias tagCWPSTRUCT *PCWPSTRUCT;
alias tagCWPSTRUCT *NPCWPSTRUCT;
alias tagCWPSTRUCT *LPCWPSTRUCT;
//C       typedef struct tagCWPRETSTRUCT {
//C         LRESULT lResult;
//C         LPARAM lParam;
//C         WPARAM wParam;
//C         UINT message;
//C         HWND hwnd;
//C       } CWPRETSTRUCT,*PCWPRETSTRUCT,*NPCWPRETSTRUCT,*LPCWPRETSTRUCT;
struct tagCWPRETSTRUCT
{
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
}
alias tagCWPRETSTRUCT CWPRETSTRUCT;
alias tagCWPRETSTRUCT *PCWPRETSTRUCT;
alias tagCWPRETSTRUCT *NPCWPRETSTRUCT;
alias tagCWPRETSTRUCT *LPCWPRETSTRUCT;
//C       typedef struct tagKBDLLHOOKSTRUCT {
//C         DWORD vkCode;
//C         DWORD scanCode;
//C         DWORD flags;
//C         DWORD time;
//C         ULONG_PTR dwExtraInfo;
//C       } KBDLLHOOKSTRUCT,*LPKBDLLHOOKSTRUCT,*PKBDLLHOOKSTRUCT;
struct tagKBDLLHOOKSTRUCT
{
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}
alias tagKBDLLHOOKSTRUCT KBDLLHOOKSTRUCT;
alias tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;
alias tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;
//C       typedef struct tagMSLLHOOKSTRUCT {
//C         POINT pt;
//C         DWORD mouseData;
//C         DWORD flags;
//C         DWORD time;
//C         ULONG_PTR dwExtraInfo;
//C       } MSLLHOOKSTRUCT,*LPMSLLHOOKSTRUCT,*PMSLLHOOKSTRUCT;
struct tagMSLLHOOKSTRUCT
{
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}
alias tagMSLLHOOKSTRUCT MSLLHOOKSTRUCT;
alias tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;
alias tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;
//C       typedef struct tagDEBUGHOOKINFO {
//C         DWORD idThread;
//C         DWORD idThreadInstaller;
//C         LPARAM lParam;
//C         WPARAM wParam;
//C         int code;
//C       } DEBUGHOOKINFO,*PDEBUGHOOKINFO,*NPDEBUGHOOKINFO,*LPDEBUGHOOKINFO;
struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
}
alias tagDEBUGHOOKINFO DEBUGHOOKINFO;
alias tagDEBUGHOOKINFO *PDEBUGHOOKINFO;
alias tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;
alias tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;
//C       typedef struct tagMOUSEHOOKSTRUCT {
//C         POINT pt;
//C         HWND hwnd;
//C         UINT wHitTestCode;
//C         ULONG_PTR dwExtraInfo;
//C       } MOUSEHOOKSTRUCT,*LPMOUSEHOOKSTRUCT,*PMOUSEHOOKSTRUCT;
struct tagMOUSEHOOKSTRUCT
{
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
}
alias tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
alias tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;
alias tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;
//C       typedef struct tagMOUSEHOOKSTRUCTEX {
//C         MOUSEHOOKSTRUCT _unnamed;
//C         DWORD mouseData;
//C       } MOUSEHOOKSTRUCTEX,*LPMOUSEHOOKSTRUCTEX,*PMOUSEHOOKSTRUCTEX;
struct tagMOUSEHOOKSTRUCTEX
{
    MOUSEHOOKSTRUCT _unnamed;
    DWORD mouseData;
}
alias tagMOUSEHOOKSTRUCTEX MOUSEHOOKSTRUCTEX;
alias tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX;
alias tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX;
//C       typedef struct tagHARDWAREHOOKSTRUCT {
//C         HWND hwnd;
//C         UINT message;
//C         WPARAM wParam;
//C         LPARAM lParam;
//C       } HARDWAREHOOKSTRUCT,*LPHARDWAREHOOKSTRUCT,*PHARDWAREHOOKSTRUCT;
struct tagHARDWAREHOOKSTRUCT
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
}
alias tagHARDWAREHOOKSTRUCT HARDWAREHOOKSTRUCT;
alias tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;
alias tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;
//C        HKL LoadKeyboardLayoutA(LPCSTR pwszKLID,UINT Flags);
HKL  LoadKeyboardLayoutA(LPCSTR pwszKLID, UINT Flags);
//C        HKL LoadKeyboardLayoutW(LPCWSTR pwszKLID,UINT Flags);
HKL  LoadKeyboardLayoutW(LPCWSTR pwszKLID, UINT Flags);
//C        HKL ActivateKeyboardLayout(HKL hkl,UINT Flags);
HKL  ActivateKeyboardLayout(HKL hkl, UINT Flags);
//C        int ToUnicodeEx(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags,HKL dwhkl);
int  ToUnicodeEx(UINT wVirtKey, UINT wScanCode, BYTE *lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
//C        WINBOOL UnloadKeyboardLayout(HKL hkl);
WINBOOL  UnloadKeyboardLayout(HKL hkl);
//C        WINBOOL GetKeyboardLayoutNameA(LPSTR pwszKLID);
WINBOOL  GetKeyboardLayoutNameA(LPSTR pwszKLID);
//C        WINBOOL GetKeyboardLayoutNameW(LPWSTR pwszKLID);
WINBOOL  GetKeyboardLayoutNameW(LPWSTR pwszKLID);
//C        int GetKeyboardLayoutList(int nBuff,HKL *lpList);
int  GetKeyboardLayoutList(int nBuff, HKL *lpList);
//C        HKL GetKeyboardLayout(DWORD idThread);
HKL  GetKeyboardLayout(DWORD idThread);
//C       typedef struct tagMOUSEMOVEPOINT {
//C         int x;
//C         int y;
//C         DWORD time;
//C         ULONG_PTR dwExtraInfo;
//C       } MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,*LPMOUSEMOVEPOINT;
struct tagMOUSEMOVEPOINT
{
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}
alias tagMOUSEMOVEPOINT MOUSEMOVEPOINT;
alias tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;
alias tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;
//C        int GetMouseMovePointsEx(UINT cbSize,LPMOUSEMOVEPOINT lppt,LPMOUSEMOVEPOINT lpptBuf,int nBufPoints,DWORD resolution);
int  GetMouseMovePointsEx(UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution);
//C        HDESK CreateDesktopA(LPCSTR lpszDesktop,LPCSTR lpszDevice,LPDEVMODEA pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
HDESK  CreateDesktopA(LPCSTR lpszDesktop, LPCSTR lpszDevice, LPDEVMODEA pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
//C        HDESK CreateDesktopW(LPCWSTR lpszDesktop,LPCWSTR lpszDevice,LPDEVMODEW pDevmode,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
HDESK  CreateDesktopW(LPCWSTR lpszDesktop, LPCWSTR lpszDevice, LPDEVMODEW pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
//C        HDESK OpenDesktopA(LPCSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
HDESK  OpenDesktopA(LPCSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
//C        HDESK OpenDesktopW(LPCWSTR lpszDesktop,DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
HDESK  OpenDesktopW(LPCWSTR lpszDesktop, DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
//C        HDESK OpenInputDesktop(DWORD dwFlags,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
HDESK  OpenInputDesktop(DWORD dwFlags, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
//C        WINBOOL EnumDesktopsA(HWINSTA hwinsta,DESKTOPENUMPROCA lpEnumFunc,LPARAM lParam);
WINBOOL  EnumDesktopsA(HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam);
//C        WINBOOL EnumDesktopsW(HWINSTA hwinsta,DESKTOPENUMPROCW lpEnumFunc,LPARAM lParam);
WINBOOL  EnumDesktopsW(HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam);
//C        WINBOOL EnumDesktopWindows(HDESK hDesktop,WNDENUMPROC lpfn,LPARAM lParam);
WINBOOL  EnumDesktopWindows(HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
//C        WINBOOL SwitchDesktop(HDESK hDesktop);
WINBOOL  SwitchDesktop(HDESK hDesktop);
//C        WINBOOL SetThreadDesktop(HDESK hDesktop);
WINBOOL  SetThreadDesktop(HDESK hDesktop);
//C        WINBOOL CloseDesktop(HDESK hDesktop);
WINBOOL  CloseDesktop(HDESK hDesktop);
//C        HDESK GetThreadDesktop(DWORD dwThreadId);
HDESK  GetThreadDesktop(DWORD dwThreadId);
//C        HWINSTA CreateWindowStationA(LPCSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
HWINSTA  CreateWindowStationA(LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
//C        HWINSTA CreateWindowStationW(LPCWSTR lpwinsta,DWORD dwFlags,ACCESS_MASK dwDesiredAccess,LPSECURITY_ATTRIBUTES lpsa);
HWINSTA  CreateWindowStationW(LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
//C        HWINSTA OpenWindowStationA(LPCSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
HWINSTA  OpenWindowStationA(LPCSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
//C        HWINSTA OpenWindowStationW(LPCWSTR lpszWinSta,WINBOOL fInherit,ACCESS_MASK dwDesiredAccess);
HWINSTA  OpenWindowStationW(LPCWSTR lpszWinSta, WINBOOL fInherit, ACCESS_MASK dwDesiredAccess);
//C        WINBOOL EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc,LPARAM lParam);
WINBOOL  EnumWindowStationsA(WINSTAENUMPROCA lpEnumFunc, LPARAM lParam);
//C        WINBOOL EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc,LPARAM lParam);
WINBOOL  EnumWindowStationsW(WINSTAENUMPROCW lpEnumFunc, LPARAM lParam);
//C        WINBOOL CloseWindowStation(HWINSTA hWinSta);
WINBOOL  CloseWindowStation(HWINSTA hWinSta);
//C        WINBOOL SetProcessWindowStation(HWINSTA hWinSta);
WINBOOL  SetProcessWindowStation(HWINSTA hWinSta);
//C        HWINSTA GetProcessWindowStation(void);
HWINSTA  GetProcessWindowStation();
//C        WINBOOL SetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID);
WINBOOL  SetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
//C        WINBOOL GetUserObjectSecurity(HANDLE hObj,PSECURITY_INFORMATION pSIRequested,PSECURITY_DESCRIPTOR pSID,DWORD nLength,LPDWORD lpnLengthNeeded);
WINBOOL  GetUserObjectSecurity(HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded);
//C       typedef struct tagUSEROBJECTFLAGS {
//C         WINBOOL fInherit;
//C         WINBOOL fReserved;
//C         DWORD dwFlags;
//C       } USEROBJECTFLAGS,*PUSEROBJECTFLAGS;
struct tagUSEROBJECTFLAGS
{
    WINBOOL fInherit;
    WINBOOL fReserved;
    DWORD dwFlags;
}
alias tagUSEROBJECTFLAGS USEROBJECTFLAGS;
alias tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;
//C        WINBOOL GetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
WINBOOL  GetUserObjectInformationA(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
//C        WINBOOL GetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength,LPDWORD lpnLengthNeeded);
WINBOOL  GetUserObjectInformationW(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
//C        WINBOOL SetUserObjectInformationA(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
WINBOOL  SetUserObjectInformationA(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
//C        WINBOOL SetUserObjectInformationW(HANDLE hObj,int nIndex,PVOID pvInfo,DWORD nLength);
WINBOOL  SetUserObjectInformationW(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength);
//C       typedef struct tagWNDCLASSEXA {
//C         UINT cbSize;
//C         UINT style;
//C         WNDPROC lpfnWndProc;
//C         int cbClsExtra;
//C         int cbWndExtra;
//C         HINSTANCE hInstance;
//C         HICON hIcon;
//C         HCURSOR hCursor;
//C         HBRUSH hbrBackground;
//C         LPCSTR lpszMenuName;
//C         LPCSTR lpszClassName;
//C         HICON hIconSm;
//C       } WNDCLASSEXA,*PWNDCLASSEXA,*NPWNDCLASSEXA,*LPWNDCLASSEXA;
struct tagWNDCLASSEXA
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
}
alias tagWNDCLASSEXA WNDCLASSEXA;
alias tagWNDCLASSEXA *PWNDCLASSEXA;
alias tagWNDCLASSEXA *NPWNDCLASSEXA;
alias tagWNDCLASSEXA *LPWNDCLASSEXA;
//C       typedef struct tagWNDCLASSEXW {
//C         UINT cbSize;
//C         UINT style;
//C         WNDPROC lpfnWndProc;
//C         int cbClsExtra;
//C         int cbWndExtra;
//C         HINSTANCE hInstance;
//C         HICON hIcon;
//C         HCURSOR hCursor;
//C         HBRUSH hbrBackground;
//C         LPCWSTR lpszMenuName;
//C         LPCWSTR lpszClassName;
//C         HICON hIconSm;
//C       } WNDCLASSEXW,*PWNDCLASSEXW,*NPWNDCLASSEXW,*LPWNDCLASSEXW;
struct tagWNDCLASSEXW
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
}
alias tagWNDCLASSEXW WNDCLASSEXW;
alias tagWNDCLASSEXW *PWNDCLASSEXW;
alias tagWNDCLASSEXW *NPWNDCLASSEXW;
alias tagWNDCLASSEXW *LPWNDCLASSEXW;
//C       typedef WNDCLASSEXA WNDCLASSEX;
alias WNDCLASSEXA WNDCLASSEX;
//C       typedef PWNDCLASSEXA PWNDCLASSEX;
alias PWNDCLASSEXA PWNDCLASSEX;
//C       typedef NPWNDCLASSEXA NPWNDCLASSEX;
alias NPWNDCLASSEXA NPWNDCLASSEX;
//C       typedef LPWNDCLASSEXA LPWNDCLASSEX;
alias LPWNDCLASSEXA LPWNDCLASSEX;
//C       typedef struct tagWNDCLASSA {
//C         UINT style;
//C         WNDPROC lpfnWndProc;
//C         int cbClsExtra;
//C         int cbWndExtra;
//C         HINSTANCE hInstance;
//C         HICON hIcon;
//C         HCURSOR hCursor;
//C         HBRUSH hbrBackground;
//C         LPCSTR lpszMenuName;
//C         LPCSTR lpszClassName;
//C       } WNDCLASSA,*PWNDCLASSA,*NPWNDCLASSA,*LPWNDCLASSA;
struct tagWNDCLASSA
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
}
alias tagWNDCLASSA WNDCLASSA;
alias tagWNDCLASSA *PWNDCLASSA;
alias tagWNDCLASSA *NPWNDCLASSA;
alias tagWNDCLASSA *LPWNDCLASSA;
//C       typedef struct tagWNDCLASSW {
//C         UINT style;
//C         WNDPROC lpfnWndProc;
//C         int cbClsExtra;
//C         int cbWndExtra;
//C         HINSTANCE hInstance;
//C         HICON hIcon;
//C         HCURSOR hCursor;
//C         HBRUSH hbrBackground;
//C         LPCWSTR lpszMenuName;
//C         LPCWSTR lpszClassName;
//C       } WNDCLASSW,*PWNDCLASSW,*NPWNDCLASSW,*LPWNDCLASSW;
struct tagWNDCLASSW
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
}
alias tagWNDCLASSW WNDCLASSW;
alias tagWNDCLASSW *PWNDCLASSW;
alias tagWNDCLASSW *NPWNDCLASSW;
alias tagWNDCLASSW *LPWNDCLASSW;
//C       typedef WNDCLASSA WNDCLASS;
alias WNDCLASSA WNDCLASS;
//C       typedef PWNDCLASSA PWNDCLASS;
alias PWNDCLASSA PWNDCLASS;
//C       typedef NPWNDCLASSA NPWNDCLASS;
alias NPWNDCLASSA NPWNDCLASS;
//C       typedef LPWNDCLASSA LPWNDCLASS;
alias LPWNDCLASSA LPWNDCLASS;
//C        WINBOOL IsHungAppWindow(HWND hwnd);
WINBOOL  IsHungAppWindow(HWND hwnd);
//C        void DisableProcessWindowsGhosting(void);
void  DisableProcessWindowsGhosting();
//C       typedef struct tagMSG {
//C         HWND hwnd;
//C         UINT message;
//C         WPARAM wParam;
//C         LPARAM lParam;
//C         DWORD time;
//C         POINT pt;
//C       } MSG,*PMSG,*NPMSG,*LPMSG;
struct tagMSG
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
}
alias tagMSG MSG;
alias tagMSG *PMSG;
alias tagMSG *NPMSG;
alias tagMSG *LPMSG;
//C       typedef struct tagMINMAXINFO {
//C         POINT ptReserved;
//C         POINT ptMaxSize;
//C         POINT ptMaxPosition;
//C         POINT ptMinTrackSize;
//C         POINT ptMaxTrackSize;
//C       } MINMAXINFO,*PMINMAXINFO,*LPMINMAXINFO;
struct tagMINMAXINFO
{
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
}
alias tagMINMAXINFO MINMAXINFO;
alias tagMINMAXINFO *PMINMAXINFO;
alias tagMINMAXINFO *LPMINMAXINFO;
//C       typedef struct tagCOPYDATASTRUCT {
//C         ULONG_PTR dwData;
//C         DWORD cbData;
//C         PVOID lpData;
//C       } COPYDATASTRUCT,*PCOPYDATASTRUCT;
struct tagCOPYDATASTRUCT
{
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
}
alias tagCOPYDATASTRUCT COPYDATASTRUCT;
alias tagCOPYDATASTRUCT *PCOPYDATASTRUCT;
//C       typedef struct tagMDINEXTMENU {
//C         HMENU hmenuIn;
//C         HMENU hmenuNext;
//C         HWND hwndNext;
//C       } MDINEXTMENU,*PMDINEXTMENU,*LPMDINEXTMENU;
struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
}
alias tagMDINEXTMENU MDINEXTMENU;
alias tagMDINEXTMENU *PMDINEXTMENU;
alias tagMDINEXTMENU *LPMDINEXTMENU;
//C        UINT RegisterWindowMessageA(LPCSTR lpString);
UINT  RegisterWindowMessageA(LPCSTR lpString);
//C        UINT RegisterWindowMessageW(LPCWSTR lpString);
UINT  RegisterWindowMessageW(LPCWSTR lpString);
//C       typedef struct tagWINDOWPOS {
//C         HWND hwnd;
//C         HWND hwndInsertAfter;
//C         int x;
//C         int y;
//C         int cx;
//C         int cy;
//C         UINT flags;
//C       } WINDOWPOS,*LPWINDOWPOS,*PWINDOWPOS;
struct tagWINDOWPOS
{
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
}
alias tagWINDOWPOS WINDOWPOS;
alias tagWINDOWPOS *LPWINDOWPOS;
alias tagWINDOWPOS *PWINDOWPOS;
//C       typedef struct tagNCCALCSIZE_PARAMS {
//C         RECT rgrc[3];
//C         PWINDOWPOS lppos;
//C       } NCCALCSIZE_PARAMS,*LPNCCALCSIZE_PARAMS;
struct tagNCCALCSIZE_PARAMS
{
    RECT [3]rgrc;
    PWINDOWPOS lppos;
}
alias tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
alias tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;
//C       typedef struct tagTRACKMOUSEEVENT {
//C         DWORD cbSize;
//C         DWORD dwFlags;
//C         HWND hwndTrack;
//C         DWORD dwHoverTime;
//C       } TRACKMOUSEEVENT,*LPTRACKMOUSEEVENT;
struct tagTRACKMOUSEEVENT
{
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
}
alias tagTRACKMOUSEEVENT TRACKMOUSEEVENT;
alias tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;
//C        WINBOOL TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
WINBOOL  TrackMouseEvent(LPTRACKMOUSEEVENT lpEventTrack);
//C        WINBOOL DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags);
WINBOOL  DrawEdge(HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags);
//C        WINBOOL DrawFrameControl(HDC,LPRECT,UINT,UINT);
WINBOOL  DrawFrameControl(HDC , LPRECT , UINT , UINT );
//C        WINBOOL DrawCaption(HWND hwnd,HDC hdc,const RECT *lprect,UINT flags);
WINBOOL  DrawCaption(HWND hwnd, HDC hdc, RECT *lprect, UINT flags);
//C        WINBOOL DrawAnimatedRects(HWND hwnd,int idAni,const RECT *lprcFrom,const RECT *lprcTo);
WINBOOL  DrawAnimatedRects(HWND hwnd, int idAni, RECT *lprcFrom, RECT *lprcTo);
//C       typedef struct tagACCEL {
//C         BYTE fVirt;
//C         WORD key;
//C         WORD cmd;
//C       } ACCEL,*LPACCEL;
struct tagACCEL
{
    BYTE fVirt;
    WORD key;
    WORD cmd;
}
alias tagACCEL ACCEL;
alias tagACCEL *LPACCEL;
//C       typedef struct tagPAINTSTRUCT {
//C         HDC hdc;
//C         WINBOOL fErase;
//C         RECT rcPaint;
//C         WINBOOL fRestore;
//C         WINBOOL fIncUpdate;
//C         BYTE rgbReserved[32];
//C       } PAINTSTRUCT,*PPAINTSTRUCT,*NPPAINTSTRUCT,*LPPAINTSTRUCT;
struct tagPAINTSTRUCT
{
    HDC hdc;
    WINBOOL fErase;
    RECT rcPaint;
    WINBOOL fRestore;
    WINBOOL fIncUpdate;
    BYTE [32]rgbReserved;
}
alias tagPAINTSTRUCT PAINTSTRUCT;
alias tagPAINTSTRUCT *PPAINTSTRUCT;
alias tagPAINTSTRUCT *NPPAINTSTRUCT;
alias tagPAINTSTRUCT *LPPAINTSTRUCT;
//C       typedef struct tagCREATESTRUCTA {
//C         LPVOID lpCreateParams;
//C         HINSTANCE hInstance;
//C         HMENU hMenu;
//C         HWND hwndParent;
//C         int cy;
//C         int cx;
//C         int y;
//C         int x;
//C         LONG style;
//C         LPCSTR lpszName;
//C         LPCSTR lpszClass;
//C         DWORD dwExStyle;
//C       } CREATESTRUCTA,*LPCREATESTRUCTA;
struct tagCREATESTRUCTA
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
}
alias tagCREATESTRUCTA CREATESTRUCTA;
alias tagCREATESTRUCTA *LPCREATESTRUCTA;
//C       typedef struct tagCREATESTRUCTW {
//C         LPVOID lpCreateParams;
//C         HINSTANCE hInstance;
//C         HMENU hMenu;
//C         HWND hwndParent;
//C         int cy;
//C         int cx;
//C         int y;
//C         int x;
//C         LONG style;
//C         LPCWSTR lpszName;
//C         LPCWSTR lpszClass;
//C         DWORD dwExStyle;
//C       } CREATESTRUCTW,*LPCREATESTRUCTW;
struct tagCREATESTRUCTW
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
}
alias tagCREATESTRUCTW CREATESTRUCTW;
alias tagCREATESTRUCTW *LPCREATESTRUCTW;
//C       typedef CREATESTRUCTA CREATESTRUCT;
alias CREATESTRUCTA CREATESTRUCT;
//C       typedef LPCREATESTRUCTA LPCREATESTRUCT;
alias LPCREATESTRUCTA LPCREATESTRUCT;
//C       typedef struct tagWINDOWPLACEMENT {
//C         UINT length;
//C         UINT flags;
//C         UINT showCmd;
//C         POINT ptMinPosition;
//C         POINT ptMaxPosition;
//C         RECT rcNormalPosition;
//C       } WINDOWPLACEMENT;
struct tagWINDOWPLACEMENT
{
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
}
alias tagWINDOWPLACEMENT WINDOWPLACEMENT;
//C       typedef WINDOWPLACEMENT *PWINDOWPLACEMENT,*LPWINDOWPLACEMENT;
alias WINDOWPLACEMENT *PWINDOWPLACEMENT;
alias WINDOWPLACEMENT *LPWINDOWPLACEMENT;
//C       typedef struct tagNMHDR {
//C         HWND hwndFrom;
//C         UINT_PTR idFrom;
//C         UINT code;
//C       } NMHDR;
struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
}
alias tagNMHDR NMHDR;
//C       typedef NMHDR *LPNMHDR;
alias NMHDR *LPNMHDR;
//C       typedef struct tagSTYLESTRUCT {
//C         DWORD styleOld;
//C         DWORD styleNew;
//C       } STYLESTRUCT,*LPSTYLESTRUCT;
struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
}
alias tagSTYLESTRUCT STYLESTRUCT;
alias tagSTYLESTRUCT *LPSTYLESTRUCT;
//C       typedef struct tagMEASUREITEMSTRUCT {
//C         UINT CtlType;
//C         UINT CtlID;
//C         UINT itemID;
//C         UINT itemWidth;
//C         UINT itemHeight;
//C         ULONG_PTR itemData;
//C       } MEASUREITEMSTRUCT,*PMEASUREITEMSTRUCT,*LPMEASUREITEMSTRUCT;
struct tagMEASUREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
}
alias tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
alias tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;
alias tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;
//C       typedef struct tagDRAWITEMSTRUCT {
//C         UINT CtlType;
//C         UINT CtlID;
//C         UINT itemID;
//C         UINT itemAction;
//C         UINT itemState;
//C         HWND hwndItem;
//C         HDC hDC;
//C         RECT rcItem;
//C         ULONG_PTR itemData;
//C       } DRAWITEMSTRUCT,*PDRAWITEMSTRUCT,*LPDRAWITEMSTRUCT;
struct tagDRAWITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
}
alias tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
alias tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;
alias tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;
//C       typedef struct tagDELETEITEMSTRUCT {
//C         UINT CtlType;
//C         UINT CtlID;
//C         UINT itemID;
//C         HWND hwndItem;
//C         ULONG_PTR itemData;
//C       } DELETEITEMSTRUCT,*PDELETEITEMSTRUCT,*LPDELETEITEMSTRUCT;
struct tagDELETEITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
}
alias tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
alias tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;
alias tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;
//C       typedef struct tagCOMPAREITEMSTRUCT {
//C         UINT CtlType;
//C         UINT CtlID;
//C         HWND hwndItem;
//C         UINT itemID1;
//C         ULONG_PTR itemData1;
//C         UINT itemID2;
//C         ULONG_PTR itemData2;
//C         DWORD dwLocaleId;
//C       } COMPAREITEMSTRUCT,*PCOMPAREITEMSTRUCT,*LPCOMPAREITEMSTRUCT;
struct tagCOMPAREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
}
alias tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
alias tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;
alias tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;
//C        WINBOOL GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
WINBOOL  GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
//C        WINBOOL GetMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
WINBOOL  GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
//C        WINBOOL TranslateMessage(const MSG *lpMsg);
WINBOOL  TranslateMessage(MSG *lpMsg);
//C        LRESULT DispatchMessageA(const MSG *lpMsg);
LRESULT  DispatchMessageA(MSG *lpMsg);
//C        LRESULT DispatchMessageW(const MSG *lpMsg);
LRESULT  DispatchMessageW(MSG *lpMsg);
//C        WINBOOL SetMessageQueue(int cMessagesMax);
WINBOOL  SetMessageQueue(int cMessagesMax);
//C        WINBOOL PeekMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
WINBOOL  PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
//C        WINBOOL PeekMessageW(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax,UINT wRemoveMsg);
WINBOOL  PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
//C        WINBOOL RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk);
WINBOOL  RegisterHotKey(HWND hWnd, int id, UINT fsModifiers, UINT vk);
//C        WINBOOL UnregisterHotKey(HWND hWnd,int id);
WINBOOL  UnregisterHotKey(HWND hWnd, int id);
//C        WINBOOL ExitWindowsEx(UINT uFlags,DWORD dwReason);
WINBOOL  ExitWindowsEx(UINT uFlags, DWORD dwReason);
//C        WINBOOL SwapMouseButton(WINBOOL fSwap);
WINBOOL  SwapMouseButton(WINBOOL fSwap);
//C        DWORD GetMessagePos(void);
DWORD  GetMessagePos();
//C        LONG GetMessageTime(void);
LONG  GetMessageTime();
//C        LPARAM GetMessageExtraInfo(void);
LPARAM  GetMessageExtraInfo();
//C        WINBOOL IsWow64Message(void);
WINBOOL  IsWow64Message();
//C        LPARAM SetMessageExtraInfo(LPARAM lParam);
LPARAM  SetMessageExtraInfo(LPARAM lParam);
//C        LRESULT SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        LRESULT SendMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        LRESULT SendMessageTimeoutA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
LRESULT  SendMessageTimeoutA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
//C        LRESULT SendMessageTimeoutW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,UINT fuFlags,UINT uTimeout,PDWORD_PTR lpdwResult);
LRESULT  SendMessageTimeoutW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
//C        WINBOOL SendNotifyMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINBOOL  SendNotifyMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL SendNotifyMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINBOOL  SendNotifyMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL SendMessageCallbackA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
WINBOOL  SendMessageCallbackA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
//C        WINBOOL SendMessageCallbackW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam,SENDASYNCPROC lpResultCallBack,ULONG_PTR dwData);
WINBOOL  SendMessageCallbackW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData);
//C       typedef struct {
//C         UINT cbSize;
//C         HDESK hdesk;
//C         HWND hwnd;
//C         LUID luid;
//C       } BSMINFO,*PBSMINFO;
struct _N71
{
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
}
alias _N71 BSMINFO;
alias _N71 *PBSMINFO;
//C        long BroadcastSystemMessageExA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
int  BroadcastSystemMessageExA(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
//C        long BroadcastSystemMessageExW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam,PBSMINFO pbsmInfo);
int  BroadcastSystemMessageExW(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo);
//C        long BroadcastSystemMessageA(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
int  BroadcastSystemMessageA(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        long BroadcastSystemMessageW(DWORD flags,LPDWORD lpInfo,UINT Msg,WPARAM wParam,LPARAM lParam);
int  BroadcastSystemMessageW(DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam);
//C       typedef PVOID HDEVNOTIFY;
alias PVOID HDEVNOTIFY;
//C       typedef HDEVNOTIFY *PHDEVNOTIFY;
alias HDEVNOTIFY *PHDEVNOTIFY;
//C       typedef HANDLE HPOWERNOTIFY;
alias HANDLE HPOWERNOTIFY;
//C       typedef HPOWERNOTIFY *PHPOWERNOTIFY;
alias HPOWERNOTIFY *PHPOWERNOTIFY;
//C       typedef struct {
//C         GUID PowerSetting;
//C         DWORD DataLength;
//C         UCHAR Data[1];
//C       } POWERBROADCAST_SETTING,*PPOWERBROADCAST_SETTING;
struct _N72
{
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR [1]Data;
}
alias _N72 POWERBROADCAST_SETTING;
alias _N72 *PPOWERBROADCAST_SETTING;
//C       extern const GUID GUID_POWERSCHEME_PERSONALITY;
extern const GUID GUID_POWERSCHEME_PERSONALITY;
//C       extern const GUID GUID_MIN_POWER_SAVINGS;
extern const GUID GUID_MIN_POWER_SAVINGS;
//C       extern const GUID GUID_MAX_POWER_SAVINGS;
extern const GUID GUID_MAX_POWER_SAVINGS;
//C       extern const GUID GUID_TYPICAL_POWER_SAVINGS;
extern const GUID GUID_TYPICAL_POWER_SAVINGS;
//C       extern const GUID GUID_ACDC_POWER_SOURCE;
extern const GUID GUID_ACDC_POWER_SOURCE;
//C       extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
//C       extern const GUID GUID_IDLE_BACKGROUND_TASK;
extern const GUID GUID_IDLE_BACKGROUND_TASK;
//C       extern const GUID GUID_SYSTEM_AWAYMODE;
extern const GUID GUID_SYSTEM_AWAYMODE;
//C       extern const GUID GUID_MONITOR_POWER_ON;
extern const GUID GUID_MONITOR_POWER_ON;
//C        HDEVNOTIFY RegisterDeviceNotificationA(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
HDEVNOTIFY  RegisterDeviceNotificationA(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
//C        HDEVNOTIFY RegisterDeviceNotificationW(HANDLE hRecipient,LPVOID NotificationFilter,DWORD Flags);
HDEVNOTIFY  RegisterDeviceNotificationW(HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags);
//C        WINBOOL UnregisterDeviceNotification(HDEVNOTIFY Handle);
WINBOOL  UnregisterDeviceNotification(HDEVNOTIFY Handle);
//C        WINBOOL PostMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINBOOL  PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL PostMessageW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
WINBOOL  PostMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL PostThreadMessageA(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam);
WINBOOL  PostThreadMessageA(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL PostThreadMessageW(DWORD idThread,UINT Msg,WPARAM wParam,LPARAM lParam);
WINBOOL  PostThreadMessageW(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL AttachThreadInput(DWORD idAttach,DWORD idAttachTo,WINBOOL fAttach);
WINBOOL  AttachThreadInput(DWORD idAttach, DWORD idAttachTo, WINBOOL fAttach);
//C        WINBOOL ReplyMessage(LRESULT lResult);
WINBOOL  ReplyMessage(LRESULT lResult);
//C        WINBOOL WaitMessage(void);
WINBOOL  WaitMessage();
//C        DWORD WaitForInputIdle(HANDLE hProcess,DWORD dwMilliseconds);
DWORD  WaitForInputIdle(HANDLE hProcess, DWORD dwMilliseconds);
//C        LRESULT DefWindowProcA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        LRESULT DefWindowProcW(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  DefWindowProcW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        void PostQuitMessage(int nExitCode);
void  PostQuitMessage(int nExitCode);
//C        LRESULT CallWindowProcA(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  CallWindowProcA(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        LRESULT CallWindowProcW(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  CallWindowProcW(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL InSendMessage(void);
WINBOOL  InSendMessage();
//C        DWORD InSendMessageEx(LPVOID lpReserved);
DWORD  InSendMessageEx(LPVOID lpReserved);
//C        UINT GetDoubleClickTime(void);
UINT  GetDoubleClickTime();
//C        WINBOOL SetDoubleClickTime(UINT);
WINBOOL  SetDoubleClickTime(UINT );
//C        ATOM RegisterClassA(const WNDCLASSA *lpWndClass);
ATOM  RegisterClassA(WNDCLASSA *lpWndClass);
//C        ATOM RegisterClassW(const WNDCLASSW *lpWndClass);
ATOM  RegisterClassW(WNDCLASSW *lpWndClass);
//C        WINBOOL UnregisterClassA(LPCSTR lpClassName,HINSTANCE hInstance);
WINBOOL  UnregisterClassA(LPCSTR lpClassName, HINSTANCE hInstance);
//C        WINBOOL UnregisterClassW(LPCWSTR lpClassName,HINSTANCE hInstance);
WINBOOL  UnregisterClassW(LPCWSTR lpClassName, HINSTANCE hInstance);
//C        WINBOOL GetClassInfoA(HINSTANCE hInstance,LPCSTR lpClassName,LPWNDCLASSA lpWndClass);
WINBOOL  GetClassInfoA(HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass);
//C        WINBOOL GetClassInfoW(HINSTANCE hInstance,LPCWSTR lpClassName,LPWNDCLASSW lpWndClass);
WINBOOL  GetClassInfoW(HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass);
//C        ATOM RegisterClassExA(const WNDCLASSEXA *);
ATOM  RegisterClassExA(WNDCLASSEXA *);
//C        ATOM RegisterClassExW(const WNDCLASSEXW *);
ATOM  RegisterClassExW(WNDCLASSEXW *);
//C        WINBOOL GetClassInfoExA(HINSTANCE hInstance,LPCSTR lpszClass,LPWNDCLASSEXA lpwcx);
WINBOOL  GetClassInfoExA(HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx);
//C        WINBOOL GetClassInfoExW(HINSTANCE hInstance,LPCWSTR lpszClass,LPWNDCLASSEXW lpwcx);
WINBOOL  GetClassInfoExW(HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx);
//C       typedef BOOLEAN ( *PREGISTERCLASSNAMEW)(LPCWSTR);
alias BOOLEAN  function(LPCWSTR )PREGISTERCLASSNAMEW;
//C        HWND CreateWindowExA(DWORD dwExStyle,LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
HWND  CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
//C        HWND CreateWindowExW(DWORD dwExStyle,LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HMENU hMenu,HINSTANCE hInstance,LPVOID lpParam);
HWND  CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
//C        WINBOOL IsWindow(HWND hWnd);
WINBOOL  IsWindow(HWND hWnd);
//C        WINBOOL IsMenu(HMENU hMenu);
WINBOOL  IsMenu(HMENU hMenu);
//C        WINBOOL IsChild(HWND hWndParent,HWND hWnd);
WINBOOL  IsChild(HWND hWndParent, HWND hWnd);
//C        WINBOOL DestroyWindow(HWND hWnd);
WINBOOL  DestroyWindow(HWND hWnd);
//C        WINBOOL ShowWindow(HWND hWnd,int nCmdShow);
WINBOOL  ShowWindow(HWND hWnd, int nCmdShow);
//C        WINBOOL AnimateWindow(HWND hWnd,DWORD dwTime,DWORD dwFlags);
WINBOOL  AnimateWindow(HWND hWnd, DWORD dwTime, DWORD dwFlags);
//C        WINBOOL UpdateLayeredWindow(HWND hWnd,HDC hdcDst,POINT *pptDst,SIZE *psize,HDC hdcSrc,POINT *pptSrc,COLORREF crKey,BLENDFUNCTION *pblend,DWORD dwFlags);
WINBOOL  UpdateLayeredWindow(HWND hWnd, HDC hdcDst, POINT *pptDst, SIZE *psize, HDC hdcSrc, POINT *pptSrc, COLORREF crKey, BLENDFUNCTION *pblend, DWORD dwFlags);
//C       typedef struct tagUPDATELAYEREDWINDOWINFO {
//C         DWORD cbSize;
//C         HDC hdcDst;
//C         POINT const *pptDst;
//C         SIZE const *psize;
//C         HDC hdcSrc;
//C         POINT const *pptSrc;
//C         COLORREF crKey;
//C         BLENDFUNCTION const *pblend;
//C         DWORD dwFlags;
//C         RECT const *prcDirty;
//C       } UPDATELAYEREDWINDOWINFO,*PUPDATELAYEREDWINDOWINFO;
struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    POINT *pptDst;
    SIZE *psize;
    HDC hdcSrc;
    POINT *pptSrc;
    COLORREF crKey;
    BLENDFUNCTION *pblend;
    DWORD dwFlags;
    RECT *prcDirty;
}
alias tagUPDATELAYEREDWINDOWINFO UPDATELAYEREDWINDOWINFO;
alias tagUPDATELAYEREDWINDOWINFO *PUPDATELAYEREDWINDOWINFO;
//C        WINBOOL UpdateLayeredWindowIndirect(HWND hWnd,UPDATELAYEREDWINDOWINFO const *pULWInfo);
WINBOOL  UpdateLayeredWindowIndirect(HWND hWnd, UPDATELAYEREDWINDOWINFO *pULWInfo);
//C        WINBOOL GetLayeredWindowAttributes(HWND hwnd,COLORREF *pcrKey,BYTE *pbAlpha,DWORD *pdwFlags);
WINBOOL  GetLayeredWindowAttributes(HWND hwnd, COLORREF *pcrKey, BYTE *pbAlpha, DWORD *pdwFlags);
//C        WINBOOL PrintWindow(HWND hwnd,HDC hdcBlt,UINT nFlags);
WINBOOL  PrintWindow(HWND hwnd, HDC hdcBlt, UINT nFlags);
//C        WINBOOL SetLayeredWindowAttributes(HWND hwnd,COLORREF crKey,BYTE bAlpha,DWORD dwFlags);
WINBOOL  SetLayeredWindowAttributes(HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags);
//C        WINBOOL ShowWindowAsync(HWND hWnd,int nCmdShow);
WINBOOL  ShowWindowAsync(HWND hWnd, int nCmdShow);
//C        WINBOOL FlashWindow(HWND hWnd,WINBOOL bInvert);
WINBOOL  FlashWindow(HWND hWnd, WINBOOL bInvert);
//C       typedef struct {
//C         UINT cbSize;
//C         HWND hwnd;
//C         DWORD dwFlags;
//C         UINT uCount;
//C         DWORD dwTimeout;
//C       } FLASHWINFO,*PFLASHWINFO;
struct _N73
{
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
}
alias _N73 FLASHWINFO;
alias _N73 *PFLASHWINFO;
//C        WINBOOL FlashWindowEx(PFLASHWINFO pfwi);
WINBOOL  FlashWindowEx(PFLASHWINFO pfwi);
//C        WINBOOL ShowOwnedPopups(HWND hWnd,WINBOOL fShow);
WINBOOL  ShowOwnedPopups(HWND hWnd, WINBOOL fShow);
//C        WINBOOL OpenIcon(HWND hWnd);
WINBOOL  OpenIcon(HWND hWnd);
//C        WINBOOL CloseWindow(HWND hWnd);
WINBOOL  CloseWindow(HWND hWnd);
//C        WINBOOL MoveWindow(HWND hWnd,int X,int Y,int nWidth,int nHeight,WINBOOL bRepaint);
WINBOOL  MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, WINBOOL bRepaint);
//C        WINBOOL SetWindowPos(HWND hWnd,HWND hWndInsertAfter,int X,int Y,int cx,int cy,UINT uFlags);
WINBOOL  SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
//C        WINBOOL GetWindowPlacement(HWND hWnd,WINDOWPLACEMENT *lpwndpl);
WINBOOL  GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT *lpwndpl);
//C        WINBOOL SetWindowPlacement(HWND hWnd,const WINDOWPLACEMENT *lpwndpl);
WINBOOL  SetWindowPlacement(HWND hWnd, WINDOWPLACEMENT *lpwndpl);
//C        HDWP BeginDeferWindowPos(int nNumWindows);
HDWP  BeginDeferWindowPos(int nNumWindows);
//C        HDWP DeferWindowPos(HDWP hWinPosInfo,HWND hWnd,HWND hWndInsertAfter,int x,int y,int cx,int cy,UINT uFlags);
HDWP  DeferWindowPos(HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags);
//C        WINBOOL EndDeferWindowPos(HDWP hWinPosInfo);
WINBOOL  EndDeferWindowPos(HDWP hWinPosInfo);
//C        WINBOOL IsWindowVisible(HWND hWnd);
WINBOOL  IsWindowVisible(HWND hWnd);
//C        WINBOOL IsIconic(HWND hWnd);
WINBOOL  IsIconic(HWND hWnd);
//C        WINBOOL AnyPopup(void);
WINBOOL  AnyPopup();
//C        WINBOOL BringWindowToTop(HWND hWnd);
WINBOOL  BringWindowToTop(HWND hWnd);
//C        WINBOOL IsZoomed(HWND hWnd);
WINBOOL  IsZoomed(HWND hWnd);
//C       typedef struct {
//C         DWORD style;
//C         DWORD dwExtendedStyle;
//C         WORD cdit;
//C         short x;
//C         short y;
//C         short cx;
//C         short cy;
//C       } DLGTEMPLATE;
struct _N74
{
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
}
alias _N74 DLGTEMPLATE;
//C       typedef DLGTEMPLATE *LPDLGTEMPLATEA;
alias DLGTEMPLATE *LPDLGTEMPLATEA;
//C       typedef DLGTEMPLATE *LPDLGTEMPLATEW;
alias DLGTEMPLATE *LPDLGTEMPLATEW;
//C       typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
alias LPDLGTEMPLATEA LPDLGTEMPLATE;
//C       typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
alias DLGTEMPLATE *LPCDLGTEMPLATEA;
//C       typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;
alias DLGTEMPLATE *LPCDLGTEMPLATEW;
//C       typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
alias LPCDLGTEMPLATEA LPCDLGTEMPLATE;
//C       typedef struct {
//C         DWORD style;
//C         DWORD dwExtendedStyle;
//C         short x;
//C         short y;
//C         short cx;
//C         short cy;
//C         WORD id;
//C       } DLGITEMTEMPLATE;
struct _N75
{
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
}
alias _N75 DLGITEMTEMPLATE;
//C       typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
alias DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
//C       typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
alias DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
//C       typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
alias PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
//C       typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
alias DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
//C       typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
alias DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
//C       typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
alias LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
//C        HWND CreateDialogParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
HWND  CreateDialogParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        HWND CreateDialogParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
HWND  CreateDialogParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        HWND CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
HWND  CreateDialogIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        HWND CreateDialogIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
HWND  CreateDialogIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        INT_PTR DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
INT_PTR  DialogBoxParamA(HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        INT_PTR DialogBoxParamW(HINSTANCE hInstance,LPCWSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
INT_PTR  DialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        INT_PTR DialogBoxIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
INT_PTR  DialogBoxIndirectParamA(HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        INT_PTR DialogBoxIndirectParamW(HINSTANCE hInstance,LPCDLGTEMPLATEW hDialogTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
INT_PTR  DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
//C        WINBOOL EndDialog(HWND hDlg,INT_PTR nResult);
WINBOOL  EndDialog(HWND hDlg, INT_PTR nResult);
//C        HWND GetDlgItem(HWND hDlg,int nIDDlgItem);
HWND  GetDlgItem(HWND hDlg, int nIDDlgItem);
//C        WINBOOL SetDlgItemInt(HWND hDlg,int nIDDlgItem,UINT uValue,WINBOOL bSigned);
WINBOOL  SetDlgItemInt(HWND hDlg, int nIDDlgItem, UINT uValue, WINBOOL bSigned);
//C        UINT GetDlgItemInt(HWND hDlg,int nIDDlgItem,WINBOOL *lpTranslated,WINBOOL bSigned);
UINT  GetDlgItemInt(HWND hDlg, int nIDDlgItem, WINBOOL *lpTranslated, WINBOOL bSigned);
//C        WINBOOL SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString);
WINBOOL  SetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPCSTR lpString);
//C        WINBOOL SetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPCWSTR lpString);
WINBOOL  SetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPCWSTR lpString);
//C        UINT GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int cchMax);
UINT  GetDlgItemTextA(HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax);
//C        UINT GetDlgItemTextW(HWND hDlg,int nIDDlgItem,LPWSTR lpString,int cchMax);
UINT  GetDlgItemTextW(HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax);
//C        WINBOOL CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck);
WINBOOL  CheckDlgButton(HWND hDlg, int nIDButton, UINT uCheck);
//C        WINBOOL CheckRadioButton(HWND hDlg,int nIDFirstButton,int nIDLastButton,int nIDCheckButton);
WINBOOL  CheckRadioButton(HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
//C        UINT IsDlgButtonChecked(HWND hDlg,int nIDButton);
UINT  IsDlgButtonChecked(HWND hDlg, int nIDButton);
//C        LRESULT SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  SendDlgItemMessageA(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        LRESULT SendDlgItemMessageW(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  SendDlgItemMessageW(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        HWND GetNextDlgGroupItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
HWND  GetNextDlgGroupItem(HWND hDlg, HWND hCtl, WINBOOL bPrevious);
//C        HWND GetNextDlgTabItem(HWND hDlg,HWND hCtl,WINBOOL bPrevious);
HWND  GetNextDlgTabItem(HWND hDlg, HWND hCtl, WINBOOL bPrevious);
//C        int GetDlgCtrlID(HWND hWnd);
int  GetDlgCtrlID(HWND hWnd);
//C        long GetDialogBaseUnits(void);
int  GetDialogBaseUnits();
//C        LRESULT DefDlgProcA(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  DefDlgProcA(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        LRESULT DefDlgProcW(HWND hDlg,UINT Msg,WPARAM wParam,LPARAM lParam);
LRESULT  DefDlgProcW(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL CallMsgFilterA(LPMSG lpMsg,int nCode);
WINBOOL  CallMsgFilterA(LPMSG lpMsg, int nCode);
//C        WINBOOL CallMsgFilterW(LPMSG lpMsg,int nCode);
WINBOOL  CallMsgFilterW(LPMSG lpMsg, int nCode);
//C        WINBOOL OpenClipboard(HWND hWndNewOwner);
WINBOOL  OpenClipboard(HWND hWndNewOwner);
//C        WINBOOL CloseClipboard(void);
WINBOOL  CloseClipboard();
//C        DWORD GetClipboardSequenceNumber(void);
DWORD  GetClipboardSequenceNumber();
//C        HWND GetClipboardOwner(void);
HWND  GetClipboardOwner();
//C        HWND SetClipboardViewer(HWND hWndNewViewer);
HWND  SetClipboardViewer(HWND hWndNewViewer);
//C        HWND GetClipboardViewer(void);
HWND  GetClipboardViewer();
//C        WINBOOL ChangeClipboardChain(HWND hWndRemove,HWND hWndNewNext);
WINBOOL  ChangeClipboardChain(HWND hWndRemove, HWND hWndNewNext);
//C        HANDLE SetClipboardData(UINT uFormat,HANDLE hMem);
HANDLE  SetClipboardData(UINT uFormat, HANDLE hMem);
//C        HANDLE GetClipboardData(UINT uFormat);
HANDLE  GetClipboardData(UINT uFormat);
//C        UINT RegisterClipboardFormatA(LPCSTR lpszFormat);
UINT  RegisterClipboardFormatA(LPCSTR lpszFormat);
//C        UINT RegisterClipboardFormatW(LPCWSTR lpszFormat);
UINT  RegisterClipboardFormatW(LPCWSTR lpszFormat);
//C        int CountClipboardFormats(void);
int  CountClipboardFormats();
//C        UINT EnumClipboardFormats(UINT format);
UINT  EnumClipboardFormats(UINT format);
//C        int GetClipboardFormatNameA(UINT format,LPSTR lpszFormatName,int cchMaxCount);
int  GetClipboardFormatNameA(UINT format, LPSTR lpszFormatName, int cchMaxCount);
//C        int GetClipboardFormatNameW(UINT format,LPWSTR lpszFormatName,int cchMaxCount);
int  GetClipboardFormatNameW(UINT format, LPWSTR lpszFormatName, int cchMaxCount);
//C        WINBOOL EmptyClipboard(void);
WINBOOL  EmptyClipboard();
//C        WINBOOL IsClipboardFormatAvailable(UINT format);
WINBOOL  IsClipboardFormatAvailable(UINT format);
//C        int GetPriorityClipboardFormat(UINT *paFormatPriorityList,int cFormats);
int  GetPriorityClipboardFormat(UINT *paFormatPriorityList, int cFormats);
//C        HWND GetOpenClipboardWindow(void);
HWND  GetOpenClipboardWindow();
//C        WINBOOL CharToOemA(LPCSTR lpszSrc,LPSTR lpszDst);
WINBOOL  CharToOemA(LPCSTR lpszSrc, LPSTR lpszDst);
//C        WINBOOL CharToOemW(LPCWSTR lpszSrc,LPSTR lpszDst);
WINBOOL  CharToOemW(LPCWSTR lpszSrc, LPSTR lpszDst);
//C        WINBOOL OemToCharA(LPCSTR lpszSrc,LPSTR lpszDst);
WINBOOL  OemToCharA(LPCSTR lpszSrc, LPSTR lpszDst);
//C        WINBOOL OemToCharW(LPCSTR lpszSrc,LPWSTR lpszDst);
WINBOOL  OemToCharW(LPCSTR lpszSrc, LPWSTR lpszDst);
//C        WINBOOL CharToOemBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
WINBOOL  CharToOemBuffA(LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
//C        WINBOOL CharToOemBuffW(LPCWSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
WINBOOL  CharToOemBuffW(LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
//C        WINBOOL OemToCharBuffA(LPCSTR lpszSrc,LPSTR lpszDst,DWORD cchDstLength);
WINBOOL  OemToCharBuffA(LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
//C        WINBOOL OemToCharBuffW(LPCSTR lpszSrc,LPWSTR lpszDst,DWORD cchDstLength);
WINBOOL  OemToCharBuffW(LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength);
//C        LPSTR CharUpperA(LPSTR lpsz);
LPSTR  CharUpperA(LPSTR lpsz);
//C        LPWSTR CharUpperW(LPWSTR lpsz);
LPWSTR  CharUpperW(LPWSTR lpsz);
//C        DWORD CharUpperBuffA(LPSTR lpsz,DWORD cchLength);
DWORD  CharUpperBuffA(LPSTR lpsz, DWORD cchLength);
//C        DWORD CharUpperBuffW(LPWSTR lpsz,DWORD cchLength);
DWORD  CharUpperBuffW(LPWSTR lpsz, DWORD cchLength);
//C        LPSTR CharLowerA(LPSTR lpsz);
LPSTR  CharLowerA(LPSTR lpsz);
//C        LPWSTR CharLowerW(LPWSTR lpsz);
LPWSTR  CharLowerW(LPWSTR lpsz);
//C        DWORD CharLowerBuffA(LPSTR lpsz,DWORD cchLength);
DWORD  CharLowerBuffA(LPSTR lpsz, DWORD cchLength);
//C        DWORD CharLowerBuffW(LPWSTR lpsz,DWORD cchLength);
DWORD  CharLowerBuffW(LPWSTR lpsz, DWORD cchLength);
//C        LPSTR CharNextA(LPCSTR lpsz);
LPSTR  CharNextA(LPCSTR lpsz);
//C        LPWSTR CharNextW(LPCWSTR lpsz);
LPWSTR  CharNextW(LPCWSTR lpsz);
//C        LPSTR CharPrevA(LPCSTR lpszStart,LPCSTR lpszCurrent);
LPSTR  CharPrevA(LPCSTR lpszStart, LPCSTR lpszCurrent);
//C        LPWSTR CharPrevW(LPCWSTR lpszStart,LPCWSTR lpszCurrent);
LPWSTR  CharPrevW(LPCWSTR lpszStart, LPCWSTR lpszCurrent);
//C        LPSTR CharNextExA(WORD CodePage,LPCSTR lpCurrentChar,DWORD dwFlags);
LPSTR  CharNextExA(WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);
//C        LPSTR CharPrevExA(WORD CodePage,LPCSTR lpStart,LPCSTR lpCurrentChar,DWORD dwFlags);
LPSTR  CharPrevExA(WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);
//C        WINBOOL IsCharAlphaA(CHAR ch);
WINBOOL  IsCharAlphaA(CHAR ch);
//C        WINBOOL IsCharAlphaW(WCHAR ch);
WINBOOL  IsCharAlphaW(WCHAR ch);
//C        WINBOOL IsCharAlphaNumericA(CHAR ch);
WINBOOL  IsCharAlphaNumericA(CHAR ch);
//C        WINBOOL IsCharAlphaNumericW(WCHAR ch);
WINBOOL  IsCharAlphaNumericW(WCHAR ch);
//C        WINBOOL IsCharUpperA(CHAR ch);
WINBOOL  IsCharUpperA(CHAR ch);
//C        WINBOOL IsCharUpperW(WCHAR ch);
WINBOOL  IsCharUpperW(WCHAR ch);
//C        WINBOOL IsCharLowerA(CHAR ch);
WINBOOL  IsCharLowerA(CHAR ch);
//C        WINBOOL IsCharLowerW(WCHAR ch);
WINBOOL  IsCharLowerW(WCHAR ch);
//C        HWND SetFocus(HWND hWnd);
HWND  SetFocus(HWND hWnd);
//C        HWND GetActiveWindow(void);
HWND  GetActiveWindow();
//C        HWND GetFocus(void);
HWND  GetFocus();
//C        UINT GetKBCodePage(void);
UINT  GetKBCodePage();
//C        SHORT GetKeyState(int nVirtKey);
SHORT  GetKeyState(int nVirtKey);
//C        SHORT GetAsyncKeyState(int vKey);
SHORT  GetAsyncKeyState(int vKey);
//C        WINBOOL GetKeyboardState(PBYTE lpKeyState);
WINBOOL  GetKeyboardState(PBYTE lpKeyState);
//C        WINBOOL SetKeyboardState(LPBYTE lpKeyState);
WINBOOL  SetKeyboardState(LPBYTE lpKeyState);
//C        int GetKeyNameTextA(LONG lParam,LPSTR lpString,int cchSize);
int  GetKeyNameTextA(LONG lParam, LPSTR lpString, int cchSize);
//C        int GetKeyNameTextW(LONG lParam,LPWSTR lpString,int cchSize);
int  GetKeyNameTextW(LONG lParam, LPWSTR lpString, int cchSize);
//C        int GetKeyboardType(int nTypeFlag);
int  GetKeyboardType(int nTypeFlag);
//C        int ToAscii(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags);
int  ToAscii(UINT uVirtKey, UINT uScanCode, BYTE *lpKeyState, LPWORD lpChar, UINT uFlags);
//C        int ToAsciiEx(UINT uVirtKey,UINT uScanCode,const BYTE *lpKeyState,LPWORD lpChar,UINT uFlags,HKL dwhkl);
int  ToAsciiEx(UINT uVirtKey, UINT uScanCode, BYTE *lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
//C        int ToUnicode(UINT wVirtKey,UINT wScanCode,const BYTE *lpKeyState,LPWSTR pwszBuff,int cchBuff,UINT wFlags);
int  ToUnicode(UINT wVirtKey, UINT wScanCode, BYTE *lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
//C        DWORD OemKeyScan(WORD wOemChar);
DWORD  OemKeyScan(WORD wOemChar);
//C        SHORT VkKeyScanA(CHAR ch);
SHORT  VkKeyScanA(CHAR ch);
//C        SHORT VkKeyScanW(WCHAR ch);
SHORT  VkKeyScanW(WCHAR ch);
//C        SHORT VkKeyScanExA(CHAR ch,HKL dwhkl);
SHORT  VkKeyScanExA(CHAR ch, HKL dwhkl);
//C        SHORT VkKeyScanExW(WCHAR ch,HKL dwhkl);
SHORT  VkKeyScanExW(WCHAR ch, HKL dwhkl);
//C        void keybd_event(BYTE bVk,BYTE bScan,DWORD dwFlags,ULONG_PTR dwExtraInfo);
void  keybd_event(BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);
//C        void mouse_event(DWORD dwFlags,DWORD dx,DWORD dy,DWORD dwData,ULONG_PTR dwExtraInfo);
void  mouse_event(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
//C       typedef struct tagMOUSEINPUT {
//C         LONG dx;
//C         LONG dy;
//C         DWORD mouseData;
//C         DWORD dwFlags;
//C         DWORD time;
//C         ULONG_PTR dwExtraInfo;
//C       } MOUSEINPUT,*PMOUSEINPUT,*LPMOUSEINPUT;
struct tagMOUSEINPUT
{
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}
alias tagMOUSEINPUT MOUSEINPUT;
alias tagMOUSEINPUT *PMOUSEINPUT;
alias tagMOUSEINPUT *LPMOUSEINPUT;
//C       typedef struct tagKEYBDINPUT {
//C         WORD wVk;
//C         WORD wScan;
//C         DWORD dwFlags;
//C         DWORD time;
//C         ULONG_PTR dwExtraInfo;
//C       } KEYBDINPUT,*PKEYBDINPUT,*LPKEYBDINPUT;
struct tagKEYBDINPUT
{
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
}
alias tagKEYBDINPUT KEYBDINPUT;
alias tagKEYBDINPUT *PKEYBDINPUT;
alias tagKEYBDINPUT *LPKEYBDINPUT;
//C       typedef struct tagHARDWAREINPUT {
//C         DWORD uMsg;
//C         WORD wParamL;
//C         WORD wParamH;
//C       } HARDWAREINPUT,*PHARDWAREINPUT,*LPHARDWAREINPUT;
struct tagHARDWAREINPUT
{
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
}
alias tagHARDWAREINPUT HARDWAREINPUT;
alias tagHARDWAREINPUT *PHARDWAREINPUT;
alias tagHARDWAREINPUT *LPHARDWAREINPUT;
//C       typedef struct tagINPUT {
//C         DWORD type;
//C          union {
//C           MOUSEINPUT mi;
//C           KEYBDINPUT ki;
//C           HARDWAREINPUT hi;
//C         } ;
union _N76
{
    MOUSEINPUT mi;
    KEYBDINPUT ki;
    HARDWAREINPUT hi;
}
//C       } INPUT,*PINPUT,*LPINPUT;
struct tagINPUT
{
    DWORD type;
    MOUSEINPUT mi;
    KEYBDINPUT ki;
    HARDWAREINPUT hi;
}
alias tagINPUT INPUT;
alias tagINPUT *PINPUT;
alias tagINPUT *LPINPUT;
//C        UINT SendInput(UINT cInputs,LPINPUT pInputs,int cbSize);
UINT  SendInput(UINT cInputs, LPINPUT pInputs, int cbSize);
//C       typedef struct tagLASTINPUTINFO {
//C         UINT cbSize;
//C         DWORD dwTime;
//C       } LASTINPUTINFO,*PLASTINPUTINFO;
struct tagLASTINPUTINFO
{
    UINT cbSize;
    DWORD dwTime;
}
alias tagLASTINPUTINFO LASTINPUTINFO;
alias tagLASTINPUTINFO *PLASTINPUTINFO;
//C        WINBOOL GetLastInputInfo(PLASTINPUTINFO plii);
WINBOOL  GetLastInputInfo(PLASTINPUTINFO plii);
//C        UINT MapVirtualKeyA(UINT uCode,UINT uMapType);
UINT  MapVirtualKeyA(UINT uCode, UINT uMapType);
//C        UINT MapVirtualKeyW(UINT uCode,UINT uMapType);
UINT  MapVirtualKeyW(UINT uCode, UINT uMapType);
//C        UINT MapVirtualKeyExA(UINT uCode,UINT uMapType,HKL dwhkl);
UINT  MapVirtualKeyExA(UINT uCode, UINT uMapType, HKL dwhkl);
//C        UINT MapVirtualKeyExW(UINT uCode,UINT uMapType,HKL dwhkl);
UINT  MapVirtualKeyExW(UINT uCode, UINT uMapType, HKL dwhkl);
//C        WINBOOL GetInputState(void);
WINBOOL  GetInputState();
//C        DWORD GetQueueStatus(UINT flags);
DWORD  GetQueueStatus(UINT flags);
//C        HWND GetCapture(void);
HWND  GetCapture();
//C        HWND SetCapture(HWND hWnd);
HWND  SetCapture(HWND hWnd);
//C        WINBOOL ReleaseCapture(void);
WINBOOL  ReleaseCapture();
//C        DWORD MsgWaitForMultipleObjects(DWORD nCount,const HANDLE *pHandles,WINBOOL fWaitAll,DWORD dwMilliseconds,DWORD dwWakeMask);
DWORD  MsgWaitForMultipleObjects(DWORD nCount, HANDLE *pHandles, WINBOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
//C        DWORD MsgWaitForMultipleObjectsEx(DWORD nCount,const HANDLE *pHandles,DWORD dwMilliseconds,DWORD dwWakeMask,DWORD dwFlags);
DWORD  MsgWaitForMultipleObjectsEx(DWORD nCount, HANDLE *pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);
//C        UINT_PTR SetTimer(HWND hWnd,UINT_PTR nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc);
UINT_PTR  SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
//C        WINBOOL KillTimer(HWND hWnd,UINT_PTR uIDEvent);
WINBOOL  KillTimer(HWND hWnd, UINT_PTR uIDEvent);
//C        WINBOOL IsWindowUnicode(HWND hWnd);
WINBOOL  IsWindowUnicode(HWND hWnd);
//C        WINBOOL EnableWindow(HWND hWnd,WINBOOL bEnable);
WINBOOL  EnableWindow(HWND hWnd, WINBOOL bEnable);
//C        WINBOOL IsWindowEnabled(HWND hWnd);
WINBOOL  IsWindowEnabled(HWND hWnd);
//C        HACCEL LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName);
HACCEL  LoadAcceleratorsA(HINSTANCE hInstance, LPCSTR lpTableName);
//C        HACCEL LoadAcceleratorsW(HINSTANCE hInstance,LPCWSTR lpTableName);
HACCEL  LoadAcceleratorsW(HINSTANCE hInstance, LPCWSTR lpTableName);
//C        HACCEL CreateAcceleratorTableA(LPACCEL paccel,int cAccel);
HACCEL  CreateAcceleratorTableA(LPACCEL paccel, int cAccel);
//C        HACCEL CreateAcceleratorTableW(LPACCEL paccel,int cAccel);
HACCEL  CreateAcceleratorTableW(LPACCEL paccel, int cAccel);
//C        WINBOOL DestroyAcceleratorTable(HACCEL hAccel);
WINBOOL  DestroyAcceleratorTable(HACCEL hAccel);
//C        int CopyAcceleratorTableA(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
int  CopyAcceleratorTableA(HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
//C        int CopyAcceleratorTableW(HACCEL hAccelSrc,LPACCEL lpAccelDst,int cAccelEntries);
int  CopyAcceleratorTableW(HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
//C        int TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
int  TranslateAcceleratorA(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
//C        int TranslateAcceleratorW(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
int  TranslateAcceleratorW(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
//C        int GetSystemMetrics(int nIndex);
int  GetSystemMetrics(int nIndex);
//C        HMENU LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName);
HMENU  LoadMenuA(HINSTANCE hInstance, LPCSTR lpMenuName);
//C        HMENU LoadMenuW(HINSTANCE hInstance,LPCWSTR lpMenuName);
HMENU  LoadMenuW(HINSTANCE hInstance, LPCWSTR lpMenuName);
//C        HMENU LoadMenuIndirectA(const MENUTEMPLATEA *lpMenuTemplate);
HMENU  LoadMenuIndirectA(MENUTEMPLATEA *lpMenuTemplate);
//C        HMENU LoadMenuIndirectW(const MENUTEMPLATEW *lpMenuTemplate);
HMENU  LoadMenuIndirectW(MENUTEMPLATEW *lpMenuTemplate);
//C        HMENU GetMenu(HWND hWnd);
HMENU  GetMenu(HWND hWnd);
//C        WINBOOL SetMenu(HWND hWnd,HMENU hMenu);
WINBOOL  SetMenu(HWND hWnd, HMENU hMenu);
//C        WINBOOL ChangeMenuA(HMENU hMenu,UINT cmd,LPCSTR lpszNewItem,UINT cmdInsert,UINT flags);
WINBOOL  ChangeMenuA(HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags);
//C        WINBOOL ChangeMenuW(HMENU hMenu,UINT cmd,LPCWSTR lpszNewItem,UINT cmdInsert,UINT flags);
WINBOOL  ChangeMenuW(HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags);
//C        WINBOOL HiliteMenuItem(HWND hWnd,HMENU hMenu,UINT uIDHiliteItem,UINT uHilite);
WINBOOL  HiliteMenuItem(HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite);
//C        int GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int cchMax,UINT flags);
int  GetMenuStringA(HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags);
//C        int GetMenuStringW(HMENU hMenu,UINT uIDItem,LPWSTR lpString,int cchMax,UINT flags);
int  GetMenuStringW(HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags);
//C        UINT GetMenuState(HMENU hMenu,UINT uId,UINT uFlags);
UINT  GetMenuState(HMENU hMenu, UINT uId, UINT uFlags);
//C        WINBOOL DrawMenuBar(HWND hWnd);
WINBOOL  DrawMenuBar(HWND hWnd);
//C        HMENU GetSystemMenu(HWND hWnd,WINBOOL bRevert);
HMENU  GetSystemMenu(HWND hWnd, WINBOOL bRevert);
//C        HMENU CreateMenu(void);
HMENU  CreateMenu();
//C        HMENU CreatePopupMenu(void);
HMENU  CreatePopupMenu();
//C        WINBOOL DestroyMenu(HMENU hMenu);
WINBOOL  DestroyMenu(HMENU hMenu);
//C        DWORD CheckMenuItem(HMENU hMenu,UINT uIDCheckItem,UINT uCheck);
DWORD  CheckMenuItem(HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
//C        WINBOOL EnableMenuItem(HMENU hMenu,UINT uIDEnableItem,UINT uEnable);
WINBOOL  EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
//C        HMENU GetSubMenu(HMENU hMenu,int nPos);
HMENU  GetSubMenu(HMENU hMenu, int nPos);
//C        UINT GetMenuItemID(HMENU hMenu,int nPos);
UINT  GetMenuItemID(HMENU hMenu, int nPos);
//C        int GetMenuItemCount(HMENU hMenu);
int  GetMenuItemCount(HMENU hMenu);
//C        WINBOOL InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
WINBOOL  InsertMenuA(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
//C        WINBOOL InsertMenuW(HMENU hMenu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
WINBOOL  InsertMenuW(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
//C        WINBOOL AppendMenuA(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
WINBOOL  AppendMenuA(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
//C        WINBOOL AppendMenuW(HMENU hMenu,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
WINBOOL  AppendMenuW(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
//C        WINBOOL ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCSTR lpNewItem);
WINBOOL  ModifyMenuA(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
//C        WINBOOL ModifyMenuW(HMENU hMnu,UINT uPosition,UINT uFlags,UINT_PTR uIDNewItem,LPCWSTR lpNewItem);
WINBOOL  ModifyMenuW(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
//C        WINBOOL RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
WINBOOL  RemoveMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
//C        WINBOOL DeleteMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
WINBOOL  DeleteMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
//C        WINBOOL SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked);
WINBOOL  SetMenuItemBitmaps(HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);
//C        LONG GetMenuCheckMarkDimensions(void);
LONG  GetMenuCheckMarkDimensions();
//C        WINBOOL TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,const RECT *prcRect);
WINBOOL  TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, RECT *prcRect);
//C       typedef struct tagTPMPARAMS {
//C         UINT cbSize;
//C         RECT rcExclude;
//C       } TPMPARAMS;
struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
}
alias tagTPMPARAMS TPMPARAMS;
//C       typedef TPMPARAMS *LPTPMPARAMS;
alias TPMPARAMS *LPTPMPARAMS;
//C        WINBOOL TrackPopupMenuEx(HMENU,UINT,int,int,HWND,LPTPMPARAMS);
WINBOOL  TrackPopupMenuEx(HMENU , UINT , int , int , HWND , LPTPMPARAMS );
//C       typedef struct tagMENUINFO {
//C         DWORD cbSize;
//C         DWORD fMask;
//C         DWORD dwStyle;
//C         UINT cyMax;
//C         HBRUSH hbrBack;
//C         DWORD dwContextHelpID;
//C         ULONG_PTR dwMenuData;
//C       } MENUINFO,*LPMENUINFO;
struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
}
alias tagMENUINFO MENUINFO;
alias tagMENUINFO *LPMENUINFO;
//C       typedef MENUINFO const *LPCMENUINFO;
alias MENUINFO *LPCMENUINFO;
//C        WINBOOL GetMenuInfo(HMENU,LPMENUINFO);
WINBOOL  GetMenuInfo(HMENU , LPMENUINFO );
//C        WINBOOL SetMenuInfo(HMENU,LPCMENUINFO);
WINBOOL  SetMenuInfo(HMENU , LPCMENUINFO );
//C        WINBOOL EndMenu(void);
WINBOOL  EndMenu();
//C       typedef struct tagMENUGETOBJECTINFO {
//C         DWORD dwFlags;
//C         UINT uPos;
//C         HMENU hmenu;
//C         PVOID riid;
//C         PVOID pvObj;
//C       } MENUGETOBJECTINFO,*PMENUGETOBJECTINFO;
struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
}
alias tagMENUGETOBJECTINFO MENUGETOBJECTINFO;
alias tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;
//C       typedef struct tagMENUITEMINFOA {
//C         UINT cbSize;
//C         UINT fMask;
//C         UINT fType;
//C         UINT fState;
//C         UINT wID;
//C         HMENU hSubMenu;
//C         HBITMAP hbmpChecked;
//C         HBITMAP hbmpUnchecked;
//C         ULONG_PTR dwItemData;
//C         LPSTR dwTypeData;
//C         UINT cch;
//C         HBITMAP hbmpItem;
//C       } MENUITEMINFOA,*LPMENUITEMINFOA;
struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
}
alias tagMENUITEMINFOA MENUITEMINFOA;
alias tagMENUITEMINFOA *LPMENUITEMINFOA;
//C       typedef struct tagMENUITEMINFOW {
//C         UINT cbSize;
//C         UINT fMask;
//C         UINT fType;
//C         UINT fState;
//C         UINT wID;
//C         HMENU hSubMenu;
//C         HBITMAP hbmpChecked;
//C         HBITMAP hbmpUnchecked;
//C         ULONG_PTR dwItemData;
//C         LPWSTR dwTypeData;
//C         UINT cch;
//C         HBITMAP hbmpItem;
//C       } MENUITEMINFOW,*LPMENUITEMINFOW;
struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
}
alias tagMENUITEMINFOW MENUITEMINFOW;
alias tagMENUITEMINFOW *LPMENUITEMINFOW;
//C       typedef MENUITEMINFOA MENUITEMINFO;
alias MENUITEMINFOA MENUITEMINFO;
//C       typedef LPMENUITEMINFOA LPMENUITEMINFO;
alias LPMENUITEMINFOA LPMENUITEMINFO;
//C       typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
alias MENUITEMINFOA *LPCMENUITEMINFOA;
//C       typedef MENUITEMINFOW const *LPCMENUITEMINFOW;
alias MENUITEMINFOW *LPCMENUITEMINFOW;
//C       typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
alias LPCMENUITEMINFOA LPCMENUITEMINFO;
//C        WINBOOL InsertMenuItemA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOA lpmi);
WINBOOL  InsertMenuItemA(HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOA lpmi);
//C        WINBOOL InsertMenuItemW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPCMENUITEMINFOW lpmi);
WINBOOL  InsertMenuItemW(HMENU hmenu, UINT item, WINBOOL fByPosition, LPCMENUITEMINFOW lpmi);
//C        WINBOOL GetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOA lpmii);
WINBOOL  GetMenuItemInfoA(HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOA lpmii);
//C        WINBOOL GetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPosition,LPMENUITEMINFOW lpmii);
WINBOOL  GetMenuItemInfoW(HMENU hmenu, UINT item, WINBOOL fByPosition, LPMENUITEMINFOW lpmii);
//C        WINBOOL SetMenuItemInfoA(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOA lpmii);
WINBOOL  SetMenuItemInfoA(HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOA lpmii);
//C        WINBOOL SetMenuItemInfoW(HMENU hmenu,UINT item,WINBOOL fByPositon,LPCMENUITEMINFOW lpmii);
WINBOOL  SetMenuItemInfoW(HMENU hmenu, UINT item, WINBOOL fByPositon, LPCMENUITEMINFOW lpmii);
//C        UINT GetMenuDefaultItem(HMENU hMenu,UINT fByPos,UINT gmdiFlags);
UINT  GetMenuDefaultItem(HMENU hMenu, UINT fByPos, UINT gmdiFlags);
//C        WINBOOL SetMenuDefaultItem(HMENU hMenu,UINT uItem,UINT fByPos);
WINBOOL  SetMenuDefaultItem(HMENU hMenu, UINT uItem, UINT fByPos);
//C        WINBOOL GetMenuItemRect(HWND hWnd,HMENU hMenu,UINT uItem,LPRECT lprcItem);
WINBOOL  GetMenuItemRect(HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
//C        int MenuItemFromPoint(HWND hWnd,HMENU hMenu,POINT ptScreen);
int  MenuItemFromPoint(HWND hWnd, HMENU hMenu, POINT ptScreen);
//C       typedef struct tagDROPSTRUCT {
//C         HWND hwndSource;
//C         HWND hwndSink;
//C         DWORD wFmt;
//C         ULONG_PTR dwData;
//C         POINT ptDrop;
//C         DWORD dwControlData;
//C       } DROPSTRUCT,*PDROPSTRUCT,*LPDROPSTRUCT;
struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
}
alias tagDROPSTRUCT DROPSTRUCT;
alias tagDROPSTRUCT *PDROPSTRUCT;
alias tagDROPSTRUCT *LPDROPSTRUCT;
//C        DWORD DragObject(HWND hwndParent,HWND hwndFrom,UINT fmt,ULONG_PTR data,HCURSOR hcur);
DWORD  DragObject(HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur);
//C        WINBOOL DragDetect(HWND hwnd,POINT pt);
WINBOOL  DragDetect(HWND hwnd, POINT pt);
//C        WINBOOL DrawIcon(HDC hDC,int X,int Y,HICON hIcon);
WINBOOL  DrawIcon(HDC hDC, int X, int Y, HICON hIcon);
//C       typedef struct tagDRAWTEXTPARAMS {
//C         UINT cbSize;
//C         int iTabLength;
//C         int iLeftMargin;
//C         int iRightMargin;
//C         UINT uiLengthDrawn;
//C       } DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;
struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
}
alias tagDRAWTEXTPARAMS DRAWTEXTPARAMS;
alias tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;
//C        int DrawTextA(HDC hdc,LPCSTR lpchText,int cchText,LPRECT lprc,UINT format);
int  DrawTextA(HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format);
//C        int DrawTextW(HDC hdc,LPCWSTR lpchText,int cchText,LPRECT lprc,UINT format);
int  DrawTextW(HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format);
//C        int DrawTextExA(HDC hdc,LPSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
int  DrawTextExA(HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
//C        int DrawTextExW(HDC hdc,LPWSTR lpchText,int cchText,LPRECT lprc,UINT format,LPDRAWTEXTPARAMS lpdtp);
int  DrawTextExW(HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
//C        WINBOOL GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
WINBOOL  GrayStringA(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
//C        WINBOOL GrayStringW(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
WINBOOL  GrayStringW(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
//C        WINBOOL DrawStateA(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
WINBOOL  DrawStateA(HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
//C        WINBOOL DrawStateW(HDC hdc,HBRUSH hbrFore,DRAWSTATEPROC qfnCallBack,LPARAM lData,WPARAM wData,int x,int y,int cx,int cy,UINT uFlags);
WINBOOL  DrawStateW(HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
//C        LONG TabbedTextOutA(HDC hdc,int x,int y,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
LONG  TabbedTextOutA(HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, INT *lpnTabStopPositions, int nTabOrigin);
//C        LONG TabbedTextOutW(HDC hdc,int x,int y,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions,int nTabOrigin);
LONG  TabbedTextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, INT *lpnTabStopPositions, int nTabOrigin);
//C        DWORD GetTabbedTextExtentA(HDC hdc,LPCSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
DWORD  GetTabbedTextExtentA(HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, INT *lpnTabStopPositions);
//C        DWORD GetTabbedTextExtentW(HDC hdc,LPCWSTR lpString,int chCount,int nTabPositions,const INT *lpnTabStopPositions);
DWORD  GetTabbedTextExtentW(HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, INT *lpnTabStopPositions);
//C        WINBOOL UpdateWindow(HWND hWnd);
WINBOOL  UpdateWindow(HWND hWnd);
//C        HWND SetActiveWindow(HWND hWnd);
HWND  SetActiveWindow(HWND hWnd);
//C        HWND GetForegroundWindow(void);
HWND  GetForegroundWindow();
//C        WINBOOL PaintDesktop(HDC hdc);
WINBOOL  PaintDesktop(HDC hdc);
//C        void SwitchToThisWindow(HWND hwnd,WINBOOL fUnknown);
void  SwitchToThisWindow(HWND hwnd, WINBOOL fUnknown);
//C        WINBOOL SetForegroundWindow(HWND hWnd);
WINBOOL  SetForegroundWindow(HWND hWnd);
//C        WINBOOL AllowSetForegroundWindow(DWORD dwProcessId);
WINBOOL  AllowSetForegroundWindow(DWORD dwProcessId);
//C        WINBOOL LockSetForegroundWindow(UINT uLockCode);
WINBOOL  LockSetForegroundWindow(UINT uLockCode);
//C        HWND WindowFromDC(HDC hDC);
HWND  WindowFromDC(HDC hDC);
//C        HDC GetDC(HWND hWnd);
HDC  GetDC(HWND hWnd);
//C        HDC GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags);
HDC  GetDCEx(HWND hWnd, HRGN hrgnClip, DWORD flags);
//C        HDC GetWindowDC(HWND hWnd);
HDC  GetWindowDC(HWND hWnd);
//C        int ReleaseDC(HWND hWnd,HDC hDC);
int  ReleaseDC(HWND hWnd, HDC hDC);
//C        HDC BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint);
HDC  BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint);
//C        WINBOOL EndPaint(HWND hWnd,const PAINTSTRUCT *lpPaint);
WINBOOL  EndPaint(HWND hWnd, PAINTSTRUCT *lpPaint);
//C        WINBOOL GetUpdateRect(HWND hWnd,LPRECT lpRect,WINBOOL bErase);
WINBOOL  GetUpdateRect(HWND hWnd, LPRECT lpRect, WINBOOL bErase);
//C        int GetUpdateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
int  GetUpdateRgn(HWND hWnd, HRGN hRgn, WINBOOL bErase);
//C        int SetWindowRgn(HWND hWnd,HRGN hRgn,WINBOOL bRedraw);
int  SetWindowRgn(HWND hWnd, HRGN hRgn, WINBOOL bRedraw);
//C        int GetWindowRgn(HWND hWnd,HRGN hRgn);
int  GetWindowRgn(HWND hWnd, HRGN hRgn);
//C        int GetWindowRgnBox(HWND hWnd,LPRECT lprc);
int  GetWindowRgnBox(HWND hWnd, LPRECT lprc);
//C        int ExcludeUpdateRgn(HDC hDC,HWND hWnd);
int  ExcludeUpdateRgn(HDC hDC, HWND hWnd);
//C        WINBOOL InvalidateRect(HWND hWnd,const RECT *lpRect,WINBOOL bErase);
WINBOOL  InvalidateRect(HWND hWnd, RECT *lpRect, WINBOOL bErase);
//C        WINBOOL ValidateRect(HWND hWnd,const RECT *lpRect);
WINBOOL  ValidateRect(HWND hWnd, RECT *lpRect);
//C        WINBOOL InvalidateRgn(HWND hWnd,HRGN hRgn,WINBOOL bErase);
WINBOOL  InvalidateRgn(HWND hWnd, HRGN hRgn, WINBOOL bErase);
//C        WINBOOL ValidateRgn(HWND hWnd,HRGN hRgn);
WINBOOL  ValidateRgn(HWND hWnd, HRGN hRgn);
//C        WINBOOL RedrawWindow(HWND hWnd,const RECT *lprcUpdate,HRGN hrgnUpdate,UINT flags);
WINBOOL  RedrawWindow(HWND hWnd, RECT *lprcUpdate, HRGN hrgnUpdate, UINT flags);
//C        WINBOOL LockWindowUpdate(HWND hWndLock);
WINBOOL  LockWindowUpdate(HWND hWndLock);
//C        WINBOOL ScrollWindow(HWND hWnd,int XAmount,int YAmount,const RECT *lpRect,const RECT *lpClipRect);
WINBOOL  ScrollWindow(HWND hWnd, int XAmount, int YAmount, RECT *lpRect, RECT *lpClipRect);
//C        WINBOOL ScrollDC(HDC hDC,int dx,int dy,const RECT *lprcScroll,const RECT *lprcClip,HRGN hrgnUpdate,LPRECT lprcUpdate);
WINBOOL  ScrollDC(HDC hDC, int dx, int dy, RECT *lprcScroll, RECT *lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);
//C        int ScrollWindowEx(HWND hWnd,int dx,int dy,const RECT *prcScroll,const RECT *prcClip,HRGN hrgnUpdate,LPRECT prcUpdate,UINT flags);
int  ScrollWindowEx(HWND hWnd, int dx, int dy, RECT *prcScroll, RECT *prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);
//C        int SetScrollPos(HWND hWnd,int nBar,int nPos,WINBOOL bRedraw);
int  SetScrollPos(HWND hWnd, int nBar, int nPos, WINBOOL bRedraw);
//C        int GetScrollPos(HWND hWnd,int nBar);
int  GetScrollPos(HWND hWnd, int nBar);
//C        WINBOOL SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,WINBOOL bRedraw);
WINBOOL  SetScrollRange(HWND hWnd, int nBar, int nMinPos, int nMaxPos, WINBOOL bRedraw);
//C        WINBOOL GetScrollRange(HWND hWnd,int nBar,LPINT lpMinPos,LPINT lpMaxPos);
WINBOOL  GetScrollRange(HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos);
//C        WINBOOL ShowScrollBar(HWND hWnd,int wBar,WINBOOL bShow);
WINBOOL  ShowScrollBar(HWND hWnd, int wBar, WINBOOL bShow);
//C        WINBOOL EnableScrollBar(HWND hWnd,UINT wSBflags,UINT wArrows);
WINBOOL  EnableScrollBar(HWND hWnd, UINT wSBflags, UINT wArrows);
//C        WINBOOL SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
WINBOOL  SetPropA(HWND hWnd, LPCSTR lpString, HANDLE hData);
//C        WINBOOL SetPropW(HWND hWnd,LPCWSTR lpString,HANDLE hData);
WINBOOL  SetPropW(HWND hWnd, LPCWSTR lpString, HANDLE hData);
//C        HANDLE GetPropA(HWND hWnd,LPCSTR lpString);
HANDLE  GetPropA(HWND hWnd, LPCSTR lpString);
//C        HANDLE GetPropW(HWND hWnd,LPCWSTR lpString);
HANDLE  GetPropW(HWND hWnd, LPCWSTR lpString);
//C        HANDLE RemovePropA(HWND hWnd,LPCSTR lpString);
HANDLE  RemovePropA(HWND hWnd, LPCSTR lpString);
//C        HANDLE RemovePropW(HWND hWnd,LPCWSTR lpString);
HANDLE  RemovePropW(HWND hWnd, LPCWSTR lpString);
//C        int EnumPropsExA(HWND hWnd,PROPENUMPROCEXA lpEnumFunc,LPARAM lParam);
int  EnumPropsExA(HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam);
//C        int EnumPropsExW(HWND hWnd,PROPENUMPROCEXW lpEnumFunc,LPARAM lParam);
int  EnumPropsExW(HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam);
//C        int EnumPropsA(HWND hWnd,PROPENUMPROCA lpEnumFunc);
int  EnumPropsA(HWND hWnd, PROPENUMPROCA lpEnumFunc);
//C        int EnumPropsW(HWND hWnd,PROPENUMPROCW lpEnumFunc);
int  EnumPropsW(HWND hWnd, PROPENUMPROCW lpEnumFunc);
//C        WINBOOL SetWindowTextA(HWND hWnd,LPCSTR lpString);
WINBOOL  SetWindowTextA(HWND hWnd, LPCSTR lpString);
//C        WINBOOL SetWindowTextW(HWND hWnd,LPCWSTR lpString);
WINBOOL  SetWindowTextW(HWND hWnd, LPCWSTR lpString);
//C        int GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
int  GetWindowTextA(HWND hWnd, LPSTR lpString, int nMaxCount);
//C        int GetWindowTextW(HWND hWnd,LPWSTR lpString,int nMaxCount);
int  GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount);
//C        int GetWindowTextLengthA(HWND hWnd);
int  GetWindowTextLengthA(HWND hWnd);
//C        int GetWindowTextLengthW(HWND hWnd);
int  GetWindowTextLengthW(HWND hWnd);
//C        WINBOOL GetClientRect(HWND hWnd,LPRECT lpRect);
WINBOOL  GetClientRect(HWND hWnd, LPRECT lpRect);
//C        WINBOOL GetWindowRect(HWND hWnd,LPRECT lpRect);
WINBOOL  GetWindowRect(HWND hWnd, LPRECT lpRect);
//C        WINBOOL AdjustWindowRect(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu);
WINBOOL  AdjustWindowRect(LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu);
//C        WINBOOL AdjustWindowRectEx(LPRECT lpRect,DWORD dwStyle,WINBOOL bMenu,DWORD dwExStyle);
WINBOOL  AdjustWindowRectEx(LPRECT lpRect, DWORD dwStyle, WINBOOL bMenu, DWORD dwExStyle);
//C       typedef struct tagHELPINFO {
//C         UINT cbSize;
//C         int iContextType;
//C         int iCtrlId;
//C         HANDLE hItemHandle;
//C         DWORD_PTR dwContextId;
//C         POINT MousePos;
//C       } HELPINFO,*LPHELPINFO;
struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
}
alias tagHELPINFO HELPINFO;
alias tagHELPINFO *LPHELPINFO;
//C        WINBOOL SetWindowContextHelpId(HWND,DWORD);
WINBOOL  SetWindowContextHelpId(HWND , DWORD );
//C        DWORD GetWindowContextHelpId(HWND);
DWORD  GetWindowContextHelpId(HWND );
//C        WINBOOL SetMenuContextHelpId(HMENU,DWORD);
WINBOOL  SetMenuContextHelpId(HMENU , DWORD );
//C        DWORD GetMenuContextHelpId(HMENU);
DWORD  GetMenuContextHelpId(HMENU );
//C        int MessageBoxA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType);
int  MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
//C        int MessageBoxW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType);
int  MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
//C        int MessageBoxExA(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType,WORD wLanguageId);
int  MessageBoxExA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId);
//C        int MessageBoxExW(HWND hWnd,LPCWSTR lpText,LPCWSTR lpCaption,UINT uType,WORD wLanguageId);
int  MessageBoxExW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);
//C       typedef void ( *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
alias void  function(LPHELPINFO lpHelpInfo)MSGBOXCALLBACK;
//C       typedef struct tagMSGBOXPARAMSA {
//C         UINT cbSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         LPCSTR lpszText;
//C         LPCSTR lpszCaption;
//C         DWORD dwStyle;
//C         LPCSTR lpszIcon;
//C         DWORD_PTR dwContextHelpId;
//C         MSGBOXCALLBACK lpfnMsgBoxCallback;
//C         DWORD dwLanguageId;
//C       } MSGBOXPARAMSA,*PMSGBOXPARAMSA,*LPMSGBOXPARAMSA;
struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
}
alias tagMSGBOXPARAMSA MSGBOXPARAMSA;
alias tagMSGBOXPARAMSA *PMSGBOXPARAMSA;
alias tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;
//C       typedef struct tagMSGBOXPARAMSW {
//C         UINT cbSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         LPCWSTR lpszText;
//C         LPCWSTR lpszCaption;
//C         DWORD dwStyle;
//C         LPCWSTR lpszIcon;
//C         DWORD_PTR dwContextHelpId;
//C         MSGBOXCALLBACK lpfnMsgBoxCallback;
//C         DWORD dwLanguageId;
//C       } MSGBOXPARAMSW,*PMSGBOXPARAMSW,*LPMSGBOXPARAMSW;
struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
}
alias tagMSGBOXPARAMSW MSGBOXPARAMSW;
alias tagMSGBOXPARAMSW *PMSGBOXPARAMSW;
alias tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;
//C       typedef MSGBOXPARAMSA MSGBOXPARAMS;
alias MSGBOXPARAMSA MSGBOXPARAMS;
//C       typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
alias PMSGBOXPARAMSA PMSGBOXPARAMS;
//C       typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
alias LPMSGBOXPARAMSA LPMSGBOXPARAMS;
//C        int MessageBoxIndirectA(const MSGBOXPARAMSA *lpmbp);
int  MessageBoxIndirectA(MSGBOXPARAMSA *lpmbp);
//C        int MessageBoxIndirectW(const MSGBOXPARAMSW *lpmbp);
int  MessageBoxIndirectW(MSGBOXPARAMSW *lpmbp);
//C        WINBOOL MessageBeep(UINT uType);
WINBOOL  MessageBeep(UINT uType);
//C        int ShowCursor(WINBOOL bShow);
int  ShowCursor(WINBOOL bShow);
//C        WINBOOL SetCursorPos(int X,int Y);
WINBOOL  SetCursorPos(int X, int Y);
//C        HCURSOR SetCursor(HCURSOR hCursor);
HCURSOR  SetCursor(HCURSOR hCursor);
//C        WINBOOL GetCursorPos(LPPOINT lpPoint);
WINBOOL  GetCursorPos(LPPOINT lpPoint);
//C        WINBOOL ClipCursor(const RECT *lpRect);
WINBOOL  ClipCursor(RECT *lpRect);
//C        WINBOOL GetClipCursor(LPRECT lpRect);
WINBOOL  GetClipCursor(LPRECT lpRect);
//C        HCURSOR GetCursor(void);
HCURSOR  GetCursor();
//C        WINBOOL CreateCaret(HWND hWnd,HBITMAP hBitmap,int nWidth,int nHeight);
WINBOOL  CreateCaret(HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight);
//C        UINT GetCaretBlinkTime(void);
UINT  GetCaretBlinkTime();
//C        WINBOOL SetCaretBlinkTime(UINT uMSeconds);
WINBOOL  SetCaretBlinkTime(UINT uMSeconds);
//C        WINBOOL DestroyCaret(void);
WINBOOL  DestroyCaret();
//C        WINBOOL HideCaret(HWND hWnd);
WINBOOL  HideCaret(HWND hWnd);
//C        WINBOOL ShowCaret(HWND hWnd);
WINBOOL  ShowCaret(HWND hWnd);
//C        WINBOOL SetCaretPos(int X,int Y);
WINBOOL  SetCaretPos(int X, int Y);
//C        WINBOOL GetCaretPos(LPPOINT lpPoint);
WINBOOL  GetCaretPos(LPPOINT lpPoint);
//C        WINBOOL ClientToScreen(HWND hWnd,LPPOINT lpPoint);
WINBOOL  ClientToScreen(HWND hWnd, LPPOINT lpPoint);
//C        WINBOOL ScreenToClient(HWND hWnd,LPPOINT lpPoint);
WINBOOL  ScreenToClient(HWND hWnd, LPPOINT lpPoint);
//C        int MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints);
int  MapWindowPoints(HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
//C        HWND WindowFromPoint(POINT Point);
HWND  WindowFromPoint(POINT Point);
//C        HWND ChildWindowFromPoint(HWND hWndParent,POINT Point);
HWND  ChildWindowFromPoint(HWND hWndParent, POINT Point);
//C        HWND ChildWindowFromPointEx(HWND hwnd,POINT pt,UINT flags);
HWND  ChildWindowFromPointEx(HWND hwnd, POINT pt, UINT flags);
//C        DWORD GetSysColor(int nIndex);
DWORD  GetSysColor(int nIndex);
//C        HBRUSH GetSysColorBrush(int nIndex);
HBRUSH  GetSysColorBrush(int nIndex);
//C        WINBOOL SetSysColors(int cElements,const INT *lpaElements,const COLORREF *lpaRgbValues);
WINBOOL  SetSysColors(int cElements, INT *lpaElements, COLORREF *lpaRgbValues);
//C        WINBOOL DrawFocusRect(HDC hDC,const RECT *lprc);
WINBOOL  DrawFocusRect(HDC hDC, RECT *lprc);
//C        int FillRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
int  FillRect(HDC hDC, RECT *lprc, HBRUSH hbr);
//C        int FrameRect(HDC hDC,const RECT *lprc,HBRUSH hbr);
int  FrameRect(HDC hDC, RECT *lprc, HBRUSH hbr);
//C        WINBOOL InvertRect(HDC hDC,const RECT *lprc);
WINBOOL  InvertRect(HDC hDC, RECT *lprc);
//C        WINBOOL SetRect(LPRECT lprc,int xLeft,int yTop,int xRight,int yBottom);
WINBOOL  SetRect(LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
//C        WINBOOL SetRectEmpty(LPRECT lprc);
WINBOOL  SetRectEmpty(LPRECT lprc);
//C        WINBOOL CopyRect(LPRECT lprcDst,const RECT *lprcSrc);
WINBOOL  CopyRect(LPRECT lprcDst, RECT *lprcSrc);
//C        WINBOOL InflateRect(LPRECT lprc,int dx,int dy);
WINBOOL  InflateRect(LPRECT lprc, int dx, int dy);
//C        WINBOOL IntersectRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
WINBOOL  IntersectRect(LPRECT lprcDst, RECT *lprcSrc1, RECT *lprcSrc2);
//C        WINBOOL UnionRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
WINBOOL  UnionRect(LPRECT lprcDst, RECT *lprcSrc1, RECT *lprcSrc2);
//C        WINBOOL SubtractRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
WINBOOL  SubtractRect(LPRECT lprcDst, RECT *lprcSrc1, RECT *lprcSrc2);
//C        WINBOOL OffsetRect(LPRECT lprc,int dx,int dy);
WINBOOL  OffsetRect(LPRECT lprc, int dx, int dy);
//C        WINBOOL IsRectEmpty(const RECT *lprc);
WINBOOL  IsRectEmpty(RECT *lprc);
//C        WINBOOL EqualRect(const RECT *lprc1,const RECT *lprc2);
WINBOOL  EqualRect(RECT *lprc1, RECT *lprc2);
//C        WINBOOL PtInRect(const RECT *lprc,POINT pt);
WINBOOL  PtInRect(RECT *lprc, POINT pt);
//C        WORD GetWindowWord(HWND hWnd,int nIndex);
WORD  GetWindowWord(HWND hWnd, int nIndex);
//C        WORD SetWindowWord(HWND hWnd,int nIndex,WORD wNewWord);
WORD  SetWindowWord(HWND hWnd, int nIndex, WORD wNewWord);
//C        LONG GetWindowLongA(HWND hWnd,int nIndex);
LONG  GetWindowLongA(HWND hWnd, int nIndex);
//C        LONG GetWindowLongW(HWND hWnd,int nIndex);
LONG  GetWindowLongW(HWND hWnd, int nIndex);
//C        LONG SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong);
LONG  SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong);
//C        LONG SetWindowLongW(HWND hWnd,int nIndex,LONG dwNewLong);
LONG  SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong);
//C        LONG_PTR GetWindowLongPtrA(HWND hWnd,int nIndex);
LONG_PTR  GetWindowLongPtrA(HWND hWnd, int nIndex);
//C        LONG_PTR GetWindowLongPtrW(HWND hWnd,int nIndex);
LONG_PTR  GetWindowLongPtrW(HWND hWnd, int nIndex);
//C        LONG_PTR SetWindowLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
LONG_PTR  SetWindowLongPtrA(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
//C        LONG_PTR SetWindowLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
LONG_PTR  SetWindowLongPtrW(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
//C        WORD GetClassWord(HWND hWnd,int nIndex);
WORD  GetClassWord(HWND hWnd, int nIndex);
//C        WORD SetClassWord(HWND hWnd,int nIndex,WORD wNewWord);
WORD  SetClassWord(HWND hWnd, int nIndex, WORD wNewWord);
//C        DWORD GetClassLongA(HWND hWnd,int nIndex);
DWORD  GetClassLongA(HWND hWnd, int nIndex);
//C        DWORD GetClassLongW(HWND hWnd,int nIndex);
DWORD  GetClassLongW(HWND hWnd, int nIndex);
//C        DWORD SetClassLongA(HWND hWnd,int nIndex,LONG dwNewLong);
DWORD  SetClassLongA(HWND hWnd, int nIndex, LONG dwNewLong);
//C        DWORD SetClassLongW(HWND hWnd,int nIndex,LONG dwNewLong);
DWORD  SetClassLongW(HWND hWnd, int nIndex, LONG dwNewLong);
//C        ULONG_PTR GetClassLongPtrA(HWND hWnd,int nIndex);
ULONG_PTR  GetClassLongPtrA(HWND hWnd, int nIndex);
//C        ULONG_PTR GetClassLongPtrW(HWND hWnd,int nIndex);
ULONG_PTR  GetClassLongPtrW(HWND hWnd, int nIndex);
//C        ULONG_PTR SetClassLongPtrA(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
ULONG_PTR  SetClassLongPtrA(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
//C        ULONG_PTR SetClassLongPtrW(HWND hWnd,int nIndex,LONG_PTR dwNewLong);
ULONG_PTR  SetClassLongPtrW(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
//C        WINBOOL GetProcessDefaultLayout(DWORD *pdwDefaultLayout);
WINBOOL  GetProcessDefaultLayout(DWORD *pdwDefaultLayout);
//C        WINBOOL SetProcessDefaultLayout(DWORD dwDefaultLayout);
WINBOOL  SetProcessDefaultLayout(DWORD dwDefaultLayout);
//C        HWND GetDesktopWindow(void);
HWND  GetDesktopWindow();
//C        HWND GetParent(HWND hWnd);
HWND  GetParent(HWND hWnd);
//C        HWND SetParent(HWND hWndChild,HWND hWndNewParent);
HWND  SetParent(HWND hWndChild, HWND hWndNewParent);
//C        WINBOOL EnumChildWindows(HWND hWndParent,WNDENUMPROC lpEnumFunc,LPARAM lParam);
WINBOOL  EnumChildWindows(HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
//C        HWND FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName);
HWND  FindWindowA(LPCSTR lpClassName, LPCSTR lpWindowName);
//C        HWND FindWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName);
HWND  FindWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName);
//C        HWND FindWindowExA(HWND hWndParent,HWND hWndChildAfter,LPCSTR lpszClass,LPCSTR lpszWindow);
HWND  FindWindowExA(HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);
//C        HWND FindWindowExW(HWND hWndParent,HWND hWndChildAfter,LPCWSTR lpszClass,LPCWSTR lpszWindow);
HWND  FindWindowExW(HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);
//C        HWND GetShellWindow(void);
HWND  GetShellWindow();
//C        WINBOOL RegisterShellHookWindow(HWND hwnd);
WINBOOL  RegisterShellHookWindow(HWND hwnd);
//C        WINBOOL DeregisterShellHookWindow(HWND hwnd);
WINBOOL  DeregisterShellHookWindow(HWND hwnd);
//C        WINBOOL EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
WINBOOL  EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam);
//C        WINBOOL EnumThreadWindows(DWORD dwThreadId,WNDENUMPROC lpfn,LPARAM lParam);
WINBOOL  EnumThreadWindows(DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);
//C        int GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
int  GetClassNameA(HWND hWnd, LPSTR lpClassName, int nMaxCount);
//C        int GetClassNameW(HWND hWnd,LPWSTR lpClassName,int nMaxCount);
int  GetClassNameW(HWND hWnd, LPWSTR lpClassName, int nMaxCount);
//C        HWND GetTopWindow(HWND hWnd);
HWND  GetTopWindow(HWND hWnd);
//C        DWORD GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
DWORD  GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId);
//C        WINBOOL IsGUIThread(WINBOOL bConvert);
WINBOOL  IsGUIThread(WINBOOL bConvert);
//C        HWND GetLastActivePopup(HWND hWnd);
HWND  GetLastActivePopup(HWND hWnd);
//C        HWND GetWindow(HWND hWnd,UINT uCmd);
HWND  GetWindow(HWND hWnd, UINT uCmd);
//C        HHOOK SetWindowsHookA(int nFilterType,HOOKPROC pfnFilterProc);
HHOOK  SetWindowsHookA(int nFilterType, HOOKPROC pfnFilterProc);
//C        HHOOK SetWindowsHookW(int nFilterType,HOOKPROC pfnFilterProc);
HHOOK  SetWindowsHookW(int nFilterType, HOOKPROC pfnFilterProc);
//C        WINBOOL UnhookWindowsHook(int nCode,HOOKPROC pfnFilterProc);
WINBOOL  UnhookWindowsHook(int nCode, HOOKPROC pfnFilterProc);
//C        HHOOK SetWindowsHookExA(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
HHOOK  SetWindowsHookExA(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
//C        HHOOK SetWindowsHookExW(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
HHOOK  SetWindowsHookExW(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
//C        WINBOOL UnhookWindowsHookEx(HHOOK hhk);
WINBOOL  UnhookWindowsHookEx(HHOOK hhk);
//C        LRESULT CallNextHookEx(HHOOK hhk,int nCode,WPARAM wParam,LPARAM lParam);
LRESULT  CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
//C        WINBOOL CheckMenuRadioItem(HMENU hmenu,UINT first,UINT last,UINT check,UINT flags);
WINBOOL  CheckMenuRadioItem(HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);
//C       typedef struct {
//C         WORD versionNumber;
//C         WORD offset;
//C       } MENUITEMTEMPLATEHEADER,*PMENUITEMTEMPLATEHEADER;
struct _N77
{
    WORD versionNumber;
    WORD offset;
}
alias _N77 MENUITEMTEMPLATEHEADER;
alias _N77 *PMENUITEMTEMPLATEHEADER;
//C       typedef struct {
//C         WORD mtOption;
//C         WORD mtID;
//C         WCHAR mtString[1];
//C       } MENUITEMTEMPLATE,*PMENUITEMTEMPLATE;
struct _N78
{
    WORD mtOption;
    WORD mtID;
    WCHAR [1]mtString;
}
alias _N78 MENUITEMTEMPLATE;
alias _N78 *PMENUITEMTEMPLATE;
//C        HBITMAP LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName);
HBITMAP  LoadBitmapA(HINSTANCE hInstance, LPCSTR lpBitmapName);
//C        HBITMAP LoadBitmapW(HINSTANCE hInstance,LPCWSTR lpBitmapName);
HBITMAP  LoadBitmapW(HINSTANCE hInstance, LPCWSTR lpBitmapName);
//C        HCURSOR LoadCursorA(HINSTANCE hInstance,LPCSTR lpCursorName);
HCURSOR  LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName);
//C        HCURSOR LoadCursorW(HINSTANCE hInstance,LPCWSTR lpCursorName);
HCURSOR  LoadCursorW(HINSTANCE hInstance, LPCWSTR lpCursorName);
//C        HCURSOR LoadCursorFromFileA(LPCSTR lpFileName);
HCURSOR  LoadCursorFromFileA(LPCSTR lpFileName);
//C        HCURSOR LoadCursorFromFileW(LPCWSTR lpFileName);
HCURSOR  LoadCursorFromFileW(LPCWSTR lpFileName);
//C        HCURSOR CreateCursor(HINSTANCE hInst,int xHotSpot,int yHotSpot,int nWidth,int nHeight,const void *pvANDPlane,const void *pvXORPlane);
HCURSOR  CreateCursor(HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, void *pvANDPlane, void *pvXORPlane);
//C        WINBOOL DestroyCursor(HCURSOR hCursor);
WINBOOL  DestroyCursor(HCURSOR hCursor);
//C        WINBOOL SetSystemCursor(HCURSOR hcur,DWORD id);
WINBOOL  SetSystemCursor(HCURSOR hcur, DWORD id);
//C       typedef struct _ICONINFO {
//C         WINBOOL fIcon;
//C         DWORD xHotspot;
//C         DWORD yHotspot;
//C         HBITMAP hbmMask;
//C         HBITMAP hbmColor;
//C       } ICONINFO;
struct _ICONINFO
{
    WINBOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
}
alias _ICONINFO ICONINFO;
//C       typedef ICONINFO *PICONINFO;
alias ICONINFO *PICONINFO;
//C        HICON LoadIconA(HINSTANCE hInstance,LPCSTR lpIconName);
HICON  LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName);
//C        HICON LoadIconW(HINSTANCE hInstance,LPCWSTR lpIconName);
HICON  LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName);
//C        UINT PrivateExtractIconsA(LPCSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
UINT  PrivateExtractIconsA(LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON *phicon, UINT *piconid, UINT nIcons, UINT flags);
//C        UINT PrivateExtractIconsW(LPCWSTR szFileName,int nIconIndex,int cxIcon,int cyIcon,HICON *phicon,UINT *piconid,UINT nIcons,UINT flags);
UINT  PrivateExtractIconsW(LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON *phicon, UINT *piconid, UINT nIcons, UINT flags);
//C        HICON CreateIcon(HINSTANCE hInstance,int nWidth,int nHeight,BYTE cPlanes,BYTE cBitsPixel,const BYTE *lpbANDbits,const BYTE *lpbXORbits);
HICON  CreateIcon(HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, BYTE *lpbANDbits, BYTE *lpbXORbits);
//C        WINBOOL DestroyIcon(HICON hIcon);
WINBOOL  DestroyIcon(HICON hIcon);
//C        int LookupIconIdFromDirectory(PBYTE presbits,WINBOOL fIcon);
int  LookupIconIdFromDirectory(PBYTE presbits, WINBOOL fIcon);
//C        int LookupIconIdFromDirectoryEx(PBYTE presbits,WINBOOL fIcon,int cxDesired,int cyDesired,UINT Flags);
int  LookupIconIdFromDirectoryEx(PBYTE presbits, WINBOOL fIcon, int cxDesired, int cyDesired, UINT Flags);
//C        HICON CreateIconFromResource(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer);
HICON  CreateIconFromResource(PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer);
//C        HICON CreateIconFromResourceEx(PBYTE presbits,DWORD dwResSize,WINBOOL fIcon,DWORD dwVer,int cxDesired,int cyDesired,UINT Flags);
HICON  CreateIconFromResourceEx(PBYTE presbits, DWORD dwResSize, WINBOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags);
//C       typedef struct tagCURSORSHAPE {
//C         int xHotSpot;
//C         int yHotSpot;
//C         int cx;
//C         int cy;
//C         int cbWidth;
//C         BYTE Planes;
//C         BYTE BitsPixel;
//C       } CURSORSHAPE,*LPCURSORSHAPE;
struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
}
alias tagCURSORSHAPE CURSORSHAPE;
alias tagCURSORSHAPE *LPCURSORSHAPE;
//C        HANDLE LoadImageA(HINSTANCE hInst,LPCSTR name,UINT type,int cx,int cy,UINT fuLoad);
HANDLE  LoadImageA(HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad);
//C        HANDLE LoadImageW(HINSTANCE hInst,LPCWSTR name,UINT type,int cx,int cy,UINT fuLoad);
HANDLE  LoadImageW(HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad);
//C        HANDLE CopyImage(HANDLE h,UINT type,int cx,int cy,UINT flags);
HANDLE  CopyImage(HANDLE h, UINT type, int cx, int cy, UINT flags);
//C        WINBOOL DrawIconEx(HDC hdc,int xLeft,int yTop,HICON hIcon,int cxWidth,int cyWidth,UINT istepIfAniCur,HBRUSH hbrFlickerFreeDraw,UINT diFlags);
WINBOOL  DrawIconEx(HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
//C        HICON CreateIconIndirect(PICONINFO piconinfo);
HICON  CreateIconIndirect(PICONINFO piconinfo);
//C        HICON CopyIcon(HICON hIcon);
HICON  CopyIcon(HICON hIcon);
//C        WINBOOL GetIconInfo(HICON hIcon,PICONINFO piconinfo);
WINBOOL  GetIconInfo(HICON hIcon, PICONINFO piconinfo);
//C        int LoadStringA(HINSTANCE hInstance,UINT uID,LPSTR lpBuffer,int cchBufferMax);
int  LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax);
//C        int LoadStringW(HINSTANCE hInstance,UINT uID,LPWSTR lpBuffer,int cchBufferMax);
int  LoadStringW(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax);
//C        WINBOOL IsDialogMessageA(HWND hDlg,LPMSG lpMsg);
WINBOOL  IsDialogMessageA(HWND hDlg, LPMSG lpMsg);
//C        WINBOOL IsDialogMessageW(HWND hDlg,LPMSG lpMsg);
WINBOOL  IsDialogMessageW(HWND hDlg, LPMSG lpMsg);
//C        WINBOOL MapDialogRect(HWND hDlg,LPRECT lpRect);
WINBOOL  MapDialogRect(HWND hDlg, LPRECT lpRect);
//C        int DlgDirListA(HWND hDlg,LPSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
int  DlgDirListA(HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
//C        int DlgDirListW(HWND hDlg,LPWSTR lpPathSpec,int nIDListBox,int nIDStaticPath,UINT uFileType);
int  DlgDirListW(HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
//C        WINBOOL DlgDirSelectExA(HWND hwndDlg,LPSTR lpString,int chCount,int idListBox);
WINBOOL  DlgDirSelectExA(HWND hwndDlg, LPSTR lpString, int chCount, int idListBox);
//C        WINBOOL DlgDirSelectExW(HWND hwndDlg,LPWSTR lpString,int chCount,int idListBox);
WINBOOL  DlgDirSelectExW(HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox);
//C        int DlgDirListComboBoxA(HWND hDlg,LPSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
int  DlgDirListComboBoxA(HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
//C        int DlgDirListComboBoxW(HWND hDlg,LPWSTR lpPathSpec,int nIDComboBox,int nIDStaticPath,UINT uFiletype);
int  DlgDirListComboBoxW(HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
//C        WINBOOL DlgDirSelectComboBoxExA(HWND hwndDlg,LPSTR lpString,int cchOut,int idComboBox);
WINBOOL  DlgDirSelectComboBoxExA(HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox);
//C        WINBOOL DlgDirSelectComboBoxExW(HWND hwndDlg,LPWSTR lpString,int cchOut,int idComboBox);
WINBOOL  DlgDirSelectComboBoxExW(HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox);
//C       typedef struct tagSCROLLINFO {
//C         UINT cbSize;
//C         UINT fMask;
//C         int nMin;
//C         int nMax;
//C         UINT nPage;
//C         int nPos;
//C         int nTrackPos;
//C       } SCROLLINFO,*LPSCROLLINFO;
struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
}
alias tagSCROLLINFO SCROLLINFO;
alias tagSCROLLINFO *LPSCROLLINFO;
//C       typedef SCROLLINFO const *LPCSCROLLINFO;
alias SCROLLINFO *LPCSCROLLINFO;
//C        int SetScrollInfo(HWND hwnd,int nBar,LPCSCROLLINFO lpsi,WINBOOL redraw);
int  SetScrollInfo(HWND hwnd, int nBar, LPCSCROLLINFO lpsi, WINBOOL redraw);
//C        WINBOOL GetScrollInfo(HWND hwnd,int nBar,LPSCROLLINFO lpsi);
WINBOOL  GetScrollInfo(HWND hwnd, int nBar, LPSCROLLINFO lpsi);
//C       typedef struct tagMDICREATESTRUCTA {
//C         LPCSTR szClass;
//C         LPCSTR szTitle;
//C         HANDLE hOwner;
//C         int x;
//C         int y;
//C         int cx;
//C         int cy;
//C         DWORD style;
//C         LPARAM lParam;
//C       } MDICREATESTRUCTA,*LPMDICREATESTRUCTA;
struct tagMDICREATESTRUCTA
{
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
}
alias tagMDICREATESTRUCTA MDICREATESTRUCTA;
alias tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;
//C       typedef struct tagMDICREATESTRUCTW {
//C         LPCWSTR szClass;
//C         LPCWSTR szTitle;
//C         HANDLE hOwner;
//C         int x;
//C         int y;
//C         int cx;
//C         int cy;
//C         DWORD style;
//C         LPARAM lParam;
//C       } MDICREATESTRUCTW,*LPMDICREATESTRUCTW;
struct tagMDICREATESTRUCTW
{
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
}
alias tagMDICREATESTRUCTW MDICREATESTRUCTW;
alias tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;
//C       typedef MDICREATESTRUCTA MDICREATESTRUCT;
alias MDICREATESTRUCTA MDICREATESTRUCT;
//C       typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
alias LPMDICREATESTRUCTA LPMDICREATESTRUCT;
//C       typedef struct tagCLIENTCREATESTRUCT {
//C         HANDLE hWindowMenu;
//C         UINT idFirstChild;
//C       } CLIENTCREATESTRUCT,*LPCLIENTCREATESTRUCT;
struct tagCLIENTCREATESTRUCT
{
    HANDLE hWindowMenu;
    UINT idFirstChild;
}
alias tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
alias tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;
//C        LRESULT DefFrameProcA(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
LRESULT  DefFrameProcA(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
//C        LRESULT DefFrameProcW(HWND hWnd,HWND hWndMDIClient,UINT uMsg,WPARAM wParam,LPARAM lParam);
LRESULT  DefFrameProcW(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
//C        LRESULT DefMDIChildProcA(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
LRESULT  DefMDIChildProcA(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
//C        LRESULT DefMDIChildProcW(HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
LRESULT  DefMDIChildProcW(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
//C        WINBOOL TranslateMDISysAccel(HWND hWndClient,LPMSG lpMsg);
WINBOOL  TranslateMDISysAccel(HWND hWndClient, LPMSG lpMsg);
//C        UINT ArrangeIconicWindows(HWND hWnd);
UINT  ArrangeIconicWindows(HWND hWnd);
//C        HWND CreateMDIWindowA(LPCSTR lpClassName,LPCSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
HWND  CreateMDIWindowA(LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
//C        HWND CreateMDIWindowW(LPCWSTR lpClassName,LPCWSTR lpWindowName,DWORD dwStyle,int X,int Y,int nWidth,int nHeight,HWND hWndParent,HINSTANCE hInstance,LPARAM lParam);
HWND  CreateMDIWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
//C        WORD TileWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);
WORD  TileWindows(HWND hwndParent, UINT wHow, RECT *lpRect, UINT cKids, HWND *lpKids);
//C        WORD CascadeWindows(HWND hwndParent,UINT wHow,const RECT *lpRect,UINT cKids,const HWND *lpKids);
WORD  CascadeWindows(HWND hwndParent, UINT wHow, RECT *lpRect, UINT cKids, HWND *lpKids);
//C       typedef DWORD HELPPOLY;
alias DWORD HELPPOLY;
//C       typedef struct tagMULTIKEYHELPA {
//C         DWORD mkSize;
//C         CHAR mkKeylist;
//C         CHAR szKeyphrase[1];
//C       } MULTIKEYHELPA,*PMULTIKEYHELPA,*LPMULTIKEYHELPA;
struct tagMULTIKEYHELPA
{
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR [1]szKeyphrase;
}
alias tagMULTIKEYHELPA MULTIKEYHELPA;
alias tagMULTIKEYHELPA *PMULTIKEYHELPA;
alias tagMULTIKEYHELPA *LPMULTIKEYHELPA;
//C       typedef struct tagMULTIKEYHELPW {
//C         DWORD mkSize;
//C         WCHAR mkKeylist;
//C         WCHAR szKeyphrase[1];
//C       } MULTIKEYHELPW,*PMULTIKEYHELPW,*LPMULTIKEYHELPW;
struct tagMULTIKEYHELPW
{
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR [1]szKeyphrase;
}
alias tagMULTIKEYHELPW MULTIKEYHELPW;
alias tagMULTIKEYHELPW *PMULTIKEYHELPW;
alias tagMULTIKEYHELPW *LPMULTIKEYHELPW;
//C       typedef MULTIKEYHELPA MULTIKEYHELP;
alias MULTIKEYHELPA MULTIKEYHELP;
//C       typedef PMULTIKEYHELPA PMULTIKEYHELP;
alias PMULTIKEYHELPA PMULTIKEYHELP;
//C       typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
alias LPMULTIKEYHELPA LPMULTIKEYHELP;
//C       typedef struct tagHELPWININFOA {
//C         int wStructSize;
//C         int x;
//C         int y;
//C         int dx;
//C         int dy;
//C         int wMax;
//C         CHAR rgchMember[2];
//C       } HELPWININFOA,*PHELPWININFOA,*LPHELPWININFOA;
struct tagHELPWININFOA
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR [2]rgchMember;
}
alias tagHELPWININFOA HELPWININFOA;
alias tagHELPWININFOA *PHELPWININFOA;
alias tagHELPWININFOA *LPHELPWININFOA;
//C       typedef struct tagHELPWININFOW {
//C         int wStructSize;
//C         int x;
//C         int y;
//C         int dx;
//C         int dy;
//C         int wMax;
//C         WCHAR rgchMember[2];
//C       } HELPWININFOW,*PHELPWININFOW,*LPHELPWININFOW;
struct tagHELPWININFOW
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR [2]rgchMember;
}
alias tagHELPWININFOW HELPWININFOW;
alias tagHELPWININFOW *PHELPWININFOW;
alias tagHELPWININFOW *LPHELPWININFOW;
//C       typedef HELPWININFOA HELPWININFO;
alias HELPWININFOA HELPWININFO;
//C       typedef PHELPWININFOA PHELPWININFO;
alias PHELPWININFOA PHELPWININFO;
//C       typedef LPHELPWININFOA LPHELPWININFO;
alias LPHELPWININFOA LPHELPWININFO;
//C        WINBOOL WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
WINBOOL  WinHelpA(HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
//C        WINBOOL WinHelpW(HWND hWndMain,LPCWSTR lpszHelp,UINT uCommand,ULONG_PTR dwData);
WINBOOL  WinHelpW(HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
//C        DWORD GetGuiResources(HANDLE hProcess,DWORD uiFlags);
DWORD  GetGuiResources(HANDLE hProcess, DWORD uiFlags);
//C       typedef struct tagNONCLIENTMETRICSA {
//C         UINT cbSize;
//C         int iBorderWidth;
//C         int iScrollWidth;
//C         int iScrollHeight;
//C         int iCaptionWidth;
//C         int iCaptionHeight;
//C         LOGFONTA lfCaptionFont;
//C         int iSmCaptionWidth;
//C         int iSmCaptionHeight;
//C         LOGFONTA lfSmCaptionFont;
//C         int iMenuWidth;
//C         int iMenuHeight;
//C         LOGFONTA lfMenuFont;
//C         LOGFONTA lfStatusFont;
//C         LOGFONTA lfMessageFont;
//C       } NONCLIENTMETRICSA,*PNONCLIENTMETRICSA,*LPNONCLIENTMETRICSA;
struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}
alias tagNONCLIENTMETRICSA NONCLIENTMETRICSA;
alias tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;
alias tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;
//C       typedef struct tagNONCLIENTMETRICSW {
//C         UINT cbSize;
//C         int iBorderWidth;
//C         int iScrollWidth;
//C         int iScrollHeight;
//C         int iCaptionWidth;
//C         int iCaptionHeight;
//C         LOGFONTW lfCaptionFont;
//C         int iSmCaptionWidth;
//C         int iSmCaptionHeight;
//C         LOGFONTW lfSmCaptionFont;
//C         int iMenuWidth;
//C         int iMenuHeight;
//C         LOGFONTW lfMenuFont;
//C         LOGFONTW lfStatusFont;
//C         LOGFONTW lfMessageFont;
//C       } NONCLIENTMETRICSW,*PNONCLIENTMETRICSW,*LPNONCLIENTMETRICSW;
struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}
alias tagNONCLIENTMETRICSW NONCLIENTMETRICSW;
alias tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;
alias tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;
//C       typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
alias NONCLIENTMETRICSA NONCLIENTMETRICS;
//C       typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
alias PNONCLIENTMETRICSA PNONCLIENTMETRICS;
//C       typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
alias LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
//C       typedef struct tagMINIMIZEDMETRICS {
//C         UINT cbSize;
//C         int iWidth;
//C         int iHorzGap;
//C         int iVertGap;
//C         int iArrange;
//C       } MINIMIZEDMETRICS,*PMINIMIZEDMETRICS,*LPMINIMIZEDMETRICS;
struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
}
alias tagMINIMIZEDMETRICS MINIMIZEDMETRICS;
alias tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;
alias tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;
//C       typedef struct tagICONMETRICSA {
//C         UINT cbSize;
//C         int iHorzSpacing;
//C         int iVertSpacing;
//C         int iTitleWrap;
//C         LOGFONTA lfFont;
//C       } ICONMETRICSA,*PICONMETRICSA,*LPICONMETRICSA;
struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
}
alias tagICONMETRICSA ICONMETRICSA;
alias tagICONMETRICSA *PICONMETRICSA;
alias tagICONMETRICSA *LPICONMETRICSA;
//C       typedef struct tagICONMETRICSW {
//C         UINT cbSize;
//C         int iHorzSpacing;
//C         int iVertSpacing;
//C         int iTitleWrap;
//C         LOGFONTW lfFont;
//C       } ICONMETRICSW,*PICONMETRICSW,*LPICONMETRICSW;
struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
}
alias tagICONMETRICSW ICONMETRICSW;
alias tagICONMETRICSW *PICONMETRICSW;
alias tagICONMETRICSW *LPICONMETRICSW;
//C       typedef ICONMETRICSA ICONMETRICS;
alias ICONMETRICSA ICONMETRICS;
//C       typedef PICONMETRICSA PICONMETRICS;
alias PICONMETRICSA PICONMETRICS;
//C       typedef LPICONMETRICSA LPICONMETRICS;
alias LPICONMETRICSA LPICONMETRICS;
//C       typedef struct tagANIMATIONINFO {
//C         UINT cbSize;
//C         int iMinAnimate;
//C       } ANIMATIONINFO,*LPANIMATIONINFO;
struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
}
alias tagANIMATIONINFO ANIMATIONINFO;
alias tagANIMATIONINFO *LPANIMATIONINFO;
//C       typedef struct tagSERIALKEYSA {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         LPSTR lpszActivePort;
//C         LPSTR lpszPort;
//C         UINT iBaudRate;
//C         UINT iPortState;
//C         UINT iActive;
//C       } SERIALKEYSA,*LPSERIALKEYSA;
struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
}
alias tagSERIALKEYSA SERIALKEYSA;
alias tagSERIALKEYSA *LPSERIALKEYSA;
//C       typedef struct tagSERIALKEYSW {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         LPWSTR lpszActivePort;
//C         LPWSTR lpszPort;
//C         UINT iBaudRate;
//C         UINT iPortState;
//C         UINT iActive;
//C       } SERIALKEYSW,*LPSERIALKEYSW;
struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
}
alias tagSERIALKEYSW SERIALKEYSW;
alias tagSERIALKEYSW *LPSERIALKEYSW;
//C       typedef SERIALKEYSA SERIALKEYS;
alias SERIALKEYSA SERIALKEYS;
//C       typedef LPSERIALKEYSA LPSERIALKEYS;
alias LPSERIALKEYSA LPSERIALKEYS;
//C       typedef struct tagHIGHCONTRASTA {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         LPSTR lpszDefaultScheme;
//C       } HIGHCONTRASTA,*LPHIGHCONTRASTA;
struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
}
alias tagHIGHCONTRASTA HIGHCONTRASTA;
alias tagHIGHCONTRASTA *LPHIGHCONTRASTA;
//C       typedef struct tagHIGHCONTRASTW {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         LPWSTR lpszDefaultScheme;
//C       } HIGHCONTRASTW,*LPHIGHCONTRASTW;
struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
}
alias tagHIGHCONTRASTW HIGHCONTRASTW;
alias tagHIGHCONTRASTW *LPHIGHCONTRASTW;
//C       typedef HIGHCONTRASTA HIGHCONTRAST;
alias HIGHCONTRASTA HIGHCONTRAST;
//C       typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
alias LPHIGHCONTRASTA LPHIGHCONTRAST;
//C     typedef struct _VIDEOPARAMETERS {
//C       GUID Guid;
//C       ULONG dwOffset;
//C       ULONG dwCommand;
//C       ULONG dwFlags;
//C       ULONG dwMode;
//C       ULONG dwTVStandard;
//C       ULONG dwAvailableModes;
//C       ULONG dwAvailableTVStandard;
//C       ULONG dwFlickerFilter;
//C       ULONG dwOverScanX;
//C       ULONG dwOverScanY;
//C       ULONG dwMaxUnscaledX;
//C       ULONG dwMaxUnscaledY;
//C       ULONG dwPositionX;
//C       ULONG dwPositionY;
//C       ULONG dwBrightness;
//C       ULONG dwContrast;
//C       ULONG dwCPType;
//C       ULONG dwCPCommand;
//C       ULONG dwCPStandard;
//C       ULONG dwCPKey;
//C       ULONG bCP_APSTriggerBits;
//C       UCHAR bOEMCopyProtection[256];
//C     } VIDEOPARAMETERS,*PVIDEOPARAMETERS,*LPVIDEOPARAMETERS;
struct _VIDEOPARAMETERS
{
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR [256]bOEMCopyProtection;
}
alias _VIDEOPARAMETERS VIDEOPARAMETERS;
alias _VIDEOPARAMETERS *PVIDEOPARAMETERS;
alias _VIDEOPARAMETERS *LPVIDEOPARAMETERS;
//C        LONG ChangeDisplaySettingsA(LPDEVMODEA lpDevMode,DWORD dwFlags);
LONG  ChangeDisplaySettingsA(LPDEVMODEA lpDevMode, DWORD dwFlags);
//C        LONG ChangeDisplaySettingsW(LPDEVMODEW lpDevMode,DWORD dwFlags);
LONG  ChangeDisplaySettingsW(LPDEVMODEW lpDevMode, DWORD dwFlags);
//C        LONG ChangeDisplaySettingsExA(LPCSTR lpszDeviceName,LPDEVMODEA lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
LONG  ChangeDisplaySettingsExA(LPCSTR lpszDeviceName, LPDEVMODEA lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
//C        LONG ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName,LPDEVMODEW lpDevMode,HWND hwnd,DWORD dwflags,LPVOID lParam);
LONG  ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName, LPDEVMODEW lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
//C        WINBOOL EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode);
WINBOOL  EnumDisplaySettingsA(LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode);
//C        WINBOOL EnumDisplaySettingsW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode);
WINBOOL  EnumDisplaySettingsW(LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode);
//C        WINBOOL EnumDisplaySettingsExA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode,DWORD dwFlags);
WINBOOL  EnumDisplaySettingsExA(LPCSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEA lpDevMode, DWORD dwFlags);
//C        WINBOOL EnumDisplaySettingsExW(LPCWSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEW lpDevMode,DWORD dwFlags);
WINBOOL  EnumDisplaySettingsExW(LPCWSTR lpszDeviceName, DWORD iModeNum, LPDEVMODEW lpDevMode, DWORD dwFlags);
//C        WINBOOL EnumDisplayDevicesA(LPCSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEA lpDisplayDevice,DWORD dwFlags);
WINBOOL  EnumDisplayDevicesA(LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags);
//C        WINBOOL EnumDisplayDevicesW(LPCWSTR lpDevice,DWORD iDevNum,PDISPLAY_DEVICEW lpDisplayDevice,DWORD dwFlags);
WINBOOL  EnumDisplayDevicesW(LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags);
//C        WINBOOL SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
WINBOOL  SystemParametersInfoA(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
//C        WINBOOL SystemParametersInfoW(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
WINBOOL  SystemParametersInfoW(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
//C       typedef struct tagFILTERKEYS {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         DWORD iWaitMSec;
//C         DWORD iDelayMSec;
//C         DWORD iRepeatMSec;
//C         DWORD iBounceMSec;
//C       } FILTERKEYS,*LPFILTERKEYS;
struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
}
alias tagFILTERKEYS FILTERKEYS;
alias tagFILTERKEYS *LPFILTERKEYS;
//C       typedef struct tagSTICKYKEYS {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C       } STICKYKEYS,*LPSTICKYKEYS;
struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
}
alias tagSTICKYKEYS STICKYKEYS;
alias tagSTICKYKEYS *LPSTICKYKEYS;
//C       typedef struct tagMOUSEKEYS {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         DWORD iMaxSpeed;
//C         DWORD iTimeToMaxSpeed;
//C         DWORD iCtrlSpeed;
//C         DWORD dwReserved1;
//C         DWORD dwReserved2;
//C       } MOUSEKEYS,*LPMOUSEKEYS;
struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
}
alias tagMOUSEKEYS MOUSEKEYS;
alias tagMOUSEKEYS *LPMOUSEKEYS;
//C       typedef struct tagACCESSTIMEOUT {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         DWORD iTimeOutMSec;
//C       } ACCESSTIMEOUT,*LPACCESSTIMEOUT;
struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
}
alias tagACCESSTIMEOUT ACCESSTIMEOUT;
alias tagACCESSTIMEOUT *LPACCESSTIMEOUT;
//C       typedef struct tagSOUNDSENTRYA {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         DWORD iFSTextEffect;
//C         DWORD iFSTextEffectMSec;
//C         DWORD iFSTextEffectColorBits;
//C         DWORD iFSGrafEffect;
//C         DWORD iFSGrafEffectMSec;
//C         DWORD iFSGrafEffectColor;
//C         DWORD iWindowsEffect;
//C         DWORD iWindowsEffectMSec;
//C         LPSTR lpszWindowsEffectDLL;
//C         DWORD iWindowsEffectOrdinal;
//C       } SOUNDSENTRYA,*LPSOUNDSENTRYA;
struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
}
alias tagSOUNDSENTRYA SOUNDSENTRYA;
alias tagSOUNDSENTRYA *LPSOUNDSENTRYA;
//C       typedef struct tagSOUNDSENTRYW {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C         DWORD iFSTextEffect;
//C         DWORD iFSTextEffectMSec;
//C         DWORD iFSTextEffectColorBits;
//C         DWORD iFSGrafEffect;
//C         DWORD iFSGrafEffectMSec;
//C         DWORD iFSGrafEffectColor;
//C         DWORD iWindowsEffect;
//C         DWORD iWindowsEffectMSec;
//C         LPWSTR lpszWindowsEffectDLL;
//C         DWORD iWindowsEffectOrdinal;
//C       } SOUNDSENTRYW,*LPSOUNDSENTRYW;
struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
}
alias tagSOUNDSENTRYW SOUNDSENTRYW;
alias tagSOUNDSENTRYW *LPSOUNDSENTRYW;
//C       typedef SOUNDSENTRYA SOUNDSENTRY;
alias SOUNDSENTRYA SOUNDSENTRY;
//C       typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
alias LPSOUNDSENTRYA LPSOUNDSENTRY;
//C       typedef struct tagTOGGLEKEYS {
//C         UINT cbSize;
//C         DWORD dwFlags;
//C       } TOGGLEKEYS,*LPTOGGLEKEYS;
struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
}
alias tagTOGGLEKEYS TOGGLEKEYS;
alias tagTOGGLEKEYS *LPTOGGLEKEYS;
//C        void SetDebugErrorLevel(DWORD dwLevel);
void  SetDebugErrorLevel(DWORD dwLevel);
//C        void SetLastErrorEx(DWORD dwErrCode,DWORD dwType);
void  SetLastErrorEx(DWORD dwErrCode, DWORD dwType);
//C        int InternalGetWindowText(HWND hWnd,LPWSTR pString,int cchMaxCount);
int  InternalGetWindowText(HWND hWnd, LPWSTR pString, int cchMaxCount);
//C        WINBOOL EndTask(HWND hWnd,WINBOOL fShutDown,WINBOOL fForce);
WINBOOL  EndTask(HWND hWnd, WINBOOL fShutDown, WINBOOL fForce);
//C        HMONITOR MonitorFromPoint(POINT pt,DWORD dwFlags);
HMONITOR  MonitorFromPoint(POINT pt, DWORD dwFlags);
//C        HMONITOR MonitorFromRect(LPCRECT lprc,DWORD dwFlags);
HMONITOR  MonitorFromRect(LPCRECT lprc, DWORD dwFlags);
//C        HMONITOR MonitorFromWindow(HWND hwnd,DWORD dwFlags);
HMONITOR  MonitorFromWindow(HWND hwnd, DWORD dwFlags);
//C       typedef struct tagMONITORINFO {
//C         DWORD cbSize;
//C         RECT rcMonitor;
//C         RECT rcWork;
//C         DWORD dwFlags;
//C       } MONITORINFO,*LPMONITORINFO;
struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
}
alias tagMONITORINFO MONITORINFO;
alias tagMONITORINFO *LPMONITORINFO;
//C       typedef struct tagMONITORINFOEXA {
//C          struct {
//C           DWORD cbSize;
//C           RECT rcMonitor;
//C           RECT rcWork;
//C           DWORD dwFlags;
//C         };
struct _N79
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
}
//C         CHAR szDevice[32];
//C       } MONITORINFOEXA,*LPMONITORINFOEXA;
struct tagMONITORINFOEXA
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
    CHAR [32]szDevice;
}
alias tagMONITORINFOEXA MONITORINFOEXA;
alias tagMONITORINFOEXA *LPMONITORINFOEXA;
//C       typedef struct tagMONITORINFOEXW {
//C          struct {
//C           DWORD cbSize;
//C           RECT rcMonitor;
//C           RECT rcWork;
//C           DWORD dwFlags;
//C         };
struct _N80
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
}
//C         WCHAR szDevice[32];
//C       } MONITORINFOEXW,*LPMONITORINFOEXW;
struct tagMONITORINFOEXW
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
    WCHAR [32]szDevice;
}
alias tagMONITORINFOEXW MONITORINFOEXW;
alias tagMONITORINFOEXW *LPMONITORINFOEXW;
//C       typedef MONITORINFOEXA MONITORINFOEX;
alias MONITORINFOEXA MONITORINFOEX;
//C       typedef LPMONITORINFOEXA LPMONITORINFOEX;
alias LPMONITORINFOEXA LPMONITORINFOEX;
//C        WINBOOL GetMonitorInfoA(HMONITOR hMonitor,LPMONITORINFO lpmi);
WINBOOL  GetMonitorInfoA(HMONITOR hMonitor, LPMONITORINFO lpmi);
//C        WINBOOL GetMonitorInfoW(HMONITOR hMonitor,LPMONITORINFO lpmi);
WINBOOL  GetMonitorInfoW(HMONITOR hMonitor, LPMONITORINFO lpmi);
//C       typedef WINBOOL ( *MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);
alias WINBOOL  function(HMONITOR , HDC , LPRECT , LPARAM )MONITORENUMPROC;
//C        WINBOOL EnumDisplayMonitors(HDC hdc,LPCRECT lprcClip,MONITORENUMPROC lpfnEnum,LPARAM dwData);
WINBOOL  EnumDisplayMonitors(HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
//C        void NotifyWinEvent(DWORD event,HWND hwnd,LONG idObject,LONG idChild);
void  NotifyWinEvent(DWORD event, HWND hwnd, LONG idObject, LONG idChild);
//C       typedef void ( *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook,DWORD event,HWND hwnd,LONG idObject,LONG idChild,DWORD idEventThread,DWORD dwmsEventTime);
alias void  function(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime)WINEVENTPROC;
//C        HWINEVENTHOOK SetWinEventHook(DWORD eventMin,DWORD eventMax,HMODULE hmodWinEventProc,WINEVENTPROC pfnWinEventProc,DWORD idProcess,DWORD idThread,DWORD dwFlags);
HWINEVENTHOOK  SetWinEventHook(DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
//C        WINBOOL IsWinEventHookInstalled(DWORD event);
WINBOOL  IsWinEventHookInstalled(DWORD event);
//C        WINBOOL UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
WINBOOL  UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
//C       typedef struct tagGUITHREADINFO {
//C         DWORD cbSize;
//C         DWORD flags;
//C         HWND hwndActive;
//C         HWND hwndFocus;
//C         HWND hwndCapture;
//C         HWND hwndMenuOwner;
//C         HWND hwndMoveSize;
//C         HWND hwndCaret;
//C         RECT rcCaret;
//C       } GUITHREADINFO,*PGUITHREADINFO,*LPGUITHREADINFO;
struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
}
alias tagGUITHREADINFO GUITHREADINFO;
alias tagGUITHREADINFO *PGUITHREADINFO;
alias tagGUITHREADINFO *LPGUITHREADINFO;
//C        WINBOOL GetGUIThreadInfo(DWORD idThread,PGUITHREADINFO pgui);
WINBOOL  GetGUIThreadInfo(DWORD idThread, PGUITHREADINFO pgui);
//C        UINT GetWindowModuleFileNameA(HWND hwnd,LPSTR pszFileName,UINT cchFileNameMax);
UINT  GetWindowModuleFileNameA(HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax);
//C        UINT GetWindowModuleFileNameW(HWND hwnd,LPWSTR pszFileName,UINT cchFileNameMax);
UINT  GetWindowModuleFileNameW(HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax);
//C       typedef struct tagCURSORINFO {
//C         DWORD cbSize;
//C         DWORD flags;
//C         HCURSOR hCursor;
//C         POINT ptScreenPos;
//C       } CURSORINFO,*PCURSORINFO,*LPCURSORINFO;
struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
}
alias tagCURSORINFO CURSORINFO;
alias tagCURSORINFO *PCURSORINFO;
alias tagCURSORINFO *LPCURSORINFO;
//C        WINBOOL GetCursorInfo(PCURSORINFO pci);
WINBOOL  GetCursorInfo(PCURSORINFO pci);
//C       typedef struct tagWINDOWINFO {
//C         DWORD cbSize;
//C         RECT rcWindow;
//C         RECT rcClient;
//C         DWORD dwStyle;
//C         DWORD dwExStyle;
//C         DWORD dwWindowStatus;
//C         UINT cxWindowBorders;
//C         UINT cyWindowBorders;
//C         ATOM atomWindowType;
//C         WORD wCreatorVersion;
//C       } WINDOWINFO,*PWINDOWINFO,*LPWINDOWINFO;
struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
}
alias tagWINDOWINFO WINDOWINFO;
alias tagWINDOWINFO *PWINDOWINFO;
alias tagWINDOWINFO *LPWINDOWINFO;
//C        WINBOOL GetWindowInfo(HWND hwnd,PWINDOWINFO pwi);
WINBOOL  GetWindowInfo(HWND hwnd, PWINDOWINFO pwi);
//C       typedef struct tagTITLEBARINFO {
//C         DWORD cbSize;
//C         RECT rcTitleBar;
//C         DWORD rgstate[5 + 1];
//C       } TITLEBARINFO,*PTITLEBARINFO,*LPTITLEBARINFO;
struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD [6]rgstate;
}
alias tagTITLEBARINFO TITLEBARINFO;
alias tagTITLEBARINFO *PTITLEBARINFO;
alias tagTITLEBARINFO *LPTITLEBARINFO;
//C        WINBOOL GetTitleBarInfo(HWND hwnd,PTITLEBARINFO pti);
WINBOOL  GetTitleBarInfo(HWND hwnd, PTITLEBARINFO pti);
//C       typedef struct tagMENUBARINFO {
//C         DWORD cbSize;
//C         RECT rcBar;
//C         HMENU hMenu;
//C         HWND hwndMenu;
//C         WINBOOL fBarFocused:1;
//C         WINBOOL fFocused:1;
//C       } MENUBARINFO,*PMENUBARINFO,*LPMENUBARINFO;
struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    WINBOOL __bitfield1;
    WINBOOL fBarFocused() { return (__bitfield1 << 31) >> 31; }
    WINBOOL fFocused() { return (__bitfield1 << 30) >> 31; }
}
alias tagMENUBARINFO MENUBARINFO;
alias tagMENUBARINFO *PMENUBARINFO;
alias tagMENUBARINFO *LPMENUBARINFO;
//C        WINBOOL GetMenuBarInfo(HWND hwnd,LONG idObject,LONG idItem,PMENUBARINFO pmbi);
WINBOOL  GetMenuBarInfo(HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi);
//C       typedef struct tagSCROLLBARINFO {
//C         DWORD cbSize;
//C         RECT rcScrollBar;
//C         int dxyLineButton;
//C         int xyThumbTop;
//C         int xyThumbBottom;
//C         int reserved;
//C         DWORD rgstate[5 + 1];
//C       } SCROLLBARINFO,*PSCROLLBARINFO,*LPSCROLLBARINFO;
struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD [6]rgstate;
}
alias tagSCROLLBARINFO SCROLLBARINFO;
alias tagSCROLLBARINFO *PSCROLLBARINFO;
alias tagSCROLLBARINFO *LPSCROLLBARINFO;
//C        WINBOOL GetScrollBarInfo(HWND hwnd,LONG idObject,PSCROLLBARINFO psbi);
WINBOOL  GetScrollBarInfo(HWND hwnd, LONG idObject, PSCROLLBARINFO psbi);
//C       typedef struct tagCOMBOBOXINFO {
//C         DWORD cbSize;
//C         RECT rcItem;
//C         RECT rcButton;
//C         DWORD stateButton;
//C         HWND hwndCombo;
//C         HWND hwndItem;
//C         HWND hwndList;
//C       } COMBOBOXINFO,*PCOMBOBOXINFO,*LPCOMBOBOXINFO;
struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
}
alias tagCOMBOBOXINFO COMBOBOXINFO;
alias tagCOMBOBOXINFO *PCOMBOBOXINFO;
alias tagCOMBOBOXINFO *LPCOMBOBOXINFO;
//C        WINBOOL GetComboBoxInfo(HWND hwndCombo,PCOMBOBOXINFO pcbi);
WINBOOL  GetComboBoxInfo(HWND hwndCombo, PCOMBOBOXINFO pcbi);
//C        HWND GetAncestor(HWND hwnd,UINT gaFlags);
HWND  GetAncestor(HWND hwnd, UINT gaFlags);
//C        HWND RealChildWindowFromPoint(HWND hwndParent,POINT ptParentClientCoords);
HWND  RealChildWindowFromPoint(HWND hwndParent, POINT ptParentClientCoords);
//C        UINT RealGetWindowClassA(HWND hwnd,LPSTR ptszClassName,UINT cchClassNameMax);
UINT  RealGetWindowClassA(HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax);
//C        UINT RealGetWindowClassW(HWND hwnd,LPWSTR ptszClassName,UINT cchClassNameMax);
UINT  RealGetWindowClassW(HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax);
//C       typedef struct tagALTTABINFO {
//C         DWORD cbSize;
//C         int cItems;
//C         int cColumns;
//C         int cRows;
//C         int iColFocus;
//C         int iRowFocus;
//C         int cxItem;
//C         int cyItem;
//C         POINT ptStart;
//C       } ALTTABINFO,*PALTTABINFO,*LPALTTABINFO;
struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
}
alias tagALTTABINFO ALTTABINFO;
alias tagALTTABINFO *PALTTABINFO;
alias tagALTTABINFO *LPALTTABINFO;
//C        WINBOOL GetAltTabInfoA(HWND hwnd,int iItem,PALTTABINFO pati,LPSTR pszItemText,UINT cchItemText);
WINBOOL  GetAltTabInfoA(HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText);
//C        WINBOOL GetAltTabInfoW(HWND hwnd,int iItem,PALTTABINFO pati,LPWSTR pszItemText,UINT cchItemText);
WINBOOL  GetAltTabInfoW(HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText);
//C        DWORD GetListBoxInfo(HWND hwnd);
DWORD  GetListBoxInfo(HWND hwnd);
//C        WINBOOL LockWorkStation(void);
WINBOOL  LockWorkStation();
//C        WINBOOL UserHandleGrantAccess(HANDLE hUserHandle,HANDLE hJob,WINBOOL bGrant);
WINBOOL  UserHandleGrantAccess(HANDLE hUserHandle, HANDLE hJob, WINBOOL bGrant);
//C       struct HRAWINPUT__ { int unused; }; typedef struct HRAWINPUT__ *HRAWINPUT;
struct HRAWINPUT__
{
    int unused;
}
alias HRAWINPUT__ *HRAWINPUT;
//C       typedef struct tagRAWINPUTHEADER {
//C         DWORD dwType;
//C         DWORD dwSize;
//C         HANDLE hDevice;
//C         WPARAM wParam;
//C       } RAWINPUTHEADER,*PRAWINPUTHEADER,*LPRAWINPUTHEADER;
struct tagRAWINPUTHEADER
{
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
}
alias tagRAWINPUTHEADER RAWINPUTHEADER;
alias tagRAWINPUTHEADER *PRAWINPUTHEADER;
alias tagRAWINPUTHEADER *LPRAWINPUTHEADER;
//C       typedef struct tagRAWMOUSE {
//C         USHORT usFlags;
//C          union {
//C           ULONG ulButtons;
//C            struct {
//C      USHORT usButtonFlags;
//C      USHORT usButtonData;
//C           };
struct _N82
{
    USHORT usButtonFlags;
    USHORT usButtonData;
}
//C         };
union _N81
{
    ULONG ulButtons;
    USHORT usButtonFlags;
    USHORT usButtonData;
}
//C         ULONG ulRawButtons;
//C         LONG lLastX;
//C         LONG lLastY;
//C         ULONG ulExtraInformation;
//C       } RAWMOUSE,*PRAWMOUSE,*LPRAWMOUSE;
struct tagRAWMOUSE
{
    USHORT usFlags;
    ULONG ulButtons;
    USHORT usButtonFlags;
    USHORT usButtonData;
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
}
alias tagRAWMOUSE RAWMOUSE;
alias tagRAWMOUSE *PRAWMOUSE;
alias tagRAWMOUSE *LPRAWMOUSE;
//C       typedef struct tagRAWKEYBOARD {
//C         USHORT MakeCode;
//C         USHORT Flags;
//C         USHORT Reserved;
//C         USHORT VKey;
//C         UINT Message;
//C         ULONG ExtraInformation;
//C       } RAWKEYBOARD,*PRAWKEYBOARD,*LPRAWKEYBOARD;
struct tagRAWKEYBOARD
{
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
}
alias tagRAWKEYBOARD RAWKEYBOARD;
alias tagRAWKEYBOARD *PRAWKEYBOARD;
alias tagRAWKEYBOARD *LPRAWKEYBOARD;
//C       typedef struct tagRAWHID {
//C         DWORD dwSizeHid;
//C         DWORD dwCount;
//C         BYTE bRawData[1];
//C       } RAWHID,*PRAWHID,*LPRAWHID;
struct tagRAWHID
{
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE [1]bRawData;
}
alias tagRAWHID RAWHID;
alias tagRAWHID *PRAWHID;
alias tagRAWHID *LPRAWHID;
//C       typedef struct tagRAWINPUT {
//C         RAWINPUTHEADER header;
//C         union {
//C           RAWMOUSE mouse;
//C           RAWKEYBOARD keyboard;
//C           RAWHID hid;
//C         } data;
union _N83
{
    RAWMOUSE mouse;
    RAWKEYBOARD keyboard;
    RAWHID hid;
}
//C       } RAWINPUT,*PRAWINPUT,*LPRAWINPUT;
struct tagRAWINPUT
{
    RAWINPUTHEADER header;
    _N83 data;
}
alias tagRAWINPUT RAWINPUT;
alias tagRAWINPUT *PRAWINPUT;
alias tagRAWINPUT *LPRAWINPUT;
//C        UINT GetRawInputData(HRAWINPUT hRawInput,UINT uiCommand,LPVOID pData,PUINT pcbSize,UINT cbSizeHeader);
UINT  GetRawInputData(HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);
//C       typedef struct tagRID_DEVICE_INFO_MOUSE {
//C         DWORD dwId;
//C         DWORD dwNumberOfButtons;
//C         DWORD dwSampleRate;
//C       } RID_DEVICE_INFO_MOUSE,*PRID_DEVICE_INFO_MOUSE;
struct tagRID_DEVICE_INFO_MOUSE
{
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
}
alias tagRID_DEVICE_INFO_MOUSE RID_DEVICE_INFO_MOUSE;
alias tagRID_DEVICE_INFO_MOUSE *PRID_DEVICE_INFO_MOUSE;
//C       typedef struct tagRID_DEVICE_INFO_KEYBOARD {
//C         DWORD dwType;
//C         DWORD dwSubType;
//C         DWORD dwKeyboardMode;
//C         DWORD dwNumberOfFunctionKeys;
//C         DWORD dwNumberOfIndicators;
//C         DWORD dwNumberOfKeysTotal;
//C       } RID_DEVICE_INFO_KEYBOARD,*PRID_DEVICE_INFO_KEYBOARD;
struct tagRID_DEVICE_INFO_KEYBOARD
{
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
}
alias tagRID_DEVICE_INFO_KEYBOARD RID_DEVICE_INFO_KEYBOARD;
alias tagRID_DEVICE_INFO_KEYBOARD *PRID_DEVICE_INFO_KEYBOARD;
//C       typedef struct tagRID_DEVICE_INFO_HID {
//C         DWORD dwVendorId;
//C         DWORD dwProductId;
//C         DWORD dwVersionNumber;
//C         USHORT usUsagePage;
//C         USHORT usUsage;
//C       } RID_DEVICE_INFO_HID,*PRID_DEVICE_INFO_HID;
struct tagRID_DEVICE_INFO_HID
{
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
}
alias tagRID_DEVICE_INFO_HID RID_DEVICE_INFO_HID;
alias tagRID_DEVICE_INFO_HID *PRID_DEVICE_INFO_HID;
//C       typedef struct tagRID_DEVICE_INFO {
//C         DWORD cbSize;
//C         DWORD dwType;
//C          union {
//C           RID_DEVICE_INFO_MOUSE mouse;
//C           RID_DEVICE_INFO_KEYBOARD keyboard;
//C           RID_DEVICE_INFO_HID hid;
//C         } ;
union _N84
{
    RID_DEVICE_INFO_MOUSE mouse;
    RID_DEVICE_INFO_KEYBOARD keyboard;
    RID_DEVICE_INFO_HID hid;
}
//C       } RID_DEVICE_INFO,*PRID_DEVICE_INFO,*LPRID_DEVICE_INFO;
struct tagRID_DEVICE_INFO
{
    DWORD cbSize;
    DWORD dwType;
    RID_DEVICE_INFO_MOUSE mouse;
    RID_DEVICE_INFO_KEYBOARD keyboard;
    RID_DEVICE_INFO_HID hid;
}
alias tagRID_DEVICE_INFO RID_DEVICE_INFO;
alias tagRID_DEVICE_INFO *PRID_DEVICE_INFO;
alias tagRID_DEVICE_INFO *LPRID_DEVICE_INFO;
//C        UINT GetRawInputDeviceInfoA(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
UINT  GetRawInputDeviceInfoA(HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
//C        UINT GetRawInputDeviceInfoW(HANDLE hDevice,UINT uiCommand,LPVOID pData,PUINT pcbSize);
UINT  GetRawInputDeviceInfoW(HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
//C        UINT GetRawInputBuffer(PRAWINPUT pData,PUINT pcbSize,UINT cbSizeHeader);
UINT  GetRawInputBuffer(PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);
//C       typedef struct tagRAWINPUTDEVICE {
//C         USHORT usUsagePage;
//C         USHORT usUsage;
//C         DWORD dwFlags;
//C         HWND hwndTarget;
//C       } RAWINPUTDEVICE,*PRAWINPUTDEVICE,*LPRAWINPUTDEVICE;
struct tagRAWINPUTDEVICE
{
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
}
alias tagRAWINPUTDEVICE RAWINPUTDEVICE;
alias tagRAWINPUTDEVICE *PRAWINPUTDEVICE;
alias tagRAWINPUTDEVICE *LPRAWINPUTDEVICE;
//C       typedef const RAWINPUTDEVICE *PCRAWINPUTDEVICE;
alias RAWINPUTDEVICE *PCRAWINPUTDEVICE;
//C        WINBOOL RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices,UINT uiNumDevices,UINT cbSize);
WINBOOL  RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
//C        UINT GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices,PUINT puiNumDevices,UINT cbSize);
UINT  GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
//C       typedef struct tagRAWINPUTDEVICELIST {
//C         HANDLE hDevice;
//C         DWORD dwType;
//C       } RAWINPUTDEVICELIST,*PRAWINPUTDEVICELIST;
struct tagRAWINPUTDEVICELIST
{
    HANDLE hDevice;
    DWORD dwType;
}
alias tagRAWINPUTDEVICELIST RAWINPUTDEVICELIST;
alias tagRAWINPUTDEVICELIST *PRAWINPUTDEVICELIST;
//C        UINT GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList,PUINT puiNumDevices,UINT cbSize);
UINT  GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
//C        LRESULT DefRawInputProc(PRAWINPUT *paRawInput,INT nInput,UINT cbSizeHeader);
LRESULT  DefRawInputProc(PRAWINPUT *paRawInput, INT nInput, UINT cbSizeHeader);
//C       typedef DWORD LGRPID;
alias DWORD LGRPID;
//C       typedef DWORD LCTYPE;
alias DWORD LCTYPE;
//C       typedef DWORD CALTYPE;
alias DWORD CALTYPE;
//C       typedef DWORD CALID;
alias DWORD CALID;
//C       typedef struct _cpinfo {
//C         UINT MaxCharSize;
//C         BYTE DefaultChar[2];
//C         BYTE LeadByte[12];
//C       } CPINFO,*LPCPINFO;
struct _cpinfo
{
    UINT MaxCharSize;
    BYTE [2]DefaultChar;
    BYTE [12]LeadByte;
}
alias _cpinfo CPINFO;
alias _cpinfo *LPCPINFO;
//C       typedef struct _cpinfoexA {
//C         UINT MaxCharSize;
//C         BYTE DefaultChar[2];
//C         BYTE LeadByte[12];
//C         WCHAR UnicodeDefaultChar;
//C         UINT CodePage;
//C         CHAR CodePageName[260];
//C       } CPINFOEXA,*LPCPINFOEXA;
struct _cpinfoexA
{
    UINT MaxCharSize;
    BYTE [2]DefaultChar;
    BYTE [12]LeadByte;
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR [260]CodePageName;
}
alias _cpinfoexA CPINFOEXA;
alias _cpinfoexA *LPCPINFOEXA;
//C       typedef struct _cpinfoexW {
//C         UINT MaxCharSize;
//C         BYTE DefaultChar[2];
//C         BYTE LeadByte[12];
//C         WCHAR UnicodeDefaultChar;
//C         UINT CodePage;
//C         WCHAR CodePageName[260];
//C       } CPINFOEXW,*LPCPINFOEXW;
struct _cpinfoexW
{
    UINT MaxCharSize;
    BYTE [2]DefaultChar;
    BYTE [12]LeadByte;
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR [260]CodePageName;
}
alias _cpinfoexW CPINFOEXW;
alias _cpinfoexW *LPCPINFOEXW;
//C       typedef CPINFOEXA CPINFOEX;
alias CPINFOEXA CPINFOEX;
//C       typedef LPCPINFOEXA LPCPINFOEX;
alias LPCPINFOEXA LPCPINFOEX;
//C       typedef struct _numberfmtA {
//C         UINT NumDigits;
//C         UINT LeadingZero;
//C         UINT Grouping;
//C         LPSTR lpDecimalSep;
//C         LPSTR lpThousandSep;
//C         UINT NegativeOrder;
//C       } NUMBERFMTA,*LPNUMBERFMTA;
struct _numberfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
}
alias _numberfmtA NUMBERFMTA;
alias _numberfmtA *LPNUMBERFMTA;
//C       typedef struct _numberfmtW {
//C         UINT NumDigits;
//C         UINT LeadingZero;
//C         UINT Grouping;
//C         LPWSTR lpDecimalSep;
//C         LPWSTR lpThousandSep;
//C         UINT NegativeOrder;
//C       } NUMBERFMTW,*LPNUMBERFMTW;
struct _numberfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
}
alias _numberfmtW NUMBERFMTW;
alias _numberfmtW *LPNUMBERFMTW;
//C       typedef NUMBERFMTA NUMBERFMT;
alias NUMBERFMTA NUMBERFMT;
//C       typedef LPNUMBERFMTA LPNUMBERFMT;
alias LPNUMBERFMTA LPNUMBERFMT;
//C       typedef struct _currencyfmtA {
//C         UINT NumDigits;
//C         UINT LeadingZero;
//C         UINT Grouping;
//C         LPSTR lpDecimalSep;
//C         LPSTR lpThousandSep;
//C         UINT NegativeOrder;
//C         UINT PositiveOrder;
//C         LPSTR lpCurrencySymbol;
//C       } CURRENCYFMTA,*LPCURRENCYFMTA;
struct _currencyfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
}
alias _currencyfmtA CURRENCYFMTA;
alias _currencyfmtA *LPCURRENCYFMTA;
//C       typedef struct _currencyfmtW {
//C         UINT NumDigits;
//C         UINT LeadingZero;
//C         UINT Grouping;
//C         LPWSTR lpDecimalSep;
//C         LPWSTR lpThousandSep;
//C         UINT NegativeOrder;
//C         UINT PositiveOrder;
//C         LPWSTR lpCurrencySymbol;
//C       } CURRENCYFMTW,*LPCURRENCYFMTW;
struct _currencyfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
}
alias _currencyfmtW CURRENCYFMTW;
alias _currencyfmtW *LPCURRENCYFMTW;
//C       typedef CURRENCYFMTA CURRENCYFMT;
alias CURRENCYFMTA CURRENCYFMT;
//C       typedef LPCURRENCYFMTA LPCURRENCYFMT;
alias LPCURRENCYFMTA LPCURRENCYFMT;
//C       enum SYSNLS_FUNCTION {
//C         COMPARE_STRING = 0x0001
//C       };
enum SYSNLS_FUNCTION
{
    COMPARE_STRING = 1,
}
//C       typedef DWORD NLS_FUNCTION;
alias DWORD NLS_FUNCTION;
//C       typedef struct _nlsversioninfo{
//C         DWORD dwNLSVersionInfoSize;
//C         DWORD dwNLSVersion;
//C         DWORD dwDefinedVersion;
//C       } NLSVERSIONINFO,*LPNLSVERSIONINFO;
struct _nlsversioninfo
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
}
alias _nlsversioninfo NLSVERSIONINFO;
alias _nlsversioninfo *LPNLSVERSIONINFO;
//C       typedef LONG GEOID;
alias LONG GEOID;
//C       typedef DWORD GEOTYPE;
alias DWORD GEOTYPE;
//C       typedef DWORD GEOCLASS;
alias DWORD GEOCLASS;
//C       enum SYSGEOTYPE {
//C         GEO_NATION = 0x0001,GEO_LATITUDE = 0x0002,GEO_LONGITUDE = 0x0003,GEO_ISO2 = 0x0004,GEO_ISO3 = 0x0005,GEO_RFC1766 = 0x0006,GEO_LCID = 0x0007,
//C         GEO_FRIENDLYNAME= 0x0008,GEO_OFFICIALNAME= 0x0009,GEO_TIMEZONES = 0x000A,GEO_OFFICIALLANGUAGES = 0x000B
//C       };
enum SYSGEOTYPE
{
    GEO_NATION = 1,
    GEO_LATITUDE,
    GEO_LONGITUDE,
    GEO_ISO2,
    GEO_ISO3,
    GEO_RFC1766,
    GEO_LCID,
    GEO_FRIENDLYNAME,
    GEO_OFFICIALNAME,
    GEO_TIMEZONES,
    GEO_OFFICIALLANGUAGES,
}
//C       enum SYSGEOCLASS {
//C         GEOCLASS_NATION = 16,GEOCLASS_REGION = 14
//C       };
enum SYSGEOCLASS
{
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
}
//C       typedef enum _NORM_FORM {
//C       NormalizationOther = 0,
//C       NormalizationC = 0x1,
//C       NormalizationD = 0x2,
//C       NormalizationKC = 0x5,
//C       NormalizationKD = 0x6
//C     } NORM_FORM;
enum _NORM_FORM
{
    NormalizationOther,
    NormalizationC,
    NormalizationD,
    NormalizationKC = 5,
    NormalizationKD,
}
alias _NORM_FORM NORM_FORM;
//C       typedef WINBOOL ( *LANGUAGEGROUP_ENUMPROCA)(LGRPID,LPSTR,LPSTR,DWORD,LONG_PTR);
alias WINBOOL  function(LGRPID , LPSTR , LPSTR , DWORD , LONG_PTR )LANGUAGEGROUP_ENUMPROCA;
//C       typedef WINBOOL ( *LANGGROUPLOCALE_ENUMPROCA)(LGRPID,LCID,LPSTR,LONG_PTR);
alias WINBOOL  function(LGRPID , LCID , LPSTR , LONG_PTR )LANGGROUPLOCALE_ENUMPROCA;
//C       typedef WINBOOL ( *UILANGUAGE_ENUMPROCA)(LPSTR,LONG_PTR);
alias WINBOOL  function(LPSTR , LONG_PTR )UILANGUAGE_ENUMPROCA;
//C       typedef WINBOOL ( *LOCALE_ENUMPROCA)(LPSTR);
alias WINBOOL  function(LPSTR )LOCALE_ENUMPROCA;
//C       typedef WINBOOL ( *CODEPAGE_ENUMPROCA)(LPSTR);
alias WINBOOL  function(LPSTR )CODEPAGE_ENUMPROCA;
//C       typedef WINBOOL ( *DATEFMT_ENUMPROCA)(LPSTR);
alias WINBOOL  function(LPSTR )DATEFMT_ENUMPROCA;
//C       typedef WINBOOL ( *DATEFMT_ENUMPROCEXA)(LPSTR,CALID);
alias WINBOOL  function(LPSTR , CALID )DATEFMT_ENUMPROCEXA;
//C       typedef WINBOOL ( *TIMEFMT_ENUMPROCA)(LPSTR);
alias WINBOOL  function(LPSTR )TIMEFMT_ENUMPROCA;
//C       typedef WINBOOL ( *CALINFO_ENUMPROCA)(LPSTR);
alias WINBOOL  function(LPSTR )CALINFO_ENUMPROCA;
//C       typedef WINBOOL ( *CALINFO_ENUMPROCEXA)(LPSTR,CALID);
alias WINBOOL  function(LPSTR , CALID )CALINFO_ENUMPROCEXA;
//C       typedef WINBOOL ( *LANGUAGEGROUP_ENUMPROCW)(LGRPID,LPWSTR,LPWSTR,DWORD,LONG_PTR);
alias WINBOOL  function(LGRPID , LPWSTR , LPWSTR , DWORD , LONG_PTR )LANGUAGEGROUP_ENUMPROCW;
//C       typedef WINBOOL ( *LANGGROUPLOCALE_ENUMPROCW)(LGRPID,LCID,LPWSTR,LONG_PTR);
alias WINBOOL  function(LGRPID , LCID , LPWSTR , LONG_PTR )LANGGROUPLOCALE_ENUMPROCW;
//C       typedef WINBOOL ( *UILANGUAGE_ENUMPROCW)(LPWSTR,LONG_PTR);
alias WINBOOL  function(LPWSTR , LONG_PTR )UILANGUAGE_ENUMPROCW;
//C       typedef WINBOOL ( *LOCALE_ENUMPROCW)(LPWSTR);
alias WINBOOL  function(LPWSTR )LOCALE_ENUMPROCW;
//C       typedef WINBOOL ( *CODEPAGE_ENUMPROCW)(LPWSTR);
alias WINBOOL  function(LPWSTR )CODEPAGE_ENUMPROCW;
//C       typedef WINBOOL ( *DATEFMT_ENUMPROCW)(LPWSTR);
alias WINBOOL  function(LPWSTR )DATEFMT_ENUMPROCW;
//C       typedef WINBOOL ( *DATEFMT_ENUMPROCEXW)(LPWSTR,CALID);
alias WINBOOL  function(LPWSTR , CALID )DATEFMT_ENUMPROCEXW;
//C       typedef WINBOOL ( *TIMEFMT_ENUMPROCW)(LPWSTR);
alias WINBOOL  function(LPWSTR )TIMEFMT_ENUMPROCW;
//C       typedef WINBOOL ( *CALINFO_ENUMPROCW)(LPWSTR);
alias WINBOOL  function(LPWSTR )CALINFO_ENUMPROCW;
//C       typedef WINBOOL ( *CALINFO_ENUMPROCEXW)(LPWSTR,CALID);
alias WINBOOL  function(LPWSTR , CALID )CALINFO_ENUMPROCEXW;
//C       typedef WINBOOL ( *GEO_ENUMPROC)(GEOID);
alias WINBOOL  function(GEOID )GEO_ENUMPROC;
//C        WINBOOL IsValidCodePage(UINT CodePage);
WINBOOL  IsValidCodePage(UINT CodePage);
//C        UINT GetACP(void);
UINT  GetACP();
//C        UINT GetOEMCP(void);
UINT  GetOEMCP();
//C        WINBOOL GetCPInfo(UINT CodePage,LPCPINFO lpCPInfo);
WINBOOL  GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo);
//C        WINBOOL GetCPInfoExA(UINT CodePage,DWORD dwFlags,LPCPINFOEXA lpCPInfoEx);
WINBOOL  GetCPInfoExA(UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
//C        WINBOOL GetCPInfoExW(UINT CodePage,DWORD dwFlags,LPCPINFOEXW lpCPInfoEx);
WINBOOL  GetCPInfoExW(UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);
//C        WINBOOL IsDBCSLeadByte(BYTE TestChar);
WINBOOL  IsDBCSLeadByte(BYTE TestChar);
//C        WINBOOL IsDBCSLeadByteEx(UINT CodePage,BYTE TestChar);
WINBOOL  IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar);
//C        int MultiByteToWideChar(UINT CodePage,DWORD dwFlags,LPCSTR lpMultiByteStr,int cbMultiByte,LPWSTR lpWideCharStr,int cchWideChar);
int  MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
//C        int WideCharToMultiByte(UINT CodePage,DWORD dwFlags,LPCWSTR lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cbMultiByte,LPCSTR lpDefaultChar,LPBOOL lpUsedDefaultChar);
int  WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCSTR lpDefaultChar, LPBOOL lpUsedDefaultChar);
//C        int CompareStringA(LCID Locale,DWORD dwCmpFlags,LPCSTR lpString1,int cchCount1,LPCSTR lpString2,int cchCount2);
int  CompareStringA(LCID Locale, DWORD dwCmpFlags, LPCSTR lpString1, int cchCount1, LPCSTR lpString2, int cchCount2);
//C        int CompareStringW(LCID Locale,DWORD dwCmpFlags,LPCWSTR lpString1,int cchCount1,LPCWSTR lpString2,int cchCount2);
int  CompareStringW(LCID Locale, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2);
//C        int LCMapStringA(LCID Locale,DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest);
int  LCMapStringA(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
//C        int LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest);
int  LCMapStringW(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
//C        int GetLocaleInfoA(LCID Locale,LCTYPE LCType,LPSTR lpLCData,int cchData);
int  GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData);
//C        int GetLocaleInfoW(LCID Locale,LCTYPE LCType,LPWSTR lpLCData,int cchData);
int  GetLocaleInfoW(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
//C        WINBOOL SetLocaleInfoA(LCID Locale,LCTYPE LCType,LPCSTR lpLCData);
WINBOOL  SetLocaleInfoA(LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
//C        WINBOOL SetLocaleInfoW(LCID Locale,LCTYPE LCType,LPCWSTR lpLCData);
WINBOOL  SetLocaleInfoW(LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
//C        int GetCalendarInfoA(LCID Locale,CALID Calendar,CALTYPE CalType,LPSTR lpCalData,int cchData,LPDWORD lpValue);
int  GetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue);
//C        int GetCalendarInfoW(LCID Locale,CALID Calendar,CALTYPE CalType,LPWSTR lpCalData,int cchData,LPDWORD lpValue);
int  GetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
//C        WINBOOL SetCalendarInfoA(LCID Locale,CALID Calendar,CALTYPE CalType,LPCSTR lpCalData);
WINBOOL  SetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
//C        WINBOOL SetCalendarInfoW(LCID Locale,CALID Calendar,CALTYPE CalType,LPCWSTR lpCalData);
WINBOOL  SetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);
//C        int GetTimeFormatA(LCID Locale,DWORD dwFlags,const SYSTEMTIME *lpTime,LPCSTR lpFormat,LPSTR lpTimeStr,int cchTime);
int  GetTimeFormatA(LCID Locale, DWORD dwFlags, SYSTEMTIME *lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime);
//C        int GetTimeFormatW(LCID Locale,DWORD dwFlags,const SYSTEMTIME *lpTime,LPCWSTR lpFormat,LPWSTR lpTimeStr,int cchTime);
int  GetTimeFormatW(LCID Locale, DWORD dwFlags, SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
//C        int GetDateFormatA(LCID Locale,DWORD dwFlags,const SYSTEMTIME *lpDate,LPCSTR lpFormat,LPSTR lpDateStr,int cchDate);
int  GetDateFormatA(LCID Locale, DWORD dwFlags, SYSTEMTIME *lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate);
//C        int GetDateFormatW(LCID Locale,DWORD dwFlags,const SYSTEMTIME *lpDate,LPCWSTR lpFormat,LPWSTR lpDateStr,int cchDate);
int  GetDateFormatW(LCID Locale, DWORD dwFlags, SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
//C        int GetNumberFormatA(LCID Locale,DWORD dwFlags,LPCSTR lpValue,const NUMBERFMTA *lpFormat,LPSTR lpNumberStr,int cchNumber);
int  GetNumberFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, NUMBERFMTA *lpFormat, LPSTR lpNumberStr, int cchNumber);
//C        int GetNumberFormatW(LCID Locale,DWORD dwFlags,LPCWSTR lpValue,const NUMBERFMTW *lpFormat,LPWSTR lpNumberStr,int cchNumber);
int  GetNumberFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber);
//C        int GetCurrencyFormatA(LCID Locale,DWORD dwFlags,LPCSTR lpValue,const CURRENCYFMTA *lpFormat,LPSTR lpCurrencyStr,int cchCurrency);
int  GetCurrencyFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, CURRENCYFMTA *lpFormat, LPSTR lpCurrencyStr, int cchCurrency);
//C        int GetCurrencyFormatW(LCID Locale,DWORD dwFlags,LPCWSTR lpValue,const CURRENCYFMTW *lpFormat,LPWSTR lpCurrencyStr,int cchCurrency);
int  GetCurrencyFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
//C        WINBOOL EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType);
WINBOOL  EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
//C        WINBOOL EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType);
WINBOOL  EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
//C        WINBOOL EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,LCID Locale,CALID Calendar,CALTYPE CalType);
WINBOOL  EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
//C        WINBOOL EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,LCID Locale,CALID Calendar,CALTYPE CalType);
WINBOOL  EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
//C        WINBOOL EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags);
WINBOOL  EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
//C        WINBOOL EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags);
WINBOOL  EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
//C        WINBOOL EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc,LCID Locale,DWORD dwFlags);
WINBOOL  EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
//C        WINBOOL EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc,LCID Locale,DWORD dwFlags);
WINBOOL  EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
//C        WINBOOL EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,LCID Locale,DWORD dwFlags);
WINBOOL  EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
//C        WINBOOL EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,LCID Locale,DWORD dwFlags);
WINBOOL  EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
//C        WINBOOL IsValidLanguageGroup(LGRPID LanguageGroup,DWORD dwFlags);
WINBOOL  IsValidLanguageGroup(LGRPID LanguageGroup, DWORD dwFlags);
//C        WINBOOL GetNLSVersion(NLS_FUNCTION Function,LCID Locale,LPNLSVERSIONINFO lpVersionInformation);
WINBOOL  GetNLSVersion(NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);
//C        WINBOOL IsNLSDefinedString(NLS_FUNCTION Function,DWORD dwFlags,LPNLSVERSIONINFO lpVersionInformation,LPCWSTR lpString,INT cchStr);
WINBOOL  IsNLSDefinedString(NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);
//C        WINBOOL IsValidLocale(LCID Locale,DWORD dwFlags);
WINBOOL  IsValidLocale(LCID Locale, DWORD dwFlags);
//C        int GetGeoInfoA(GEOID Location,GEOTYPE GeoType,LPSTR lpGeoData,int cchData,LANGID LangId);
int  GetGeoInfoA(GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId);
//C        int GetGeoInfoW(GEOID Location,GEOTYPE GeoType,LPWSTR lpGeoData,int cchData,LANGID LangId);
int  GetGeoInfoW(GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId);
//C        WINBOOL EnumSystemGeoID(GEOCLASS GeoClass,GEOID ParentGeoId,GEO_ENUMPROC lpGeoEnumProc);
WINBOOL  EnumSystemGeoID(GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
//C        GEOID GetUserGeoID(GEOCLASS GeoClass);
GEOID  GetUserGeoID(GEOCLASS GeoClass);
//C        WINBOOL SetUserGeoID(GEOID GeoId);
WINBOOL  SetUserGeoID(GEOID GeoId);
//C        LCID ConvertDefaultLocale(LCID Locale);
LCID  ConvertDefaultLocale(LCID Locale);
//C        LCID GetThreadLocale(void);
LCID  GetThreadLocale();
//C        WINBOOL SetThreadLocale(LCID Locale);
WINBOOL  SetThreadLocale(LCID Locale);
//C        LANGID GetSystemDefaultUILanguage(void);
LANGID  GetSystemDefaultUILanguage();
//C        LANGID GetUserDefaultUILanguage(void);
LANGID  GetUserDefaultUILanguage();
//C        LANGID GetSystemDefaultLangID(void);
LANGID  GetSystemDefaultLangID();
//C        LANGID GetUserDefaultLangID(void);
LANGID  GetUserDefaultLangID();
//C        LCID GetSystemDefaultLCID(void);
LCID  GetSystemDefaultLCID();
//C        LCID GetUserDefaultLCID(void);
LCID  GetUserDefaultLCID();
//C        WINBOOL GetStringTypeExA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
WINBOOL  GetStringTypeExA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
//C        WINBOOL GetStringTypeExW(LCID Locale,DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
WINBOOL  GetStringTypeExW(LCID Locale, DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
//C        WINBOOL GetStringTypeA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
WINBOOL  GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
//C        WINBOOL GetStringTypeW(DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
WINBOOL  GetStringTypeW(DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
//C        int FoldStringA(DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest);
int  FoldStringA(DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
//C        int FoldStringW(DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest);
int  FoldStringW(DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
//C        WINBOOL EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,DWORD dwFlags,LONG_PTR lParam);
WINBOOL  EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
//C        WINBOOL EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,DWORD dwFlags,LONG_PTR lParam);
WINBOOL  EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
//C        WINBOOL EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,LGRPID LanguageGroup,DWORD dwFlags,LONG_PTR lParam);
WINBOOL  EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
//C        WINBOOL EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,LGRPID LanguageGroup,DWORD dwFlags,LONG_PTR lParam);
WINBOOL  EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
//C        WINBOOL EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,DWORD dwFlags,LONG_PTR lParam);
WINBOOL  EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
//C        WINBOOL EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,DWORD dwFlags,LONG_PTR lParam);
WINBOOL  EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
//C        WINBOOL EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc,DWORD dwFlags);
WINBOOL  EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
//C        WINBOOL EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc,DWORD dwFlags);
WINBOOL  EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
//C        WINBOOL EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc,DWORD dwFlags);
WINBOOL  EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
//C        WINBOOL EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc,DWORD dwFlags);
WINBOOL  EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);
//C        WINBOOL IsNormalizedString(NORM_FORM NormForm,LPCWSTR lpString,int cwLength);
WINBOOL  IsNormalizedString(NORM_FORM NormForm, LPCWSTR lpString, int cwLength);
//C        int NormalizeString(NORM_FORM NormForm,LPCWSTR lpSrcString,int cwSrcLength,LPWSTR lpDstString,int cwDstLength);
int  NormalizeString(NORM_FORM NormForm, LPCWSTR lpSrcString, int cwSrcLength, LPWSTR lpDstString, int cwDstLength);
//C        int IdnToAscii(DWORD dwFlags,LPCWSTR lpUnicodeCharStr,int cchUnicodeChar,LPWSTR lpASCIICharStr,int cchASCIIChar);
int  IdnToAscii(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpASCIICharStr, int cchASCIIChar);
//C        int IdnToNameprepUnicode(DWORD dwFlags,LPCWSTR lpUnicodeCharStr,int cchUnicodeChar,LPWSTR lpNameprepCharStr,int cchNameprepChar);
int  IdnToNameprepUnicode(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpNameprepCharStr, int cchNameprepChar);
//C        int IdnToUnicode(DWORD dwFlags,LPCWSTR lpASCIICharStr,int cchASCIIChar,LPWSTR lpUnicodeCharStr,int cchUnicodeChar);
int  IdnToUnicode(DWORD dwFlags, LPCWSTR lpASCIICharStr, int cchASCIIChar, LPWSTR lpUnicodeCharStr, int cchUnicodeChar);
//C      LANGID SetThreadUILanguage(
//C       LANGID LangId
//C     );
LANGID  SetThreadUILanguage(LANGID LangId);
//C       typedef struct _COORD {
//C         SHORT X;
//C         SHORT Y;
//C       } COORD,*PCOORD;
struct _COORD
{
    SHORT X;
    SHORT Y;
}
alias _COORD COORD;
alias _COORD *PCOORD;
//C       typedef struct _SMALL_RECT {
//C         SHORT Left;
//C         SHORT Top;
//C         SHORT Right;
//C         SHORT Bottom;
//C       } SMALL_RECT,*PSMALL_RECT;
struct _SMALL_RECT
{
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
}
alias _SMALL_RECT SMALL_RECT;
alias _SMALL_RECT *PSMALL_RECT;
//C       typedef struct _KEY_EVENT_RECORD {
//C         WINBOOL bKeyDown;
//C         WORD wRepeatCount;
//C         WORD wVirtualKeyCode;
//C         WORD wVirtualScanCode;
//C         union {
//C           WCHAR UnicodeChar;
//C           CHAR AsciiChar;
//C         } uChar;
union _N85
{
    WCHAR UnicodeChar;
    CHAR AsciiChar;
}
//C         DWORD dwControlKeyState;
//C       } KEY_EVENT_RECORD,*PKEY_EVENT_RECORD;
struct _KEY_EVENT_RECORD
{
    WINBOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    _N85 uChar;
    DWORD dwControlKeyState;
}
alias _KEY_EVENT_RECORD KEY_EVENT_RECORD;
alias _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;
//C       typedef struct _MOUSE_EVENT_RECORD {
//C         COORD dwMousePosition;
//C         DWORD dwButtonState;
//C         DWORD dwControlKeyState;
//C         DWORD dwEventFlags;
//C       } MOUSE_EVENT_RECORD,*PMOUSE_EVENT_RECORD;
struct _MOUSE_EVENT_RECORD
{
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
}
alias _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;
alias _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;
//C       typedef struct _WINDOW_BUFFER_SIZE_RECORD {
//C         COORD dwSize;
//C       } WINDOW_BUFFER_SIZE_RECORD,*PWINDOW_BUFFER_SIZE_RECORD;
struct _WINDOW_BUFFER_SIZE_RECORD
{
    COORD dwSize;
}
alias _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;
alias _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;
//C       typedef struct _MENU_EVENT_RECORD {
//C         UINT dwCommandId;
//C       } MENU_EVENT_RECORD,*PMENU_EVENT_RECORD;
struct _MENU_EVENT_RECORD
{
    UINT dwCommandId;
}
alias _MENU_EVENT_RECORD MENU_EVENT_RECORD;
alias _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;
//C       typedef struct _FOCUS_EVENT_RECORD {
//C         WINBOOL bSetFocus;
//C       } FOCUS_EVENT_RECORD,*PFOCUS_EVENT_RECORD;
struct _FOCUS_EVENT_RECORD
{
    WINBOOL bSetFocus;
}
alias _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;
alias _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;
//C       typedef struct _INPUT_RECORD {
//C         WORD EventType;
//C         union {
//C           KEY_EVENT_RECORD KeyEvent;
//C           MOUSE_EVENT_RECORD MouseEvent;
//C           WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
//C           MENU_EVENT_RECORD MenuEvent;
//C           FOCUS_EVENT_RECORD FocusEvent;
//C         } Event;
union _N86
{
    KEY_EVENT_RECORD KeyEvent;
    MOUSE_EVENT_RECORD MouseEvent;
    WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
    MENU_EVENT_RECORD MenuEvent;
    FOCUS_EVENT_RECORD FocusEvent;
}
//C       } INPUT_RECORD,*PINPUT_RECORD;
struct _INPUT_RECORD
{
    WORD EventType;
    _N86 Event;
}
alias _INPUT_RECORD INPUT_RECORD;
alias _INPUT_RECORD *PINPUT_RECORD;
//C       typedef struct _CHAR_INFO {
//C         union {
//C           WCHAR UnicodeChar;
//C           CHAR AsciiChar;
//C         } Char;
union _N87
{
    WCHAR UnicodeChar;
    CHAR AsciiChar;
}
//C         WORD Attributes;
//C       } CHAR_INFO,*PCHAR_INFO;
struct _CHAR_INFO
{
    _N87 Char;
    WORD Attributes;
}
alias _CHAR_INFO CHAR_INFO;
alias _CHAR_INFO *PCHAR_INFO;
//C       typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
//C         COORD dwSize;
//C         COORD dwCursorPosition;
//C         WORD wAttributes;
//C         SMALL_RECT srWindow;
//C         COORD dwMaximumWindowSize;
//C       } CONSOLE_SCREEN_BUFFER_INFO,*PCONSOLE_SCREEN_BUFFER_INFO;
struct _CONSOLE_SCREEN_BUFFER_INFO
{
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
}
alias _CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SCREEN_BUFFER_INFO;
alias _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;
//C       typedef struct _CONSOLE_CURSOR_INFO {
//C         DWORD dwSize;
//C         WINBOOL bVisible;
//C       } CONSOLE_CURSOR_INFO,*PCONSOLE_CURSOR_INFO;
struct _CONSOLE_CURSOR_INFO
{
    DWORD dwSize;
    WINBOOL bVisible;
}
alias _CONSOLE_CURSOR_INFO CONSOLE_CURSOR_INFO;
alias _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;
//C       typedef struct _CONSOLE_FONT_INFO {
//C         DWORD nFont;
//C         COORD dwFontSize;
//C       } CONSOLE_FONT_INFO,*PCONSOLE_FONT_INFO;
struct _CONSOLE_FONT_INFO
{
    DWORD nFont;
    COORD dwFontSize;
}
alias _CONSOLE_FONT_INFO CONSOLE_FONT_INFO;
alias _CONSOLE_FONT_INFO *PCONSOLE_FONT_INFO;
//C       typedef struct _CONSOLE_SELECTION_INFO {
//C         DWORD dwFlags;
//C         COORD dwSelectionAnchor;
//C         SMALL_RECT srSelection;
//C       } CONSOLE_SELECTION_INFO,*PCONSOLE_SELECTION_INFO;
struct _CONSOLE_SELECTION_INFO
{
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
}
alias _CONSOLE_SELECTION_INFO CONSOLE_SELECTION_INFO;
alias _CONSOLE_SELECTION_INFO *PCONSOLE_SELECTION_INFO;
//C       typedef WINBOOL ( *PHANDLER_ROUTINE)(DWORD CtrlType);
alias WINBOOL  function(DWORD CtrlType)PHANDLER_ROUTINE;
//C        WINBOOL PeekConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
WINBOOL  PeekConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
//C        WINBOOL PeekConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
WINBOOL  PeekConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
//C        WINBOOL ReadConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
WINBOOL  ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
//C        WINBOOL ReadConsoleInputW(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
WINBOOL  ReadConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
//C        WINBOOL WriteConsoleInputA(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
WINBOOL  WriteConsoleInputA(HANDLE hConsoleInput, INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
//C        WINBOOL WriteConsoleInputW(HANDLE hConsoleInput,const INPUT_RECORD *lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
WINBOOL  WriteConsoleInputW(HANDLE hConsoleInput, INPUT_RECORD *lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
//C        WINBOOL ReadConsoleOutputA(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
WINBOOL  ReadConsoleOutputA(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
//C        WINBOOL ReadConsoleOutputW(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
WINBOOL  ReadConsoleOutputW(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
//C        WINBOOL WriteConsoleOutputA(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
WINBOOL  WriteConsoleOutputA(HANDLE hConsoleOutput, CHAR_INFO *lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
//C        WINBOOL WriteConsoleOutputW(HANDLE hConsoleOutput,const CHAR_INFO *lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
WINBOOL  WriteConsoleOutputW(HANDLE hConsoleOutput, CHAR_INFO *lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
//C        WINBOOL ReadConsoleOutputCharacterA(HANDLE hConsoleOutput,LPSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
WINBOOL  ReadConsoleOutputCharacterA(HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
//C        WINBOOL ReadConsoleOutputCharacterW(HANDLE hConsoleOutput,LPWSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
WINBOOL  ReadConsoleOutputCharacterW(HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
//C        WINBOOL ReadConsoleOutputAttribute(HANDLE hConsoleOutput,LPWORD lpAttribute,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfAttrsRead);
WINBOOL  ReadConsoleOutputAttribute(HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead);
//C        WINBOOL WriteConsoleOutputCharacterA(HANDLE hConsoleOutput,LPCSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
WINBOOL  WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
//C        WINBOOL WriteConsoleOutputCharacterW(HANDLE hConsoleOutput,LPCWSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
WINBOOL  WriteConsoleOutputCharacterW(HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
//C        WINBOOL WriteConsoleOutputAttribute(HANDLE hConsoleOutput,const WORD *lpAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
WINBOOL  WriteConsoleOutputAttribute(HANDLE hConsoleOutput, WORD *lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
//C        WINBOOL FillConsoleOutputCharacterA(HANDLE hConsoleOutput,CHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
WINBOOL  FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
//C        WINBOOL FillConsoleOutputCharacterW(HANDLE hConsoleOutput,WCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
WINBOOL  FillConsoleOutputCharacterW(HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
//C        WINBOOL FillConsoleOutputAttribute(HANDLE hConsoleOutput,WORD wAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
WINBOOL  FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
//C        WINBOOL GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode);
WINBOOL  GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode);
//C        WINBOOL GetNumberOfConsoleInputEvents(HANDLE hConsoleInput,LPDWORD lpNumberOfEvents);
WINBOOL  GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents);
//C        WINBOOL GetConsoleScreenBufferInfo(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
WINBOOL  GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
//C        COORD GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
COORD  GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
//C        WINBOOL GetConsoleCursorInfo(HANDLE hConsoleOutput,PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
WINBOOL  GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
//C        WINBOOL GetCurrentConsoleFont(HANDLE hConsoleOutput,WINBOOL bMaximumWindow,PCONSOLE_FONT_INFO lpConsoleCurrentFont);
WINBOOL  GetCurrentConsoleFont(HANDLE hConsoleOutput, WINBOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont);
//C        COORD GetConsoleFontSize(HANDLE hConsoleOutput,DWORD nFont);
COORD  GetConsoleFontSize(HANDLE hConsoleOutput, DWORD nFont);
//C        WINBOOL GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
WINBOOL  GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
//C        WINBOOL GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
WINBOOL  GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
//C        WINBOOL SetConsoleMode(HANDLE hConsoleHandle,DWORD dwMode);
WINBOOL  SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode);
//C        WINBOOL SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
WINBOOL  SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
//C        WINBOOL FlushConsoleInputBuffer(HANDLE hConsoleInput);
WINBOOL  FlushConsoleInputBuffer(HANDLE hConsoleInput);
//C        WINBOOL SetConsoleScreenBufferSize(HANDLE hConsoleOutput,COORD dwSize);
WINBOOL  SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize);
//C        WINBOOL SetConsoleCursorPosition(HANDLE hConsoleOutput,COORD dwCursorPosition);
WINBOOL  SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition);
//C        WINBOOL SetConsoleCursorInfo(HANDLE hConsoleOutput,const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo);
WINBOOL  SetConsoleCursorInfo(HANDLE hConsoleOutput, CONSOLE_CURSOR_INFO *lpConsoleCursorInfo);
//C        WINBOOL ScrollConsoleScreenBufferA(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
WINBOOL  ScrollConsoleScreenBufferA(HANDLE hConsoleOutput, SMALL_RECT *lpScrollRectangle, SMALL_RECT *lpClipRectangle, COORD dwDestinationOrigin, CHAR_INFO *lpFill);
//C        WINBOOL ScrollConsoleScreenBufferW(HANDLE hConsoleOutput,const SMALL_RECT *lpScrollRectangle,const SMALL_RECT *lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO *lpFill);
WINBOOL  ScrollConsoleScreenBufferW(HANDLE hConsoleOutput, SMALL_RECT *lpScrollRectangle, SMALL_RECT *lpClipRectangle, COORD dwDestinationOrigin, CHAR_INFO *lpFill);
//C        WINBOOL SetConsoleWindowInfo(HANDLE hConsoleOutput,WINBOOL bAbsolute,const SMALL_RECT *lpConsoleWindow);
WINBOOL  SetConsoleWindowInfo(HANDLE hConsoleOutput, WINBOOL bAbsolute, SMALL_RECT *lpConsoleWindow);
//C        WINBOOL SetConsoleTextAttribute(HANDLE hConsoleOutput,WORD wAttributes);
WINBOOL  SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes);
//C        WINBOOL SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine,WINBOOL Add);
WINBOOL  SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, WINBOOL Add);
//C        WINBOOL GenerateConsoleCtrlEvent(DWORD dwCtrlEvent,DWORD dwProcessGroupId);
WINBOOL  GenerateConsoleCtrlEvent(DWORD dwCtrlEvent, DWORD dwProcessGroupId);
//C        WINBOOL AllocConsole(void);
WINBOOL  AllocConsole();
//C        WINBOOL FreeConsole(void);
WINBOOL  FreeConsole();
//C        WINBOOL AttachConsole(DWORD dwProcessId);
WINBOOL  AttachConsole(DWORD dwProcessId);
//C        DWORD GetConsoleTitleA(LPSTR lpConsoleTitle,DWORD nSize);
DWORD  GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize);
//C        DWORD GetConsoleTitleW(LPWSTR lpConsoleTitle,DWORD nSize);
DWORD  GetConsoleTitleW(LPWSTR lpConsoleTitle, DWORD nSize);
//C        WINBOOL SetConsoleTitleA(LPCSTR lpConsoleTitle);
WINBOOL  SetConsoleTitleA(LPCSTR lpConsoleTitle);
//C        WINBOOL SetConsoleTitleW(LPCWSTR lpConsoleTitle);
WINBOOL  SetConsoleTitleW(LPCWSTR lpConsoleTitle);
//C        WINBOOL ReadConsoleA(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
WINBOOL  ReadConsoleA(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID lpReserved);
//C        WINBOOL ReadConsoleW(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID lpReserved);
WINBOOL  ReadConsoleW(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, LPVOID lpReserved);
//C        WINBOOL WriteConsoleA(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
WINBOOL  WriteConsoleA(HANDLE hConsoleOutput, void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
//C        WINBOOL WriteConsoleW(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
WINBOOL  WriteConsoleW(HANDLE hConsoleOutput, void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
//C        HANDLE CreateConsoleScreenBuffer(DWORD dwDesiredAccess,DWORD dwShareMode,const SECURITY_ATTRIBUTES *lpSecurityAttributes,DWORD dwFlags,LPVOID lpScreenBufferData);
HANDLE  CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, SECURITY_ATTRIBUTES *lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData);
//C        UINT GetConsoleCP(void);
UINT  GetConsoleCP();
//C        WINBOOL SetConsoleCP(UINT wCodePageID);
WINBOOL  SetConsoleCP(UINT wCodePageID);
//C        UINT GetConsoleOutputCP(void);
UINT  GetConsoleOutputCP();
//C        WINBOOL SetConsoleOutputCP(UINT wCodePageID);
WINBOOL  SetConsoleOutputCP(UINT wCodePageID);
//C        WINBOOL GetConsoleDisplayMode(LPDWORD lpModeFlags);
WINBOOL  GetConsoleDisplayMode(LPDWORD lpModeFlags);
//C        WINBOOL SetConsoleDisplayMode(HANDLE hConsoleOutput,DWORD dwFlags,PCOORD lpNewScreenBufferDimensions);
WINBOOL  SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);
//C        HWND GetConsoleWindow(void);
HWND  GetConsoleWindow();
//C        DWORD GetConsoleProcessList(LPDWORD lpdwProcessList,DWORD dwProcessCount);
DWORD  GetConsoleProcessList(LPDWORD lpdwProcessList, DWORD dwProcessCount);
//C        WINBOOL AddConsoleAliasA(LPSTR Source,LPSTR Target,LPSTR ExeName);
WINBOOL  AddConsoleAliasA(LPSTR Source, LPSTR Target, LPSTR ExeName);
//C        WINBOOL AddConsoleAliasW(LPWSTR Source,LPWSTR Target,LPWSTR ExeName);
WINBOOL  AddConsoleAliasW(LPWSTR Source, LPWSTR Target, LPWSTR ExeName);
//C        DWORD GetConsoleAliasA(LPSTR Source,LPSTR TargetBuffer,DWORD TargetBufferLength,LPSTR ExeName);
DWORD  GetConsoleAliasA(LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName);
//C        DWORD GetConsoleAliasW(LPWSTR Source,LPWSTR TargetBuffer,DWORD TargetBufferLength,LPWSTR ExeName);
DWORD  GetConsoleAliasW(LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName);
//C        DWORD GetConsoleAliasesLengthA(LPSTR ExeName);
DWORD  GetConsoleAliasesLengthA(LPSTR ExeName);
//C        DWORD GetConsoleAliasesLengthW(LPWSTR ExeName);
DWORD  GetConsoleAliasesLengthW(LPWSTR ExeName);
//C        DWORD GetConsoleAliasExesLengthA(void);
DWORD  GetConsoleAliasExesLengthA();
//C        DWORD GetConsoleAliasExesLengthW(void);
DWORD  GetConsoleAliasExesLengthW();
//C        DWORD GetConsoleAliasesA(LPSTR AliasBuffer,DWORD AliasBufferLength,LPSTR ExeName);
DWORD  GetConsoleAliasesA(LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName);
//C        DWORD GetConsoleAliasesW(LPWSTR AliasBuffer,DWORD AliasBufferLength,LPWSTR ExeName);
DWORD  GetConsoleAliasesW(LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName);
//C        DWORD GetConsoleAliasExesA(LPSTR ExeNameBuffer,DWORD ExeNameBufferLength);
DWORD  GetConsoleAliasExesA(LPSTR ExeNameBuffer, DWORD ExeNameBufferLength);
//C        DWORD GetConsoleAliasExesW(LPWSTR ExeNameBuffer,DWORD ExeNameBufferLength);
DWORD  GetConsoleAliasExesW(LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength);
//C     typedef struct _CONSOLE_FONT_INFOEX {
//C       ULONG cbSize;
//C       DWORD nFont;
//C       COORD dwFontSize;
//C       UINT FontFamily;
//C       UINT FontWeight;
//C       WCHAR FaceName[32];
//C     } CONSOLE_FONT_INFOEX,*PCONSOLE_FONT_INFOEX;
struct _CONSOLE_FONT_INFOEX
{
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR [32]FaceName;
}
alias _CONSOLE_FONT_INFOEX CONSOLE_FONT_INFOEX;
alias _CONSOLE_FONT_INFOEX *PCONSOLE_FONT_INFOEX;
//C     typedef struct _CONSOLE_HISTORY_INFO {
//C       UINT cbSize;
//C       UINT HistoryBufferSize;
//C       UINT NumberOfHistoryBuffers;
//C       DWORD dwFlags;
//C     } CONSOLE_HISTORY_INFO,*PCONSOLE_HISTORY_INFO;
struct _CONSOLE_HISTORY_INFO
{
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
}
alias _CONSOLE_HISTORY_INFO CONSOLE_HISTORY_INFO;
alias _CONSOLE_HISTORY_INFO *PCONSOLE_HISTORY_INFO;
//C     typedef struct _CONSOLE_READCONSOLE_CONTROL {
//C       ULONG nLength;
//C       ULONG nInitialChars;
//C       ULONG dwCtrlWakeupMask;
//C       ULONG dwControlKeyState;
//C     } CONSOLE_READCONSOLE_CONTROL,*PCONSOLE_READCONSOLE_CONTROL;
struct _CONSOLE_READCONSOLE_CONTROL
{
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
}
alias _CONSOLE_READCONSOLE_CONTROL CONSOLE_READCONSOLE_CONTROL;
alias _CONSOLE_READCONSOLE_CONTROL *PCONSOLE_READCONSOLE_CONTROL;
//C     typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
//C       ULONG cbSize;
//C       COORD dwSize;
//C       COORD dwCursorPosition;
//C       WORD wAttributes;
//C       SMALL_RECT srWindow;
//C       COORD dwMaximumWindowSize;
//C       WORD wPopupAttributes;
//C       BOOL bFullscreenSupported;
//C       COLORREF ColorTable[16];
//C     } CONSOLE_SCREEN_BUFFER_INFOEX,*PCONSOLE_SCREEN_BUFFER_INFOEX;
struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF [16]ColorTable;
}
alias _CONSOLE_SCREEN_BUFFER_INFOEX CONSOLE_SCREEN_BUFFER_INFOEX;
alias _CONSOLE_SCREEN_BUFFER_INFOEX *PCONSOLE_SCREEN_BUFFER_INFOEX;
//C     WINBOOL GetConsoleHistoryInfo(
//C       PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
//C     );
WINBOOL  GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
//C      WINBOOL GetConsoleScreenBufferInfoEx(
//C       HANDLE hConsoleOutput,
//C       PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
//C     );
WINBOOL  GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
//C      WINBOOL GetCurrentConsoleFontEx(
//C       HANDLE hConsoleOutput,
//C       WINBOOL bMaximumWindow,
//C       PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
//C     );
WINBOOL  GetCurrentConsoleFontEx(HANDLE hConsoleOutput, WINBOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
//C      WINBOOL SetConsoleHistoryInfo(
//C       PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
//C     );
WINBOOL  SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
//C      WINBOOL SetConsoleScreenBufferInfoEx(
//C       HANDLE hConsoleOutput,
//C       PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
//C     );
WINBOOL  SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
//C      WINBOOL SetCurrentConsoleFontEx(
//C       HANDLE hConsoleOutput,
//C       WINBOOL bMaximumWindow,
//C       PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
//C     );
WINBOOL  SetCurrentConsoleFontEx(HANDLE hConsoleOutput, WINBOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
//C       typedef struct tagVS_FIXEDFILEINFO
//C       {
//C         DWORD dwSignature;
//C         DWORD dwStrucVersion;
//C         DWORD dwFileVersionMS;
//C         DWORD dwFileVersionLS;
//C         DWORD dwProductVersionMS;
//C         DWORD dwProductVersionLS;
//C         DWORD dwFileFlagsMask;
//C         DWORD dwFileFlags;
//C         DWORD dwFileOS;
//C         DWORD dwFileType;
//C         DWORD dwFileSubtype;
//C         DWORD dwFileDateMS;
//C         DWORD dwFileDateLS;
//C       } VS_FIXEDFILEINFO;
struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
}
alias tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
//C       DWORD VerFindFileA(DWORD uFlags,LPSTR szFileName,LPSTR szWinDir,LPSTR szAppDir,LPSTR szCurDir,PUINT lpuCurDirLen,LPSTR szDestDir,PUINT lpuDestDirLen);
DWORD  VerFindFileA(DWORD uFlags, LPSTR szFileName, LPSTR szWinDir, LPSTR szAppDir, LPSTR szCurDir, PUINT lpuCurDirLen, LPSTR szDestDir, PUINT lpuDestDirLen);
//C       DWORD VerFindFileW(DWORD uFlags,LPWSTR szFileName,LPWSTR szWinDir,LPWSTR szAppDir,LPWSTR szCurDir,PUINT lpuCurDirLen,LPWSTR szDestDir,PUINT lpuDestDirLen);
DWORD  VerFindFileW(DWORD uFlags, LPWSTR szFileName, LPWSTR szWinDir, LPWSTR szAppDir, LPWSTR szCurDir, PUINT lpuCurDirLen, LPWSTR szDestDir, PUINT lpuDestDirLen);
//C       DWORD VerInstallFileA(DWORD uFlags,LPSTR szSrcFileName,LPSTR szDestFileName,LPSTR szSrcDir,LPSTR szDestDir,LPSTR szCurDir,LPSTR szTmpFile,PUINT lpuTmpFileLen);
DWORD  VerInstallFileA(DWORD uFlags, LPSTR szSrcFileName, LPSTR szDestFileName, LPSTR szSrcDir, LPSTR szDestDir, LPSTR szCurDir, LPSTR szTmpFile, PUINT lpuTmpFileLen);
//C       DWORD VerInstallFileW(DWORD uFlags,LPWSTR szSrcFileName,LPWSTR szDestFileName,LPWSTR szSrcDir,LPWSTR szDestDir,LPWSTR szCurDir,LPWSTR szTmpFile,PUINT lpuTmpFileLen);
DWORD  VerInstallFileW(DWORD uFlags, LPWSTR szSrcFileName, LPWSTR szDestFileName, LPWSTR szSrcDir, LPWSTR szDestDir, LPWSTR szCurDir, LPWSTR szTmpFile, PUINT lpuTmpFileLen);
//C       DWORD GetFileVersionInfoSizeA(LPCSTR lptstrFilename,LPDWORD lpdwHandle);
DWORD  GetFileVersionInfoSizeA(LPCSTR lptstrFilename, LPDWORD lpdwHandle);
//C       DWORD GetFileVersionInfoSizeW(LPCWSTR lptstrFilename,LPDWORD lpdwHandle);
DWORD  GetFileVersionInfoSizeW(LPCWSTR lptstrFilename, LPDWORD lpdwHandle);
//C       WINBOOL GetFileVersionInfoA(LPCSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
WINBOOL  GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
//C       WINBOOL GetFileVersionInfoW(LPCWSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
WINBOOL  GetFileVersionInfoW(LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
//C       DWORD VerLanguageNameA(DWORD wLang,LPSTR szLang,DWORD nSize);
DWORD  VerLanguageNameA(DWORD wLang, LPSTR szLang, DWORD nSize);
//C       DWORD VerLanguageNameW(DWORD wLang,LPWSTR szLang,DWORD nSize);
DWORD  VerLanguageNameW(DWORD wLang, LPWSTR szLang, DWORD nSize);
//C       WINBOOL VerQueryValueA(const LPVOID pBlock,LPCSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
WINBOOL  VerQueryValueA(LPVOID pBlock, LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen);
//C       WINBOOL VerQueryValueW(const LPVOID pBlock,LPCWSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
WINBOOL  VerQueryValueW(LPVOID pBlock, LPCWSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen);
//C       typedef ACCESS_MASK REGSAM;
alias ACCESS_MASK REGSAM;
//C       typedef LONG LSTATUS;
alias LONG LSTATUS;
//C       struct val_context {
//C         int valuelen;
//C         LPVOID value_context;
//C         LPVOID val_buff_ptr;
//C       };
struct val_context
{
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
}
//C       typedef struct val_context *PVALCONTEXT;
alias val_context *PVALCONTEXT;
//C       typedef struct pvalueA {
//C         LPSTR pv_valuename;
//C         int pv_valuelen;
//C         LPVOID pv_value_context;
//C         DWORD pv_type;
//C       }PVALUEA,*PPVALUEA;
struct pvalueA
{
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}
alias pvalueA PVALUEA;
alias pvalueA *PPVALUEA;
//C       typedef struct pvalueW {
//C         LPWSTR pv_valuename;
//C         int pv_valuelen;
//C         LPVOID pv_value_context;
//C         DWORD pv_type;
//C       }PVALUEW,*PPVALUEW;
struct pvalueW
{
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}
alias pvalueW PVALUEW;
alias pvalueW *PPVALUEW;
//C       typedef PVALUEA PVALUE;
alias PVALUEA PVALUE;
//C       typedef PPVALUEA PPVALUE;
alias PPVALUEA PPVALUE;
//C       typedef DWORD  QUERYHANDLER(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,LPVOID outputbuffer,DWORD *total_outlen,DWORD input_blen);
alias DWORD function(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen)QUERYHANDLER;
//C       typedef QUERYHANDLER *PQUERYHANDLER;
alias DWORD  function(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen)PQUERYHANDLER;
//C       typedef struct provider_info {
//C         PQUERYHANDLER pi_R0_1val;
//C         PQUERYHANDLER pi_R0_allvals;
//C         PQUERYHANDLER pi_R3_1val;
//C         PQUERYHANDLER pi_R3_allvals;
//C         DWORD pi_flags;
//C         LPVOID pi_key_context;
//C       } REG_PROVIDER;
struct provider_info
{
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}
alias provider_info REG_PROVIDER;
//C       typedef struct provider_info *PPROVIDER;
alias provider_info *PPROVIDER;
//C       typedef struct value_entA {
//C         LPSTR ve_valuename;
//C         DWORD ve_valuelen;
//C         DWORD_PTR ve_valueptr;
//C         DWORD ve_type;
//C       } VALENTA,*PVALENTA;
struct value_entA
{
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}
alias value_entA VALENTA;
alias value_entA *PVALENTA;
//C       typedef struct value_entW {
//C         LPWSTR ve_valuename;
//C         DWORD ve_valuelen;
//C         DWORD_PTR ve_valueptr;
//C         DWORD ve_type;
//C       } VALENTW,*PVALENTW;
struct value_entW
{
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}
alias value_entW VALENTW;
alias value_entW *PVALENTW;
//C       typedef VALENTA VALENT;
alias VALENTA VALENT;
//C       typedef PVALENTA PVALENT;
alias PVALENTA PVALENT;
//C        LONG RegCloseKey(HKEY hKey);
LONG  RegCloseKey(HKEY hKey);
//C        LONG RegOverridePredefKey(HKEY hKey,HKEY hNewHKey);
LONG  RegOverridePredefKey(HKEY hKey, HKEY hNewHKey);
//C        LONG RegOpenUserClassesRoot(HANDLE hToken,DWORD dwOptions,REGSAM samDesired,PHKEY phkResult);
LONG  RegOpenUserClassesRoot(HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult);
//C        LONG RegOpenCurrentUser(REGSAM samDesired,PHKEY phkResult);
LONG  RegOpenCurrentUser(REGSAM samDesired, PHKEY phkResult);
//C        LONG RegDisablePredefinedCache();
LONG  RegDisablePredefinedCache();
//C        LONG RegConnectRegistryA(LPCSTR lpMachineName,HKEY hKey,PHKEY phkResult);
LONG  RegConnectRegistryA(LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult);
//C        LONG RegConnectRegistryW(LPCWSTR lpMachineName,HKEY hKey,PHKEY phkResult);
LONG  RegConnectRegistryW(LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult);
//C        LONG RegConnectRegistryExA(LPCSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
LONG  RegConnectRegistryExA(LPCSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult);
//C        LONG RegConnectRegistryExW(LPCWSTR lpMachineName,HKEY hKey,ULONG Flags,PHKEY phkResult);
LONG  RegConnectRegistryExW(LPCWSTR lpMachineName, HKEY hKey, ULONG Flags, PHKEY phkResult);
//C        LONG RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
LONG  RegCreateKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult);
//C        LONG RegCreateKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
LONG  RegCreateKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult);
//C        LONG RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
LONG  RegCreateKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
//C        LONG RegCreateKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD Reserved,LPWSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
LONG  RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
//C        LONG RegDeleteKeyA(HKEY hKey,LPCSTR lpSubKey);
LONG  RegDeleteKeyA(HKEY hKey, LPCSTR lpSubKey);
//C        LONG RegDeleteKeyW(HKEY hKey,LPCWSTR lpSubKey);
LONG  RegDeleteKeyW(HKEY hKey, LPCWSTR lpSubKey);
//C        LONG RegDeleteKeyExA(HKEY hKey,LPCSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
LONG  RegDeleteKeyExA(HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved);
//C        LONG RegDeleteKeyExW(HKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
LONG  RegDeleteKeyExW(HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved);
//C        LONG RegDisableReflectionKey(HKEY hBase);
LONG  RegDisableReflectionKey(HKEY hBase);
//C        LONG RegEnableReflectionKey(HKEY hBase);
LONG  RegEnableReflectionKey(HKEY hBase);
//C        LONG RegQueryReflectionKey(HKEY hBase,WINBOOL *bIsReflectionDisabled);
LONG  RegQueryReflectionKey(HKEY hBase, WINBOOL *bIsReflectionDisabled);
//C        LONG RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
LONG  RegDeleteValueA(HKEY hKey, LPCSTR lpValueName);
//C        LONG RegDeleteValueW(HKEY hKey,LPCWSTR lpValueName);
LONG  RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName);
//C        LONG RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cchName);
LONG  RegEnumKeyA(HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName);
//C        LONG RegEnumKeyW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,DWORD cchName);
LONG  RegEnumKeyW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName);
//C        LONG RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
LONG  RegEnumKeyExA(HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
//C        LONG RegEnumKeyExW(HKEY hKey,DWORD dwIndex,LPWSTR lpName,LPDWORD lpcchName,LPDWORD lpReserved,LPWSTR lpClass,LPDWORD lpcchClass,PFILETIME lpftLastWriteTime);
LONG  RegEnumKeyExW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
//C        LONG RegEnumValueA(HKEY hKey,DWORD dwIndex,LPSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
LONG  RegEnumValueA(HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
//C        LONG RegEnumValueW(HKEY hKey,DWORD dwIndex,LPWSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
LONG  RegEnumValueW(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
//C        LONG RegFlushKey(HKEY hKey);
LONG  RegFlushKey(HKEY hKey);
//C        LONG RegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor);
LONG  RegGetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor);
//C        LONG RegLoadKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpFile);
LONG  RegLoadKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile);
//C        LONG RegLoadKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpFile);
LONG  RegLoadKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile);
//C        LONG RegNotifyChangeKeyValue(HKEY hKey,WINBOOL bWatchSubtree,DWORD dwNotifyFilter,HANDLE hEvent,WINBOOL fAsynchronous);
LONG  RegNotifyChangeKeyValue(HKEY hKey, WINBOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, WINBOOL fAsynchronous);
//C        LONG RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
LONG  RegOpenKeyA(HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult);
//C        LONG RegOpenKeyW(HKEY hKey,LPCWSTR lpSubKey,PHKEY phkResult);
LONG  RegOpenKeyW(HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult);
//C        LONG RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
LONG  RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
//C        LONG RegOpenKeyExW(HKEY hKey,LPCWSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
LONG  RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
//C        LONG RegQueryInfoKeyA(HKEY hKey,LPSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
LONG  RegQueryInfoKeyA(HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
//C        LONG RegQueryInfoKeyW(HKEY hKey,LPWSTR lpClass,LPDWORD lpcchClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
LONG  RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
//C        LONG RegQueryValueA(HKEY hKey,LPCSTR lpSubKey,LPSTR lpData,PLONG lpcbData);
LONG  RegQueryValueA(HKEY hKey, LPCSTR lpSubKey, LPSTR lpData, PLONG lpcbData);
//C        LONG RegQueryValueW(HKEY hKey,LPCWSTR lpSubKey,LPWSTR lpData,PLONG lpcbData);
LONG  RegQueryValueW(HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpData, PLONG lpcbData);
//C        LONG RegQueryMultipleValuesA(HKEY hKey,PVALENTA val_list,DWORD num_vals,LPSTR lpValueBuf,LPDWORD ldwTotsize);
LONG  RegQueryMultipleValuesA(HKEY hKey, PVALENTA val_list, DWORD num_vals, LPSTR lpValueBuf, LPDWORD ldwTotsize);
//C        LONG RegQueryMultipleValuesW(HKEY hKey,PVALENTW val_list,DWORD num_vals,LPWSTR lpValueBuf,LPDWORD ldwTotsize);
LONG  RegQueryMultipleValuesW(HKEY hKey, PVALENTW val_list, DWORD num_vals, LPWSTR lpValueBuf, LPDWORD ldwTotsize);
//C        LONG RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
LONG  RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
//C        LONG RegQueryValueExW(HKEY hKey,LPCWSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
LONG  RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
//C        LONG RegReplaceKeyA(HKEY hKey,LPCSTR lpSubKey,LPCSTR lpNewFile,LPCSTR lpOldFile);
LONG  RegReplaceKeyA(HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile);
//C        LONG RegReplaceKeyW(HKEY hKey,LPCWSTR lpSubKey,LPCWSTR lpNewFile,LPCWSTR lpOldFile);
LONG  RegReplaceKeyW(HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile);
//C        LONG RegRestoreKeyA(HKEY hKey,LPCSTR lpFile,DWORD dwFlags);
LONG  RegRestoreKeyA(HKEY hKey, LPCSTR lpFile, DWORD dwFlags);
//C        LONG RegRestoreKeyW(HKEY hKey,LPCWSTR lpFile,DWORD dwFlags);
LONG  RegRestoreKeyW(HKEY hKey, LPCWSTR lpFile, DWORD dwFlags);
//C        LONG RegSaveKeyA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
LONG  RegSaveKeyA(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        LONG RegSaveKeyW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
LONG  RegSaveKeyW(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C        LONG RegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
LONG  RegSetKeySecurity(HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
//C        LONG RegSetValueA(HKEY hKey,LPCSTR lpSubKey,DWORD dwType,LPCSTR lpData,DWORD cbData);
LONG  RegSetValueA(HKEY hKey, LPCSTR lpSubKey, DWORD dwType, LPCSTR lpData, DWORD cbData);
//C        LONG RegSetValueW(HKEY hKey,LPCWSTR lpSubKey,DWORD dwType,LPCWSTR lpData,DWORD cbData);
LONG  RegSetValueW(HKEY hKey, LPCWSTR lpSubKey, DWORD dwType, LPCWSTR lpData, DWORD cbData);
//C        LONG RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
LONG  RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, BYTE *lpData, DWORD cbData);
//C        LONG RegSetValueExW(HKEY hKey,LPCWSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
LONG  RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, BYTE *lpData, DWORD cbData);
//C        LONG RegUnLoadKeyA(HKEY hKey,LPCSTR lpSubKey);
LONG  RegUnLoadKeyA(HKEY hKey, LPCSTR lpSubKey);
//C        LONG RegUnLoadKeyW(HKEY hKey,LPCWSTR lpSubKey);
LONG  RegUnLoadKeyW(HKEY hKey, LPCWSTR lpSubKey);
//C        LONG RegGetValueA(HKEY hkey,LPCSTR lpSubKey,LPCSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
LONG  RegGetValueA(HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);
//C        LONG RegGetValueW(HKEY hkey,LPCWSTR lpSubKey,LPCWSTR lpValue,DWORD dwFlags,LPDWORD pdwType,PVOID pvData,LPDWORD pcbData);
LONG  RegGetValueW(HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);
//C        WINBOOL InitiateSystemShutdownA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
WINBOOL  InitiateSystemShutdownA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown);
//C        WINBOOL InitiateSystemShutdownW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown);
WINBOOL  InitiateSystemShutdownW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown);
//C        WINBOOL AbortSystemShutdownA(LPSTR lpMachineName);
WINBOOL  AbortSystemShutdownA(LPSTR lpMachineName);
//C        WINBOOL AbortSystemShutdownW(LPWSTR lpMachineName);
WINBOOL  AbortSystemShutdownW(LPWSTR lpMachineName);
//C        WINBOOL InitiateSystemShutdownExA(LPSTR lpMachineName,LPSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
WINBOOL  InitiateSystemShutdownExA(LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown, DWORD dwReason);
//C        WINBOOL InitiateSystemShutdownExW(LPWSTR lpMachineName,LPWSTR lpMessage,DWORD dwTimeout,WINBOOL bForceAppsClosed,WINBOOL bRebootAfterShutdown,DWORD dwReason);
WINBOOL  InitiateSystemShutdownExW(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, WINBOOL bForceAppsClosed, WINBOOL bRebootAfterShutdown, DWORD dwReason);
//C        LONG RegSaveKeyExA(HKEY hKey,LPCSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
LONG  RegSaveKeyExA(HKEY hKey, LPCSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags);
//C        LONG RegSaveKeyExW(HKEY hKey,LPCWSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
LONG  RegSaveKeyExW(HKEY hKey, LPCWSTR lpFile, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags);
//C        LONG Wow64Win32ApiEntry (DWORD dwFuncNumber,DWORD dwFlag,DWORD dwRes);
LONG  Wow64Win32ApiEntry(DWORD dwFuncNumber, DWORD dwFlag, DWORD dwRes);
//C       typedef struct _NETRESOURCEA {
//C         DWORD dwScope;
//C         DWORD dwType;
//C         DWORD dwDisplayType;
//C         DWORD dwUsage;
//C         LPSTR lpLocalName;
//C         LPSTR lpRemoteName;
//C         LPSTR lpComment;
//C         LPSTR lpProvider;
//C       } NETRESOURCEA,*LPNETRESOURCEA;
struct _NETRESOURCEA
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
}
alias _NETRESOURCEA NETRESOURCEA;
alias _NETRESOURCEA *LPNETRESOURCEA;
//C       typedef struct _NETRESOURCEW {
//C         DWORD dwScope;
//C         DWORD dwType;
//C         DWORD dwDisplayType;
//C         DWORD dwUsage;
//C         LPWSTR lpLocalName;
//C         LPWSTR lpRemoteName;
//C         LPWSTR lpComment;
//C         LPWSTR lpProvider;
//C       } NETRESOURCEW,*LPNETRESOURCEW;
struct _NETRESOURCEW
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
}
alias _NETRESOURCEW NETRESOURCEW;
alias _NETRESOURCEW *LPNETRESOURCEW;
//C       typedef NETRESOURCEA NETRESOURCE;
alias NETRESOURCEA NETRESOURCE;
//C       typedef LPNETRESOURCEA LPNETRESOURCE;
alias LPNETRESOURCEA LPNETRESOURCE;
//C       DWORD WNetAddConnectionA(LPCSTR lpRemoteName,LPCSTR lpPassword,LPCSTR lpLocalName);
DWORD  WNetAddConnectionA(LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName);
//C       DWORD WNetAddConnectionW(LPCWSTR lpRemoteName,LPCWSTR lpPassword,LPCWSTR lpLocalName);
DWORD  WNetAddConnectionW(LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName);
//C       DWORD WNetAddConnection2A(LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
DWORD  WNetAddConnection2A(LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags);
//C       DWORD WNetAddConnection2W(LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
DWORD  WNetAddConnection2W(LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags);
//C       DWORD WNetAddConnection3A(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserName,DWORD dwFlags);
DWORD  WNetAddConnection3A(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags);
//C       DWORD WNetAddConnection3W(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserName,DWORD dwFlags);
DWORD  WNetAddConnection3W(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags);
//C       DWORD WNetCancelConnectionA(LPCSTR lpName,WINBOOL fForce);
DWORD  WNetCancelConnectionA(LPCSTR lpName, WINBOOL fForce);
//C       DWORD WNetCancelConnectionW(LPCWSTR lpName,WINBOOL fForce);
DWORD  WNetCancelConnectionW(LPCWSTR lpName, WINBOOL fForce);
//C       DWORD WNetCancelConnection2A(LPCSTR lpName,DWORD dwFlags,WINBOOL fForce);
DWORD  WNetCancelConnection2A(LPCSTR lpName, DWORD dwFlags, WINBOOL fForce);
//C       DWORD WNetCancelConnection2W(LPCWSTR lpName,DWORD dwFlags,WINBOOL fForce);
DWORD  WNetCancelConnection2W(LPCWSTR lpName, DWORD dwFlags, WINBOOL fForce);
//C       DWORD WNetGetConnectionA(LPCSTR lpLocalName,LPSTR lpRemoteName,LPDWORD lpnLength);
DWORD  WNetGetConnectionA(LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength);
//C       DWORD WNetGetConnectionW(LPCWSTR lpLocalName,LPWSTR lpRemoteName,LPDWORD lpnLength);
DWORD  WNetGetConnectionW(LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength);
//C       DWORD WNetRestoreConnectionA(HWND hwndParent,LPCSTR lpDevice);
DWORD  WNetRestoreConnectionA(HWND hwndParent, LPCSTR lpDevice);
//C       DWORD WNetRestoreConnectionW(HWND hwndParent,LPCWSTR lpDevice);
DWORD  WNetRestoreConnectionW(HWND hwndParent, LPCWSTR lpDevice);
//C       DWORD WNetUseConnectionA(HWND hwndOwner,LPNETRESOURCEA lpNetResource,LPCSTR lpPassword,LPCSTR lpUserID,DWORD dwFlags,LPSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
DWORD  WNetUseConnectionA(HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserID, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult);
//C       DWORD WNetUseConnectionW(HWND hwndOwner,LPNETRESOURCEW lpNetResource,LPCWSTR lpPassword,LPCWSTR lpUserID,DWORD dwFlags,LPWSTR lpAccessName,LPDWORD lpBufferSize,LPDWORD lpResult);
DWORD  WNetUseConnectionW(HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserID, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult);
//C       DWORD WNetConnectionDialog(HWND hwnd,DWORD dwType);
DWORD  WNetConnectionDialog(HWND hwnd, DWORD dwType);
//C       DWORD WNetDisconnectDialog(HWND hwnd,DWORD dwType);
DWORD  WNetDisconnectDialog(HWND hwnd, DWORD dwType);
//C       typedef struct _CONNECTDLGSTRUCTA {
//C         DWORD cbStructure;
//C         HWND hwndOwner;
//C         LPNETRESOURCEA lpConnRes;
//C         DWORD dwFlags;
//C         DWORD dwDevNum;
//C       } CONNECTDLGSTRUCTA,*LPCONNECTDLGSTRUCTA;
struct _CONNECTDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
}
alias _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
alias _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;
//C       typedef struct _CONNECTDLGSTRUCTW {
//C         DWORD cbStructure;
//C         HWND hwndOwner;
//C         LPNETRESOURCEW lpConnRes;
//C         DWORD dwFlags;
//C         DWORD dwDevNum;
//C       } CONNECTDLGSTRUCTW,*LPCONNECTDLGSTRUCTW;
struct _CONNECTDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
}
alias _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
alias _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;
//C       typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
alias CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
//C       typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
alias LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
//C       DWORD WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct);
DWORD  WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA lpConnDlgStruct);
//C       DWORD WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct);
DWORD  WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW lpConnDlgStruct);
//C       typedef struct _DISCDLGSTRUCTA {
//C         DWORD cbStructure;
//C         HWND hwndOwner;
//C         LPSTR lpLocalName;
//C         LPSTR lpRemoteName;
//C         DWORD dwFlags;
//C       } DISCDLGSTRUCTA,*LPDISCDLGSTRUCTA;
struct _DISCDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
}
alias _DISCDLGSTRUCTA DISCDLGSTRUCTA;
alias _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;
//C       typedef struct _DISCDLGSTRUCTW {
//C         DWORD cbStructure;
//C         HWND hwndOwner;
//C         LPWSTR lpLocalName;
//C         LPWSTR lpRemoteName;
//C         DWORD dwFlags;
//C       } DISCDLGSTRUCTW,*LPDISCDLGSTRUCTW;
struct _DISCDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
}
alias _DISCDLGSTRUCTW DISCDLGSTRUCTW;
alias _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;
//C       typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
alias DISCDLGSTRUCTA DISCDLGSTRUCT;
//C       typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
alias LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
//C       DWORD WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct);
DWORD  WNetDisconnectDialog1A(LPDISCDLGSTRUCTA lpConnDlgStruct);
//C       DWORD WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct);
DWORD  WNetDisconnectDialog1W(LPDISCDLGSTRUCTW lpConnDlgStruct);
//C       DWORD WNetOpenEnumA(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEA lpNetResource,LPHANDLE lphEnum);
DWORD  WNetOpenEnumA(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum);
//C       DWORD WNetOpenEnumW(DWORD dwScope,DWORD dwType,DWORD dwUsage,LPNETRESOURCEW lpNetResource,LPHANDLE lphEnum);
DWORD  WNetOpenEnumW(DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum);
//C       DWORD WNetEnumResourceA(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
DWORD  WNetEnumResourceA(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
//C       DWORD WNetEnumResourceW(HANDLE hEnum,LPDWORD lpcCount,LPVOID lpBuffer,LPDWORD lpBufferSize);
DWORD  WNetEnumResourceW(HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize);
//C       DWORD WNetCloseEnum(HANDLE hEnum);
DWORD  WNetCloseEnum(HANDLE hEnum);
//C       DWORD WNetGetResourceParentA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
DWORD  WNetGetResourceParentA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer);
//C       DWORD WNetGetResourceParentW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer);
DWORD  WNetGetResourceParentW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer);
//C       DWORD WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPSTR *lplpSystem);
DWORD  WNetGetResourceInformationA(LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR *lplpSystem);
//C       DWORD WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource,LPVOID lpBuffer,LPDWORD lpcbBuffer,LPWSTR *lplpSystem);
DWORD  WNetGetResourceInformationW(LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem);
//C       typedef struct _UNIVERSAL_NAME_INFOA {
//C         LPSTR lpUniversalName;
//C       } UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;
struct _UNIVERSAL_NAME_INFOA
{
    LPSTR lpUniversalName;
}
alias _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
alias _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;
//C       typedef struct _UNIVERSAL_NAME_INFOW {
//C         LPWSTR lpUniversalName;
//C       } UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;
struct _UNIVERSAL_NAME_INFOW
{
    LPWSTR lpUniversalName;
}
alias _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
alias _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;
//C       typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
alias UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
//C       typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
alias LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
//C       typedef struct _REMOTE_NAME_INFOA {
//C         LPSTR lpUniversalName;
//C         LPSTR lpConnectionName;
//C         LPSTR lpRemainingPath;
//C       } REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;
struct _REMOTE_NAME_INFOA
{
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}
alias _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
alias _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;
//C       typedef struct _REMOTE_NAME_INFOW {
//C         LPWSTR lpUniversalName;
//C         LPWSTR lpConnectionName;
//C         LPWSTR lpRemainingPath;
//C       } REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;
struct _REMOTE_NAME_INFOW
{
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}
alias _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
alias _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;
//C       typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
alias REMOTE_NAME_INFOA REMOTE_NAME_INFO;
//C       typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
alias LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
//C       DWORD WNetGetUniversalNameA(LPCSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
DWORD  WNetGetUniversalNameA(LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize);
//C       DWORD WNetGetUniversalNameW(LPCWSTR lpLocalPath,DWORD dwInfoLevel,LPVOID lpBuffer,LPDWORD lpBufferSize);
DWORD  WNetGetUniversalNameW(LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize);
//C       DWORD WNetGetUserA(LPCSTR lpName,LPSTR lpUserName,LPDWORD lpnLength);
DWORD  WNetGetUserA(LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength);
//C       DWORD WNetGetUserW(LPCWSTR lpName,LPWSTR lpUserName,LPDWORD lpnLength);
DWORD  WNetGetUserW(LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength);
//C       DWORD WNetGetProviderNameA(DWORD dwNetType,LPSTR lpProviderName,LPDWORD lpBufferSize);
DWORD  WNetGetProviderNameA(DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize);
//C       DWORD WNetGetProviderNameW(DWORD dwNetType,LPWSTR lpProviderName,LPDWORD lpBufferSize);
DWORD  WNetGetProviderNameW(DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize);
//C       typedef struct _NETINFOSTRUCT {
//C         DWORD cbStructure;
//C         DWORD dwProviderVersion;
//C         DWORD dwStatus;
//C         DWORD dwCharacteristics;
//C         ULONG_PTR dwHandle;
//C         WORD wNetType;
//C         DWORD dwPrinters;
//C         DWORD dwDrives;
//C       } NETINFOSTRUCT,*LPNETINFOSTRUCT;
struct _NETINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
}
alias _NETINFOSTRUCT NETINFOSTRUCT;
alias _NETINFOSTRUCT *LPNETINFOSTRUCT;
//C       DWORD WNetGetNetworkInformationA(LPCSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);
DWORD  WNetGetNetworkInformationA(LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct);
//C       DWORD WNetGetNetworkInformationW(LPCWSTR lpProvider,LPNETINFOSTRUCT lpNetInfoStruct);
DWORD  WNetGetNetworkInformationW(LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct);
//C       typedef UINT ( *PFNGETPROFILEPATHA) (LPCSTR pszUsername,LPSTR pszBuffer,UINT cbBuffer);
alias UINT  function(LPCSTR pszUsername, LPSTR pszBuffer, UINT cbBuffer)PFNGETPROFILEPATHA;
//C       typedef UINT ( *PFNGETPROFILEPATHW) (LPCWSTR pszUsername,LPWSTR pszBuffer,UINT cbBuffer);
alias UINT  function(LPCWSTR pszUsername, LPWSTR pszBuffer, UINT cbBuffer)PFNGETPROFILEPATHW;
//C       typedef UINT ( *PFNRECONCILEPROFILEA) (LPCSTR pszCentralFile,LPCSTR pszLocalFile,DWORD dwFlags);
alias UINT  function(LPCSTR pszCentralFile, LPCSTR pszLocalFile, DWORD dwFlags)PFNRECONCILEPROFILEA;
//C       typedef UINT ( *PFNRECONCILEPROFILEW) (LPCWSTR pszCentralFile,LPCWSTR pszLocalFile,DWORD dwFlags);
alias UINT  function(LPCWSTR pszCentralFile, LPCWSTR pszLocalFile, DWORD dwFlags)PFNRECONCILEPROFILEW;
//C       typedef WINBOOL ( *PFNPROCESSPOLICIESA) (HWND hwnd,LPCSTR pszPath,LPCSTR pszUsername,LPCSTR pszComputerName,DWORD dwFlags);
alias WINBOOL  function(HWND hwnd, LPCSTR pszPath, LPCSTR pszUsername, LPCSTR pszComputerName, DWORD dwFlags)PFNPROCESSPOLICIESA;
//C       typedef WINBOOL ( *PFNPROCESSPOLICIESW) (HWND hwnd,LPCWSTR pszPath,LPCWSTR pszUsername,LPCWSTR pszComputerName,DWORD dwFlags);
alias WINBOOL  function(HWND hwnd, LPCWSTR pszPath, LPCWSTR pszUsername, LPCWSTR pszComputerName, DWORD dwFlags)PFNPROCESSPOLICIESW;
//C       DWORD WNetGetLastErrorA(LPDWORD lpError,LPSTR lpErrorBuf,DWORD nErrorBufSize,LPSTR lpNameBuf,DWORD nNameBufSize);
DWORD  WNetGetLastErrorA(LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize);
//C       DWORD WNetGetLastErrorW(LPDWORD lpError,LPWSTR lpErrorBuf,DWORD nErrorBufSize,LPWSTR lpNameBuf,DWORD nNameBufSize);
DWORD  WNetGetLastErrorW(LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize);
//C       typedef struct _NETCONNECTINFOSTRUCT {
//C         DWORD cbStructure;
//C         DWORD dwFlags;
//C         DWORD dwSpeed;
//C         DWORD dwDelay;
//C         DWORD dwOptDataSize;
//C       } NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;
struct _NETCONNECTINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
}
alias _NETCONNECTINFOSTRUCT NETCONNECTINFOSTRUCT;
alias _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;
//C       DWORD MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
DWORD  MultinetGetConnectionPerformanceA(LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
//C       DWORD MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource,LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
DWORD  MultinetGetConnectionPerformanceW(LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct);
//C       typedef struct {
//C         unsigned short bAppReturnCode:8,reserved:6,fBusy:1,fAck:1;
//C       } DDEACK;
struct _N88
{
    ushort __bitfield1;
    ushort bAppReturnCode() { return (__bitfield1 >> 0) & 0xff; }
    ushort reserved() { return (__bitfield1 >> 8) & 0x3f; }
    ushort fBusy() { return (__bitfield1 >> 14) & 0x1; }
    ushort fAck() { return (__bitfield1 >> 15) & 0x1; }
}
alias _N88 DDEACK;
//C       typedef struct {
//C         unsigned short reserved:14,fDeferUpd:1,fAckReq:1;
//C         short cfFormat;
//C       } DDEADVISE;
struct _N89
{
    ushort __bitfield1;
    ushort reserved() { return (__bitfield1 >> 0) & 0x3fff; }
    ushort fDeferUpd() { return (__bitfield1 >> 14) & 0x1; }
    ushort fAckReq() { return (__bitfield1 >> 15) & 0x1; }
    short cfFormat;
}
alias _N89 DDEADVISE;
//C       typedef struct {
//C         unsigned short unused:12,fResponse:1,fRelease:1,reserved:1,fAckReq:1;
//C         short cfFormat;
//C         BYTE Value[1];
//C       } DDEDATA;
struct _N90
{
    ushort __bitfield1;
    ushort unused() { return (__bitfield1 >> 0) & 0xfff; }
    ushort fResponse() { return (__bitfield1 >> 12) & 0x1; }
    ushort fRelease() { return (__bitfield1 >> 13) & 0x1; }
    ushort reserved() { return (__bitfield1 >> 14) & 0x1; }
    ushort fAckReq() { return (__bitfield1 >> 15) & 0x1; }
    short cfFormat;
    BYTE [1]Value;
}
alias _N90 DDEDATA;
//C       typedef struct {
//C         unsigned short unused:13,fRelease:1,fReserved:2;
//C         short cfFormat;
//C         BYTE Value[1];
//C       } DDEPOKE;
struct _N91
{
    ushort __bitfield1;
    ushort unused() { return (__bitfield1 >> 0) & 0x1fff; }
    ushort fRelease() { return (__bitfield1 >> 13) & 0x1; }
    ushort fReserved() { return (__bitfield1 >> 14) & 0x3; }
    short cfFormat;
    BYTE [1]Value;
}
alias _N91 DDEPOKE;
//C       typedef struct {
//C         unsigned short unused:13,fRelease:1,fDeferUpd:1,fAckReq:1;
//C         short cfFormat;
//C       } DDELN;
struct _N92
{
    ushort __bitfield1;
    ushort unused() { return (__bitfield1 >> 0) & 0x1fff; }
    ushort fRelease() { return (__bitfield1 >> 13) & 0x1; }
    ushort fDeferUpd() { return (__bitfield1 >> 14) & 0x1; }
    ushort fAckReq() { return (__bitfield1 >> 15) & 0x1; }
    short cfFormat;
}
alias _N92 DDELN;
//C       typedef struct {
//C         unsigned short unused:12,fAck:1,fRelease:1,fReserved:1,fAckReq:1;
//C         short cfFormat;
//C         BYTE rgb[1];
//C       } DDEUP;
struct _N93
{
    ushort __bitfield1;
    ushort unused() { return (__bitfield1 >> 0) & 0xfff; }
    ushort fAck() { return (__bitfield1 >> 12) & 0x1; }
    ushort fRelease() { return (__bitfield1 >> 13) & 0x1; }
    ushort fReserved() { return (__bitfield1 >> 14) & 0x1; }
    ushort fAckReq() { return (__bitfield1 >> 15) & 0x1; }
    short cfFormat;
    BYTE [1]rgb;
}
alias _N93 DDEUP;
//C       WINBOOL DdeSetQualityOfService(HWND hwndClient,const SECURITY_QUALITY_OF_SERVICE *pqosNew,PSECURITY_QUALITY_OF_SERVICE pqosPrev);
WINBOOL  DdeSetQualityOfService(HWND hwndClient, SECURITY_QUALITY_OF_SERVICE *pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev);
//C       WINBOOL ImpersonateDdeClientWindow(HWND hWndClient,HWND hWndServer);
WINBOOL  ImpersonateDdeClientWindow(HWND hWndClient, HWND hWndServer);
//C       LPARAM PackDDElParam(UINT msg,UINT_PTR uiLo,UINT_PTR uiHi);
LPARAM  PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
//C       WINBOOL UnpackDDElParam(UINT msg,LPARAM lParam,PUINT_PTR puiLo,PUINT_PTR puiHi);
WINBOOL  UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
//C       WINBOOL FreeDDElParam(UINT msg,LPARAM lParam);
WINBOOL  FreeDDElParam(UINT msg, LPARAM lParam);
//C       LPARAM ReuseDDElParam(LPARAM lParam,UINT msgIn,UINT msgOut,UINT_PTR uiLo,UINT_PTR uiHi);
LPARAM  ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);
//C       struct HCONVLIST__ { int unused; }; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONVLIST__
{
    int unused;
}
alias HCONVLIST__ *HCONVLIST;
//C       struct HCONV__ { int unused; }; typedef struct HCONV__ *HCONV;
struct HCONV__
{
    int unused;
}
alias HCONV__ *HCONV;
//C       struct HSZ__ { int unused; }; typedef struct HSZ__ *HSZ;
struct HSZ__
{
    int unused;
}
alias HSZ__ *HSZ;
//C       struct HDDEDATA__ { int unused; }; typedef struct HDDEDATA__ *HDDEDATA;
struct HDDEDATA__
{
    int unused;
}
alias HDDEDATA__ *HDDEDATA;
//C       typedef struct tagHSZPAIR {
//C         HSZ hszSvc;
//C         HSZ hszTopic;
//C       } HSZPAIR,*PHSZPAIR;
struct tagHSZPAIR
{
    HSZ hszSvc;
    HSZ hszTopic;
}
alias tagHSZPAIR HSZPAIR;
alias tagHSZPAIR *PHSZPAIR;
//C       typedef struct tagCONVCONTEXT {
//C         UINT cb;
//C         UINT wFlags;
//C         UINT wCountryID;
//C         int iCodePage;
//C         DWORD dwLangID;
//C         DWORD dwSecurity;
//C         SECURITY_QUALITY_OF_SERVICE qos;
//C       } CONVCONTEXT,*PCONVCONTEXT;
struct tagCONVCONTEXT
{
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
}
alias tagCONVCONTEXT CONVCONTEXT;
alias tagCONVCONTEXT *PCONVCONTEXT;
//C       typedef struct tagCONVINFO {
//C         DWORD cb;
//C         DWORD_PTR hUser;
//C         HCONV hConvPartner;
//C         HSZ hszSvcPartner;
//C         HSZ hszServiceReq;
//C         HSZ hszTopic;
//C         HSZ hszItem;
//C         UINT wFmt;
//C         UINT wType;
//C         UINT wStatus;
//C         UINT wConvst;
//C         UINT wLastError;
//C         HCONVLIST hConvList;
//C         CONVCONTEXT ConvCtxt;
//C         HWND hwnd;
//C         HWND hwndPartner;
//C       } CONVINFO,*PCONVINFO;
struct tagCONVINFO
{
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
}
alias tagCONVINFO CONVINFO;
alias tagCONVINFO *PCONVINFO;
//C       typedef HDDEDATA FNCALLBACK(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);
alias HDDEDATA function(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2)FNCALLBACK;
//C       typedef HDDEDATA ( *PFNCALLBACK)(UINT wType,UINT wFmt,HCONV hConv,HSZ hsz1,HSZ hsz2,HDDEDATA hData,ULONG_PTR dwData1,ULONG_PTR dwData2);
alias HDDEDATA  function(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2)PFNCALLBACK;
//C       UINT DdeInitializeA(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);
UINT  DdeInitializeA(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
//C       UINT DdeInitializeW(LPDWORD pidInst,PFNCALLBACK pfnCallback,DWORD afCmd,DWORD ulRes);
UINT  DdeInitializeW(LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
//C       WINBOOL DdeUninitialize(DWORD idInst);
WINBOOL  DdeUninitialize(DWORD idInst);
//C       HCONVLIST DdeConnectList(DWORD idInst,HSZ hszService,HSZ hszTopic,HCONVLIST hConvList,PCONVCONTEXT pCC);
HCONVLIST  DdeConnectList(DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC);
//C       HCONV DdeQueryNextServer(HCONVLIST hConvList,HCONV hConvPrev);
HCONV  DdeQueryNextServer(HCONVLIST hConvList, HCONV hConvPrev);
//C       WINBOOL DdeDisconnectList(HCONVLIST hConvList);
WINBOOL  DdeDisconnectList(HCONVLIST hConvList);
//C       HCONV DdeConnect(DWORD idInst,HSZ hszService,HSZ hszTopic,PCONVCONTEXT pCC);
HCONV  DdeConnect(DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC);
//C       WINBOOL DdeDisconnect(HCONV hConv);
WINBOOL  DdeDisconnect(HCONV hConv);
//C       HCONV DdeReconnect(HCONV hConv);
HCONV  DdeReconnect(HCONV hConv);
//C       UINT DdeQueryConvInfo(HCONV hConv,DWORD idTransaction,PCONVINFO pConvInfo);
UINT  DdeQueryConvInfo(HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo);
//C       WINBOOL DdeSetUserHandle(HCONV hConv,DWORD id,DWORD_PTR hUser);
WINBOOL  DdeSetUserHandle(HCONV hConv, DWORD id, DWORD_PTR hUser);
//C       WINBOOL DdeAbandonTransaction(DWORD idInst,HCONV hConv,DWORD idTransaction);
WINBOOL  DdeAbandonTransaction(DWORD idInst, HCONV hConv, DWORD idTransaction);
//C       WINBOOL DdePostAdvise(DWORD idInst,HSZ hszTopic,HSZ hszItem);
WINBOOL  DdePostAdvise(DWORD idInst, HSZ hszTopic, HSZ hszItem);
//C       WINBOOL DdeEnableCallback(DWORD idInst,HCONV hConv,UINT wCmd);
WINBOOL  DdeEnableCallback(DWORD idInst, HCONV hConv, UINT wCmd);
//C       WINBOOL DdeImpersonateClient(HCONV hConv);
WINBOOL  DdeImpersonateClient(HCONV hConv);
//C       HDDEDATA DdeNameService(DWORD idInst,HSZ hsz1,HSZ hsz2,UINT afCmd);
HDDEDATA  DdeNameService(DWORD idInst, HSZ hsz1, HSZ hsz2, UINT afCmd);
//C       HDDEDATA DdeClientTransaction(LPBYTE pData,DWORD cbData,HCONV hConv,HSZ hszItem,UINT wFmt,UINT wType,DWORD dwTimeout,LPDWORD pdwResult);
HDDEDATA  DdeClientTransaction(LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult);
//C       HDDEDATA DdeCreateDataHandle(DWORD idInst,LPBYTE pSrc,DWORD cb,DWORD cbOff,HSZ hszItem,UINT wFmt,UINT afCmd);
HDDEDATA  DdeCreateDataHandle(DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
//C       HDDEDATA DdeAddData(HDDEDATA hData,LPBYTE pSrc,DWORD cb,DWORD cbOff);
HDDEDATA  DdeAddData(HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
//C       DWORD DdeGetData(HDDEDATA hData,LPBYTE pDst,DWORD cbMax,DWORD cbOff);
DWORD  DdeGetData(HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
//C       LPBYTE DdeAccessData(HDDEDATA hData,LPDWORD pcbDataSize);
LPBYTE  DdeAccessData(HDDEDATA hData, LPDWORD pcbDataSize);
//C       WINBOOL DdeUnaccessData(HDDEDATA hData);
WINBOOL  DdeUnaccessData(HDDEDATA hData);
//C       WINBOOL DdeFreeDataHandle(HDDEDATA hData);
WINBOOL  DdeFreeDataHandle(HDDEDATA hData);
//C       UINT DdeGetLastError(DWORD idInst);
UINT  DdeGetLastError(DWORD idInst);
//C       HSZ DdeCreateStringHandleA(DWORD idInst,LPCSTR psz,int iCodePage);
HSZ  DdeCreateStringHandleA(DWORD idInst, LPCSTR psz, int iCodePage);
//C       HSZ DdeCreateStringHandleW(DWORD idInst,LPCWSTR psz,int iCodePage);
HSZ  DdeCreateStringHandleW(DWORD idInst, LPCWSTR psz, int iCodePage);
//C       DWORD DdeQueryStringA(DWORD idInst,HSZ hsz,LPSTR psz,DWORD cchMax,int iCodePage);
DWORD  DdeQueryStringA(DWORD idInst, HSZ hsz, LPSTR psz, DWORD cchMax, int iCodePage);
//C       DWORD DdeQueryStringW(DWORD idInst,HSZ hsz,LPWSTR psz,DWORD cchMax,int iCodePage);
DWORD  DdeQueryStringW(DWORD idInst, HSZ hsz, LPWSTR psz, DWORD cchMax, int iCodePage);
//C       WINBOOL DdeFreeStringHandle(DWORD idInst,HSZ hsz);
WINBOOL  DdeFreeStringHandle(DWORD idInst, HSZ hsz);
//C       WINBOOL DdeKeepStringHandle(DWORD idInst,HSZ hsz);
WINBOOL  DdeKeepStringHandle(DWORD idInst, HSZ hsz);
//C       int DdeCmpStringHandles(HSZ hsz1,HSZ hsz2);
int  DdeCmpStringHandles(HSZ hsz1, HSZ hsz2);
//C       typedef struct tagDDEML_MSG_HOOK_DATA {
//C         UINT_PTR uiLo;
//C         UINT_PTR uiHi;
//C         DWORD cbData;
//C         DWORD Data[8];
//C       } DDEML_MSG_HOOK_DATA,*PDDEML_MSG_HOOK_DATA;
struct tagDDEML_MSG_HOOK_DATA
{
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD [8]Data;
}
alias tagDDEML_MSG_HOOK_DATA DDEML_MSG_HOOK_DATA;
alias tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA;
//C       typedef struct tagMONMSGSTRUCT {
//C         UINT cb;
//C         HWND hwndTo;
//C         DWORD dwTime;
//C         HANDLE hTask;
//C         UINT wMsg;
//C         WPARAM wParam;
//C         LPARAM lParam;
//C         DDEML_MSG_HOOK_DATA dmhd;
//C       } MONMSGSTRUCT,*PMONMSGSTRUCT;
struct tagMONMSGSTRUCT
{
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
}
alias tagMONMSGSTRUCT MONMSGSTRUCT;
alias tagMONMSGSTRUCT *PMONMSGSTRUCT;
//C       typedef struct tagMONCBSTRUCT {
//C         UINT cb;
//C         DWORD dwTime;
//C         HANDLE hTask;
//C         DWORD dwRet;
//C         UINT wType;
//C         UINT wFmt;
//C         HCONV hConv;
//C         HSZ hsz1;
//C         HSZ hsz2;
//C         HDDEDATA hData;
//C         ULONG_PTR dwData1;
//C         ULONG_PTR dwData2;
//C         CONVCONTEXT cc;
//C         DWORD cbData;
//C         DWORD Data[8];
//C       } MONCBSTRUCT,*PMONCBSTRUCT;
struct tagMONCBSTRUCT
{
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD [8]Data;
}
alias tagMONCBSTRUCT MONCBSTRUCT;
alias tagMONCBSTRUCT *PMONCBSTRUCT;
//C       typedef struct tagMONHSZSTRUCTA {
//C         UINT cb;
//C         WINBOOL fsAction;
//C         DWORD dwTime;
//C         HSZ hsz;
//C         HANDLE hTask;
//C         CHAR str[1];
//C       } MONHSZSTRUCTA,*PMONHSZSTRUCTA;
struct tagMONHSZSTRUCTA
{
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR [1]str;
}
alias tagMONHSZSTRUCTA MONHSZSTRUCTA;
alias tagMONHSZSTRUCTA *PMONHSZSTRUCTA;
//C       typedef struct tagMONHSZSTRUCTW {
//C         UINT cb;
//C         WINBOOL fsAction;
//C         DWORD dwTime;
//C         HSZ hsz;
//C         HANDLE hTask;
//C         WCHAR str[1];
//C       } MONHSZSTRUCTW,*PMONHSZSTRUCTW;
struct tagMONHSZSTRUCTW
{
    UINT cb;
    WINBOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR [1]str;
}
alias tagMONHSZSTRUCTW MONHSZSTRUCTW;
alias tagMONHSZSTRUCTW *PMONHSZSTRUCTW;
//C       typedef MONHSZSTRUCTA MONHSZSTRUCT;
alias MONHSZSTRUCTA MONHSZSTRUCT;
//C       typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
alias PMONHSZSTRUCTA PMONHSZSTRUCT;
//C       typedef struct tagMONERRSTRUCT {
//C         UINT cb;
//C         UINT wLastError;
//C         DWORD dwTime;
//C         HANDLE hTask;
//C       } MONERRSTRUCT,*PMONERRSTRUCT;
struct tagMONERRSTRUCT
{
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
}
alias tagMONERRSTRUCT MONERRSTRUCT;
alias tagMONERRSTRUCT *PMONERRSTRUCT;
//C       typedef struct tagMONLINKSTRUCT {
//C         UINT cb;
//C         DWORD dwTime;
//C         HANDLE hTask;
//C         WINBOOL fEstablished;
//C         WINBOOL fNoData;
//C         HSZ hszSvc;
//C         HSZ hszTopic;
//C         HSZ hszItem;
//C         UINT wFmt;
//C         WINBOOL fServer;
//C         HCONV hConvServer;
//C         HCONV hConvClient;
//C       } MONLINKSTRUCT,*PMONLINKSTRUCT;
struct tagMONLINKSTRUCT
{
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    WINBOOL fEstablished;
    WINBOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    WINBOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
}
alias tagMONLINKSTRUCT MONLINKSTRUCT;
alias tagMONLINKSTRUCT *PMONLINKSTRUCT;
//C       typedef struct tagMONCONVSTRUCT {
//C         UINT cb;
//C         WINBOOL fConnect;
//C         DWORD dwTime;
//C         HANDLE hTask;
//C         HSZ hszSvc;
//C         HSZ hszTopic;
//C         HCONV hConvClient;
//C         HCONV hConvServer;
//C       } MONCONVSTRUCT,*PMONCONVSTRUCT;
struct tagMONCONVSTRUCT
{
    UINT cb;
    WINBOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
}
alias tagMONCONVSTRUCT MONCONVSTRUCT;
alias tagMONCONVSTRUCT *PMONCONVSTRUCT;
//C     typedef struct tagCRGB {
//C       BYTE bRed;
//C       BYTE bGreen;
//C       BYTE bBlue;
//C       BYTE bExtra;
//C     } CRGB;
struct tagCRGB
{
    BYTE bRed;
    BYTE bGreen;
    BYTE bBlue;
    BYTE bExtra;
}
alias tagCRGB CRGB;
//C       INT LZStart(void);
INT  LZStart();
//C       void LZDone(void);
void  LZDone();
//C       LONG CopyLZFile(INT,INT);
LONG  CopyLZFile(INT , INT );
//C       LONG LZCopy(INT,INT);
LONG  LZCopy(INT , INT );
//C       INT LZInit();
INT  LZInit(INT );
//C       INT GetExpandedNameA(LPSTR,LPSTR);
INT  GetExpandedNameA(LPSTR , LPSTR );
//C       INT GetExpandedNameW(LPWSTR,LPWSTR);
INT  GetExpandedNameW(LPWSTR , LPWSTR );
//C       INT LZOpenFileA(LPSTR,LPOFSTRUCT,WORD);
INT  LZOpenFileA(LPSTR , LPOFSTRUCT , WORD );
//C       INT LZOpenFileW(LPWSTR,LPOFSTRUCT,WORD);
INT  LZOpenFileW(LPWSTR , LPOFSTRUCT , WORD );
//C       LONG LZSeek(INT,LONG,INT);
LONG  LZSeek(INT , LONG , INT );
//C       INT LZRead(INT,LPSTR,INT);
INT  LZRead(INT , LPSTR , INT );
//C       void LZClose();
void  LZClose(INT );
//C       typedef UINT MMVERSION;
alias UINT MMVERSION;
//C       typedef UINT MMRESULT;
alias UINT MMRESULT;
//C       typedef UINT *LPUINT;
alias UINT *LPUINT;
//C       typedef struct mmtime_tag {
//C         UINT wType;
//C         union {
//C           DWORD ms;
//C           DWORD sample;
//C           DWORD cb;
//C           DWORD ticks;
//C           struct {
//C      BYTE hour;
//C      BYTE min;
//C      BYTE sec;
//C      BYTE frame;
//C      BYTE fps;
//C      BYTE dummy;
//C      BYTE pad[2];
//C           } smpte;
struct _N95
{
    BYTE hour;
    BYTE min;
    BYTE sec;
    BYTE frame;
    BYTE fps;
    BYTE dummy;
    BYTE [2]pad;
}
//C           struct {
//C      DWORD songptrpos;
//C           } midi;
struct _N96
{
    DWORD songptrpos;
}
//C         } u;
union _N94
{
    DWORD ms;
    DWORD sample;
    DWORD cb;
    DWORD ticks;
    _N95 smpte;
    _N96 midi;
}
//C       } MMTIME,*PMMTIME,*NPMMTIME,*LPMMTIME;
struct mmtime_tag
{
    UINT wType;
    _N94 u;
}
alias mmtime_tag MMTIME;
alias mmtime_tag *PMMTIME;
alias mmtime_tag *NPMMTIME;
alias mmtime_tag *LPMMTIME;
//C       struct HDRVR__ { int unused; }; typedef struct HDRVR__ *HDRVR;
struct HDRVR__
{
    int unused;
}
alias HDRVR__ *HDRVR;
//C       typedef struct DRVCONFIGINFOEX {
//C         DWORD dwDCISize;
//C         LPCWSTR lpszDCISectionName;
//C         LPCWSTR lpszDCIAliasName;
//C         DWORD dnDevNode;
//C       } DRVCONFIGINFOEX,*PDRVCONFIGINFOEX,*NPDRVCONFIGINFOEX,*LPDRVCONFIGINFOEX;
struct DRVCONFIGINFOEX
{
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
}
alias DRVCONFIGINFOEX *PDRVCONFIGINFOEX;
alias DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;
alias DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;
//C       typedef struct tagDRVCONFIGINFO {
//C         DWORD dwDCISize;
//C         LPCWSTR lpszDCISectionName;
//C         LPCWSTR lpszDCIAliasName;
//C       } DRVCONFIGINFO,*PDRVCONFIGINFO,*NPDRVCONFIGINFO,*LPDRVCONFIGINFO;
struct tagDRVCONFIGINFO
{
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
}
alias tagDRVCONFIGINFO DRVCONFIGINFO;
alias tagDRVCONFIGINFO *PDRVCONFIGINFO;
alias tagDRVCONFIGINFO *NPDRVCONFIGINFO;
alias tagDRVCONFIGINFO *LPDRVCONFIGINFO;
//C       typedef LRESULT ( *DRIVERPROC)(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);
alias LRESULT  function(DWORD_PTR , HDRVR , UINT , LPARAM , LPARAM )DRIVERPROC;
//C        LRESULT CloseDriver(HDRVR hDriver,LPARAM lParam1,LPARAM lParam2);
LRESULT  CloseDriver(HDRVR hDriver, LPARAM lParam1, LPARAM lParam2);
//C        HDRVR OpenDriver(LPCWSTR szDriverName,LPCWSTR szSectionName,LPARAM lParam2);
HDRVR  OpenDriver(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2);
//C        LRESULT SendDriverMessage(HDRVR hDriver,UINT message,LPARAM lParam1,LPARAM lParam2);
LRESULT  SendDriverMessage(HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2);
//C        HMODULE DrvGetModuleHandle(HDRVR hDriver);
HMODULE  DrvGetModuleHandle(HDRVR hDriver);
//C        HMODULE GetDriverModuleHandle(HDRVR hDriver);
HMODULE  GetDriverModuleHandle(HDRVR hDriver);
//C        LRESULT DefDriverProc(DWORD_PTR dwDriverIdentifier,HDRVR hdrvr,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
LRESULT  DefDriverProc(DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
//C       typedef void ( DRVCALLBACK)(HDRVR hdrvr,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);
alias void function(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)DRVCALLBACK;
//C       typedef DRVCALLBACK *LPDRVCALLBACK;
alias void  function(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)LPDRVCALLBACK;
//C       typedef DRVCALLBACK *PDRVCALLBACK;
alias void  function(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)PDRVCALLBACK;
//C        WINBOOL sndPlaySoundA(LPCSTR pszSound,UINT fuSound);
WINBOOL  sndPlaySoundA(LPCSTR pszSound, UINT fuSound);
//C        WINBOOL sndPlaySoundW(LPCWSTR pszSound,UINT fuSound);
WINBOOL  sndPlaySoundW(LPCWSTR pszSound, UINT fuSound);
//C        WINBOOL PlaySoundA(LPCSTR pszSound,HMODULE hmod,DWORD fdwSound);
WINBOOL  PlaySoundA(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
//C        WINBOOL PlaySoundW(LPCWSTR pszSound,HMODULE hmod,DWORD fdwSound);
WINBOOL  PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);
//C       struct HWAVE__ { int unused; }; typedef struct HWAVE__ *HWAVE;
struct HWAVE__
{
    int unused;
}
alias HWAVE__ *HWAVE;
//C       struct HWAVEIN__ { int unused; }; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEIN__
{
    int unused;
}
alias HWAVEIN__ *HWAVEIN;
//C       struct HWAVEOUT__ { int unused; }; typedef struct HWAVEOUT__ *HWAVEOUT;
struct HWAVEOUT__
{
    int unused;
}
alias HWAVEOUT__ *HWAVEOUT;
//C       typedef HWAVEIN *LPHWAVEIN;
alias HWAVEIN *LPHWAVEIN;
//C       typedef HWAVEOUT *LPHWAVEOUT;
alias HWAVEOUT *LPHWAVEOUT;
//C       typedef DRVCALLBACK WAVECALLBACK;
alias DRVCALLBACK WAVECALLBACK;
//C       typedef WAVECALLBACK *LPWAVECALLBACK;
alias void  function(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)LPWAVECALLBACK;
//C       typedef struct wavehdr_tag {
//C         LPSTR lpData;
//C         DWORD dwBufferLength;
//C         DWORD dwBytesRecorded;
//C         DWORD_PTR dwUser;
//C         DWORD dwFlags;
//C         DWORD dwLoops;
//C         struct wavehdr_tag *lpNext;
//C         DWORD_PTR reserved;
//C       } WAVEHDR,*PWAVEHDR,*NPWAVEHDR,*LPWAVEHDR;
struct wavehdr_tag
{
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    wavehdr_tag *lpNext;
    DWORD_PTR reserved;
}
alias wavehdr_tag WAVEHDR;
alias wavehdr_tag *PWAVEHDR;
alias wavehdr_tag *NPWAVEHDR;
alias wavehdr_tag *LPWAVEHDR;
//C       typedef struct tagWAVEOUTCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C       } WAVEOUTCAPSA,*PWAVEOUTCAPSA,*NPWAVEOUTCAPSA,*LPWAVEOUTCAPSA;
struct tagWAVEOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
}
alias tagWAVEOUTCAPSA WAVEOUTCAPSA;
alias tagWAVEOUTCAPSA *PWAVEOUTCAPSA;
alias tagWAVEOUTCAPSA *NPWAVEOUTCAPSA;
alias tagWAVEOUTCAPSA *LPWAVEOUTCAPSA;
//C       typedef struct tagWAVEOUTCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C       } WAVEOUTCAPSW,*PWAVEOUTCAPSW,*NPWAVEOUTCAPSW,*LPWAVEOUTCAPSW;
struct tagWAVEOUTCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
}
alias tagWAVEOUTCAPSW WAVEOUTCAPSW;
alias tagWAVEOUTCAPSW *PWAVEOUTCAPSW;
alias tagWAVEOUTCAPSW *NPWAVEOUTCAPSW;
alias tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;
//C       typedef WAVEOUTCAPSA WAVEOUTCAPS;
alias WAVEOUTCAPSA WAVEOUTCAPS;
//C       typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
alias PWAVEOUTCAPSA PWAVEOUTCAPS;
//C       typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
alias NPWAVEOUTCAPSA NPWAVEOUTCAPS;
//C       typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
alias LPWAVEOUTCAPSA LPWAVEOUTCAPS;
//C       typedef struct tagWAVEOUTCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } WAVEOUTCAPS2A,*PWAVEOUTCAPS2A,*NPWAVEOUTCAPS2A,*LPWAVEOUTCAPS2A;
struct tagWAVEOUTCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagWAVEOUTCAPS2A WAVEOUTCAPS2A;
alias tagWAVEOUTCAPS2A *PWAVEOUTCAPS2A;
alias tagWAVEOUTCAPS2A *NPWAVEOUTCAPS2A;
alias tagWAVEOUTCAPS2A *LPWAVEOUTCAPS2A;
//C       typedef struct tagWAVEOUTCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } WAVEOUTCAPS2W,*PWAVEOUTCAPS2W,*NPWAVEOUTCAPS2W,*LPWAVEOUTCAPS2W;
struct tagWAVEOUTCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagWAVEOUTCAPS2W WAVEOUTCAPS2W;
alias tagWAVEOUTCAPS2W *PWAVEOUTCAPS2W;
alias tagWAVEOUTCAPS2W *NPWAVEOUTCAPS2W;
alias tagWAVEOUTCAPS2W *LPWAVEOUTCAPS2W;
//C       typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
alias WAVEOUTCAPS2A WAVEOUTCAPS2;
//C       typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
alias PWAVEOUTCAPS2A PWAVEOUTCAPS2;
//C       typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
alias NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
//C       typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
alias LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
//C       typedef struct tagWAVEINCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C       } WAVEINCAPSA,*PWAVEINCAPSA,*NPWAVEINCAPSA,*LPWAVEINCAPSA;
struct tagWAVEINCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
}
alias tagWAVEINCAPSA WAVEINCAPSA;
alias tagWAVEINCAPSA *PWAVEINCAPSA;
alias tagWAVEINCAPSA *NPWAVEINCAPSA;
alias tagWAVEINCAPSA *LPWAVEINCAPSA;
//C       typedef struct tagWAVEINCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C       } WAVEINCAPSW,*PWAVEINCAPSW,*NPWAVEINCAPSW,*LPWAVEINCAPSW;
struct tagWAVEINCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
}
alias tagWAVEINCAPSW WAVEINCAPSW;
alias tagWAVEINCAPSW *PWAVEINCAPSW;
alias tagWAVEINCAPSW *NPWAVEINCAPSW;
alias tagWAVEINCAPSW *LPWAVEINCAPSW;
//C       typedef WAVEINCAPSA WAVEINCAPS;
alias WAVEINCAPSA WAVEINCAPS;
//C       typedef PWAVEINCAPSA PWAVEINCAPS;
alias PWAVEINCAPSA PWAVEINCAPS;
//C       typedef NPWAVEINCAPSA NPWAVEINCAPS;
alias NPWAVEINCAPSA NPWAVEINCAPS;
//C       typedef LPWAVEINCAPSA LPWAVEINCAPS;
alias LPWAVEINCAPSA LPWAVEINCAPS;
//C       typedef struct tagWAVEINCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } WAVEINCAPS2A,*PWAVEINCAPS2A,*NPWAVEINCAPS2A,*LPWAVEINCAPS2A;
struct tagWAVEINCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagWAVEINCAPS2A WAVEINCAPS2A;
alias tagWAVEINCAPS2A *PWAVEINCAPS2A;
alias tagWAVEINCAPS2A *NPWAVEINCAPS2A;
alias tagWAVEINCAPS2A *LPWAVEINCAPS2A;
//C       typedef struct tagWAVEINCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD dwFormats;
//C         WORD wChannels;
//C         WORD wReserved1;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } WAVEINCAPS2W,*PWAVEINCAPS2W,*NPWAVEINCAPS2W,*LPWAVEINCAPS2W;
struct tagWAVEINCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagWAVEINCAPS2W WAVEINCAPS2W;
alias tagWAVEINCAPS2W *PWAVEINCAPS2W;
alias tagWAVEINCAPS2W *NPWAVEINCAPS2W;
alias tagWAVEINCAPS2W *LPWAVEINCAPS2W;
//C       typedef WAVEINCAPS2A WAVEINCAPS2;
alias WAVEINCAPS2A WAVEINCAPS2;
//C       typedef PWAVEINCAPS2A PWAVEINCAPS2;
alias PWAVEINCAPS2A PWAVEINCAPS2;
//C       typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
alias NPWAVEINCAPS2A NPWAVEINCAPS2;
//C       typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
alias LPWAVEINCAPS2A LPWAVEINCAPS2;
//C       typedef struct waveformat_tag {
//C         WORD wFormatTag;
//C         WORD nChannels;
//C         DWORD nSamplesPerSec;
//C         DWORD nAvgBytesPerSec;
//C         WORD nBlockAlign;
//C       } WAVEFORMAT,*PWAVEFORMAT,*NPWAVEFORMAT,*LPWAVEFORMAT;
struct waveformat_tag
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
}
alias waveformat_tag WAVEFORMAT;
alias waveformat_tag *PWAVEFORMAT;
alias waveformat_tag *NPWAVEFORMAT;
alias waveformat_tag *LPWAVEFORMAT;
//C       typedef struct pcmwaveformat_tag {
//C         WAVEFORMAT wf;
//C         WORD wBitsPerSample;
//C       } PCMWAVEFORMAT,*PPCMWAVEFORMAT,*NPPCMWAVEFORMAT,*LPPCMWAVEFORMAT;
struct pcmwaveformat_tag
{
    WAVEFORMAT wf;
    WORD wBitsPerSample;
}
alias pcmwaveformat_tag PCMWAVEFORMAT;
alias pcmwaveformat_tag *PPCMWAVEFORMAT;
alias pcmwaveformat_tag *NPPCMWAVEFORMAT;
alias pcmwaveformat_tag *LPPCMWAVEFORMAT;
//C       typedef struct tWAVEFORMATEX {
//C         WORD wFormatTag;
//C         WORD nChannels;
//C         DWORD nSamplesPerSec;
//C         DWORD nAvgBytesPerSec;
//C         WORD nBlockAlign;
//C         WORD wBitsPerSample;
//C         WORD cbSize;
//C       } WAVEFORMATEX,*PWAVEFORMATEX,*NPWAVEFORMATEX,*LPWAVEFORMATEX;
struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;
}
alias tWAVEFORMATEX WAVEFORMATEX;
alias tWAVEFORMATEX *PWAVEFORMATEX;
alias tWAVEFORMATEX *NPWAVEFORMATEX;
alias tWAVEFORMATEX *LPWAVEFORMATEX;
//C       typedef const WAVEFORMATEX *LPCWAVEFORMATEX;
alias WAVEFORMATEX *LPCWAVEFORMATEX;
//C        UINT waveOutGetNumDevs(void);
UINT  waveOutGetNumDevs();
//C        MMRESULT waveOutGetDevCapsA(UINT_PTR uDeviceID,LPWAVEOUTCAPSA pwoc,UINT cbwoc);
MMRESULT  waveOutGetDevCapsA(UINT_PTR uDeviceID, LPWAVEOUTCAPSA pwoc, UINT cbwoc);
//C        MMRESULT waveOutGetDevCapsW(UINT_PTR uDeviceID,LPWAVEOUTCAPSW pwoc,UINT cbwoc);
MMRESULT  waveOutGetDevCapsW(UINT_PTR uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc);
//C        MMRESULT waveOutGetVolume(HWAVEOUT hwo,LPDWORD pdwVolume);
MMRESULT  waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume);
//C        MMRESULT waveOutSetVolume(HWAVEOUT hwo,DWORD dwVolume);
MMRESULT  waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume);
//C        MMRESULT waveOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
MMRESULT  waveOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
//C        MMRESULT waveOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);
MMRESULT  waveOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);
//C        MMRESULT waveOutOpen(LPHWAVEOUT phwo,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
MMRESULT  waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
//C        MMRESULT waveOutClose(HWAVEOUT hwo);
MMRESULT  waveOutClose(HWAVEOUT hwo);
//C        MMRESULT waveOutPrepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
MMRESULT  waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
//C        MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
MMRESULT  waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
//C        MMRESULT waveOutWrite(HWAVEOUT hwo,LPWAVEHDR pwh,UINT cbwh);
MMRESULT  waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
//C        MMRESULT waveOutPause(HWAVEOUT hwo);
MMRESULT  waveOutPause(HWAVEOUT hwo);
//C        MMRESULT waveOutRestart(HWAVEOUT hwo);
MMRESULT  waveOutRestart(HWAVEOUT hwo);
//C        MMRESULT waveOutReset(HWAVEOUT hwo);
MMRESULT  waveOutReset(HWAVEOUT hwo);
//C        MMRESULT waveOutBreakLoop(HWAVEOUT hwo);
MMRESULT  waveOutBreakLoop(HWAVEOUT hwo);
//C        MMRESULT waveOutGetPosition(HWAVEOUT hwo,LPMMTIME pmmt,UINT cbmmt);
MMRESULT  waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
//C        MMRESULT waveOutGetPitch(HWAVEOUT hwo,LPDWORD pdwPitch);
MMRESULT  waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch);
//C        MMRESULT waveOutSetPitch(HWAVEOUT hwo,DWORD dwPitch);
MMRESULT  waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch);
//C        MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo,LPDWORD pdwRate);
MMRESULT  waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate);
//C        MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo,DWORD dwRate);
MMRESULT  waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate);
//C        MMRESULT waveOutGetID(HWAVEOUT hwo,LPUINT puDeviceID);
MMRESULT  waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID);
//C        MMRESULT waveOutMessage(HWAVEOUT hwo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
MMRESULT  waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
//C        UINT waveInGetNumDevs(void);
UINT  waveInGetNumDevs();
//C        MMRESULT waveInGetDevCapsA(UINT_PTR uDeviceID,LPWAVEINCAPSA pwic,UINT cbwic);
MMRESULT  waveInGetDevCapsA(UINT_PTR uDeviceID, LPWAVEINCAPSA pwic, UINT cbwic);
//C        MMRESULT waveInGetDevCapsW(UINT_PTR uDeviceID,LPWAVEINCAPSW pwic,UINT cbwic);
MMRESULT  waveInGetDevCapsW(UINT_PTR uDeviceID, LPWAVEINCAPSW pwic, UINT cbwic);
//C        MMRESULT waveInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
MMRESULT  waveInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
//C        MMRESULT waveInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);
MMRESULT  waveInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);
//C        MMRESULT waveInOpen(LPHWAVEIN phwi,UINT uDeviceID,LPCWAVEFORMATEX pwfx,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
MMRESULT  waveInOpen(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
//C        MMRESULT waveInClose(HWAVEIN hwi);
MMRESULT  waveInClose(HWAVEIN hwi);
//C        MMRESULT waveInPrepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
MMRESULT  waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
//C        MMRESULT waveInUnprepareHeader(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
MMRESULT  waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
//C        MMRESULT waveInAddBuffer(HWAVEIN hwi,LPWAVEHDR pwh,UINT cbwh);
MMRESULT  waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
//C        MMRESULT waveInStart(HWAVEIN hwi);
MMRESULT  waveInStart(HWAVEIN hwi);
//C        MMRESULT waveInStop(HWAVEIN hwi);
MMRESULT  waveInStop(HWAVEIN hwi);
//C        MMRESULT waveInReset(HWAVEIN hwi);
MMRESULT  waveInReset(HWAVEIN hwi);
//C        MMRESULT waveInGetPosition(HWAVEIN hwi,LPMMTIME pmmt,UINT cbmmt);
MMRESULT  waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
//C        MMRESULT waveInGetID(HWAVEIN hwi,LPUINT puDeviceID);
MMRESULT  waveInGetID(HWAVEIN hwi, LPUINT puDeviceID);
//C        MMRESULT waveInMessage(HWAVEIN hwi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
MMRESULT  waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
//C       struct HMIDI__ { int unused; }; typedef struct HMIDI__ *HMIDI;
struct HMIDI__
{
    int unused;
}
alias HMIDI__ *HMIDI;
//C       struct HMIDIIN__ { int unused; }; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIIN__
{
    int unused;
}
alias HMIDIIN__ *HMIDIIN;
//C       struct HMIDIOUT__ { int unused; }; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDIOUT__
{
    int unused;
}
alias HMIDIOUT__ *HMIDIOUT;
//C       struct HMIDISTRM__ { int unused; }; typedef struct HMIDISTRM__ *HMIDISTRM;
struct HMIDISTRM__
{
    int unused;
}
alias HMIDISTRM__ *HMIDISTRM;
//C       typedef HMIDI *LPHMIDI;
alias HMIDI *LPHMIDI;
//C       typedef HMIDIIN *LPHMIDIIN;
alias HMIDIIN *LPHMIDIIN;
//C       typedef HMIDIOUT *LPHMIDIOUT;
alias HMIDIOUT *LPHMIDIOUT;
//C       typedef HMIDISTRM *LPHMIDISTRM;
alias HMIDISTRM *LPHMIDISTRM;
//C       typedef DRVCALLBACK MIDICALLBACK;
alias DRVCALLBACK MIDICALLBACK;
//C       typedef MIDICALLBACK *LPMIDICALLBACK;
alias void  function(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)LPMIDICALLBACK;
//C       typedef WORD PATCHARRAY[128];
alias WORD [128]PATCHARRAY;
//C       typedef WORD *LPPATCHARRAY;
alias WORD *LPPATCHARRAY;
//C       typedef WORD KEYARRAY[128];
alias WORD [128]KEYARRAY;
//C       typedef WORD *LPKEYARRAY;
alias WORD *LPKEYARRAY;
//C       typedef struct tagMIDIOUTCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wVoices;
//C         WORD wNotes;
//C         WORD wChannelMask;
//C         DWORD dwSupport;
//C       } MIDIOUTCAPSA,*PMIDIOUTCAPSA,*NPMIDIOUTCAPSA,*LPMIDIOUTCAPSA;
struct tagMIDIOUTCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
}
alias tagMIDIOUTCAPSA MIDIOUTCAPSA;
alias tagMIDIOUTCAPSA *PMIDIOUTCAPSA;
alias tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;
alias tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;
//C       typedef struct tagMIDIOUTCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wVoices;
//C         WORD wNotes;
//C         WORD wChannelMask;
//C         DWORD dwSupport;
//C       } MIDIOUTCAPSW,*PMIDIOUTCAPSW,*NPMIDIOUTCAPSW,*LPMIDIOUTCAPSW;
struct tagMIDIOUTCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
}
alias tagMIDIOUTCAPSW MIDIOUTCAPSW;
alias tagMIDIOUTCAPSW *PMIDIOUTCAPSW;
alias tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;
alias tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;
//C       typedef MIDIOUTCAPSA MIDIOUTCAPS;
alias MIDIOUTCAPSA MIDIOUTCAPS;
//C       typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
alias PMIDIOUTCAPSA PMIDIOUTCAPS;
//C       typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
alias NPMIDIOUTCAPSA NPMIDIOUTCAPS;
//C       typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
alias LPMIDIOUTCAPSA LPMIDIOUTCAPS;
//C       typedef struct tagMIDIOUTCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wVoices;
//C         WORD wNotes;
//C         WORD wChannelMask;
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } MIDIOUTCAPS2A,*PMIDIOUTCAPS2A,*NPMIDIOUTCAPS2A,*LPMIDIOUTCAPS2A;
struct tagMIDIOUTCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagMIDIOUTCAPS2A MIDIOUTCAPS2A;
alias tagMIDIOUTCAPS2A *PMIDIOUTCAPS2A;
alias tagMIDIOUTCAPS2A *NPMIDIOUTCAPS2A;
alias tagMIDIOUTCAPS2A *LPMIDIOUTCAPS2A;
//C       typedef struct tagMIDIOUTCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wVoices;
//C         WORD wNotes;
//C         WORD wChannelMask;
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } MIDIOUTCAPS2W,*PMIDIOUTCAPS2W,*NPMIDIOUTCAPS2W,*LPMIDIOUTCAPS2W;
struct tagMIDIOUTCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagMIDIOUTCAPS2W MIDIOUTCAPS2W;
alias tagMIDIOUTCAPS2W *PMIDIOUTCAPS2W;
alias tagMIDIOUTCAPS2W *NPMIDIOUTCAPS2W;
alias tagMIDIOUTCAPS2W *LPMIDIOUTCAPS2W;
//C       typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
alias MIDIOUTCAPS2A MIDIOUTCAPS2;
//C       typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
alias PMIDIOUTCAPS2A PMIDIOUTCAPS2;
//C       typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
alias NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
//C       typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
alias LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
//C       typedef struct tagMIDIINCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD dwSupport;
//C       } MIDIINCAPSA,*PMIDIINCAPSA,*NPMIDIINCAPSA,*LPMIDIINCAPSA;
struct tagMIDIINCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD dwSupport;
}
alias tagMIDIINCAPSA MIDIINCAPSA;
alias tagMIDIINCAPSA *PMIDIINCAPSA;
alias tagMIDIINCAPSA *NPMIDIINCAPSA;
alias tagMIDIINCAPSA *LPMIDIINCAPSA;
//C       typedef struct tagMIDIINCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD dwSupport;
//C       } MIDIINCAPSW,*PMIDIINCAPSW,*NPMIDIINCAPSW,*LPMIDIINCAPSW;
struct tagMIDIINCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD dwSupport;
}
alias tagMIDIINCAPSW MIDIINCAPSW;
alias tagMIDIINCAPSW *PMIDIINCAPSW;
alias tagMIDIINCAPSW *NPMIDIINCAPSW;
alias tagMIDIINCAPSW *LPMIDIINCAPSW;
//C       typedef MIDIINCAPSA MIDIINCAPS;
alias MIDIINCAPSA MIDIINCAPS;
//C       typedef PMIDIINCAPSA PMIDIINCAPS;
alias PMIDIINCAPSA PMIDIINCAPS;
//C       typedef NPMIDIINCAPSA NPMIDIINCAPS;
alias NPMIDIINCAPSA NPMIDIINCAPS;
//C       typedef LPMIDIINCAPSA LPMIDIINCAPS;
alias LPMIDIINCAPSA LPMIDIINCAPS;
//C       typedef struct tagMIDIINCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } MIDIINCAPS2A,*PMIDIINCAPS2A,*NPMIDIINCAPS2A,*LPMIDIINCAPS2A;
struct tagMIDIINCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagMIDIINCAPS2A MIDIINCAPS2A;
alias tagMIDIINCAPS2A *PMIDIINCAPS2A;
alias tagMIDIINCAPS2A *NPMIDIINCAPS2A;
alias tagMIDIINCAPS2A *LPMIDIINCAPS2A;
//C       typedef struct tagMIDIINCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } MIDIINCAPS2W,*PMIDIINCAPS2W,*NPMIDIINCAPS2W,*LPMIDIINCAPS2W;
struct tagMIDIINCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagMIDIINCAPS2W MIDIINCAPS2W;
alias tagMIDIINCAPS2W *PMIDIINCAPS2W;
alias tagMIDIINCAPS2W *NPMIDIINCAPS2W;
alias tagMIDIINCAPS2W *LPMIDIINCAPS2W;
//C       typedef MIDIINCAPS2A MIDIINCAPS2;
alias MIDIINCAPS2A MIDIINCAPS2;
//C       typedef PMIDIINCAPS2A PMIDIINCAPS2;
alias PMIDIINCAPS2A PMIDIINCAPS2;
//C       typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
alias NPMIDIINCAPS2A NPMIDIINCAPS2;
//C       typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
alias LPMIDIINCAPS2A LPMIDIINCAPS2;
//C       typedef struct midihdr_tag {
//C         LPSTR lpData;
//C         DWORD dwBufferLength;
//C         DWORD dwBytesRecorded;
//C         DWORD_PTR dwUser;
//C         DWORD dwFlags;
//C         struct midihdr_tag *lpNext;
//C         DWORD_PTR reserved;
//C         DWORD dwOffset;
//C         DWORD_PTR dwReserved[8];
//C       } MIDIHDR,*PMIDIHDR,*NPMIDIHDR,*LPMIDIHDR;
struct midihdr_tag
{
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    midihdr_tag *lpNext;
    DWORD_PTR reserved;
    DWORD dwOffset;
    DWORD_PTR [8]dwReserved;
}
alias midihdr_tag MIDIHDR;
alias midihdr_tag *PMIDIHDR;
alias midihdr_tag *NPMIDIHDR;
alias midihdr_tag *LPMIDIHDR;
//C       typedef struct midievent_tag {
//C         DWORD dwDeltaTime;
//C         DWORD dwStreamID;
//C         DWORD dwEvent;
//C         DWORD dwParms[1];
//C       } MIDIEVENT;
struct midievent_tag
{
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD [1]dwParms;
}
alias midievent_tag MIDIEVENT;
//C       typedef struct midistrmbuffver_tag {
//C         DWORD dwVersion;
//C         DWORD dwMid;
//C         DWORD dwOEMVersion;
//C       } MIDISTRMBUFFVER;
struct midistrmbuffver_tag
{
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
}
alias midistrmbuffver_tag MIDISTRMBUFFVER;
//C       typedef struct midiproptimediv_tag {
//C         DWORD cbStruct;
//C         DWORD dwTimeDiv;
//C       } MIDIPROPTIMEDIV,*LPMIDIPROPTIMEDIV;
struct midiproptimediv_tag
{
    DWORD cbStruct;
    DWORD dwTimeDiv;
}
alias midiproptimediv_tag MIDIPROPTIMEDIV;
alias midiproptimediv_tag *LPMIDIPROPTIMEDIV;
//C       typedef struct midiproptempo_tag {
//C         DWORD cbStruct;
//C         DWORD dwTempo;
//C       } MIDIPROPTEMPO,*LPMIDIPROPTEMPO;
struct midiproptempo_tag
{
    DWORD cbStruct;
    DWORD dwTempo;
}
alias midiproptempo_tag MIDIPROPTEMPO;
alias midiproptempo_tag *LPMIDIPROPTEMPO;
//C        UINT midiOutGetNumDevs(void);
UINT  midiOutGetNumDevs();
//C        MMRESULT midiStreamOpen(LPHMIDISTRM phms,LPUINT puDeviceID,DWORD cMidi,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
MMRESULT  midiStreamOpen(LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
//C        MMRESULT midiStreamClose(HMIDISTRM hms);
MMRESULT  midiStreamClose(HMIDISTRM hms);
//C        MMRESULT midiStreamProperty(HMIDISTRM hms,LPBYTE lppropdata,DWORD dwProperty);
MMRESULT  midiStreamProperty(HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty);
//C        MMRESULT midiStreamPosition(HMIDISTRM hms,LPMMTIME lpmmt,UINT cbmmt);
MMRESULT  midiStreamPosition(HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt);
//C        MMRESULT midiStreamOut(HMIDISTRM hms,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiStreamOut(HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiStreamPause(HMIDISTRM hms);
MMRESULT  midiStreamPause(HMIDISTRM hms);
//C        MMRESULT midiStreamRestart(HMIDISTRM hms);
MMRESULT  midiStreamRestart(HMIDISTRM hms);
//C        MMRESULT midiStreamStop(HMIDISTRM hms);
MMRESULT  midiStreamStop(HMIDISTRM hms);
//C        MMRESULT midiConnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved);
MMRESULT  midiConnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
//C        MMRESULT midiDisconnect(HMIDI hmi,HMIDIOUT hmo,LPVOID pReserved);
MMRESULT  midiDisconnect(HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved);
//C        MMRESULT midiOutGetDevCapsA(UINT_PTR uDeviceID,LPMIDIOUTCAPSA pmoc,UINT cbmoc);
MMRESULT  midiOutGetDevCapsA(UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc);
//C        MMRESULT midiOutGetDevCapsW(UINT_PTR uDeviceID,LPMIDIOUTCAPSW pmoc,UINT cbmoc);
MMRESULT  midiOutGetDevCapsW(UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc);
//C        MMRESULT midiOutGetVolume(HMIDIOUT hmo,LPDWORD pdwVolume);
MMRESULT  midiOutGetVolume(HMIDIOUT hmo, LPDWORD pdwVolume);
//C        MMRESULT midiOutSetVolume(HMIDIOUT hmo,DWORD dwVolume);
MMRESULT  midiOutSetVolume(HMIDIOUT hmo, DWORD dwVolume);
//C        MMRESULT midiOutGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
MMRESULT  midiOutGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
//C        MMRESULT midiOutGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);
MMRESULT  midiOutGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);
//C        MMRESULT midiOutOpen(LPHMIDIOUT phmo,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
MMRESULT  midiOutOpen(LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
//C        MMRESULT midiOutClose(HMIDIOUT hmo);
MMRESULT  midiOutClose(HMIDIOUT hmo);
//C        MMRESULT midiOutPrepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiOutPrepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiOutUnprepareHeader(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiOutUnprepareHeader(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiOutShortMsg(HMIDIOUT hmo,DWORD dwMsg);
MMRESULT  midiOutShortMsg(HMIDIOUT hmo, DWORD dwMsg);
//C        MMRESULT midiOutLongMsg(HMIDIOUT hmo,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiOutLongMsg(HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiOutReset(HMIDIOUT hmo);
MMRESULT  midiOutReset(HMIDIOUT hmo);
//C        MMRESULT midiOutCachePatches(HMIDIOUT hmo,UINT uBank,LPWORD pwpa,UINT fuCache);
MMRESULT  midiOutCachePatches(HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache);
//C        MMRESULT midiOutCacheDrumPatches(HMIDIOUT hmo,UINT uPatch,LPWORD pwkya,UINT fuCache);
MMRESULT  midiOutCacheDrumPatches(HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache);
//C        MMRESULT midiOutGetID(HMIDIOUT hmo,LPUINT puDeviceID);
MMRESULT  midiOutGetID(HMIDIOUT hmo, LPUINT puDeviceID);
//C        MMRESULT midiOutMessage(HMIDIOUT hmo,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
MMRESULT  midiOutMessage(HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
//C        UINT midiInGetNumDevs(void);
UINT  midiInGetNumDevs();
//C        MMRESULT midiInGetDevCapsA(UINT_PTR uDeviceID,LPMIDIINCAPSA pmic,UINT cbmic);
MMRESULT  midiInGetDevCapsA(UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic);
//C        MMRESULT midiInGetDevCapsW(UINT_PTR uDeviceID,LPMIDIINCAPSW pmic,UINT cbmic);
MMRESULT  midiInGetDevCapsW(UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic);
//C        MMRESULT midiInGetErrorTextA(MMRESULT mmrError,LPSTR pszText,UINT cchText);
MMRESULT  midiInGetErrorTextA(MMRESULT mmrError, LPSTR pszText, UINT cchText);
//C        MMRESULT midiInGetErrorTextW(MMRESULT mmrError,LPWSTR pszText,UINT cchText);
MMRESULT  midiInGetErrorTextW(MMRESULT mmrError, LPWSTR pszText, UINT cchText);
//C        MMRESULT midiInOpen(LPHMIDIIN phmi,UINT uDeviceID,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
MMRESULT  midiInOpen(LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
//C        MMRESULT midiInClose(HMIDIIN hmi);
MMRESULT  midiInClose(HMIDIIN hmi);
//C        MMRESULT midiInPrepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiInPrepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiInUnprepareHeader(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiInUnprepareHeader(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiInAddBuffer(HMIDIIN hmi,LPMIDIHDR pmh,UINT cbmh);
MMRESULT  midiInAddBuffer(HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh);
//C        MMRESULT midiInStart(HMIDIIN hmi);
MMRESULT  midiInStart(HMIDIIN hmi);
//C        MMRESULT midiInStop(HMIDIIN hmi);
MMRESULT  midiInStop(HMIDIIN hmi);
//C        MMRESULT midiInReset(HMIDIIN hmi);
MMRESULT  midiInReset(HMIDIIN hmi);
//C        MMRESULT midiInGetID(HMIDIIN hmi,LPUINT puDeviceID);
MMRESULT  midiInGetID(HMIDIIN hmi, LPUINT puDeviceID);
//C        MMRESULT midiInMessage(HMIDIIN hmi,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
MMRESULT  midiInMessage(HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
//C       typedef struct tagAUXCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C       } AUXCAPSA,*PAUXCAPSA,*NPAUXCAPSA,*LPAUXCAPSA;
struct tagAUXCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
}
alias tagAUXCAPSA AUXCAPSA;
alias tagAUXCAPSA *PAUXCAPSA;
alias tagAUXCAPSA *NPAUXCAPSA;
alias tagAUXCAPSA *LPAUXCAPSA;
//C       typedef struct tagAUXCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C       } AUXCAPSW,*PAUXCAPSW,*NPAUXCAPSW,*LPAUXCAPSW;
struct tagAUXCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
}
alias tagAUXCAPSW AUXCAPSW;
alias tagAUXCAPSW *PAUXCAPSW;
alias tagAUXCAPSW *NPAUXCAPSW;
alias tagAUXCAPSW *LPAUXCAPSW;
//C       typedef AUXCAPSA AUXCAPS;
alias AUXCAPSA AUXCAPS;
//C       typedef PAUXCAPSA PAUXCAPS;
alias PAUXCAPSA PAUXCAPS;
//C       typedef NPAUXCAPSA NPAUXCAPS;
alias NPAUXCAPSA NPAUXCAPS;
//C       typedef LPAUXCAPSA LPAUXCAPS;
alias LPAUXCAPSA LPAUXCAPS;
//C       typedef struct tagAUXCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } AUXCAPS2A,*PAUXCAPS2A,*NPAUXCAPS2A,*LPAUXCAPS2A;
struct tagAUXCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagAUXCAPS2A AUXCAPS2A;
alias tagAUXCAPS2A *PAUXCAPS2A;
alias tagAUXCAPS2A *NPAUXCAPS2A;
alias tagAUXCAPS2A *LPAUXCAPS2A;
//C       typedef struct tagAUXCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         WORD wTechnology;
//C         WORD wReserved1;
//C         DWORD dwSupport;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } AUXCAPS2W,*PAUXCAPS2W,*NPAUXCAPS2W,*LPAUXCAPS2W;
struct tagAUXCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagAUXCAPS2W AUXCAPS2W;
alias tagAUXCAPS2W *PAUXCAPS2W;
alias tagAUXCAPS2W *NPAUXCAPS2W;
alias tagAUXCAPS2W *LPAUXCAPS2W;
//C       typedef AUXCAPS2A AUXCAPS2;
alias AUXCAPS2A AUXCAPS2;
//C       typedef PAUXCAPS2A PAUXCAPS2;
alias PAUXCAPS2A PAUXCAPS2;
//C       typedef NPAUXCAPS2A NPAUXCAPS2;
alias NPAUXCAPS2A NPAUXCAPS2;
//C       typedef LPAUXCAPS2A LPAUXCAPS2;
alias LPAUXCAPS2A LPAUXCAPS2;
//C        UINT auxGetNumDevs(void);
UINT  auxGetNumDevs();
//C        MMRESULT auxGetDevCapsA(UINT_PTR uDeviceID,LPAUXCAPSA pac,UINT cbac);
MMRESULT  auxGetDevCapsA(UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac);
//C        MMRESULT auxGetDevCapsW(UINT_PTR uDeviceID,LPAUXCAPSW pac,UINT cbac);
MMRESULT  auxGetDevCapsW(UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac);
//C        MMRESULT auxSetVolume(UINT uDeviceID,DWORD dwVolume);
MMRESULT  auxSetVolume(UINT uDeviceID, DWORD dwVolume);
//C        MMRESULT auxGetVolume(UINT uDeviceID,LPDWORD pdwVolume);
MMRESULT  auxGetVolume(UINT uDeviceID, LPDWORD pdwVolume);
//C        MMRESULT auxOutMessage(UINT uDeviceID,UINT uMsg,DWORD_PTR dw1,DWORD_PTR dw2);
MMRESULT  auxOutMessage(UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2);
//C       struct HMIXEROBJ__ { int unused; }; typedef struct HMIXEROBJ__ *HMIXEROBJ;
struct HMIXEROBJ__
{
    int unused;
}
alias HMIXEROBJ__ *HMIXEROBJ;
//C       typedef HMIXEROBJ *LPHMIXEROBJ;
alias HMIXEROBJ *LPHMIXEROBJ;
//C       struct HMIXER__ { int unused; }; typedef struct HMIXER__ *HMIXER;
struct HMIXER__
{
    int unused;
}
alias HMIXER__ *HMIXER;
//C       typedef HMIXER *LPHMIXER;
alias HMIXER *LPHMIXER;
//C        UINT mixerGetNumDevs(void);
UINT  mixerGetNumDevs();
//C       typedef struct tagMIXERCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD fdwSupport;
//C         DWORD cDestinations;
//C       } MIXERCAPSA,*PMIXERCAPSA,*LPMIXERCAPSA;
struct tagMIXERCAPSA
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
}
alias tagMIXERCAPSA MIXERCAPSA;
alias tagMIXERCAPSA *PMIXERCAPSA;
alias tagMIXERCAPSA *LPMIXERCAPSA;
//C       typedef struct tagMIXERCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD fdwSupport;
//C         DWORD cDestinations;
//C       } MIXERCAPSW,*PMIXERCAPSW,*LPMIXERCAPSW;
struct tagMIXERCAPSW
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
}
alias tagMIXERCAPSW MIXERCAPSW;
alias tagMIXERCAPSW *PMIXERCAPSW;
alias tagMIXERCAPSW *LPMIXERCAPSW;
//C       typedef MIXERCAPSA MIXERCAPS;
alias MIXERCAPSA MIXERCAPS;
//C       typedef PMIXERCAPSA PMIXERCAPS;
alias PMIXERCAPSA PMIXERCAPS;
//C       typedef LPMIXERCAPSA LPMIXERCAPS;
alias LPMIXERCAPSA LPMIXERCAPS;
//C       typedef struct tagMIXERCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         CHAR szPname[32];
//C         DWORD fdwSupport;
//C         DWORD cDestinations;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } MIXERCAPS2A,*PMIXERCAPS2A,*LPMIXERCAPS2A;
struct tagMIXERCAPS2A
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagMIXERCAPS2A MIXERCAPS2A;
alias tagMIXERCAPS2A *PMIXERCAPS2A;
alias tagMIXERCAPS2A *LPMIXERCAPS2A;
//C       typedef struct tagMIXERCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         MMVERSION vDriverVersion;
//C         WCHAR szPname[32];
//C         DWORD fdwSupport;
//C         DWORD cDestinations;
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } MIXERCAPS2W,*PMIXERCAPS2W,*LPMIXERCAPS2W;
struct tagMIXERCAPS2W
{
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagMIXERCAPS2W MIXERCAPS2W;
alias tagMIXERCAPS2W *PMIXERCAPS2W;
alias tagMIXERCAPS2W *LPMIXERCAPS2W;
//C       typedef MIXERCAPS2A MIXERCAPS2;
alias MIXERCAPS2A MIXERCAPS2;
//C       typedef PMIXERCAPS2A PMIXERCAPS2;
alias PMIXERCAPS2A PMIXERCAPS2;
//C       typedef LPMIXERCAPS2A LPMIXERCAPS2;
alias LPMIXERCAPS2A LPMIXERCAPS2;
//C        MMRESULT mixerGetDevCapsA(UINT_PTR uMxId,LPMIXERCAPSA pmxcaps,UINT cbmxcaps);
MMRESULT  mixerGetDevCapsA(UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps);
//C        MMRESULT mixerGetDevCapsW(UINT_PTR uMxId,LPMIXERCAPSW pmxcaps,UINT cbmxcaps);
MMRESULT  mixerGetDevCapsW(UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps);
//C        MMRESULT mixerOpen(LPHMIXER phmx,UINT uMxId,DWORD_PTR dwCallback,DWORD_PTR dwInstance,DWORD fdwOpen);
MMRESULT  mixerOpen(LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
//C        MMRESULT mixerClose(HMIXER hmx);
MMRESULT  mixerClose(HMIXER hmx);
//C        DWORD mixerMessage(HMIXER hmx,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);
DWORD  mixerMessage(HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
//C       typedef struct tagMIXERLINEA {
//C         DWORD cbStruct;
//C         DWORD dwDestination;
//C         DWORD dwSource;
//C         DWORD dwLineID;
//C         DWORD fdwLine;
//C         DWORD_PTR dwUser;
//C         DWORD dwComponentType;
//C         DWORD cChannels;
//C         DWORD cConnections;
//C         DWORD cControls;
//C         CHAR szShortName[16];
//C         CHAR szName[64];
//C         struct {
//C           DWORD dwType;
//C           DWORD dwDeviceID;
//C           WORD wMid;
//C           WORD wPid;
//C           MMVERSION vDriverVersion;
//C           CHAR szPname[32];
//C         } Target;
struct _N97
{
    DWORD dwType;
    DWORD dwDeviceID;
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR [32]szPname;
}
//C       } MIXERLINEA,*PMIXERLINEA,*LPMIXERLINEA;
struct tagMIXERLINEA
{
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR [16]szShortName;
    CHAR [64]szName;
    _N97 Target;
}
alias tagMIXERLINEA MIXERLINEA;
alias tagMIXERLINEA *PMIXERLINEA;
alias tagMIXERLINEA *LPMIXERLINEA;
//C       typedef struct tagMIXERLINEW {
//C         DWORD cbStruct;
//C         DWORD dwDestination;
//C         DWORD dwSource;
//C         DWORD dwLineID;
//C         DWORD fdwLine;
//C         DWORD_PTR dwUser;
//C         DWORD dwComponentType;
//C         DWORD cChannels;
//C         DWORD cConnections;
//C         DWORD cControls;
//C         WCHAR szShortName[16];
//C         WCHAR szName[64];
//C         struct {
//C           DWORD dwType;
//C           DWORD dwDeviceID;
//C           WORD wMid;
//C           WORD wPid;
//C           MMVERSION vDriverVersion;
//C           WCHAR szPname[32];
//C         } Target;
struct _N98
{
    DWORD dwType;
    DWORD dwDeviceID;
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR [32]szPname;
}
//C       } MIXERLINEW,*PMIXERLINEW,*LPMIXERLINEW;
struct tagMIXERLINEW
{
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR [16]szShortName;
    WCHAR [64]szName;
    _N98 Target;
}
alias tagMIXERLINEW MIXERLINEW;
alias tagMIXERLINEW *PMIXERLINEW;
alias tagMIXERLINEW *LPMIXERLINEW;
//C       typedef MIXERLINEA MIXERLINE;
alias MIXERLINEA MIXERLINE;
//C       typedef PMIXERLINEA PMIXERLINE;
alias PMIXERLINEA PMIXERLINE;
//C       typedef LPMIXERLINEA LPMIXERLINE;
alias LPMIXERLINEA LPMIXERLINE;
//C        MMRESULT mixerGetLineInfoA(HMIXEROBJ hmxobj,LPMIXERLINEA pmxl,DWORD fdwInfo);
MMRESULT  mixerGetLineInfoA(HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo);
//C        MMRESULT mixerGetLineInfoW(HMIXEROBJ hmxobj,LPMIXERLINEW pmxl,DWORD fdwInfo);
MMRESULT  mixerGetLineInfoW(HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo);
//C        MMRESULT mixerGetID(HMIXEROBJ hmxobj,UINT *puMxId,DWORD fdwId);
MMRESULT  mixerGetID(HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId);
//C       typedef struct tagMIXERCONTROLA {
//C         DWORD cbStruct;
//C         DWORD dwControlID;
//C         DWORD dwControlType;
//C         DWORD fdwControl;
//C         DWORD cMultipleItems;
//C         CHAR szShortName[16];
//C         CHAR szName[64];
//C         union {
//C            struct {
//C      LONG lMinimum;
//C      LONG lMaximum;
//C           } ;
struct _N100
{
    LONG lMinimum;
    LONG lMaximum;
}
//C            struct {
//C      DWORD dwMinimum;
//C      DWORD dwMaximum;
//C           } ;
struct _N101
{
    DWORD dwMinimum;
    DWORD dwMaximum;
}
//C           DWORD dwReserved[6];
//C         } Bounds;
union _N99
{
    LONG lMinimum;
    LONG lMaximum;
    DWORD dwMinimum;
    DWORD dwMaximum;
    DWORD [6]dwReserved;
}
//C         union {
//C           DWORD cSteps;
//C           DWORD cbCustomData;
//C           DWORD dwReserved[6];
//C         } Metrics;
union _N102
{
    DWORD cSteps;
    DWORD cbCustomData;
    DWORD [6]dwReserved;
}
//C       } MIXERCONTROLA,*PMIXERCONTROLA,*LPMIXERCONTROLA;
struct tagMIXERCONTROLA
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR [16]szShortName;
    CHAR [64]szName;
    _N99 Bounds;
    _N102 Metrics;
}
alias tagMIXERCONTROLA MIXERCONTROLA;
alias tagMIXERCONTROLA *PMIXERCONTROLA;
alias tagMIXERCONTROLA *LPMIXERCONTROLA;
//C       typedef struct tagMIXERCONTROLW {
//C         DWORD cbStruct;
//C         DWORD dwControlID;
//C         DWORD dwControlType;
//C         DWORD fdwControl;
//C         DWORD cMultipleItems;
//C         WCHAR szShortName[16];
//C         WCHAR szName[64];
//C         union {
//C            struct {
//C      LONG lMinimum;
//C      LONG lMaximum;
//C           } ;
struct _N104
{
    LONG lMinimum;
    LONG lMaximum;
}
//C            struct {
//C      DWORD dwMinimum;
//C      DWORD dwMaximum;
//C           } ;
struct _N105
{
    DWORD dwMinimum;
    DWORD dwMaximum;
}
//C           DWORD dwReserved[6];
//C         } Bounds;
union _N103
{
    LONG lMinimum;
    LONG lMaximum;
    DWORD dwMinimum;
    DWORD dwMaximum;
    DWORD [6]dwReserved;
}
//C         union {
//C           DWORD cSteps;
//C           DWORD cbCustomData;
//C           DWORD dwReserved[6];
//C         } Metrics;
union _N106
{
    DWORD cSteps;
    DWORD cbCustomData;
    DWORD [6]dwReserved;
}
//C       } MIXERCONTROLW,*PMIXERCONTROLW,*LPMIXERCONTROLW;
struct tagMIXERCONTROLW
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR [16]szShortName;
    WCHAR [64]szName;
    _N103 Bounds;
    _N106 Metrics;
}
alias tagMIXERCONTROLW MIXERCONTROLW;
alias tagMIXERCONTROLW *PMIXERCONTROLW;
alias tagMIXERCONTROLW *LPMIXERCONTROLW;
//C       typedef MIXERCONTROLA MIXERCONTROL;
alias MIXERCONTROLA MIXERCONTROL;
//C       typedef PMIXERCONTROLA PMIXERCONTROL;
alias PMIXERCONTROLA PMIXERCONTROL;
//C       typedef LPMIXERCONTROLA LPMIXERCONTROL;
alias LPMIXERCONTROLA LPMIXERCONTROL;
//C       typedef struct tagMIXERLINECONTROLSA {
//C         DWORD cbStruct;
//C         DWORD dwLineID;
//C          union {
//C           DWORD dwControlID;
//C           DWORD dwControlType;
//C         } ;
union _N107
{
    DWORD dwControlID;
    DWORD dwControlType;
}
//C         DWORD cControls;
//C         DWORD cbmxctrl;
//C         LPMIXERCONTROLA pamxctrl;
//C       } MIXERLINECONTROLSA,*PMIXERLINECONTROLSA,*LPMIXERLINECONTROLSA;
struct tagMIXERLINECONTROLSA
{
    DWORD cbStruct;
    DWORD dwLineID;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
}
alias tagMIXERLINECONTROLSA MIXERLINECONTROLSA;
alias tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA;
alias tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;
//C       typedef struct tagMIXERLINECONTROLSW {
//C         DWORD cbStruct;
//C         DWORD dwLineID;
//C          union {
//C           DWORD dwControlID;
//C           DWORD dwControlType;
//C         } ;
union _N108
{
    DWORD dwControlID;
    DWORD dwControlType;
}
//C         DWORD cControls;
//C         DWORD cbmxctrl;
//C         LPMIXERCONTROLW pamxctrl;
//C       } MIXERLINECONTROLSW,*PMIXERLINECONTROLSW,*LPMIXERLINECONTROLSW;
struct tagMIXERLINECONTROLSW
{
    DWORD cbStruct;
    DWORD dwLineID;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
}
alias tagMIXERLINECONTROLSW MIXERLINECONTROLSW;
alias tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW;
alias tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW;
//C       typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
alias MIXERLINECONTROLSA MIXERLINECONTROLS;
//C       typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
alias PMIXERLINECONTROLSA PMIXERLINECONTROLS;
//C       typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
alias LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
//C        MMRESULT mixerGetLineControlsA(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSA pmxlc,DWORD fdwControls);
MMRESULT  mixerGetLineControlsA(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls);
//C        MMRESULT mixerGetLineControlsW(HMIXEROBJ hmxobj,LPMIXERLINECONTROLSW pmxlc,DWORD fdwControls);
MMRESULT  mixerGetLineControlsW(HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls);
//C       typedef struct tMIXERCONTROLDETAILS {
//C         DWORD cbStruct;
//C         DWORD dwControlID;
//C         DWORD cChannels;
//C          union {
//C           HWND hwndOwner;
//C           DWORD cMultipleItems;
//C         } ;
union _N109
{
    HWND hwndOwner;
    DWORD cMultipleItems;
}
//C         DWORD cbDetails;
//C         LPVOID paDetails;
//C       } MIXERCONTROLDETAILS,*PMIXERCONTROLDETAILS,*LPMIXERCONTROLDETAILS;
struct tMIXERCONTROLDETAILS
{
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    HWND hwndOwner;
    DWORD cMultipleItems;
    DWORD cbDetails;
    LPVOID paDetails;
}
alias tMIXERCONTROLDETAILS MIXERCONTROLDETAILS;
alias tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;
alias tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
//C       typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
//C         DWORD dwParam1;
//C         DWORD dwParam2;
//C         CHAR szName[64];
//C       } MIXERCONTROLDETAILS_LISTTEXTA,*PMIXERCONTROLDETAILS_LISTTEXTA,*LPMIXERCONTROLDETAILS_LISTTEXTA;
struct tagMIXERCONTROLDETAILS_LISTTEXTA
{
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR [64]szName;
}
alias tagMIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXTA;
alias tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA;
alias tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;
//C       typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
//C         DWORD dwParam1;
//C         DWORD dwParam2;
//C         WCHAR szName[64];
//C       } MIXERCONTROLDETAILS_LISTTEXTW,*PMIXERCONTROLDETAILS_LISTTEXTW,*LPMIXERCONTROLDETAILS_LISTTEXTW;
struct tagMIXERCONTROLDETAILS_LISTTEXTW
{
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR [64]szName;
}
alias tagMIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXTW;
alias tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW;
alias tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW;
//C       typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
alias MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
//C       typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
alias PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
//C       typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
alias LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
//C       typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
//C         LONG fValue;
//C       } MIXERCONTROLDETAILS_BOOLEAN,*PMIXERCONTROLDETAILS_BOOLEAN,*LPMIXERCONTROLDETAILS_BOOLEAN;
struct tMIXERCONTROLDETAILS_BOOLEAN
{
    LONG fValue;
}
alias tMIXERCONTROLDETAILS_BOOLEAN MIXERCONTROLDETAILS_BOOLEAN;
alias tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;
alias tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
//C       typedef struct tMIXERCONTROLDETAILS_SIGNED {
//C         LONG lValue;
//C       } MIXERCONTROLDETAILS_SIGNED,*PMIXERCONTROLDETAILS_SIGNED,*LPMIXERCONTROLDETAILS_SIGNED;
struct tMIXERCONTROLDETAILS_SIGNED
{
    LONG lValue;
}
alias tMIXERCONTROLDETAILS_SIGNED MIXERCONTROLDETAILS_SIGNED;
alias tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;
alias tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;
//C       typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
//C         DWORD dwValue;
//C       } MIXERCONTROLDETAILS_UNSIGNED,*PMIXERCONTROLDETAILS_UNSIGNED,*LPMIXERCONTROLDETAILS_UNSIGNED;
struct tMIXERCONTROLDETAILS_UNSIGNED
{
    DWORD dwValue;
}
alias tMIXERCONTROLDETAILS_UNSIGNED MIXERCONTROLDETAILS_UNSIGNED;
alias tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;
alias tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;
//C        MMRESULT mixerGetControlDetailsA(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
MMRESULT  mixerGetControlDetailsA(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
//C        MMRESULT mixerGetControlDetailsW(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
MMRESULT  mixerGetControlDetailsW(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
//C        MMRESULT mixerSetControlDetails(HMIXEROBJ hmxobj,LPMIXERCONTROLDETAILS pmxcd,DWORD fdwDetails);
MMRESULT  mixerSetControlDetails(HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
//C       typedef void ( TIMECALLBACK)(UINT uTimerID,UINT uMsg,DWORD_PTR dwUser,DWORD_PTR dw1,DWORD_PTR dw2);
alias void function(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)TIMECALLBACK;
//C       typedef TIMECALLBACK *LPTIMECALLBACK;
alias void  function(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2)LPTIMECALLBACK;
//C       typedef struct timecaps_tag {
//C         UINT wPeriodMin;
//C         UINT wPeriodMax;
//C       } TIMECAPS,*PTIMECAPS,*NPTIMECAPS,*LPTIMECAPS;
struct timecaps_tag
{
    UINT wPeriodMin;
    UINT wPeriodMax;
}
alias timecaps_tag TIMECAPS;
alias timecaps_tag *PTIMECAPS;
alias timecaps_tag *NPTIMECAPS;
alias timecaps_tag *LPTIMECAPS;
//C        MMRESULT timeGetSystemTime(LPMMTIME pmmt,UINT cbmmt);
MMRESULT  timeGetSystemTime(LPMMTIME pmmt, UINT cbmmt);
//C        DWORD timeGetTime(void);
DWORD  timeGetTime();
//C        MMRESULT timeSetEvent(UINT uDelay,UINT uResolution,LPTIMECALLBACK fptc,DWORD_PTR dwUser,UINT fuEvent);
MMRESULT  timeSetEvent(UINT uDelay, UINT uResolution, LPTIMECALLBACK fptc, DWORD_PTR dwUser, UINT fuEvent);
//C        MMRESULT timeKillEvent(UINT uTimerID);
MMRESULT  timeKillEvent(UINT uTimerID);
//C        MMRESULT timeGetDevCaps(LPTIMECAPS ptc,UINT cbtc);
MMRESULT  timeGetDevCaps(LPTIMECAPS ptc, UINT cbtc);
//C        MMRESULT timeBeginPeriod(UINT uPeriod);
MMRESULT  timeBeginPeriod(UINT uPeriod);
//C        MMRESULT timeEndPeriod(UINT uPeriod);
MMRESULT  timeEndPeriod(UINT uPeriod);
//C       typedef struct tagJOYCAPSA {
//C         WORD wMid;
//C         WORD wPid;
//C         CHAR szPname[32];
//C         UINT wXmin;
//C         UINT wXmax;
//C         UINT wYmin;
//C         UINT wYmax;
//C         UINT wZmin;
//C         UINT wZmax;
//C         UINT wNumButtons;
//C         UINT wPeriodMin;
//C         UINT wPeriodMax;
//C         UINT wRmin;
//C         UINT wRmax;
//C         UINT wUmin;
//C         UINT wUmax;
//C         UINT wVmin;
//C         UINT wVmax;
//C         UINT wCaps;
//C         UINT wMaxAxes;
//C         UINT wNumAxes;
//C         UINT wMaxButtons;
//C         CHAR szRegKey[32];
//C         CHAR szOEMVxD[260];
//C       } JOYCAPSA,*PJOYCAPSA,*NPJOYCAPSA,*LPJOYCAPSA;
struct tagJOYCAPSA
{
    WORD wMid;
    WORD wPid;
    CHAR [32]szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR [32]szRegKey;
    CHAR [260]szOEMVxD;
}
alias tagJOYCAPSA JOYCAPSA;
alias tagJOYCAPSA *PJOYCAPSA;
alias tagJOYCAPSA *NPJOYCAPSA;
alias tagJOYCAPSA *LPJOYCAPSA;
//C       typedef struct tagJOYCAPSW {
//C         WORD wMid;
//C         WORD wPid;
//C         WCHAR szPname[32];
//C         UINT wXmin;
//C         UINT wXmax;
//C         UINT wYmin;
//C         UINT wYmax;
//C         UINT wZmin;
//C         UINT wZmax;
//C         UINT wNumButtons;
//C         UINT wPeriodMin;
//C         UINT wPeriodMax;
//C         UINT wRmin;
//C         UINT wRmax;
//C         UINT wUmin;
//C         UINT wUmax;
//C         UINT wVmin;
//C         UINT wVmax;
//C         UINT wCaps;
//C         UINT wMaxAxes;
//C         UINT wNumAxes;
//C         UINT wMaxButtons;
//C         WCHAR szRegKey[32];
//C         WCHAR szOEMVxD[260];
//C       } JOYCAPSW,*PJOYCAPSW,*NPJOYCAPSW,*LPJOYCAPSW;
struct tagJOYCAPSW
{
    WORD wMid;
    WORD wPid;
    WCHAR [32]szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR [32]szRegKey;
    WCHAR [260]szOEMVxD;
}
alias tagJOYCAPSW JOYCAPSW;
alias tagJOYCAPSW *PJOYCAPSW;
alias tagJOYCAPSW *NPJOYCAPSW;
alias tagJOYCAPSW *LPJOYCAPSW;
//C       typedef JOYCAPSA JOYCAPS;
alias JOYCAPSA JOYCAPS;
//C       typedef PJOYCAPSA PJOYCAPS;
alias PJOYCAPSA PJOYCAPS;
//C       typedef NPJOYCAPSA NPJOYCAPS;
alias NPJOYCAPSA NPJOYCAPS;
//C       typedef LPJOYCAPSA LPJOYCAPS;
alias LPJOYCAPSA LPJOYCAPS;
//C       typedef struct tagJOYCAPS2A {
//C         WORD wMid;
//C         WORD wPid;
//C         CHAR szPname[32];
//C         UINT wXmin;
//C         UINT wXmax;
//C         UINT wYmin;
//C         UINT wYmax;
//C         UINT wZmin;
//C         UINT wZmax;
//C         UINT wNumButtons;
//C         UINT wPeriodMin;
//C         UINT wPeriodMax;
//C         UINT wRmin;
//C         UINT wRmax;
//C         UINT wUmin;
//C         UINT wUmax;
//C         UINT wVmin;
//C         UINT wVmax;
//C         UINT wCaps;
//C         UINT wMaxAxes;
//C         UINT wNumAxes;
//C         UINT wMaxButtons;
//C         CHAR szRegKey[32];
//C         CHAR szOEMVxD[260];
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } JOYCAPS2A,*PJOYCAPS2A,*NPJOYCAPS2A,*LPJOYCAPS2A;
struct tagJOYCAPS2A
{
    WORD wMid;
    WORD wPid;
    CHAR [32]szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR [32]szRegKey;
    CHAR [260]szOEMVxD;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagJOYCAPS2A JOYCAPS2A;
alias tagJOYCAPS2A *PJOYCAPS2A;
alias tagJOYCAPS2A *NPJOYCAPS2A;
alias tagJOYCAPS2A *LPJOYCAPS2A;
//C       typedef struct tagJOYCAPS2W {
//C         WORD wMid;
//C         WORD wPid;
//C         WCHAR szPname[32];
//C         UINT wXmin;
//C         UINT wXmax;
//C         UINT wYmin;
//C         UINT wYmax;
//C         UINT wZmin;
//C         UINT wZmax;
//C         UINT wNumButtons;
//C         UINT wPeriodMin;
//C         UINT wPeriodMax;
//C         UINT wRmin;
//C         UINT wRmax;
//C         UINT wUmin;
//C         UINT wUmax;
//C         UINT wVmin;
//C         UINT wVmax;
//C         UINT wCaps;
//C         UINT wMaxAxes;
//C         UINT wNumAxes;
//C         UINT wMaxButtons;
//C         WCHAR szRegKey[32];
//C         WCHAR szOEMVxD[260];
//C         GUID ManufacturerGuid;
//C         GUID ProductGuid;
//C         GUID NameGuid;
//C       } JOYCAPS2W,*PJOYCAPS2W,*NPJOYCAPS2W,*LPJOYCAPS2W;
struct tagJOYCAPS2W
{
    WORD wMid;
    WORD wPid;
    WCHAR [32]szPname;
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR [32]szRegKey;
    WCHAR [260]szOEMVxD;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
}
alias tagJOYCAPS2W JOYCAPS2W;
alias tagJOYCAPS2W *PJOYCAPS2W;
alias tagJOYCAPS2W *NPJOYCAPS2W;
alias tagJOYCAPS2W *LPJOYCAPS2W;
//C       typedef JOYCAPS2A JOYCAPS2;
alias JOYCAPS2A JOYCAPS2;
//C       typedef PJOYCAPS2A PJOYCAPS2;
alias PJOYCAPS2A PJOYCAPS2;
//C       typedef NPJOYCAPS2A NPJOYCAPS2;
alias NPJOYCAPS2A NPJOYCAPS2;
//C       typedef LPJOYCAPS2A LPJOYCAPS2;
alias LPJOYCAPS2A LPJOYCAPS2;
//C       typedef struct joyinfo_tag {
//C         UINT wXpos;
//C         UINT wYpos;
//C         UINT wZpos;
//C         UINT wButtons;
//C       } JOYINFO,*PJOYINFO,*NPJOYINFO,*LPJOYINFO;
struct joyinfo_tag
{
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
}
alias joyinfo_tag JOYINFO;
alias joyinfo_tag *PJOYINFO;
alias joyinfo_tag *NPJOYINFO;
alias joyinfo_tag *LPJOYINFO;
//C       typedef struct joyinfoex_tag {
//C         DWORD dwSize;
//C         DWORD dwFlags;
//C         DWORD dwXpos;
//C         DWORD dwYpos;
//C         DWORD dwZpos;
//C         DWORD dwRpos;
//C         DWORD dwUpos;
//C         DWORD dwVpos;
//C         DWORD dwButtons;
//C         DWORD dwButtonNumber;
//C         DWORD dwPOV;
//C         DWORD dwReserved1;
//C         DWORD dwReserved2;
//C       } JOYINFOEX,*PJOYINFOEX,*NPJOYINFOEX,*LPJOYINFOEX;
struct joyinfoex_tag
{
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
}
alias joyinfoex_tag JOYINFOEX;
alias joyinfoex_tag *PJOYINFOEX;
alias joyinfoex_tag *NPJOYINFOEX;
alias joyinfoex_tag *LPJOYINFOEX;
//C        UINT joyGetNumDevs(void);
UINT  joyGetNumDevs();
//C        MMRESULT joyGetDevCapsA(UINT_PTR uJoyID,LPJOYCAPSA pjc,UINT cbjc);
MMRESULT  joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc);
//C        MMRESULT joyGetDevCapsW(UINT_PTR uJoyID,LPJOYCAPSW pjc,UINT cbjc);
MMRESULT  joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc);
//C        MMRESULT joyGetPos(UINT uJoyID,LPJOYINFO pji);
MMRESULT  joyGetPos(UINT uJoyID, LPJOYINFO pji);
//C        MMRESULT joyGetPosEx(UINT uJoyID,LPJOYINFOEX pji);
MMRESULT  joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji);
//C        MMRESULT joyGetThreshold(UINT uJoyID,LPUINT puThreshold);
MMRESULT  joyGetThreshold(UINT uJoyID, LPUINT puThreshold);
//C        MMRESULT joyReleaseCapture(UINT uJoyID);
MMRESULT  joyReleaseCapture(UINT uJoyID);
//C        MMRESULT joySetCapture(HWND hwnd,UINT uJoyID,UINT uPeriod,WINBOOL fChanged);
MMRESULT  joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, WINBOOL fChanged);
//C        MMRESULT joySetThreshold(UINT uJoyID,UINT uThreshold);
MMRESULT  joySetThreshold(UINT uJoyID, UINT uThreshold);
//C       typedef DWORD FOURCC;
alias DWORD FOURCC;
//C       typedef char *HPSTR;
alias char *HPSTR;
//C       struct HMMIO__ { int unused; }; typedef struct HMMIO__ *HMMIO;
struct HMMIO__
{
    int unused;
}
alias HMMIO__ *HMMIO;
//C       typedef LRESULT ( MMIOPROC)(LPSTR lpmmioinfo,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
alias LRESULT function(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2)MMIOPROC;
//C       typedef MMIOPROC *LPMMIOPROC;
alias LRESULT  function(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2)LPMMIOPROC;
//C       typedef struct _MMIOINFO {
//C         DWORD dwFlags;
//C         FOURCC fccIOProc;
//C         LPMMIOPROC pIOProc;
//C         UINT wErrorRet;
//C         HTASK htask;
//C         LONG cchBuffer;
//C         HPSTR pchBuffer;
//C         HPSTR pchNext;
//C         HPSTR pchEndRead;
//C         HPSTR pchEndWrite;
//C         LONG lBufOffset;
//C         LONG lDiskOffset;
//C         DWORD adwInfo[3];
//C         DWORD dwReserved1;
//C         DWORD dwReserved2;
//C         HMMIO hmmio;
//C       } MMIOINFO,*PMMIOINFO,*NPMMIOINFO,*LPMMIOINFO;
struct _MMIOINFO
{
    DWORD dwFlags;
    FOURCC fccIOProc;
    LPMMIOPROC pIOProc;
    UINT wErrorRet;
    HTASK htask;
    LONG cchBuffer;
    HPSTR pchBuffer;
    HPSTR pchNext;
    HPSTR pchEndRead;
    HPSTR pchEndWrite;
    LONG lBufOffset;
    LONG lDiskOffset;
    DWORD [3]adwInfo;
    DWORD dwReserved1;
    DWORD dwReserved2;
    HMMIO hmmio;
}
alias _MMIOINFO MMIOINFO;
alias _MMIOINFO *PMMIOINFO;
alias _MMIOINFO *NPMMIOINFO;
alias _MMIOINFO *LPMMIOINFO;
//C       typedef const MMIOINFO *LPCMMIOINFO;
alias MMIOINFO *LPCMMIOINFO;
//C       typedef struct _MMCKINFO {
//C         FOURCC ckid;
//C         DWORD cksize;
//C         FOURCC fccType;
//C         DWORD dwDataOffset;
//C         DWORD dwFlags;
//C       } MMCKINFO,*PMMCKINFO,*NPMMCKINFO,*LPMMCKINFO;
struct _MMCKINFO
{
    FOURCC ckid;
    DWORD cksize;
    FOURCC fccType;
    DWORD dwDataOffset;
    DWORD dwFlags;
}
alias _MMCKINFO MMCKINFO;
alias _MMCKINFO *PMMCKINFO;
alias _MMCKINFO *NPMMCKINFO;
alias _MMCKINFO *LPMMCKINFO;
//C       typedef const MMCKINFO *LPCMMCKINFO;
alias MMCKINFO *LPCMMCKINFO;
//C        FOURCC mmioStringToFOURCCA(LPCSTR sz,UINT uFlags);
FOURCC  mmioStringToFOURCCA(LPCSTR sz, UINT uFlags);
//C        FOURCC mmioStringToFOURCCW(LPCWSTR sz,UINT uFlags);
FOURCC  mmioStringToFOURCCW(LPCWSTR sz, UINT uFlags);
//C        LPMMIOPROC mmioInstallIOProcA(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags);
LPMMIOPROC  mmioInstallIOProcA(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
//C        LPMMIOPROC mmioInstallIOProcW(FOURCC fccIOProc,LPMMIOPROC pIOProc,DWORD dwFlags);
LPMMIOPROC  mmioInstallIOProcW(FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags);
//C        HMMIO mmioOpenA(LPSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen);
HMMIO  mmioOpenA(LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
//C        HMMIO mmioOpenW(LPWSTR pszFileName,LPMMIOINFO pmmioinfo,DWORD fdwOpen);
HMMIO  mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen);
//C        MMRESULT mmioRenameA(LPCSTR pszFileName,LPCSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename);
MMRESULT  mmioRenameA(LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
//C        MMRESULT mmioRenameW(LPCWSTR pszFileName,LPCWSTR pszNewFileName,LPCMMIOINFO pmmioinfo,DWORD fdwRename);
MMRESULT  mmioRenameW(LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename);
//C        MMRESULT mmioClose(HMMIO hmmio,UINT fuClose);
MMRESULT  mmioClose(HMMIO hmmio, UINT fuClose);
//C        LONG mmioRead(HMMIO hmmio,HPSTR pch,LONG cch);
LONG  mmioRead(HMMIO hmmio, HPSTR pch, LONG cch);
//C        LONG mmioWrite(HMMIO hmmio,const char *pch,LONG cch);
LONG  mmioWrite(HMMIO hmmio, char *pch, LONG cch);
//C        LONG mmioSeek(HMMIO hmmio,LONG lOffset,int iOrigin);
LONG  mmioSeek(HMMIO hmmio, LONG lOffset, int iOrigin);
//C        MMRESULT mmioGetInfo(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuInfo);
MMRESULT  mmioGetInfo(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo);
//C        MMRESULT mmioSetInfo(HMMIO hmmio,LPCMMIOINFO pmmioinfo,UINT fuInfo);
MMRESULT  mmioSetInfo(HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo);
//C        MMRESULT mmioSetBuffer(HMMIO hmmio,LPSTR pchBuffer,LONG cchBuffer,UINT fuBuffer);
MMRESULT  mmioSetBuffer(HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer);
//C        MMRESULT mmioFlush(HMMIO hmmio,UINT fuFlush);
MMRESULT  mmioFlush(HMMIO hmmio, UINT fuFlush);
//C        MMRESULT mmioAdvance(HMMIO hmmio,LPMMIOINFO pmmioinfo,UINT fuAdvance);
MMRESULT  mmioAdvance(HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance);
//C        LRESULT mmioSendMessage(HMMIO hmmio,UINT uMsg,LPARAM lParam1,LPARAM lParam2);
LRESULT  mmioSendMessage(HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
//C        MMRESULT mmioDescend(HMMIO hmmio,LPMMCKINFO pmmcki,const MMCKINFO *pmmckiParent,UINT fuDescend);
MMRESULT  mmioDescend(HMMIO hmmio, LPMMCKINFO pmmcki, MMCKINFO *pmmckiParent, UINT fuDescend);
//C        MMRESULT mmioAscend(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuAscend);
MMRESULT  mmioAscend(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend);
//C        MMRESULT mmioCreateChunk(HMMIO hmmio,LPMMCKINFO pmmcki,UINT fuCreate);
MMRESULT  mmioCreateChunk(HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate);
//C       typedef DWORD MCIERROR;
alias DWORD MCIERROR;
//C       typedef UINT MCIDEVICEID;
alias UINT MCIDEVICEID;
//C       typedef UINT ( *YIELDPROC)(MCIDEVICEID mciId,DWORD dwYieldData);
alias UINT  function(MCIDEVICEID mciId, DWORD dwYieldData)YIELDPROC;
//C        MCIERROR mciSendCommandA(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);
MCIERROR  mciSendCommandA(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
//C        MCIERROR mciSendCommandW(MCIDEVICEID mciId,UINT uMsg,DWORD_PTR dwParam1,DWORD_PTR dwParam2);
MCIERROR  mciSendCommandW(MCIDEVICEID mciId, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
//C        MCIERROR mciSendStringA(LPCSTR lpstrCommand,LPSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback);
MCIERROR  mciSendStringA(LPCSTR lpstrCommand, LPSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
//C        MCIERROR mciSendStringW(LPCWSTR lpstrCommand,LPWSTR lpstrReturnString,UINT uReturnLength,HWND hwndCallback);
MCIERROR  mciSendStringW(LPCWSTR lpstrCommand, LPWSTR lpstrReturnString, UINT uReturnLength, HWND hwndCallback);
//C        MCIDEVICEID mciGetDeviceIDA(LPCSTR pszDevice);
MCIDEVICEID  mciGetDeviceIDA(LPCSTR pszDevice);
//C        MCIDEVICEID mciGetDeviceIDW(LPCWSTR pszDevice);
MCIDEVICEID  mciGetDeviceIDW(LPCWSTR pszDevice);
//C        MCIDEVICEID mciGetDeviceIDFromElementIDA(DWORD dwElementID,LPCSTR lpstrType);
MCIDEVICEID  mciGetDeviceIDFromElementIDA(DWORD dwElementID, LPCSTR lpstrType);
//C        MCIDEVICEID mciGetDeviceIDFromElementIDW(DWORD dwElementID,LPCWSTR lpstrType);
MCIDEVICEID  mciGetDeviceIDFromElementIDW(DWORD dwElementID, LPCWSTR lpstrType);
//C        WINBOOL mciGetErrorStringA(MCIERROR mcierr,LPSTR pszText,UINT cchText);
WINBOOL  mciGetErrorStringA(MCIERROR mcierr, LPSTR pszText, UINT cchText);
//C        WINBOOL mciGetErrorStringW(MCIERROR mcierr,LPWSTR pszText,UINT cchText);
WINBOOL  mciGetErrorStringW(MCIERROR mcierr, LPWSTR pszText, UINT cchText);
//C        WINBOOL mciSetYieldProc(MCIDEVICEID mciId,YIELDPROC fpYieldProc,DWORD dwYieldData);
WINBOOL  mciSetYieldProc(MCIDEVICEID mciId, YIELDPROC fpYieldProc, DWORD dwYieldData);
//C        HTASK mciGetCreatorTask(MCIDEVICEID mciId);
HTASK  mciGetCreatorTask(MCIDEVICEID mciId);
//C        YIELDPROC mciGetYieldProc(MCIDEVICEID mciId,LPDWORD pdwYieldData);
YIELDPROC  mciGetYieldProc(MCIDEVICEID mciId, LPDWORD pdwYieldData);
//C       typedef struct tagMCI_GENERIC_PARMS {
//C         DWORD_PTR dwCallback;
//C       } MCI_GENERIC_PARMS,*PMCI_GENERIC_PARMS,*LPMCI_GENERIC_PARMS;
struct tagMCI_GENERIC_PARMS
{
    DWORD_PTR dwCallback;
}
alias tagMCI_GENERIC_PARMS MCI_GENERIC_PARMS;
alias tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;
alias tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;
//C       typedef struct tagMCI_OPEN_PARMSA {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCSTR lpstrDeviceType;
//C         LPCSTR lpstrElementName;
//C         LPCSTR lpstrAlias;
//C       } MCI_OPEN_PARMSA,*PMCI_OPEN_PARMSA,*LPMCI_OPEN_PARMSA;
struct tagMCI_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
}
alias tagMCI_OPEN_PARMSA MCI_OPEN_PARMSA;
alias tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA;
alias tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA;
//C       typedef struct tagMCI_OPEN_PARMSW {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCWSTR lpstrDeviceType;
//C         LPCWSTR lpstrElementName;
//C         LPCWSTR lpstrAlias;
//C       } MCI_OPEN_PARMSW,*PMCI_OPEN_PARMSW,*LPMCI_OPEN_PARMSW;
struct tagMCI_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
}
alias tagMCI_OPEN_PARMSW MCI_OPEN_PARMSW;
alias tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW;
alias tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW;
//C       typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
alias MCI_OPEN_PARMSA MCI_OPEN_PARMS;
//C       typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
alias PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
//C       typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
alias LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
//C       typedef struct tagMCI_PLAY_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrom;
//C         DWORD dwTo;
//C       } MCI_PLAY_PARMS,*PMCI_PLAY_PARMS,*LPMCI_PLAY_PARMS;
struct tagMCI_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
}
alias tagMCI_PLAY_PARMS MCI_PLAY_PARMS;
alias tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;
alias tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;
//C       typedef struct tagMCI_SEEK_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwTo;
//C       } MCI_SEEK_PARMS,*PMCI_SEEK_PARMS,*LPMCI_SEEK_PARMS;
struct tagMCI_SEEK_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTo;
}
alias tagMCI_SEEK_PARMS MCI_SEEK_PARMS;
alias tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;
alias tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;
//C       typedef struct tagMCI_STATUS_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD_PTR dwReturn;
//C         DWORD dwItem;
//C         DWORD dwTrack;
//C       } MCI_STATUS_PARMS,*PMCI_STATUS_PARMS,*LPMCI_STATUS_PARMS;
struct tagMCI_STATUS_PARMS
{
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
}
alias tagMCI_STATUS_PARMS MCI_STATUS_PARMS;
alias tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;
alias tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;
//C       typedef struct tagMCI_INFO_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPSTR lpstrReturn;
//C         DWORD dwRetSize;
//C       } MCI_INFO_PARMSA,*LPMCI_INFO_PARMSA;
struct tagMCI_INFO_PARMSA
{
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
}
alias tagMCI_INFO_PARMSA MCI_INFO_PARMSA;
alias tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA;
//C       typedef struct tagMCI_INFO_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPWSTR lpstrReturn;
//C         DWORD dwRetSize;
//C       } MCI_INFO_PARMSW,*LPMCI_INFO_PARMSW;
struct tagMCI_INFO_PARMSW
{
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
}
alias tagMCI_INFO_PARMSW MCI_INFO_PARMSW;
alias tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW;
//C       typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
alias MCI_INFO_PARMSA MCI_INFO_PARMS;
//C       typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
alias LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
//C       typedef struct tagMCI_GETDEVCAPS_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwReturn;
//C         DWORD dwItem;
//C       } MCI_GETDEVCAPS_PARMS,*PMCI_GETDEVCAPS_PARMS,*LPMCI_GETDEVCAPS_PARMS;
struct tagMCI_GETDEVCAPS_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
}
alias tagMCI_GETDEVCAPS_PARMS MCI_GETDEVCAPS_PARMS;
alias tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;
alias tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;
//C       typedef struct tagMCI_SYSINFO_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPSTR lpstrReturn;
//C         DWORD dwRetSize;
//C         DWORD dwNumber;
//C         UINT wDeviceType;
//C       } MCI_SYSINFO_PARMSA,*PMCI_SYSINFO_PARMSA,*LPMCI_SYSINFO_PARMSA;
struct tagMCI_SYSINFO_PARMSA
{
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
}
alias tagMCI_SYSINFO_PARMSA MCI_SYSINFO_PARMSA;
alias tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA;
alias tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA;
//C       typedef struct tagMCI_SYSINFO_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPWSTR lpstrReturn;
//C         DWORD dwRetSize;
//C         DWORD dwNumber;
//C         UINT wDeviceType;
//C       } MCI_SYSINFO_PARMSW,*PMCI_SYSINFO_PARMSW,*LPMCI_SYSINFO_PARMSW;
struct tagMCI_SYSINFO_PARMSW
{
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
}
alias tagMCI_SYSINFO_PARMSW MCI_SYSINFO_PARMSW;
alias tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW;
alias tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW;
//C       typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
alias MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
//C       typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
alias PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
//C       typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
alias LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
//C       typedef struct tagMCI_SET_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwTimeFormat;
//C         DWORD dwAudio;
//C       } MCI_SET_PARMS,*PMCI_SET_PARMS,*LPMCI_SET_PARMS;
struct tagMCI_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
}
alias tagMCI_SET_PARMS MCI_SET_PARMS;
alias tagMCI_SET_PARMS *PMCI_SET_PARMS;
alias tagMCI_SET_PARMS *LPMCI_SET_PARMS;
//C       typedef struct tagMCI_BREAK_PARMS {
//C         DWORD_PTR dwCallback;
//C         int nVirtKey;
//C         HWND hwndBreak;
//C       } MCI_BREAK_PARMS,*PMCI_BREAK_PARMS,*LPMCI_BREAK_PARMS;
struct tagMCI_BREAK_PARMS
{
    DWORD_PTR dwCallback;
    int nVirtKey;
    HWND hwndBreak;
}
alias tagMCI_BREAK_PARMS MCI_BREAK_PARMS;
alias tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;
alias tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;
//C       typedef struct tagMCI_SAVE_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPCSTR lpfilename;
//C       } MCI_SAVE_PARMSA,*PMCI_SAVE_PARMSA,*LPMCI_SAVE_PARMSA;
struct tagMCI_SAVE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
}
alias tagMCI_SAVE_PARMSA MCI_SAVE_PARMSA;
alias tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA;
alias tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA;
//C       typedef struct tagMCI_SAVE_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPCWSTR lpfilename;
//C       } MCI_SAVE_PARMSW,*PMCI_SAVE_PARMSW,*LPMCI_SAVE_PARMSW;
struct tagMCI_SAVE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
}
alias tagMCI_SAVE_PARMSW MCI_SAVE_PARMSW;
alias tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW;
alias tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW;
//C       typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
alias MCI_SAVE_PARMSA MCI_SAVE_PARMS;
//C       typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
alias PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
//C       typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
alias LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
//C       typedef struct tagMCI_LOAD_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPCSTR lpfilename;
//C       } MCI_LOAD_PARMSA,*PMCI_LOAD_PARMSA,*LPMCI_LOAD_PARMSA;
struct tagMCI_LOAD_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
}
alias tagMCI_LOAD_PARMSA MCI_LOAD_PARMSA;
alias tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA;
alias tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA;
//C       typedef struct tagMCI_LOAD_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPCWSTR lpfilename;
//C       } MCI_LOAD_PARMSW,*PMCI_LOAD_PARMSW,*LPMCI_LOAD_PARMSW;
struct tagMCI_LOAD_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
}
alias tagMCI_LOAD_PARMSW MCI_LOAD_PARMSW;
alias tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW;
alias tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW;
//C       typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
alias MCI_LOAD_PARMSA MCI_LOAD_PARMS;
//C       typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
alias PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
//C       typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
alias LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
//C       typedef struct tagMCI_RECORD_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrom;
//C         DWORD dwTo;
//C       } MCI_RECORD_PARMS,*LPMCI_RECORD_PARMS;
struct tagMCI_RECORD_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
}
alias tagMCI_RECORD_PARMS MCI_RECORD_PARMS;
alias tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;
//C       typedef struct tagMCI_VD_PLAY_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrom;
//C         DWORD dwTo;
//C         DWORD dwSpeed;
//C       } MCI_VD_PLAY_PARMS,*PMCI_VD_PLAY_PARMS,*LPMCI_VD_PLAY_PARMS;
struct tagMCI_VD_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
}
alias tagMCI_VD_PLAY_PARMS MCI_VD_PLAY_PARMS;
alias tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;
alias tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;
//C       typedef struct tagMCI_VD_STEP_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrames;
//C       } MCI_VD_STEP_PARMS,*PMCI_VD_STEP_PARMS,*LPMCI_VD_STEP_PARMS;
struct tagMCI_VD_STEP_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrames;
}
alias tagMCI_VD_STEP_PARMS MCI_VD_STEP_PARMS;
alias tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;
alias tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;
//C       typedef struct tagMCI_VD_ESCAPE_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPCSTR lpstrCommand;
//C       } MCI_VD_ESCAPE_PARMSA,*PMCI_VD_ESCAPE_PARMSA,*LPMCI_VD_ESCAPE_PARMSA;
struct tagMCI_VD_ESCAPE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
}
alias tagMCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMSA;
alias tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA;
alias tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA;
//C       typedef struct tagMCI_VD_ESCAPE_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPCWSTR lpstrCommand;
//C       } MCI_VD_ESCAPE_PARMSW,*PMCI_VD_ESCAPE_PARMSW,*LPMCI_VD_ESCAPE_PARMSW;
struct tagMCI_VD_ESCAPE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
}
alias tagMCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMSW;
alias tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW;
alias tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW;
//C       typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
alias MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
//C       typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
alias PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
//C       typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
alias LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
//C       typedef struct tagMCI_WAVE_OPEN_PARMSA {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCSTR lpstrDeviceType;
//C         LPCSTR lpstrElementName;
//C         LPCSTR lpstrAlias;
//C         DWORD dwBufferSeconds;
//C       } MCI_WAVE_OPEN_PARMSA,*PMCI_WAVE_OPEN_PARMSA,*LPMCI_WAVE_OPEN_PARMSA;
struct tagMCI_WAVE_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
}
alias tagMCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMSA;
alias tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA;
alias tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA;
//C       typedef struct tagMCI_WAVE_OPEN_PARMSW {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCWSTR lpstrDeviceType;
//C         LPCWSTR lpstrElementName;
//C         LPCWSTR lpstrAlias;
//C         DWORD dwBufferSeconds;
//C       } MCI_WAVE_OPEN_PARMSW,*PMCI_WAVE_OPEN_PARMSW,*LPMCI_WAVE_OPEN_PARMSW;
struct tagMCI_WAVE_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
}
alias tagMCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMSW;
alias tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW;
alias tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW;
//C       typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
alias MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
//C       typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
alias PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
//C       typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
alias LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
//C       typedef struct tagMCI_WAVE_DELETE_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrom;
//C         DWORD dwTo;
//C       } MCI_WAVE_DELETE_PARMS,*PMCI_WAVE_DELETE_PARMS,*LPMCI_WAVE_DELETE_PARMS;
struct tagMCI_WAVE_DELETE_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
}
alias tagMCI_WAVE_DELETE_PARMS MCI_WAVE_DELETE_PARMS;
alias tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;
alias tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;
//C       typedef struct tagMCI_WAVE_SET_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwTimeFormat;
//C         DWORD dwAudio;
//C         UINT wInput;
//C         UINT wOutput;
//C         WORD wFormatTag;
//C         WORD wReserved2;
//C         WORD nChannels;
//C         WORD wReserved3;
//C         DWORD nSamplesPerSec;
//C         DWORD nAvgBytesPerSec;
//C         WORD nBlockAlign;
//C         WORD wReserved4;
//C         WORD wBitsPerSample;
//C         WORD wReserved5;
//C       } MCI_WAVE_SET_PARMS,*PMCI_WAVE_SET_PARMS,*LPMCI_WAVE_SET_PARMS;
struct tagMCI_WAVE_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    UINT wInput;
    UINT wOutput;
    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
}
alias tagMCI_WAVE_SET_PARMS MCI_WAVE_SET_PARMS;
alias tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;
alias tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;
//C       typedef struct tagMCI_SEQ_SET_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwTimeFormat;
//C         DWORD dwAudio;
//C         DWORD dwTempo;
//C         DWORD dwPort;
//C         DWORD dwSlave;
//C         DWORD dwMaster;
//C         DWORD dwOffset;
//C       } MCI_SEQ_SET_PARMS,*PMCI_SEQ_SET_PARMS,*LPMCI_SEQ_SET_PARMS;
struct tagMCI_SEQ_SET_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
}
alias tagMCI_SEQ_SET_PARMS MCI_SEQ_SET_PARMS;
alias tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;
alias tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;
//C       typedef struct tagMCI_ANIM_OPEN_PARMSA {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCSTR lpstrDeviceType;
//C         LPCSTR lpstrElementName;
//C         LPCSTR lpstrAlias;
//C         DWORD dwStyle;
//C         HWND hWndParent;
//C       } MCI_ANIM_OPEN_PARMSA,*PMCI_ANIM_OPEN_PARMSA,*LPMCI_ANIM_OPEN_PARMSA;
struct tagMCI_ANIM_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}
alias tagMCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMSA;
alias tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA;
alias tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA;
//C       typedef struct tagMCI_ANIM_OPEN_PARMSW {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCWSTR lpstrDeviceType;
//C         LPCWSTR lpstrElementName;
//C         LPCWSTR lpstrAlias;
//C         DWORD dwStyle;
//C         HWND hWndParent;
//C       } MCI_ANIM_OPEN_PARMSW,*PMCI_ANIM_OPEN_PARMSW,*LPMCI_ANIM_OPEN_PARMSW;
struct tagMCI_ANIM_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}
alias tagMCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMSW;
alias tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW;
alias tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW;
//C       typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
alias MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
//C       typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
alias PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
//C       typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
alias LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
//C       typedef struct tagMCI_ANIM_PLAY_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrom;
//C         DWORD dwTo;
//C         DWORD dwSpeed;
//C       } MCI_ANIM_PLAY_PARMS,*PMCI_ANIM_PLAY_PARMS,*LPMCI_ANIM_PLAY_PARMS;
struct tagMCI_ANIM_PLAY_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
}
alias tagMCI_ANIM_PLAY_PARMS MCI_ANIM_PLAY_PARMS;
alias tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;
alias tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;
//C       typedef struct tagMCI_ANIM_STEP_PARMS {
//C         DWORD_PTR dwCallback;
//C         DWORD dwFrames;
//C       } MCI_ANIM_STEP_PARMS,*PMCI_ANIM_STEP_PARMS,*LPMCI_ANIM_STEP_PARMS;
struct tagMCI_ANIM_STEP_PARMS
{
    DWORD_PTR dwCallback;
    DWORD dwFrames;
}
alias tagMCI_ANIM_STEP_PARMS MCI_ANIM_STEP_PARMS;
alias tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;
alias tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;
//C       typedef struct tagMCI_ANIM_WINDOW_PARMSA {
//C         DWORD_PTR dwCallback;
//C         HWND hWnd;
//C         UINT nCmdShow;
//C         LPCSTR lpstrText;
//C       } MCI_ANIM_WINDOW_PARMSA,*PMCI_ANIM_WINDOW_PARMSA,*LPMCI_ANIM_WINDOW_PARMSA;
struct tagMCI_ANIM_WINDOW_PARMSA
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
}
alias tagMCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMSA;
alias tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA;
alias tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA;
//C       typedef struct tagMCI_ANIM_WINDOW_PARMSW {
//C         DWORD_PTR dwCallback;
//C         HWND hWnd;
//C         UINT nCmdShow;
//C         LPCWSTR lpstrText;
//C       } MCI_ANIM_WINDOW_PARMSW,*PMCI_ANIM_WINDOW_PARMSW,*LPMCI_ANIM_WINDOW_PARMSW;
struct tagMCI_ANIM_WINDOW_PARMSW
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
}
alias tagMCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMSW;
alias tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW;
alias tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW;
//C       typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
alias MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
//C       typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
alias PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
//C       typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
alias LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
//C       typedef struct tagMCI_ANIM_RECT_PARMS {
//C         DWORD_PTR dwCallback;
//C         RECT rc;
//C       } MCI_ANIM_RECT_PARMS;
struct tagMCI_ANIM_RECT_PARMS
{
    DWORD_PTR dwCallback;
    RECT rc;
}
alias tagMCI_ANIM_RECT_PARMS MCI_ANIM_RECT_PARMS;
//C       typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
alias MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
//C       typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;
alias MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;
//C       typedef struct tagMCI_ANIM_UPDATE_PARMS {
//C         DWORD_PTR dwCallback;
//C         RECT rc;
//C         HDC hDC;
//C       } MCI_ANIM_UPDATE_PARMS,*PMCI_ANIM_UPDATE_PARMS,*LPMCI_ANIM_UPDATE_PARMS;
struct tagMCI_ANIM_UPDATE_PARMS
{
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
}
alias tagMCI_ANIM_UPDATE_PARMS MCI_ANIM_UPDATE_PARMS;
alias tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;
alias tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;
//C       typedef struct tagMCI_OVLY_OPEN_PARMSA {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCSTR lpstrDeviceType;
//C         LPCSTR lpstrElementName;
//C         LPCSTR lpstrAlias;
//C         DWORD dwStyle;
//C         HWND hWndParent;
//C       } MCI_OVLY_OPEN_PARMSA,*PMCI_OVLY_OPEN_PARMSA,*LPMCI_OVLY_OPEN_PARMSA;
struct tagMCI_OVLY_OPEN_PARMSA
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}
alias tagMCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMSA;
alias tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA;
alias tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA;
//C       typedef struct tagMCI_OVLY_OPEN_PARMSW {
//C         DWORD_PTR dwCallback;
//C         MCIDEVICEID wDeviceID;
//C         LPCWSTR lpstrDeviceType;
//C         LPCWSTR lpstrElementName;
//C         LPCWSTR lpstrAlias;
//C         DWORD dwStyle;
//C         HWND hWndParent;
//C       } MCI_OVLY_OPEN_PARMSW,*PMCI_OVLY_OPEN_PARMSW,*LPMCI_OVLY_OPEN_PARMSW;
struct tagMCI_OVLY_OPEN_PARMSW
{
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
}
alias tagMCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMSW;
alias tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW;
alias tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW;
//C       typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
alias MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
//C       typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
alias PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
//C       typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
alias LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
//C       typedef struct tagMCI_OVLY_WINDOW_PARMSA {
//C         DWORD_PTR dwCallback;
//C         HWND hWnd;
//C         UINT nCmdShow;
//C         LPCSTR lpstrText;
//C       } MCI_OVLY_WINDOW_PARMSA,*PMCI_OVLY_WINDOW_PARMSA,*LPMCI_OVLY_WINDOW_PARMSA;
struct tagMCI_OVLY_WINDOW_PARMSA
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
}
alias tagMCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMSA;
alias tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA;
alias tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA;
//C       typedef struct tagMCI_OVLY_WINDOW_PARMSW {
//C         DWORD_PTR dwCallback;
//C         HWND hWnd;
//C         UINT nCmdShow;
//C         LPCWSTR lpstrText;
//C       } MCI_OVLY_WINDOW_PARMSW,*PMCI_OVLY_WINDOW_PARMSW,*LPMCI_OVLY_WINDOW_PARMSW;
struct tagMCI_OVLY_WINDOW_PARMSW
{
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
}
alias tagMCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMSW;
alias tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW;
alias tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW;
//C       typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
alias MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
//C       typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
alias PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
//C       typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
alias LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
//C       typedef struct tagMCI_OVLY_RECT_PARMS {
//C         DWORD_PTR dwCallback;
//C         RECT rc;
//C       } MCI_OVLY_RECT_PARMS,*PMCI_OVLY_RECT_PARMS,*LPMCI_OVLY_RECT_PARMS;
struct tagMCI_OVLY_RECT_PARMS
{
    DWORD_PTR dwCallback;
    RECT rc;
}
alias tagMCI_OVLY_RECT_PARMS MCI_OVLY_RECT_PARMS;
alias tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;
alias tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;
//C       typedef struct tagMCI_OVLY_SAVE_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPCSTR lpfilename;
//C         RECT rc;
//C       } MCI_OVLY_SAVE_PARMSA,*PMCI_OVLY_SAVE_PARMSA,*LPMCI_OVLY_SAVE_PARMSA;
struct tagMCI_OVLY_SAVE_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
}
alias tagMCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMSA;
alias tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA;
alias tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA;
//C       typedef struct tagMCI_OVLY_SAVE_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPCWSTR lpfilename;
//C         RECT rc;
//C       } MCI_OVLY_SAVE_PARMSW,*PMCI_OVLY_SAVE_PARMSW,*LPMCI_OVLY_SAVE_PARMSW;
struct tagMCI_OVLY_SAVE_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
}
alias tagMCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMSW;
alias tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW;
alias tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW;
//C       typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
alias MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
//C       typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
alias PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
//C       typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
alias LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
//C       typedef struct tagMCI_OVLY_LOAD_PARMSA {
//C         DWORD_PTR dwCallback;
//C         LPCSTR lpfilename;
//C         RECT rc;
//C       } MCI_OVLY_LOAD_PARMSA,*PMCI_OVLY_LOAD_PARMSA,*LPMCI_OVLY_LOAD_PARMSA;
struct tagMCI_OVLY_LOAD_PARMSA
{
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
}
alias tagMCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMSA;
alias tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA;
alias tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA;
//C       typedef struct tagMCI_OVLY_LOAD_PARMSW {
//C         DWORD_PTR dwCallback;
//C         LPCWSTR lpfilename;
//C         RECT rc;
//C       } MCI_OVLY_LOAD_PARMSW,*PMCI_OVLY_LOAD_PARMSW,*LPMCI_OVLY_LOAD_PARMSW;
struct tagMCI_OVLY_LOAD_PARMSW
{
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
}
alias tagMCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMSW;
alias tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW;
alias tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW;
//C       typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
alias MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
//C       typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
alias PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
//C       typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
alias LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
//C       typedef struct _NCB {
//C         UCHAR ncb_command;
//C         UCHAR ncb_retcode;
//C         UCHAR ncb_lsn;
//C         UCHAR ncb_num;
//C         PUCHAR ncb_buffer;
//C         WORD ncb_length;
//C         UCHAR ncb_callname[16];
//C         UCHAR ncb_name[16];
//C         UCHAR ncb_rto;
//C         UCHAR ncb_sto;
//C         void ( *ncb_post)(struct _NCB *);
//C         UCHAR ncb_lana_num;
//C         UCHAR ncb_cmd_cplt;
//C         UCHAR ncb_reserve[18];
//C         HANDLE ncb_event;
//C       } NCB,*PNCB;
struct _NCB
{
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR [16]ncb_callname;
    UCHAR [16]ncb_name;
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void  function(_NCB *)ncb_post;
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;
    UCHAR [18]ncb_reserve;
    HANDLE ncb_event;
}
alias _NCB NCB;
alias _NCB *PNCB;
//C       typedef struct _ADAPTER_STATUS {
//C         UCHAR adapter_address[6];
//C         UCHAR rev_major;
//C         UCHAR reserved0;
//C         UCHAR adapter_type;
//C         UCHAR rev_minor;
//C         WORD duration;
//C         WORD frmr_recv;
//C         WORD frmr_xmit;
//C         WORD iframe_recv_err;
//C         WORD xmit_aborts;
//C         DWORD xmit_success;
//C         DWORD recv_success;
//C         WORD iframe_xmit_err;
//C         WORD recv_buff_unavail;
//C         WORD t1_timeouts;
//C         WORD ti_timeouts;
//C         DWORD reserved1;
//C         WORD free_ncbs;
//C         WORD max_cfg_ncbs;
//C         WORD max_ncbs;
//C         WORD xmit_buf_unavail;
//C         WORD max_dgram_size;
//C         WORD pending_sess;
//C         WORD max_cfg_sess;
//C         WORD max_sess;
//C         WORD max_sess_pkt_size;
//C         WORD name_count;
//C       } ADAPTER_STATUS,*PADAPTER_STATUS;
struct _ADAPTER_STATUS
{
    UCHAR [6]adapter_address;
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;
    WORD iframe_recv_err;
    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;
    WORD iframe_xmit_err;
    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
}
alias _ADAPTER_STATUS ADAPTER_STATUS;
alias _ADAPTER_STATUS *PADAPTER_STATUS;
//C       typedef struct _NAME_BUFFER {
//C         UCHAR name[16];
//C         UCHAR name_num;
//C         UCHAR name_flags;
//C       } NAME_BUFFER,*PNAME_BUFFER;
struct _NAME_BUFFER
{
    UCHAR [16]name;
    UCHAR name_num;
    UCHAR name_flags;
}
alias _NAME_BUFFER NAME_BUFFER;
alias _NAME_BUFFER *PNAME_BUFFER;
//C       typedef struct _SESSION_HEADER {
//C         UCHAR sess_name;
//C         UCHAR num_sess;
//C         UCHAR rcv_dg_outstanding;
//C         UCHAR rcv_any_outstanding;
//C       } SESSION_HEADER,*PSESSION_HEADER;
struct _SESSION_HEADER
{
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
}
alias _SESSION_HEADER SESSION_HEADER;
alias _SESSION_HEADER *PSESSION_HEADER;
//C       typedef struct _SESSION_BUFFER {
//C         UCHAR lsn;
//C         UCHAR state;
//C         UCHAR local_name[16];
//C         UCHAR remote_name[16];
//C         UCHAR rcvs_outstanding;
//C         UCHAR sends_outstanding;
//C       } SESSION_BUFFER,*PSESSION_BUFFER;
struct _SESSION_BUFFER
{
    UCHAR lsn;
    UCHAR state;
    UCHAR [16]local_name;
    UCHAR [16]remote_name;
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
}
alias _SESSION_BUFFER SESSION_BUFFER;
alias _SESSION_BUFFER *PSESSION_BUFFER;
//C       typedef struct _LANA_ENUM {
//C         UCHAR length;
//C         UCHAR lana[254 +1];
//C       } LANA_ENUM,*PLANA_ENUM;
struct _LANA_ENUM
{
    UCHAR length;
    UCHAR [255]lana;
}
alias _LANA_ENUM LANA_ENUM;
alias _LANA_ENUM *PLANA_ENUM;
//C       typedef struct _FIND_NAME_HEADER {
//C         WORD node_count;
//C         UCHAR reserved;
//C         UCHAR unique_group;
//C       } FIND_NAME_HEADER,*PFIND_NAME_HEADER;
struct _FIND_NAME_HEADER
{
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
}
alias _FIND_NAME_HEADER FIND_NAME_HEADER;
alias _FIND_NAME_HEADER *PFIND_NAME_HEADER;
//C       typedef struct _FIND_NAME_BUFFER {
//C         UCHAR length;
//C         UCHAR access_control;
//C         UCHAR frame_control;
//C         UCHAR destination_addr[6];
//C         UCHAR source_addr[6];
//C         UCHAR routing_info[18];
//C       } FIND_NAME_BUFFER,*PFIND_NAME_BUFFER;
struct _FIND_NAME_BUFFER
{
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR [6]destination_addr;
    UCHAR [6]source_addr;
    UCHAR [18]routing_info;
}
alias _FIND_NAME_BUFFER FIND_NAME_BUFFER;
alias _FIND_NAME_BUFFER *PFIND_NAME_BUFFER;
//C       typedef struct _ACTION_HEADER {
//C         ULONG transport_id;
//C         USHORT action_code;
//C         USHORT reserved;
//C       } ACTION_HEADER,*PACTION_HEADER;
struct _ACTION_HEADER
{
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
}
alias _ACTION_HEADER ACTION_HEADER;
alias _ACTION_HEADER *PACTION_HEADER;
//C       UCHAR Netbios(PNCB pncb);
UCHAR  Netbios(PNCB pncb);
//C       typedef void *I_RPC_HANDLE;
alias void *I_RPC_HANDLE;
//C       typedef long RPC_STATUS;
alias int RPC_STATUS;
//C       typedef unsigned char *RPC_CSTR;
alias ubyte *RPC_CSTR;
//C       typedef unsigned short *RPC_WSTR;
alias ushort *RPC_WSTR;
//C       typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
alias I_RPC_HANDLE RPC_BINDING_HANDLE;
//C       typedef RPC_BINDING_HANDLE handle_t;
alias RPC_BINDING_HANDLE handle_t;
//C       typedef GUID UUID;
alias GUID UUID;
//C       typedef struct _RPC_BINDING_VECTOR {
//C         unsigned long Count;
//C         RPC_BINDING_HANDLE BindingH[1];
//C       } RPC_BINDING_VECTOR;
struct _RPC_BINDING_VECTOR
{
    uint Count;
    RPC_BINDING_HANDLE [1]BindingH;
}
alias _RPC_BINDING_VECTOR RPC_BINDING_VECTOR;
//C       typedef struct _UUID_VECTOR {
//C         unsigned long Count;
//C         UUID *Uuid[1];
//C       } UUID_VECTOR;
struct _UUID_VECTOR
{
    uint Count;
    UUID *[1]Uuid;
}
alias _UUID_VECTOR UUID_VECTOR;
//C       typedef void *RPC_IF_HANDLE;
alias void *RPC_IF_HANDLE;
//C       typedef struct _RPC_IF_ID {
//C         UUID Uuid;
//C         unsigned short VersMajor;
//C         unsigned short VersMinor;
//C       } RPC_IF_ID;
struct _RPC_IF_ID
{
    UUID Uuid;
    ushort VersMajor;
    ushort VersMinor;
}
alias _RPC_IF_ID RPC_IF_ID;
//C       typedef struct _RPC_PROTSEQ_VECTORA {
//C         unsigned int Count;
//C         unsigned char *Protseq[1];
//C       } RPC_PROTSEQ_VECTORA;
struct _RPC_PROTSEQ_VECTORA
{
    uint Count;
    ubyte *[1]Protseq;
}
alias _RPC_PROTSEQ_VECTORA RPC_PROTSEQ_VECTORA;
//C       typedef struct _RPC_PROTSEQ_VECTORW {
//C         unsigned int Count;
//C         unsigned short *Protseq[1];
//C       } RPC_PROTSEQ_VECTORW;
struct _RPC_PROTSEQ_VECTORW
{
    uint Count;
    ushort *[1]Protseq;
}
alias _RPC_PROTSEQ_VECTORW RPC_PROTSEQ_VECTORW;
//C       typedef struct _RPC_POLICY {
//C         unsigned int Length;
//C         unsigned long EndpointFlags;
//C         unsigned long NICFlags;
//C       } RPC_POLICY,*PRPC_POLICY;
struct _RPC_POLICY
{
    uint Length;
    uint EndpointFlags;
    uint NICFlags;
}
alias _RPC_POLICY RPC_POLICY;
alias _RPC_POLICY *PRPC_POLICY;
//C       typedef void RPC_OBJECT_INQ_FN(UUID *ObjectUuid,UUID *TypeUuid,RPC_STATUS *Status);
alias void function(UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status)RPC_OBJECT_INQ_FN;
//C       typedef RPC_STATUS RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid,void *Context);
alias RPC_STATUS function(RPC_IF_HANDLE InterfaceUuid, void *Context)RPC_IF_CALLBACK_FN;
//C       typedef void RPC_SECURITY_CALLBACK_FN(void *Context);
alias void function(void *Context)RPC_SECURITY_CALLBACK_FN;
//C       typedef struct {
//C         unsigned int Count;
//C         unsigned long Stats[1];
//C       } RPC_STATS_VECTOR;
struct _N110
{
    uint Count;
    uint [1]Stats;
}
alias _N110 RPC_STATS_VECTOR;
//C       typedef struct {
//C         unsigned long Count;
//C         RPC_IF_ID *IfId[1];
//C       } RPC_IF_ID_VECTOR;
struct _N111
{
    uint Count;
    RPC_IF_ID *[1]IfId;
}
alias _N111 RPC_IF_ID_VECTOR;
//C        RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE *DestinationBinding);
RPC_STATUS  RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding);
//C        RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding);
RPC_STATUS  RpcBindingFree(RPC_BINDING_HANDLE *Binding);
//C        RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding,unsigned long option,ULONG_PTR optionValue);
RPC_STATUS  RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, uint option, ULONG_PTR optionValue);
//C        RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding,unsigned long option,ULONG_PTR *pOptionValue);
RPC_STATUS  RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, uint option, ULONG_PTR *pOptionValue);
//C        RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding,RPC_BINDING_HANDLE *Binding);
RPC_STATUS  RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding);
//C        RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding,RPC_BINDING_HANDLE *Binding);
RPC_STATUS  RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding);
//C        RPC_STATUS RpcSsGetContextBinding(void *ContextHandle,RPC_BINDING_HANDLE *Binding);
RPC_STATUS  RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding);
//C        RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
RPC_STATUS  RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid);
//C        RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding);
RPC_STATUS  RpcBindingReset(RPC_BINDING_HANDLE Binding);
//C        RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
RPC_STATUS  RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid);
//C        RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc,unsigned long *AuthnLevel);
RPC_STATUS  RpcMgmtInqDefaultProtectLevel(uint AuthnSvc, uint *AuthnLevel);
//C        RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding,RPC_CSTR *StringBinding);
RPC_STATUS  RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding);
//C        RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding,RPC_WSTR *StringBinding);
RPC_STATUS  RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding);
//C        RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector);
RPC_STATUS  RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector);
//C        RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid,RPC_CSTR Protseq,RPC_CSTR NetworkAddr,RPC_CSTR Endpoint,RPC_CSTR Options,RPC_CSTR *StringBinding);
RPC_STATUS  RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR Protseq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding);
//C        RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid,RPC_WSTR Protseq,RPC_WSTR NetworkAddr,RPC_WSTR Endpoint,RPC_WSTR Options,RPC_WSTR *StringBinding);
RPC_STATUS  RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR Protseq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding);
//C        RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding,RPC_CSTR *ObjUuid,RPC_CSTR *Protseq,RPC_CSTR *NetworkAddr,RPC_CSTR *Endpoint,RPC_CSTR *NetworkOptions);
RPC_STATUS  RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions);
//C        RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding,RPC_WSTR *ObjUuid,RPC_WSTR *Protseq,RPC_WSTR *NetworkAddr,RPC_WSTR *Endpoint,RPC_WSTR *NetworkOptions);
RPC_STATUS  RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions);
//C        RPC_STATUS RpcStringFreeA(RPC_CSTR *String);
RPC_STATUS  RpcStringFreeA(RPC_CSTR *String);
//C        RPC_STATUS RpcStringFreeW(RPC_WSTR *String);
RPC_STATUS  RpcStringFreeW(RPC_WSTR *String);
//C        RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle,RPC_IF_ID *RpcIfId);
RPC_STATUS  RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId);
//C        RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq);
RPC_STATUS  RpcNetworkIsProtseqValidA(RPC_CSTR Protseq);
//C        RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq);
RPC_STATUS  RpcNetworkIsProtseqValidW(RPC_WSTR Protseq);
//C        RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding,unsigned int *Timeout);
RPC_STATUS  RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, uint *Timeout);
//C        RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding,unsigned int Timeout);
RPC_STATUS  RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, uint Timeout);
//C        RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout);
RPC_STATUS  RpcMgmtSetCancelTimeout(int Timeout);
//C        RPC_STATUS RpcNetworkInqProtseqsA (RPC_PROTSEQ_VECTORA **ProtseqVector);
RPC_STATUS  RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector);
//C        RPC_STATUS RpcNetworkInqProtseqsW (RPC_PROTSEQ_VECTORW **ProtseqVector);
RPC_STATUS  RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector);
//C        RPC_STATUS RpcObjectInqType(UUID *ObjUuid,UUID *TypeUuid);
RPC_STATUS  RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid);
//C        RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn);
RPC_STATUS  RpcObjectSetInqFn(void  function(UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status)InquiryFn);
//C        RPC_STATUS RpcObjectSetType(UUID *ObjUuid,UUID *TypeUuid);
RPC_STATUS  RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid);
//C        RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector);
RPC_STATUS  RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector);
//C        RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector);
RPC_STATUS  RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector);
//C        RPC_STATUS RpcServerInqBindings (RPC_BINDING_VECTOR **BindingVector);
RPC_STATUS  RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector);
//C        RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void **MgrEpv);
RPC_STATUS  RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv);
//C        RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads,unsigned int MaxCalls,unsigned int DontWait);
RPC_STATUS  RpcServerListen(uint MinimumCallThreads, uint MaxCalls, uint DontWait);
//C        RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv);
RPC_STATUS  RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv);
//C        RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv,unsigned int Flags,unsigned int MaxCalls,RPC_IF_CALLBACK_FN *IfCallback);
RPC_STATUS  RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, uint Flags, uint MaxCalls, RPC_STATUS  function(RPC_IF_HANDLE InterfaceUuid, void *Context)IfCallback);
//C        RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,void *MgrEpv,unsigned int Flags,unsigned int MaxCalls,unsigned int MaxRpcSize,RPC_IF_CALLBACK_FN *IfCallbackFn);
RPC_STATUS  RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, uint Flags, uint MaxCalls, uint MaxRpcSize, RPC_STATUS  function(RPC_IF_HANDLE InterfaceUuid, void *Context)IfCallbackFn);
//C        RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,unsigned int WaitForCallsToComplete);
RPC_STATUS  RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, uint WaitForCallsToComplete);
//C        RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec,UUID *MgrTypeUuid,int RundownContextHandles);
RPC_STATUS  RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles);
//C        RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseAllProtseqs(uint MaxCalls, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseAllProtseqsEx(uint MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseAllProtseqsIf(uint MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseAllProtseqsIfEx(uint MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseProtseqA(RPC_CSTR Protseq, uint MaxCalls, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseProtseqExA(RPC_CSTR Protseq, uint MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseProtseqW(RPC_WSTR Protseq, uint MaxCalls, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseProtseqExW(RPC_WSTR Protseq, uint MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseProtseqEpA(RPC_CSTR Protseq, uint MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseProtseqEpExA(RPC_CSTR Protseq, uint MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseProtseqEpW(RPC_WSTR Protseq, uint MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseProtseqEpExW(RPC_WSTR Protseq, uint MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseProtseqIfA(RPC_CSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseProtseqIfExA(RPC_CSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor);
RPC_STATUS  RpcServerUseProtseqIfW(RPC_WSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor);
//C        RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq,unsigned int MaxCalls,RPC_IF_HANDLE IfSpec,void *SecurityDescriptor,PRPC_POLICY Policy);
RPC_STATUS  RpcServerUseProtseqIfExW(RPC_WSTR Protseq, uint MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy);
//C        void RpcServerYield ();
void  RpcServerYield();
//C        RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector);
RPC_STATUS  RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector);
//C        RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding,RPC_STATS_VECTOR **Statistics);
RPC_STATUS  RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics);
//C        RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);
RPC_STATUS  RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);
//C        RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding);
RPC_STATUS  RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding);
//C        RPC_STATUS RpcMgmtWaitServerListen(void);
RPC_STATUS  RpcMgmtWaitServerListen();
//C        RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize);
RPC_STATUS  RpcMgmtSetServerStackSize(uint ThreadStackSize);
//C        void RpcSsDontSerializeContext(void);
void  RpcSsDontSerializeContext();
//C        RPC_STATUS RpcMgmtEnableIdleCleanup(void);
RPC_STATUS  RpcMgmtEnableIdleCleanup();
//C        RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding,RPC_IF_ID_VECTOR **IfIdVector);
RPC_STATUS  RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector);
//C        RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector);
RPC_STATUS  RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector);
//C        RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding,unsigned long AuthnSvc,RPC_CSTR *ServerPrincName);
RPC_STATUS  RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, uint AuthnSvc, RPC_CSTR *ServerPrincName);
//C        RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding,unsigned long AuthnSvc,RPC_WSTR *ServerPrincName);
RPC_STATUS  RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, uint AuthnSvc, RPC_WSTR *ServerPrincName);
//C        RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc,RPC_CSTR *PrincName);
RPC_STATUS  RpcServerInqDefaultPrincNameA(uint AuthnSvc, RPC_CSTR *PrincName);
//C        RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc,RPC_WSTR *PrincName);
RPC_STATUS  RpcServerInqDefaultPrincNameW(uint AuthnSvc, RPC_WSTR *PrincName);
//C        RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding,RPC_IF_HANDLE IfSpec);
RPC_STATUS  RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);
//C        RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_CSTR *EntryName);
RPC_STATUS  RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, uint EntryNameSyntax, RPC_CSTR *EntryName);
//C        RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_WSTR *EntryName);
RPC_STATUS  RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, uint EntryNameSyntax, RPC_WSTR *EntryName);
//C       typedef void *RPC_AUTH_IDENTITY_HANDLE;
alias void *RPC_AUTH_IDENTITY_HANDLE;
//C       typedef void *RPC_AUTHZ_HANDLE;
alias void *RPC_AUTHZ_HANDLE;
//C       typedef struct _RPC_SECURITY_QOS {
//C         unsigned long Version;
//C         unsigned long Capabilities;
//C         unsigned long IdentityTracking;
//C         unsigned long ImpersonationType;
//C       } RPC_SECURITY_QOS,*PRPC_SECURITY_QOS;
struct _RPC_SECURITY_QOS
{
    uint Version;
    uint Capabilities;
    uint IdentityTracking;
    uint ImpersonationType;
}
alias _RPC_SECURITY_QOS RPC_SECURITY_QOS;
alias _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;
//C       typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
//C         unsigned short *User;
//C         unsigned long UserLength;
//C         unsigned short *Domain;
//C         unsigned long DomainLength;
//C         unsigned short *Password;
//C         unsigned long PasswordLength;
//C         unsigned long Flags;
//C       } SEC_WINNT_AUTH_IDENTITY_W,*PSEC_WINNT_AUTH_IDENTITY_W;
struct _SEC_WINNT_AUTH_IDENTITY_W
{
    ushort *User;
    uint UserLength;
    ushort *Domain;
    uint DomainLength;
    ushort *Password;
    uint PasswordLength;
    uint Flags;
}
alias _SEC_WINNT_AUTH_IDENTITY_W SEC_WINNT_AUTH_IDENTITY_W;
alias _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;
//C       typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
//C         unsigned char *User;
//C         unsigned long UserLength;
//C         unsigned char *Domain;
//C         unsigned long DomainLength;
//C         unsigned char *Password;
//C         unsigned long PasswordLength;
//C         unsigned long Flags;
//C       } SEC_WINNT_AUTH_IDENTITY_A,*PSEC_WINNT_AUTH_IDENTITY_A;
struct _SEC_WINNT_AUTH_IDENTITY_A
{
    ubyte *User;
    uint UserLength;
    ubyte *Domain;
    uint DomainLength;
    ubyte *Password;
    uint PasswordLength;
    uint Flags;
}
alias _SEC_WINNT_AUTH_IDENTITY_A SEC_WINNT_AUTH_IDENTITY_A;
alias _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;
//C       typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
//C         SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
//C         unsigned long Flags;
//C         unsigned long AuthenticationTarget;
//C         unsigned long NumberOfAuthnSchemes;
//C         unsigned long *AuthnSchemes;
//C         unsigned short *ServerCertificateSubject;
//C       } RPC_HTTP_TRANSPORT_CREDENTIALS_W,*PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    uint Flags;
    uint AuthenticationTarget;
    uint NumberOfAuthnSchemes;
    uint *AuthnSchemes;
    ushort *ServerCertificateSubject;
}
alias _RPC_HTTP_TRANSPORT_CREDENTIALS_W RPC_HTTP_TRANSPORT_CREDENTIALS_W;
alias _RPC_HTTP_TRANSPORT_CREDENTIALS_W *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
//C       typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
//C         SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
//C         unsigned long Flags;
//C         unsigned long AuthenticationTarget;
//C         unsigned long NumberOfAuthnSchemes;
//C         unsigned long *AuthnSchemes;
//C         unsigned char *ServerCertificateSubject;
//C       } RPC_HTTP_TRANSPORT_CREDENTIALS_A,*PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    uint Flags;
    uint AuthenticationTarget;
    uint NumberOfAuthnSchemes;
    uint *AuthnSchemes;
    ubyte *ServerCertificateSubject;
}
alias _RPC_HTTP_TRANSPORT_CREDENTIALS_A RPC_HTTP_TRANSPORT_CREDENTIALS_A;
alias _RPC_HTTP_TRANSPORT_CREDENTIALS_A *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
//C       typedef struct _RPC_SECURITY_QOS_V2_W {
//C         unsigned long Version;
//C         unsigned long Capabilities;
//C         unsigned long IdentityTracking;
//C         unsigned long ImpersonationType;
//C         unsigned long AdditionalSecurityInfoType;
//C         union {
//C           RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
//C         } u;
union _N112
{
    RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
}
//C       } RPC_SECURITY_QOS_V2_W,*PRPC_SECURITY_QOS_V2_W;
struct _RPC_SECURITY_QOS_V2_W
{
    uint Version;
    uint Capabilities;
    uint IdentityTracking;
    uint ImpersonationType;
    uint AdditionalSecurityInfoType;
    _N112 u;
}
alias _RPC_SECURITY_QOS_V2_W RPC_SECURITY_QOS_V2_W;
alias _RPC_SECURITY_QOS_V2_W *PRPC_SECURITY_QOS_V2_W;
//C       typedef struct _RPC_SECURITY_QOS_V2_A {
//C         unsigned long Version;
//C         unsigned long Capabilities;
//C         unsigned long IdentityTracking;
//C         unsigned long ImpersonationType;
//C         unsigned long AdditionalSecurityInfoType;
//C         union {
//C           RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
//C         } u;
union _N113
{
    RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
}
//C       } RPC_SECURITY_QOS_V2_A,*PRPC_SECURITY_QOS_V2_A;
struct _RPC_SECURITY_QOS_V2_A
{
    uint Version;
    uint Capabilities;
    uint IdentityTracking;
    uint ImpersonationType;
    uint AdditionalSecurityInfoType;
    _N113 u;
}
alias _RPC_SECURITY_QOS_V2_A RPC_SECURITY_QOS_V2_A;
alias _RPC_SECURITY_QOS_V2_A *PRPC_SECURITY_QOS_V2_A;
//C       typedef struct _RPC_SECURITY_QOS_V3_W {
//C         unsigned long Version;
//C         unsigned long Capabilities;
//C         unsigned long IdentityTracking;
//C         unsigned long ImpersonationType;
//C         unsigned long AdditionalSecurityInfoType;
//C         union {
//C           RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
//C         } u;
union _N114
{
    RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
}
//C         void *Sid;
//C       } RPC_SECURITY_QOS_V3_W,*PRPC_SECURITY_QOS_V3_W;
struct _RPC_SECURITY_QOS_V3_W
{
    uint Version;
    uint Capabilities;
    uint IdentityTracking;
    uint ImpersonationType;
    uint AdditionalSecurityInfoType;
    _N114 u;
    void *Sid;
}
alias _RPC_SECURITY_QOS_V3_W RPC_SECURITY_QOS_V3_W;
alias _RPC_SECURITY_QOS_V3_W *PRPC_SECURITY_QOS_V3_W;
//C       typedef struct _RPC_SECURITY_QOS_V3_A {
//C         unsigned long Version;
//C         unsigned long Capabilities;
//C         unsigned long IdentityTracking;
//C         unsigned long ImpersonationType;
//C         unsigned long AdditionalSecurityInfoType;
//C         union {
//C           RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
//C         } u;
union _N115
{
    RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
}
//C         void *Sid;
//C       } RPC_SECURITY_QOS_V3_A,*PRPC_SECURITY_QOS_V3_A;
struct _RPC_SECURITY_QOS_V3_A
{
    uint Version;
    uint Capabilities;
    uint IdentityTracking;
    uint ImpersonationType;
    uint AdditionalSecurityInfoType;
    _N115 u;
    void *Sid;
}
alias _RPC_SECURITY_QOS_V3_A RPC_SECURITY_QOS_V3_A;
alias _RPC_SECURITY_QOS_V3_A *PRPC_SECURITY_QOS_V3_A;
//C       typedef enum _RPC_HTTP_REDIRECTOR_STAGE {
//C         RPCHTTP_RS_REDIRECT = 1,RPCHTTP_RS_ACCESS_1,RPCHTTP_RS_SESSION,RPCHTTP_RS_ACCESS_2,RPCHTTP_RS_INTERFACE
//C       } RPC_HTTP_REDIRECTOR_STAGE;
enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE,
}
alias _RPC_HTTP_REDIRECTOR_STAGE RPC_HTTP_REDIRECTOR_STAGE;
//C       typedef RPC_STATUS ( *RPC_NEW_HTTP_PROXY_CHANNEL)(RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,unsigned short *ServerName,unsigned short *ServerPort,unsigned short *RemoteUser,unsigned short *AuthType,void *ResourceUuid,void *Metadata,void *SessionId,void *Interface,void *Reserved,unsigned long Flags,unsigned short **NewServerName,unsigned short **NewServerPort);
alias RPC_STATUS  function(RPC_HTTP_REDIRECTOR_STAGE RedirectorStage, ushort *ServerName, ushort *ServerPort, ushort *RemoteUser, ushort *AuthType, void *ResourceUuid, void *Metadata, void *SessionId, void *Interface, void *Reserved, uint Flags, ushort **NewServerName, ushort **NewServerPort)RPC_NEW_HTTP_PROXY_CHANNEL;
//C       typedef void ( *RPC_HTTP_PROXY_FREE_STRING)(unsigned short *String);
alias void  function(ushort *String)RPC_HTTP_PROXY_FREE_STRING;
//C        RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS  RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle);
//C        RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS  RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle);
//C        RPC_STATUS RpcRevertToSelf();
RPC_STATUS  RpcRevertToSelf();
//C        RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc);
RPC_STATUS  RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, uint *AuthzSvc);
//C        RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc);
RPC_STATUS  RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, uint *AuthzSvc);
//C        RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc,unsigned long Flags);
RPC_STATUS  RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, uint *AuthzSvc, uint Flags);
//C        RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding,RPC_AUTHZ_HANDLE *Privs,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,unsigned long *AuthzSvc,unsigned long Flags);
RPC_STATUS  RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, uint *AuthzSvc, uint Flags);
//C        RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc);
RPC_STATUS  RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, uint *AuthzSvc);
//C        RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc);
RPC_STATUS  RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, uint *AuthzSvc);
//C        RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc);
RPC_STATUS  RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, uint AuthnLevel, uint AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint AuthzSvc);
//C        RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc,RPC_SECURITY_QOS *SecurityQos);
RPC_STATUS  RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, uint AuthnLevel, uint AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint AuthzSvc, RPC_SECURITY_QOS *SecurityQos);
//C        RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc);
RPC_STATUS  RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, uint AuthnLevel, uint AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint AuthzSvc);
//C        RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR ServerPrincName,unsigned long AuthnLevel,unsigned long AuthnSvc,RPC_AUTH_IDENTITY_HANDLE AuthIdentity,unsigned long AuthzSvc,RPC_SECURITY_QOS *SecurityQOS);
RPC_STATUS  RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, uint AuthnLevel, uint AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, uint AuthzSvc, RPC_SECURITY_QOS *SecurityQOS);
//C        RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding,RPC_CSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc,unsigned long RpcQosVersion,RPC_SECURITY_QOS *SecurityQOS);
RPC_STATUS  RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, uint *AuthzSvc, uint RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS);
//C        RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding,RPC_WSTR *ServerPrincName,unsigned long *AuthnLevel,unsigned long *AuthnSvc,RPC_AUTH_IDENTITY_HANDLE *AuthIdentity,unsigned long *AuthzSvc,unsigned long RpcQosVersion,RPC_SECURITY_QOS *SecurityQOS);
RPC_STATUS  RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, uint *AuthnLevel, uint *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, uint *AuthzSvc, uint RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS);
//C       typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg,unsigned short *ServerPrincName,unsigned long KeyVer,void **Key,RPC_STATUS *Status);
alias void  function(void *Arg, ushort *ServerPrincName, uint KeyVer, void **Key, RPC_STATUS *Status)RPC_AUTH_KEY_RETRIEVAL_FN;
//C        RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName,unsigned long AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void *Arg);
RPC_STATUS  RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, uint AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg);
//C        RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName,unsigned long AuthnSvc,RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,void *Arg);
RPC_STATUS  RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, uint AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg);
//C       typedef struct {
//C         unsigned char *UserName;
//C         unsigned char *ComputerName;
//C         unsigned short Privilege;
//C         unsigned long AuthFlags;
//C       } RPC_CLIENT_INFORMATION1,*PRPC_CLIENT_INFORMATION1;
struct _N116
{
    ubyte *UserName;
    ubyte *ComputerName;
    ushort Privilege;
    uint AuthFlags;
}
alias _N116 RPC_CLIENT_INFORMATION1;
alias _N116 *PRPC_CLIENT_INFORMATION1;
//C        RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding,RPC_BINDING_HANDLE *ServerBinding);
RPC_STATUS  RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding);
//C         void RpcRaiseException(RPC_STATUS exception);
void  RpcRaiseException(RPC_STATUS exception);
//C        RPC_STATUS RpcTestCancel();
RPC_STATUS  RpcTestCancel();
//C        RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS  RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle);
//C        RPC_STATUS RpcCancelThread(void *Thread);
RPC_STATUS  RpcCancelThread(void *Thread);
//C        RPC_STATUS RpcCancelThreadEx(void *Thread,long Timeout);
RPC_STATUS  RpcCancelThreadEx(void *Thread, int Timeout);
//C        RPC_STATUS UuidCreate(UUID *Uuid);
RPC_STATUS  UuidCreate(UUID *Uuid);
//C        RPC_STATUS UuidCreateSequential(UUID *Uuid);
RPC_STATUS  UuidCreateSequential(UUID *Uuid);
//C        RPC_STATUS UuidToStringA(UUID *Uuid,RPC_CSTR *StringUuid);
RPC_STATUS  UuidToStringA(UUID *Uuid, RPC_CSTR *StringUuid);
//C        RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid,UUID *Uuid);
RPC_STATUS  UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid);
//C        RPC_STATUS UuidToStringW(UUID *Uuid,RPC_WSTR *StringUuid);
RPC_STATUS  UuidToStringW(UUID *Uuid, RPC_WSTR *StringUuid);
//C        RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid,UUID *Uuid);
RPC_STATUS  UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid);
//C        signed int UuidCompare(UUID *Uuid1,UUID *Uuid2,RPC_STATUS *Status);
int  UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status);
//C        RPC_STATUS UuidCreateNil(UUID *NilUuid);
RPC_STATUS  UuidCreateNil(UUID *NilUuid);
//C        int UuidEqual(UUID *Uuid1,UUID *Uuid2,RPC_STATUS *Status);
int  UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status);
//C        unsigned short UuidHash(UUID *Uuid,RPC_STATUS *Status);
ushort  UuidHash(UUID *Uuid, RPC_STATUS *Status);
//C        int UuidIsNil(UUID *Uuid,RPC_STATUS *Status);
int  UuidIsNil(UUID *Uuid, RPC_STATUS *Status);
//C        RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_CSTR Annotation);
RPC_STATUS  RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation);
//C        RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_WSTR Annotation);
RPC_STATUS  RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation);
//C        RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_CSTR Annotation);
RPC_STATUS  RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation);
//C        RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector,RPC_WSTR Annotation);
RPC_STATUS  RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation);
//C        RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVector,UUID_VECTOR *UuidVector);
RPC_STATUS  RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector);
//C        RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus,RPC_CSTR ErrorText);
RPC_STATUS  DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText);
//C        RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus,RPC_WSTR ErrorText);
RPC_STATUS  DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText);
//C       typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
alias I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
//C        RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,UUID *ObjectUuid,RPC_EP_INQ_HANDLE *InquiryContext);
RPC_STATUS  RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, uint InquiryType, RPC_IF_ID *IfId, uint VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext);
//C        RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext);
RPC_STATUS  RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext);
//C        RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_BINDING_HANDLE *Binding,UUID *ObjectUuid,RPC_CSTR *Annotation);
RPC_STATUS  RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation);
//C        RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_BINDING_HANDLE *Binding,UUID *ObjectUuid,RPC_WSTR *Annotation);
RPC_STATUS  RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation);
//C        RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding,RPC_IF_ID *IfId,RPC_BINDING_HANDLE Binding,UUID *ObjectUuid);
RPC_STATUS  RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid);
//C       typedef int ( *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding,unsigned long RequestedMgmtOperation,RPC_STATUS *Status);
alias int  function(RPC_BINDING_HANDLE ClientBinding, uint RequestedMgmtOperation, RPC_STATUS *Status)RPC_MGMT_AUTHORIZATION_FN;
//C        RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);
RPC_STATUS  RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);
//C       typedef struct _RPC_VERSION {
//C         unsigned short MajorVersion;
//C         unsigned short MinorVersion;
//C       } RPC_VERSION;
struct _RPC_VERSION
{
    ushort MajorVersion;
    ushort MinorVersion;
}
alias _RPC_VERSION RPC_VERSION;
//C       typedef struct _RPC_SYNTAX_IDENTIFIER {
//C         GUID SyntaxGUID;
//C         RPC_VERSION SyntaxVersion;
//C       } RPC_SYNTAX_IDENTIFIER,*PRPC_SYNTAX_IDENTIFIER;
struct _RPC_SYNTAX_IDENTIFIER
{
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
}
alias _RPC_SYNTAX_IDENTIFIER RPC_SYNTAX_IDENTIFIER;
alias _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;
//C       typedef struct _RPC_MESSAGE {
//C         RPC_BINDING_HANDLE Handle;
//C         unsigned long DataRepresentation;
//C         void *Buffer;
//C         unsigned int BufferLength;
//C         unsigned int ProcNum;
//C         PRPC_SYNTAX_IDENTIFIER TransferSyntax;
//C         void *RpcInterfaceInformation;
//C         void *ReservedForRuntime;
//C         void *ManagerEpv;
//C         void *ImportContext;
//C         unsigned long RpcFlags;
//C       } RPC_MESSAGE,*PRPC_MESSAGE;
struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    uint DataRepresentation;
    void *Buffer;
    uint BufferLength;
    uint ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void *RpcInterfaceInformation;
    void *ReservedForRuntime;
    void *ManagerEpv;
    void *ImportContext;
    uint RpcFlags;
}
alias _RPC_MESSAGE RPC_MESSAGE;
alias _RPC_MESSAGE *PRPC_MESSAGE;
//C       typedef RPC_STATUS RPC_FORWARD_FUNCTION(UUID *InterfaceId,RPC_VERSION *InterfaceVersion,UUID *ObjectId,unsigned char *Rpcpro,void **ppDestEndpoint);
alias RPC_STATUS function(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, ubyte *Rpcpro, void **ppDestEndpoint)RPC_FORWARD_FUNCTION;
//C       enum RPC_ADDRESS_CHANGE_TYPE {
//C         PROTOCOL_NOT_LOADED = 1,PROTOCOL_LOADED,PROTOCOL_ADDRESS_CHANGE
//C       };
enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE,
}
//C       typedef void RPC_ADDRESS_CHANGE_FN(void *arg);
alias void function(void *arg)RPC_ADDRESS_CHANGE_FN;
//C       typedef void ( *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
alias void  function(PRPC_MESSAGE Message)RPC_DISPATCH_FUNCTION;
//C       typedef struct {
//C         unsigned int DispatchTableCount;
//C         RPC_DISPATCH_FUNCTION *DispatchTable;
//C         LONG_PTR Reserved;
//C       } RPC_DISPATCH_TABLE,*PRPC_DISPATCH_TABLE;
struct _N117
{
    uint DispatchTableCount;
    RPC_DISPATCH_FUNCTION *DispatchTable;
    LONG_PTR Reserved;
}
alias _N117 RPC_DISPATCH_TABLE;
alias _N117 *PRPC_DISPATCH_TABLE;
//C       typedef struct _RPC_PROTSEQ_ENDPOINT {
//C         unsigned char *RpcProtocolSequence;
//C         unsigned char *Endpoint;
//C       } RPC_PROTSEQ_ENDPOINT,*PRPC_PROTSEQ_ENDPOINT;
struct _RPC_PROTSEQ_ENDPOINT
{
    ubyte *RpcProtocolSequence;
    ubyte *Endpoint;
}
alias _RPC_PROTSEQ_ENDPOINT RPC_PROTSEQ_ENDPOINT;
alias _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;
//C       typedef struct _RPC_SERVER_INTERFACE {
//C         unsigned int Length;
//C         RPC_SYNTAX_IDENTIFIER InterfaceId;
//C         RPC_SYNTAX_IDENTIFIER TransferSyntax;
//C         PRPC_DISPATCH_TABLE DispatchTable;
//C         unsigned int RpcProtseqEndpointCount;
//C         PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
//C         void *DefaultManagerEpv;
//C         void const *InterpreterInfo;
//C         unsigned int Flags;
//C       } RPC_SERVER_INTERFACE,*PRPC_SERVER_INTERFACE;
struct _RPC_SERVER_INTERFACE
{
    uint Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    uint RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void *InterpreterInfo;
    uint Flags;
}
alias _RPC_SERVER_INTERFACE RPC_SERVER_INTERFACE;
alias _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;
//C       typedef struct _RPC_CLIENT_INTERFACE {
//C         unsigned int Length;
//C         RPC_SYNTAX_IDENTIFIER InterfaceId;
//C         RPC_SYNTAX_IDENTIFIER TransferSyntax;
//C         PRPC_DISPATCH_TABLE DispatchTable;
//C         unsigned int RpcProtseqEndpointCount;
//C         PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
//C         ULONG_PTR Reserved;
//C         void const *InterpreterInfo;
//C         unsigned int Flags;
//C       } RPC_CLIENT_INTERFACE,*PRPC_CLIENT_INTERFACE;
struct _RPC_CLIENT_INTERFACE
{
    uint Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    uint RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void *InterpreterInfo;
    uint Flags;
}
alias _RPC_CLIENT_INTERFACE RPC_CLIENT_INTERFACE;
alias _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;
//C        RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message);
RPC_STATUS  I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message);
//C        RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message);
RPC_STATUS  I_RpcGetBuffer(RPC_MESSAGE *Message);
//C        RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message,UUID *ObjectUuid);
RPC_STATUS  I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid);
//C        RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message);
RPC_STATUS  I_RpcSendReceive(RPC_MESSAGE *Message);
//C        RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message);
RPC_STATUS  I_RpcFreeBuffer(RPC_MESSAGE *Message);
//C        RPC_STATUS I_RpcSend(PRPC_MESSAGE Message);
RPC_STATUS  I_RpcSend(PRPC_MESSAGE Message);
//C        RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message,unsigned int Size);
RPC_STATUS  I_RpcReceive(PRPC_MESSAGE Message, uint Size);
//C        RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message);
RPC_STATUS  I_RpcFreePipeBuffer(RPC_MESSAGE *Message);
//C        RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message,unsigned int NewSize);
RPC_STATUS  I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, uint NewSize);
//C       typedef void *I_RPC_MUTEX;
alias void *I_RPC_MUTEX;
//C        void I_RpcRequestMutex(I_RPC_MUTEX *Mutex);
void  I_RpcRequestMutex(I_RPC_MUTEX *Mutex);
//C        void I_RpcClearMutex(I_RPC_MUTEX Mutex);
void  I_RpcClearMutex(I_RPC_MUTEX Mutex);
//C        void I_RpcDeleteMutex(I_RPC_MUTEX Mutex);
void  I_RpcDeleteMutex(I_RPC_MUTEX Mutex);
//C        void * I_RpcAllocate(unsigned int Size);
void * I_RpcAllocate(uint Size);
//C        void I_RpcFree(void *Object);
void  I_RpcFree(void *Object);
//C        void I_RpcPauseExecution(unsigned long Milliseconds);
void  I_RpcPauseExecution(uint Milliseconds);
//C        RPC_STATUS I_RpcGetExtendedError();
RPC_STATUS  I_RpcGetExtendedError();
//C       typedef void ( *PRPC_RUNDOWN)(void *AssociationContext);
alias void  function(void *AssociationContext)PRPC_RUNDOWN;
//C        RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle,PRPC_RUNDOWN RundownRoutine,void *Context);
RPC_STATUS  I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context);
//C        RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle);
RPC_STATUS  I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle);
//C        RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle(void);
RPC_BINDING_HANDLE  I_RpcGetCurrentCallHandle();
//C        RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle,void **AssociationContext);
RPC_STATUS  I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext);
//C        void * I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle);
void * I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle);
//C        void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle,void *ServerContextList);
void  I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList);
//C        RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax,unsigned short *EntryName,RPC_SERVER_INTERFACE *RpcInterfaceInformation);
RPC_STATUS  I_RpcNsInterfaceExported(uint EntryNameSyntax, ushort *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation);
//C        RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax,unsigned short *EntryName,RPC_SERVER_INTERFACE *RpcInterfaceInformation);
RPC_STATUS  I_RpcNsInterfaceUnexported(uint EntryNameSyntax, ushort *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation);
//C        RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding,unsigned short **StringBinding);
RPC_STATUS  I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, ushort **StringBinding);
//C        RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding,void **SecurityContextHandle);
RPC_STATUS  I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle);
//C        RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding,RPC_CSTR WireId);
RPC_STATUS  I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, RPC_CSTR WireId);
//C        RPC_STATUS I_RpcBindingInqMarshalledTargetInfo (RPC_BINDING_HANDLE Binding,unsigned long *MarshalledTargetInfoLength,RPC_CSTR *MarshalledTargetInfo);
RPC_STATUS  I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, uint *MarshalledTargetInfoLength, RPC_CSTR *MarshalledTargetInfo);
//C        RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding,unsigned long *Pid);
RPC_STATUS  I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, uint *Pid);
//C        RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding,void **AsyncHandle);
RPC_STATUS  I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle);
//C        RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_WSTR EntryName);
RPC_STATUS  I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, uint EntryNameSyntax, RPC_WSTR EntryName);
//C        RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding,unsigned long EntryNameSyntax,RPC_CSTR EntryName);
RPC_STATUS  I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, uint EntryNameSyntax, RPC_CSTR EntryName);
//C        RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,RPC_CSTR Endpoint,void *SecurityDescriptor,void *Policy);
RPC_STATUS  I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, uint MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy);
//C        RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,RPC_WSTR Endpoint,void *SecurityDescriptor,void *Policy);
RPC_STATUS  I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, uint MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy);
//C        RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress,RPC_WSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,void *Policy);
RPC_STATUS  I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, uint MaxCalls, void *SecurityDescriptor, void *Policy);
//C        RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress,RPC_CSTR Protseq,unsigned int MaxCalls,void *SecurityDescriptor,void *Policy);
RPC_STATUS  I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, uint MaxCalls, void *SecurityDescriptor, void *Policy);
//C        RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding,RPC_WSTR *DynamicEndpoint);
RPC_STATUS  I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint);
//C        RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding,RPC_CSTR *DynamicEndpoint);
RPC_STATUS  I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint);
//C        RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context);
RPC_STATUS  I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context);
//C        RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding,unsigned int *Type);
RPC_STATUS  I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, uint *Type);
//C       typedef struct _RPC_TRANSFER_SYNTAX {
//C         UUID Uuid;
//C         unsigned short VersMajor;
//C         unsigned short VersMinor;
//C       } RPC_TRANSFER_SYNTAX;
struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    ushort VersMajor;
    ushort VersMinor;
}
alias _RPC_TRANSFER_SYNTAX RPC_TRANSFER_SYNTAX;
//C        RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle,RPC_TRANSFER_SYNTAX *TransferSyntaxes,unsigned int TransferSyntaxSize,unsigned int *TransferSyntaxCount);
RPC_STATUS  I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, uint TransferSyntaxSize, uint *TransferSyntaxCount);
//C        RPC_STATUS I_UuidCreate(UUID *Uuid);
RPC_STATUS  I_UuidCreate(UUID *Uuid);
//C        RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding,RPC_BINDING_HANDLE *DestinationBinding);
RPC_STATUS  I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding);
//C        RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle,unsigned int *ClientLocalFlag);
RPC_STATUS  I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, uint *ClientLocalFlag);
//C        RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding,void **ConnId,int *pfFirstCall);
RPC_STATUS  I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall);
//C        void I_RpcSsDontSerializeContext(void);
void  I_RpcSsDontSerializeContext();
//C        RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress);
RPC_STATUS  I_RpcLaunchDatagramReceiveThread(void *pAddress);
//C        RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction);
RPC_STATUS  I_RpcServerRegisterForwardFunction(RPC_STATUS  function(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, ubyte *Rpcpro, void **ppDestEndpoint)pForwardFunction);
//C       RPC_ADDRESS_CHANGE_FN * I_RpcServerInqAddressChangeFn();
void  function(void *arg) I_RpcServerInqAddressChangeFn();
//C       RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn);
RPC_STATUS  I_RpcServerSetAddressChangeFn(void  function(void *arg)pAddressChangeFn);
//C        RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding,void *Buffer,unsigned long *BufferSize,unsigned long *AddressFormat);
RPC_STATUS  I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, uint *BufferSize, uint *AddressFormat);
//C        void I_RpcSessionStrictContextHandle();
void  I_RpcSessionStrictContextHandle();
//C        RPC_STATUS I_RpcTurnOnEEInfoPropagation(void);
RPC_STATUS  I_RpcTurnOnEEInfoPropagation();
//C        RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize,unsigned long *SendBuffSize);
RPC_STATUS  I_RpcConnectionInqSockBuffSize(uint *RecvBuffSize, uint *SendBuffSize);
//C        RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize,unsigned long SendBuffSize);
RPC_STATUS  I_RpcConnectionSetSockBuffSize(uint RecvBuffSize, uint SendBuffSize);
//C       typedef void (*RPCLT_PDU_FILTER_FUNC)(void *Buffer,unsigned int BufferLength,int fDatagram);
alias void  function(void *Buffer, uint BufferLength, int fDatagram)RPCLT_PDU_FILTER_FUNC;
//C       typedef void ( *RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC pfnFilter);
alias void  function(RPCLT_PDU_FILTER_FUNC pfnFilter)RPC_SETFILTER_FUNC;
//C        RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type);
RPC_STATUS  I_RpcServerInqTransportType(uint *Type);
//C        long I_RpcMapWin32Status(RPC_STATUS Status);
int  I_RpcMapWin32Status(RPC_STATUS Status);
//C       typedef struct _RPC_C_OPT_METADATA_DESCRIPTOR {
//C         unsigned long BufferSize;
//C         char *Buffer;
//C       } RPC_C_OPT_METADATA_DESCRIPTOR;
struct _RPC_C_OPT_METADATA_DESCRIPTOR
{
    uint BufferSize;
    char *Buffer;
}
alias _RPC_C_OPT_METADATA_DESCRIPTOR RPC_C_OPT_METADATA_DESCRIPTOR;
//C       typedef struct _RDR_CALLOUT_STATE {
//C         RPC_STATUS LastError;
//C         void *LastEEInfo;
//C         RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
//C         unsigned short *ServerName;
//C         unsigned short *ServerPort;
//C         unsigned short *RemoteUser;
//C         unsigned short *AuthType;
//C         unsigned char ResourceTypePresent;
//C         unsigned char MetadataPresent;
//C         unsigned char SessionIdPresent;
//C         unsigned char InterfacePresent;
//C         UUID ResourceType;
//C         RPC_C_OPT_METADATA_DESCRIPTOR Metadata;
//C         UUID SessionId;
//C         RPC_SYNTAX_IDENTIFIER Interface;
//C         void *CertContext;
//C       } RDR_CALLOUT_STATE;
struct _RDR_CALLOUT_STATE
{
    RPC_STATUS LastError;
    void *LastEEInfo;
    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
    ushort *ServerName;
    ushort *ServerPort;
    ushort *RemoteUser;
    ushort *AuthType;
    ubyte ResourceTypePresent;
    ubyte MetadataPresent;
    ubyte SessionIdPresent;
    ubyte InterfacePresent;
    UUID ResourceType;
    RPC_C_OPT_METADATA_DESCRIPTOR Metadata;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;
}
alias _RDR_CALLOUT_STATE RDR_CALLOUT_STATE;
//C       typedef RPC_STATUS ( *I_RpcProxyIsValidMachineFn)(char *pszMachine,char *pszDotMachine,unsigned long dwPortNumber);
alias RPC_STATUS  function(char *pszMachine, char *pszDotMachine, uint dwPortNumber)I_RpcProxyIsValidMachineFn;
//C       typedef RPC_STATUS ( *I_RpcProxyGetClientAddressFn)(void *Context,char *Buffer,unsigned long *BufferLength);
alias RPC_STATUS  function(void *Context, char *Buffer, uint *BufferLength)I_RpcProxyGetClientAddressFn;
//C       typedef RPC_STATUS ( *I_RpcProxyGetConnectionTimeoutFn)(unsigned long *ConnectionTimeout);
alias RPC_STATUS  function(uint *ConnectionTimeout)I_RpcProxyGetConnectionTimeoutFn;
//C       typedef RPC_STATUS ( *I_RpcPerformCalloutFn)(void *Context,RDR_CALLOUT_STATE *CallOutState,RPC_HTTP_REDIRECTOR_STAGE Stage);
alias RPC_STATUS  function(void *Context, RDR_CALLOUT_STATE *CallOutState, RPC_HTTP_REDIRECTOR_STAGE Stage)I_RpcPerformCalloutFn;
//C       typedef void ( *I_RpcFreeCalloutStateFn)(RDR_CALLOUT_STATE *CallOutState);
alias void  function(RDR_CALLOUT_STATE *CallOutState)I_RpcFreeCalloutStateFn;
//C       typedef struct tagI_RpcProxyCallbackInterface {
//C         I_RpcProxyIsValidMachineFn IsValidMachineFn;
//C         I_RpcProxyGetClientAddressFn GetClientAddressFn;
//C         I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
//C         I_RpcPerformCalloutFn PerformCalloutFn;
//C         I_RpcFreeCalloutStateFn FreeCalloutStateFn;
//C       } I_RpcProxyCallbackInterface;
struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
}
alias tagI_RpcProxyCallbackInterface I_RpcProxyCallbackInterface;
//C        RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType,unsigned short *ServerAddress,unsigned short *ServerPort,unsigned short *MinConnTimeout,void *ConnectionParameter,RDR_CALLOUT_STATE *CallOutState,I_RpcProxyCallbackInterface *ProxyCallbackInterface);
RPC_STATUS  I_RpcProxyNewConnection(uint ConnectionType, ushort *ServerAddress, ushort *ServerPort, ushort *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface);
//C        RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter,RPC_STATUS RpcStatus);
RPC_STATUS  I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus);
//C        void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus,RDR_CALLOUT_STATE *CallOutState,unsigned short *DllName);
void  I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, ushort *DllName);
//C     typedef void *RPC_NS_HANDLE;
alias void *RPC_NS_HANDLE;
//C      RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVec,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS  RpcNsBindingExportA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec);
//C      RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS  RpcNsBindingUnexportA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec);
//C      RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,RPC_BINDING_VECTOR *BindingVec,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS  RpcNsBindingExportW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec);
//C      RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS  RpcNsBindingUnexportW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec);
//C     RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS  RpcNsBindingExportPnPA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector);
//C     RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS  RpcNsBindingUnexportPnPA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector);
//C     RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS  RpcNsBindingExportPnPW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector);
//C     RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID_VECTOR *ObjectVector);
RPC_STATUS  RpcNsBindingUnexportPnPW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector);
//C      RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,unsigned long BindingMaxCount,RPC_NS_HANDLE *LookupContext);
RPC_STATUS  RpcNsBindingLookupBeginA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, uint BindingMaxCount, RPC_NS_HANDLE *LookupContext);
//C      RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,unsigned long BindingMaxCount,RPC_NS_HANDLE *LookupContext);
RPC_STATUS  RpcNsBindingLookupBeginW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, uint BindingMaxCount, RPC_NS_HANDLE *LookupContext);
//C      RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext,RPC_BINDING_VECTOR **BindingVec);
RPC_STATUS  RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec);
//C      RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext);
RPC_STATUS  RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext);
//C      RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax,RPC_CSTR GroupName);
RPC_STATUS  RpcNsGroupDeleteA(uint GroupNameSyntax, RPC_CSTR GroupName);
//C      RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
RPC_STATUS  RpcNsGroupMbrAddA(uint GroupNameSyntax, RPC_CSTR GroupName, uint MemberNameSyntax, RPC_CSTR MemberName);
//C      RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
RPC_STATUS  RpcNsGroupMbrRemoveA(uint GroupNameSyntax, RPC_CSTR GroupName, uint MemberNameSyntax, RPC_CSTR MemberName);
//C      RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax,RPC_CSTR GroupName,unsigned long MemberNameSyntax,RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsGroupMbrInqBeginA(uint GroupNameSyntax, RPC_CSTR GroupName, uint MemberNameSyntax, RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext,RPC_CSTR *MemberName);
RPC_STATUS  RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName);
//C      RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax,RPC_WSTR GroupName);
RPC_STATUS  RpcNsGroupDeleteW(uint GroupNameSyntax, RPC_WSTR GroupName);
//C      RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
RPC_STATUS  RpcNsGroupMbrAddW(uint GroupNameSyntax, RPC_WSTR GroupName, uint MemberNameSyntax, RPC_WSTR MemberName);
//C      RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
RPC_STATUS  RpcNsGroupMbrRemoveW(uint GroupNameSyntax, RPC_WSTR GroupName, uint MemberNameSyntax, RPC_WSTR MemberName);
//C      RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax,RPC_WSTR GroupName,unsigned long MemberNameSyntax,RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsGroupMbrInqBeginW(uint GroupNameSyntax, RPC_WSTR GroupName, uint MemberNameSyntax, RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext,RPC_WSTR *MemberName);
RPC_STATUS  RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName);
//C      RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName);
RPC_STATUS  RpcNsProfileDeleteA(uint ProfileNameSyntax, RPC_CSTR ProfileName);
//C      RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_CSTR MemberName,unsigned long Priority,RPC_CSTR Annotation);
RPC_STATUS  RpcNsProfileEltAddA(uint ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, uint MemberNameSyntax, RPC_CSTR MemberName, uint Priority, RPC_CSTR Annotation);
//C      RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_CSTR MemberName);
RPC_STATUS  RpcNsProfileEltRemoveA(uint ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, uint MemberNameSyntax, RPC_CSTR MemberName);
//C      RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax,RPC_CSTR ProfileName,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,unsigned long MemberNameSyntax,RPC_CSTR MemberName,RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsProfileEltInqBeginA(uint ProfileNameSyntax, RPC_CSTR ProfileName, uint InquiryType, RPC_IF_ID *IfId, uint VersOption, uint MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_CSTR *MemberName,unsigned long *Priority,RPC_CSTR *Annotation);
RPC_STATUS  RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, uint *Priority, RPC_CSTR *Annotation);
//C      RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName);
RPC_STATUS  RpcNsProfileDeleteW(uint ProfileNameSyntax, RPC_WSTR ProfileName);
//C      RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_WSTR MemberName,unsigned long Priority,RPC_WSTR Annotation);
RPC_STATUS  RpcNsProfileEltAddW(uint ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, uint MemberNameSyntax, RPC_WSTR MemberName, uint Priority, RPC_WSTR Annotation);
//C      RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,RPC_IF_ID *IfId,unsigned long MemberNameSyntax,RPC_WSTR MemberName);
RPC_STATUS  RpcNsProfileEltRemoveW(uint ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, uint MemberNameSyntax, RPC_WSTR MemberName);
//C      RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax,RPC_WSTR ProfileName,unsigned long InquiryType,RPC_IF_ID *IfId,unsigned long VersOption,unsigned long MemberNameSyntax,RPC_WSTR MemberName,RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsProfileEltInqBeginW(uint ProfileNameSyntax, RPC_WSTR ProfileName, uint InquiryType, RPC_IF_ID *IfId, uint VersOption, uint MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext,RPC_IF_ID *IfId,RPC_WSTR *MemberName,unsigned long *Priority,RPC_WSTR *Annotation);
RPC_STATUS  RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, uint *Priority, RPC_WSTR *Annotation);
//C      RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsEntryObjectInqBeginA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsEntryObjectInqBeginW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext,UUID *ObjUuid);
RPC_STATUS  RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid);
//C      RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext);
RPC_STATUS  RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext);
//C      RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_CSTR *ExpandedName);
RPC_STATUS  RpcNsEntryExpandNameA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName);
//C      RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID *IfId,unsigned long VersOption,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS  RpcNsMgmtBindingUnexportA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, uint VersOption, UUID_VECTOR *ObjectUuidVec);
//C      RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax,RPC_CSTR EntryName);
RPC_STATUS  RpcNsMgmtEntryCreateA(uint EntryNameSyntax, RPC_CSTR EntryName);
//C      RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax,RPC_CSTR EntryName);
RPC_STATUS  RpcNsMgmtEntryDeleteA(uint EntryNameSyntax, RPC_CSTR EntryName);
//C      RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_ID_VECTOR **IfIdVec);
RPC_STATUS  RpcNsMgmtEntryInqIfIdsA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec);
//C      RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle,unsigned long ExpirationAge);
RPC_STATUS  RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, uint ExpirationAge);
//C      RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge);
RPC_STATUS  RpcNsMgmtInqExpAge(uint *ExpirationAge);
//C      RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge);
RPC_STATUS  RpcNsMgmtSetExpAge(uint ExpirationAge);
//C      RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_WSTR *ExpandedName);
RPC_STATUS  RpcNsEntryExpandNameW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName);
//C      RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID *IfId,unsigned long VersOption,UUID_VECTOR *ObjectUuidVec);
RPC_STATUS  RpcNsMgmtBindingUnexportW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, uint VersOption, UUID_VECTOR *ObjectUuidVec);
//C      RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax,RPC_WSTR EntryName);
RPC_STATUS  RpcNsMgmtEntryCreateW(uint EntryNameSyntax, RPC_WSTR EntryName);
//C      RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax,RPC_WSTR EntryName);
RPC_STATUS  RpcNsMgmtEntryDeleteW(uint EntryNameSyntax, RPC_WSTR EntryName);
//C      RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_ID_VECTOR **IfIdVec);
RPC_STATUS  RpcNsMgmtEntryInqIfIdsW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec);
//C      RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax,RPC_CSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,RPC_NS_HANDLE *ImportContext);
RPC_STATUS  RpcNsBindingImportBeginA(uint EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext);
//C      RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax,RPC_WSTR EntryName,RPC_IF_HANDLE IfSpec,UUID *ObjUuid,RPC_NS_HANDLE *ImportContext);
RPC_STATUS  RpcNsBindingImportBeginW(uint EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext);
//C      RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext,RPC_BINDING_HANDLE *Binding);
RPC_STATUS  RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding);
//C      RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext);
RPC_STATUS  RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext);
//C      RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec,RPC_BINDING_HANDLE *Binding);
RPC_STATUS  RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding);
//C       typedef enum _RPC_NOTIFICATION_TYPES {
//C         RpcNotificationTypeNone,RpcNotificationTypeEvent,RpcNotificationTypeApc,RpcNotificationTypeIoc,RpcNotificationTypeHwnd,
//C         RpcNotificationTypeCallback
//C       } RPC_NOTIFICATION_TYPES;
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,
    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback,
}
alias _RPC_NOTIFICATION_TYPES RPC_NOTIFICATION_TYPES;
//C       typedef enum _RPC_ASYNC_EVENT {
//C         RpcCallComplete,RpcSendComplete,RpcReceiveComplete
//C       } RPC_ASYNC_EVENT;
enum _RPC_ASYNC_EVENT
{
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
}
alias _RPC_ASYNC_EVENT RPC_ASYNC_EVENT;
//C       struct _RPC_ASYNC_STATE;
//C       typedef void RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync,void *Context,RPC_ASYNC_EVENT Event);
alias void function(_RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event)RPCNOTIFICATION_ROUTINE;
//C       typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
alias void  function(_RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event)PFN_RPCNOTIFICATION_ROUTINE;
//C       typedef struct _RPC_ASYNC_STATE {
//C         unsigned int Size;
//C         unsigned long Signature;
//C         long Lock;
//C         unsigned long Flags;
//C         void *StubInfo;
//C         void *UserInfo;
//C         void *RuntimeInfo;
//C         RPC_ASYNC_EVENT Event;
//C         RPC_NOTIFICATION_TYPES NotificationType;
//C         union {
//C           struct {
//C      PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
//C      HANDLE hThread;
//C           } APC;
struct _N119
{
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    HANDLE hThread;
}
//C           struct {
//C      HANDLE hIOPort;
//C      DWORD dwNumberOfBytesTransferred;
//C      DWORD_PTR dwCompletionKey;
//C      LPOVERLAPPED lpOverlapped;
//C           } IOC;
struct _N120
{
    HANDLE hIOPort;
    DWORD dwNumberOfBytesTransferred;
    DWORD_PTR dwCompletionKey;
    LPOVERLAPPED lpOverlapped;
}
//C           struct {
//C      HWND hWnd;
//C      UINT Msg;
//C           } HWND;
struct _N121
{
    HWND hWnd;
    UINT Msg;
}
//C           HANDLE hEvent;
//C           PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
//C         } u;
union _N118
{
    _N119 APC;
    _N120 IOC;
    _N121 HWND;
    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
}
//C         LONG_PTR Reserved[4];
//C       } RPC_ASYNC_STATE,*PRPC_ASYNC_STATE;
struct _RPC_ASYNC_STATE
{
    uint Size;
    uint Signature;
    int Lock;
    uint Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;
    _N118 u;
    LONG_PTR [4]Reserved;
}
alias _RPC_ASYNC_STATE RPC_ASYNC_STATE;
alias _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;
//C        RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync,unsigned int Size);
RPC_STATUS  RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, uint Size);
//C        RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync);
RPC_STATUS  RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync);
//C        RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync);
RPC_STATUS  RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync);
//C        RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync,void *Reply);
RPC_STATUS  RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply);
//C        RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned long ExceptionCode);
RPC_STATUS  RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, uint ExceptionCode);
//C        RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync,WINBOOL fAbort);
RPC_STATUS  RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, WINBOOL fAbort);
//C        RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout);
RPC_STATUS  RpcAsyncCleanupThread(DWORD dwTimeout);
//C       typedef enum tagExtendedErrorParamTypes {
//C         eeptAnsiString = 1,eeptUnicodeString,eeptLongVal,eeptShortVal,eeptPointerVal,eeptNone,eeptBinary
//C       } ExtendedErrorParamTypes;
enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary,
}
alias tagExtendedErrorParamTypes ExtendedErrorParamTypes;
//C       typedef struct tagBinaryParam {
//C         void *Buffer;
//C         short Size;
//C       } BinaryParam;
struct tagBinaryParam
{
    void *Buffer;
    short Size;
}
alias tagBinaryParam BinaryParam;
//C       typedef struct tagRPC_EE_INFO_PARAM {
//C         ExtendedErrorParamTypes ParameterType;
//C         union {
//C           LPSTR AnsiString;
//C           LPWSTR UnicodeString;
//C           long LVal;
//C           short SVal;
//C           ULONGLONG PVal;
//C           BinaryParam BVal;
//C         } u;
union _N122
{
    LPSTR AnsiString;
    LPWSTR UnicodeString;
    int LVal;
    short SVal;
    ULONGLONG PVal;
    BinaryParam BVal;
}
//C       } RPC_EE_INFO_PARAM;
struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    _N122 u;
}
alias tagRPC_EE_INFO_PARAM RPC_EE_INFO_PARAM;
//C       typedef struct tagRPC_EXTENDED_ERROR_INFO {
//C         ULONG Version;
//C         LPWSTR ComputerName;
//C         ULONG ProcessID;
//C         union {
//C           SYSTEMTIME SystemTime;
//C           FILETIME FileTime;
//C         } u;
union _N123
{
    SYSTEMTIME SystemTime;
    FILETIME FileTime;
}
//C         ULONG GeneratingComponent;
//C         ULONG Status;
//C         USHORT DetectionLocation;
//C         USHORT Flags;
//C         int NumberOfParameters;
//C         RPC_EE_INFO_PARAM Parameters[4];
//C       } RPC_EXTENDED_ERROR_INFO;
struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    _N123 u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM [4]Parameters;
}
alias tagRPC_EXTENDED_ERROR_INFO RPC_EXTENDED_ERROR_INFO;
//C       typedef struct tagRPC_ERROR_ENUM_HANDLE {
//C         ULONG Signature;
//C         void *CurrentPos;
//C         void *Head;
//C       } RPC_ERROR_ENUM_HANDLE;
struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
}
alias tagRPC_ERROR_ENUM_HANDLE RPC_ERROR_ENUM_HANDLE;
//C        RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS  RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
//C        RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle,WINBOOL CopyStrings,RPC_EXTENDED_ERROR_INFO *ErrorInfo);
RPC_STATUS  RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, WINBOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo);
//C        RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS  RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
//C        RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS  RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
//C        RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle,int *Records);
RPC_STATUS  RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records);
//C        RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle,PVOID *ErrorBlob,size_t *BlobSize);
RPC_STATUS  RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize);
//C        RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob,size_t BlobSize,RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS  RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle);
//C        RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo);
RPC_STATUS  RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo);
//C        void RpcErrorClearInformation(void);
void  RpcErrorClearInformation();
//C        RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding,WINBOOL ImpersonateOnReturn,PVOID Reserved1,PLARGE_INTEGER pExpirationTime,LUID Reserved2,DWORD Reserved3,PVOID Reserved4,PVOID *pAuthzClientContext);
RPC_STATUS  RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, WINBOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext);
//C        RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext);
RPC_STATUS  RpcFreeAuthorizationContext(PVOID *pAuthzClientContext);
//C        RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext);
RPC_STATUS  RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext);
//C        RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle,PVOID UserContext);
RPC_STATUS  RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext);
//C       typedef struct tagRPC_CALL_ATTRIBUTES_V1_W {
//C         unsigned int Version;
//C         unsigned long Flags;
//C         unsigned long ServerPrincipalNameBufferLength;
//C         unsigned short *ServerPrincipalName;
//C         unsigned long ClientPrincipalNameBufferLength;
//C         unsigned short *ClientPrincipalName;
//C         unsigned long AuthenticationLevel;
//C         unsigned long AuthenticationService;
//C         WINBOOL NullSession;
//C       } RPC_CALL_ATTRIBUTES_V1_W;
struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    uint Version;
    uint Flags;
    uint ServerPrincipalNameBufferLength;
    ushort *ServerPrincipalName;
    uint ClientPrincipalNameBufferLength;
    ushort *ClientPrincipalName;
    uint AuthenticationLevel;
    uint AuthenticationService;
    WINBOOL NullSession;
}
alias tagRPC_CALL_ATTRIBUTES_V1_W RPC_CALL_ATTRIBUTES_V1_W;
//C       typedef struct tagRPC_CALL_ATTRIBUTES_V1_A {
//C         unsigned int Version;
//C         unsigned long Flags;
//C         unsigned long ServerPrincipalNameBufferLength;
//C         unsigned char *ServerPrincipalName;
//C         unsigned long ClientPrincipalNameBufferLength;
//C         unsigned char *ClientPrincipalName;
//C         unsigned long AuthenticationLevel;
//C         unsigned long AuthenticationService;
//C         WINBOOL NullSession;
//C       } RPC_CALL_ATTRIBUTES_V1_A;
struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    uint Version;
    uint Flags;
    uint ServerPrincipalNameBufferLength;
    ubyte *ServerPrincipalName;
    uint ClientPrincipalNameBufferLength;
    ubyte *ClientPrincipalName;
    uint AuthenticationLevel;
    uint AuthenticationService;
    WINBOOL NullSession;
}
alias tagRPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES_V1_A;
//C        RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding,void *RpcCallAttributes);
RPC_STATUS  RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes);
//C        RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding,void *RpcCallAttributes);
RPC_STATUS  RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes);
//C       typedef RPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES;
alias RPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES;
//C       RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message,PRPC_ASYNC_STATE pAsync);
RPC_STATUS  I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync);
//C       RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync,unsigned long ExceptionCode);
RPC_STATUS  I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, uint ExceptionCode);
//C       int I_RpcExceptionFilter(unsigned long ExceptionCode);
int  I_RpcExceptionFilter(uint ExceptionCode);
//C     typedef union _RPC_ASYNC_NOTIFICATION_INFO {
//C       struct {
//C         PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
//C         HANDLE hThread;
//C       } APC;
struct _N124
{
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
    HANDLE hThread;
}
//C       struct {
//C         HANDLE hIOPort;
//C         DWORD dwNumberOfBytesTransferred;
//C         DWORD_PTR dwCompletionKey;
//C         LPOVERLAPPED lpOverlapped;
//C       } IOC;
struct _N125
{
    HANDLE hIOPort;
    DWORD dwNumberOfBytesTransferred;
    DWORD_PTR dwCompletionKey;
    LPOVERLAPPED lpOverlapped;
}
//C       struct {
//C         HWND hWnd;
//C         UINT Msg;
//C       } HWND;
struct _N126
{
    HWND hWnd;
    UINT Msg;
}
//C       HANDLE hEvent;
//C       PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
//C     } RPC_ASYNC_NOTIFICATION_INFO,*PRPC_ASYNC_NOTIFICATION_INFO;
union _RPC_ASYNC_NOTIFICATION_INFO
{
    _N124 APC;
    _N125 IOC;
    _N126 HWND;
    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
}
alias _RPC_ASYNC_NOTIFICATION_INFO RPC_ASYNC_NOTIFICATION_INFO;
alias _RPC_ASYNC_NOTIFICATION_INFO *PRPC_ASYNC_NOTIFICATION_INFO;
//C     RPC_STATUS RpcBindingBind(
//C       PRPC_ASYNC_STATE pAsync,
//C       RPC_BINDING_HANDLE Binding,
//C       RPC_IF_HANDLE IfSpec
//C     );
RPC_STATUS  RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);
//C     RPC_STATUS RpcBindingUnbind(
//C       RPC_BINDING_HANDLE Binding
//C     );
RPC_STATUS  RpcBindingUnbind(RPC_BINDING_HANDLE Binding);
//C     typedef enum _RpcCallType {
//C       rctInvalid,
//C       rctNormal,
//C       rctTraining,
//C       rctGuaranteed
//C     } RpcCallType;
enum _RpcCallType
{
    rctInvalid,
    rctNormal,
    rctTraining,
    rctGuaranteed,
}
alias _RpcCallType RpcCallType;
//C     typedef enum _RpcLocalAddressFormat {
//C       rlafInvalid,
//C       rlafIPv4,
//C       rlafIPv6
//C     } RpcLocalAddressFormat;
enum _RpcLocalAddressFormat
{
    rlafInvalid,
    rlafIPv4,
    rlafIPv6,
}
alias _RpcLocalAddressFormat RpcLocalAddressFormat;
//C     typedef enum _RPC_NOTIFICATIONS {
//C       RpcNotificationCallNone = 0,
//C       RpcNotificationClientDisconnect = 1,
//C       RpcNotificationCallCancel = 2
//C     } RPC_NOTIFICATIONS;
enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone,
    RpcNotificationClientDisconnect,
    RpcNotificationCallCancel,
}
alias _RPC_NOTIFICATIONS RPC_NOTIFICATIONS;
//C     typedef enum _RpcCallClientLocality {
//C       rcclInvalid,
//C       rcclLocal,
//C       rcclRemote,
//C       rcclClientUnknownLocality
//C     } RpcCallClientLocality;
enum _RpcCallClientLocality
{
    rcclInvalid,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality,
}
alias _RpcCallClientLocality RpcCallClientLocality;
//C     RPC_STATUS RpcServerSubscribeForNotification(
//C       RPC_BINDING_HANDLE Binding,
//C       DWORD Notification,
//C       RPC_NOTIFICATION_TYPES NotificationType,
//C       RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
//C     );
RPC_STATUS  RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, DWORD Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo);
//C     RPC_STATUS RpcServerUnsubscribeForNotification(
//C       RPC_BINDING_HANDLE Binding,
//C       RPC_NOTIFICATIONS Notification,
//C       unsigned long *NotificationsQueued
//C     );
RPC_STATUS  RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, uint *NotificationsQueued);
//C       struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;
struct HDROP__
{
    int unused;
}
alias HDROP__ *HDROP;
//C       extern  UINT DragQueryFileA(HDROP,UINT,LPSTR,UINT);
UINT  DragQueryFileA(HDROP , UINT , LPSTR , UINT );
//C       extern  UINT DragQueryFileW(HDROP,UINT,LPWSTR,UINT);
UINT  DragQueryFileW(HDROP , UINT , LPWSTR , UINT );
//C       extern  WINBOOL DragQueryPoint(HDROP,LPPOINT);
WINBOOL  DragQueryPoint(HDROP , LPPOINT );
//C       extern  void DragFinish(HDROP);
void  DragFinish(HDROP );
//C       extern  void DragAcceptFiles(HWND,WINBOOL);
void  DragAcceptFiles(HWND , WINBOOL );
//C       extern  HINSTANCE ShellExecuteA(HWND hwnd,LPCSTR lpOperation,LPCSTR lpFile,LPCSTR lpParameters,LPCSTR lpDirectory,INT nShowCmd);
HINSTANCE  ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
//C       extern  HINSTANCE ShellExecuteW(HWND hwnd,LPCWSTR lpOperation,LPCWSTR lpFile,LPCWSTR lpParameters,LPCWSTR lpDirectory,INT nShowCmd);
HINSTANCE  ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);
//C       extern  HINSTANCE FindExecutableA(LPCSTR lpFile,LPCSTR lpDirectory,LPSTR lpResult);
HINSTANCE  FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
//C       extern  HINSTANCE FindExecutableW(LPCWSTR lpFile,LPCWSTR lpDirectory,LPWSTR lpResult);
HINSTANCE  FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);
//C       extern  LPWSTR * CommandLineToArgvW(LPCWSTR lpCmdLine,int*pNumArgs);
LPWSTR * CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs);
//C       extern  INT ShellAboutA(HWND hWnd,LPCSTR szApp,LPCSTR szOtherStuff,HICON hIcon);
INT  ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
//C       extern  INT ShellAboutW(HWND hWnd,LPCWSTR szApp,LPCWSTR szOtherStuff,HICON hIcon);
INT  ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);
//C       extern  HICON DuplicateIcon(HINSTANCE hInst,HICON hIcon);
HICON  DuplicateIcon(HINSTANCE hInst, HICON hIcon);
//C       extern  HICON ExtractAssociatedIconA(HINSTANCE hInst,LPSTR lpIconPath,LPWORD lpiIcon);
HICON  ExtractAssociatedIconA(HINSTANCE hInst, LPSTR lpIconPath, LPWORD lpiIcon);
//C       extern  HICON ExtractAssociatedIconW(HINSTANCE hInst,LPWSTR lpIconPath,LPWORD lpiIcon);
HICON  ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR lpIconPath, LPWORD lpiIcon);
//C       extern  HICON ExtractAssociatedIconExA(HINSTANCE hInst,LPSTR lpIconPath,LPWORD lpiIconIndex,LPWORD lpiIconId);
HICON  ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR lpIconPath, LPWORD lpiIconIndex, LPWORD lpiIconId);
//C       extern  HICON ExtractAssociatedIconExW(HINSTANCE hInst,LPWSTR lpIconPath,LPWORD lpiIconIndex,LPWORD lpiIconId);
HICON  ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR lpIconPath, LPWORD lpiIconIndex, LPWORD lpiIconId);
//C       extern  HICON ExtractIconA(HINSTANCE hInst,LPCSTR lpszExeFileName,UINT nIconIndex);
HICON  ExtractIconA(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
//C       extern  HICON ExtractIconW(HINSTANCE hInst,LPCWSTR lpszExeFileName,UINT nIconIndex);
HICON  ExtractIconW(HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);
//C       typedef struct _DRAGINFOA {
//C         UINT uSize;
//C         POINT pt;
//C         WINBOOL fNC;
//C         LPSTR lpFileList;
//C         DWORD grfKeyState;
//C       } DRAGINFOA,*LPDRAGINFOA;
struct _DRAGINFOA
{
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPSTR lpFileList;
    DWORD grfKeyState;
}
alias _DRAGINFOA DRAGINFOA;
alias _DRAGINFOA *LPDRAGINFOA;
//C       typedef struct _DRAGINFOW {
//C         UINT uSize;
//C         POINT pt;
//C         WINBOOL fNC;
//C         LPWSTR lpFileList;
//C         DWORD grfKeyState;
//C       } DRAGINFOW,*LPDRAGINFOW;
struct _DRAGINFOW
{
    UINT uSize;
    POINT pt;
    WINBOOL fNC;
    LPWSTR lpFileList;
    DWORD grfKeyState;
}
alias _DRAGINFOW DRAGINFOW;
alias _DRAGINFOW *LPDRAGINFOW;
//C       typedef DRAGINFOA DRAGINFO;
alias DRAGINFOA DRAGINFO;
//C       typedef LPDRAGINFOA LPDRAGINFO;
alias LPDRAGINFOA LPDRAGINFO;
//C       typedef struct _AppBarData {
//C         DWORD cbSize;
//C         HWND hWnd;
//C         UINT uCallbackMessage;
//C         UINT uEdge;
//C         RECT rc;
//C         LPARAM lParam;
//C       } APPBARDATA,*PAPPBARDATA;
struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
}
alias _AppBarData APPBARDATA;
alias _AppBarData *PAPPBARDATA;
//C       extern  UINT_PTR SHAppBarMessage(DWORD dwMessage,PAPPBARDATA pData);
UINT_PTR  SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData);
//C       extern  DWORD DoEnvironmentSubstA(LPSTR szString,UINT cchString);
DWORD  DoEnvironmentSubstA(LPSTR szString, UINT cchString);
//C       extern  DWORD DoEnvironmentSubstW(LPWSTR szString,UINT cchString);
DWORD  DoEnvironmentSubstW(LPWSTR szString, UINT cchString);
//C       extern  UINT ExtractIconExA(LPCSTR lpszFile,int nIconIndex,HICON *phiconLarge,HICON *phiconSmall,UINT nIcons);
UINT  ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
//C       extern  UINT ExtractIconExW(LPCWSTR lpszFile,int nIconIndex,HICON *phiconLarge,HICON *phiconSmall,UINT nIcons);
UINT  ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
//C       typedef WORD FILEOP_FLAGS;
alias WORD FILEOP_FLAGS;
//C       typedef WORD PRINTEROP_FLAGS;
alias WORD PRINTEROP_FLAGS;
//C       typedef struct _SHFILEOPSTRUCTA {
//C         HWND hwnd;
//C         UINT wFunc;
//C         LPCSTR pFrom;
//C         LPCSTR pTo;
//C         FILEOP_FLAGS fFlags;
//C         WINBOOL fAnyOperationsAborted;
//C         LPVOID hNameMappings;
//C         LPCSTR lpszProgressTitle;
//C       } SHFILEOPSTRUCTA,*LPSHFILEOPSTRUCTA;
struct _SHFILEOPSTRUCTA
{
    HWND hwnd;
    UINT wFunc;
    LPCSTR pFrom;
    LPCSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    LPCSTR lpszProgressTitle;
}
alias _SHFILEOPSTRUCTA SHFILEOPSTRUCTA;
alias _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;
//C       typedef struct _SHFILEOPSTRUCTW {
//C         HWND hwnd;
//C         UINT wFunc;
//C         LPCWSTR pFrom;
//C         LPCWSTR pTo;
//C         FILEOP_FLAGS fFlags;
//C         WINBOOL fAnyOperationsAborted;
//C         LPVOID hNameMappings;
//C         LPCWSTR lpszProgressTitle;
//C       } SHFILEOPSTRUCTW,*LPSHFILEOPSTRUCTW;
struct _SHFILEOPSTRUCTW
{
    HWND hwnd;
    UINT wFunc;
    LPCWSTR pFrom;
    LPCWSTR pTo;
    FILEOP_FLAGS fFlags;
    WINBOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    LPCWSTR lpszProgressTitle;
}
alias _SHFILEOPSTRUCTW SHFILEOPSTRUCTW;
alias _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;
//C       typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
alias SHFILEOPSTRUCTA SHFILEOPSTRUCT;
//C       typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
alias LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
//C       extern  int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
int  SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
//C       extern  int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);
int  SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);
//C       extern  void SHFreeNameMappings(HANDLE hNameMappings);
void  SHFreeNameMappings(HANDLE hNameMappings);
//C       typedef struct _SHNAMEMAPPINGA {
//C         LPSTR pszOldPath;
//C         LPSTR pszNewPath;
//C         int cchOldPath;
//C         int cchNewPath;
//C       } SHNAMEMAPPINGA,*LPSHNAMEMAPPINGA;
struct _SHNAMEMAPPINGA
{
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
}
alias _SHNAMEMAPPINGA SHNAMEMAPPINGA;
alias _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA;
//C       typedef struct _SHNAMEMAPPINGW {
//C         LPWSTR pszOldPath;
//C         LPWSTR pszNewPath;
//C         int cchOldPath;
//C         int cchNewPath;
//C       } SHNAMEMAPPINGW,*LPSHNAMEMAPPINGW;
struct _SHNAMEMAPPINGW
{
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
}
alias _SHNAMEMAPPINGW SHNAMEMAPPINGW;
alias _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW;
//C       typedef SHNAMEMAPPINGA SHNAMEMAPPING;
alias SHNAMEMAPPINGA SHNAMEMAPPING;
//C       typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
alias LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
//C       typedef struct _SHELLEXECUTEINFOA {
//C         DWORD cbSize;
//C         ULONG fMask;
//C         HWND hwnd;
//C         LPCSTR lpVerb;
//C         LPCSTR lpFile;
//C         LPCSTR lpParameters;
//C         LPCSTR lpDirectory;
//C         int nShow;
//C         HINSTANCE hInstApp;
//C         LPVOID lpIDList;
//C         LPCSTR lpClass;
//C         HKEY hkeyClass;
//C         DWORD dwHotKey;
//C          union {
//C           HANDLE hIcon;
//C           HANDLE hMonitor;
//C         } ;
union _N127
{
    HANDLE hIcon;
    HANDLE hMonitor;
}
//C         HANDLE hProcess;
//C       } SHELLEXECUTEINFOA,*LPSHELLEXECUTEINFOA;
struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    LPVOID lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    HANDLE hIcon;
    HANDLE hMonitor;
    HANDLE hProcess;
}
alias _SHELLEXECUTEINFOA SHELLEXECUTEINFOA;
alias _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA;
//C       typedef struct _SHELLEXECUTEINFOW {
//C         DWORD cbSize;
//C         ULONG fMask;
//C         HWND hwnd;
//C         LPCWSTR lpVerb;
//C         LPCWSTR lpFile;
//C         LPCWSTR lpParameters;
//C         LPCWSTR lpDirectory;
//C         int nShow;
//C         HINSTANCE hInstApp;
//C         LPVOID lpIDList;
//C         LPCWSTR lpClass;
//C         HKEY hkeyClass;
//C         DWORD dwHotKey;
//C          union {
//C           HANDLE hIcon;
//C           HANDLE hMonitor;
//C         } ;
union _N128
{
    HANDLE hIcon;
    HANDLE hMonitor;
}
//C         HANDLE hProcess;
//C       } SHELLEXECUTEINFOW,*LPSHELLEXECUTEINFOW;
struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    LPVOID lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    HANDLE hIcon;
    HANDLE hMonitor;
    HANDLE hProcess;
}
alias _SHELLEXECUTEINFOW SHELLEXECUTEINFOW;
alias _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW;
//C       typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
alias SHELLEXECUTEINFOA SHELLEXECUTEINFO;
//C       typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
alias LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
//C       extern  WINBOOL ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
WINBOOL  ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
//C       extern  WINBOOL ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);
WINBOOL  ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);
//C       extern  void WinExecErrorA(HWND hwnd,int error,LPCSTR lpstrFileName,LPCSTR lpstrTitle);
void  WinExecErrorA(HWND hwnd, int error, LPCSTR lpstrFileName, LPCSTR lpstrTitle);
//C       extern  void WinExecErrorW(HWND hwnd,int error,LPCWSTR lpstrFileName,LPCWSTR lpstrTitle);
void  WinExecErrorW(HWND hwnd, int error, LPCWSTR lpstrFileName, LPCWSTR lpstrTitle);
//C       typedef struct _SHCREATEPROCESSINFOW {
//C         DWORD cbSize;
//C         ULONG fMask;
//C         HWND hwnd;
//C         LPCWSTR pszFile;
//C         LPCWSTR pszParameters;
//C         LPCWSTR pszCurrentDirectory;
//C         HANDLE hUserToken;
//C         LPSECURITY_ATTRIBUTES lpProcessAttributes;
//C         LPSECURITY_ATTRIBUTES lpThreadAttributes;
//C         WINBOOL bInheritHandles;
//C         DWORD dwCreationFlags;
//C         LPSTARTUPINFOW lpStartupInfo;
//C         LPPROCESS_INFORMATION lpProcessInformation;
//C       } SHCREATEPROCESSINFOW,*PSHCREATEPROCESSINFOW;
struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    WINBOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
}
alias _SHCREATEPROCESSINFOW SHCREATEPROCESSINFOW;
alias _SHCREATEPROCESSINFOW *PSHCREATEPROCESSINFOW;
//C       extern  WINBOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi);
WINBOOL  SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi);
//C       typedef struct _SHQUERYRBINFO {
//C         DWORD cbSize;
//C          long long i64Size;
//C          long long i64NumItems;
//C       } SHQUERYRBINFO,*LPSHQUERYRBINFO;
struct _SHQUERYRBINFO
{
    DWORD cbSize;
    long i64Size;
    long i64NumItems;
}
alias _SHQUERYRBINFO SHQUERYRBINFO;
alias _SHQUERYRBINFO *LPSHQUERYRBINFO;
//C       extern  HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath,LPSHQUERYRBINFO pSHQueryRBInfo);
HRESULT  SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
//C       extern  HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath,LPSHQUERYRBINFO pSHQueryRBInfo);
HRESULT  SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
//C       extern  HRESULT SHEmptyRecycleBinA(HWND hwnd,LPCSTR pszRootPath,DWORD dwFlags);
HRESULT  SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
//C       extern  HRESULT SHEmptyRecycleBinW(HWND hwnd,LPCWSTR pszRootPath,DWORD dwFlags);
HRESULT  SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
//C       typedef struct _NOTIFYICONDATAA {
//C         DWORD cbSize;
//C         HWND hWnd;
//C         UINT uID;
//C         UINT uFlags;
//C         UINT uCallbackMessage;
//C         HICON hIcon;
//C         CHAR szTip[128];
//C         DWORD dwState;
//C         DWORD dwStateMask;
//C         CHAR szInfo[256];
//C          union {
//C           UINT uTimeout;
//C           UINT uVersion;
//C         } ;
union _N129
{
    UINT uTimeout;
    UINT uVersion;
}
//C         CHAR szInfoTitle[64];
//C         DWORD dwInfoFlags;
//C         GUID guidItem;
//C       } NOTIFYICONDATAA,*PNOTIFYICONDATAA;
struct _NOTIFYICONDATAA
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    CHAR [128]szTip;
    DWORD dwState;
    DWORD dwStateMask;
    CHAR [256]szInfo;
    UINT uTimeout;
    UINT uVersion;
    CHAR [64]szInfoTitle;
    DWORD dwInfoFlags;
    GUID guidItem;
}
alias _NOTIFYICONDATAA NOTIFYICONDATAA;
alias _NOTIFYICONDATAA *PNOTIFYICONDATAA;
//C       typedef struct _NOTIFYICONDATAW {
//C         DWORD cbSize;
//C         HWND hWnd;
//C         UINT uID;
//C         UINT uFlags;
//C         UINT uCallbackMessage;
//C         HICON hIcon;
//C         WCHAR szTip[128];
//C         DWORD dwState;
//C         DWORD dwStateMask;
//C         WCHAR szInfo[256];
//C          union {
//C           UINT uTimeout;
//C           UINT uVersion;
//C         } ;
union _N130
{
    UINT uTimeout;
    UINT uVersion;
}
//C         WCHAR szInfoTitle[64];
//C         DWORD dwInfoFlags;
//C         GUID guidItem;
//C       } NOTIFYICONDATAW,*PNOTIFYICONDATAW;
struct _NOTIFYICONDATAW
{
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR [128]szTip;
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR [256]szInfo;
    UINT uTimeout;
    UINT uVersion;
    WCHAR [64]szInfoTitle;
    DWORD dwInfoFlags;
    GUID guidItem;
}
alias _NOTIFYICONDATAW NOTIFYICONDATAW;
alias _NOTIFYICONDATAW *PNOTIFYICONDATAW;
//C       typedef NOTIFYICONDATAA NOTIFYICONDATA;
alias NOTIFYICONDATAA NOTIFYICONDATA;
//C       typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
alias PNOTIFYICONDATAA PNOTIFYICONDATA;
//C       extern  WINBOOL Shell_NotifyIconA(DWORD dwMessage,PNOTIFYICONDATAA lpData);
WINBOOL  Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
//C       extern  WINBOOL Shell_NotifyIconW(DWORD dwMessage,PNOTIFYICONDATAW lpData);
WINBOOL  Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);
//C       typedef struct _SHFILEINFOA {
//C         HICON hIcon;
//C         int iIcon;
//C         DWORD dwAttributes;
//C         CHAR szDisplayName[260];
//C         CHAR szTypeName[80];
//C       } SHFILEINFOA;
struct _SHFILEINFOA
{
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    CHAR [260]szDisplayName;
    CHAR [80]szTypeName;
}
alias _SHFILEINFOA SHFILEINFOA;
//C       typedef struct _SHFILEINFOW {
//C         HICON hIcon;
//C         int iIcon;
//C         DWORD dwAttributes;
//C         WCHAR szDisplayName[260];
//C         WCHAR szTypeName[80];
//C       } SHFILEINFOW;
struct _SHFILEINFOW
{
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    WCHAR [260]szDisplayName;
    WCHAR [80]szTypeName;
}
alias _SHFILEINFOW SHFILEINFOW;
//C       typedef SHFILEINFOA SHFILEINFO;
alias SHFILEINFOA SHFILEINFO;
//C       extern  DWORD_PTR SHGetFileInfoA(LPCSTR pszPath,DWORD dwFileAttributes,SHFILEINFOA *psfi,UINT cbFileInfo,UINT uFlags);
DWORD_PTR  SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags);
//C       extern  DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath,DWORD dwFileAttributes,SHFILEINFOW *psfi,UINT cbFileInfo,UINT uFlags);
DWORD_PTR  SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);
//C       extern  WINBOOL SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName,ULARGE_INTEGER *pulFreeBytesAvailableToCaller,ULARGE_INTEGER *pulTotalNumberOfBytes,ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
WINBOOL  SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
//C       extern  WINBOOL SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName,ULARGE_INTEGER *pulFreeBytesAvailableToCaller,ULARGE_INTEGER *pulTotalNumberOfBytes,ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
WINBOOL  SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes);
//C       extern  WINBOOL SHGetNewLinkInfoA(LPCSTR pszLinkTo,LPCSTR pszDir,LPSTR pszName,WINBOOL *pfMustCopy,UINT uFlags);
WINBOOL  SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, WINBOOL *pfMustCopy, UINT uFlags);
//C       extern  WINBOOL SHGetNewLinkInfoW(LPCWSTR pszLinkTo,LPCWSTR pszDir,LPWSTR pszName,WINBOOL *pfMustCopy,UINT uFlags);
WINBOOL  SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, WINBOOL *pfMustCopy, UINT uFlags);
//C       extern  WINBOOL SHInvokePrinterCommandA(HWND hwnd,UINT uAction,LPCSTR lpBuf1,LPCSTR lpBuf2,WINBOOL fModal);
WINBOOL  SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, WINBOOL fModal);
//C       extern  WINBOOL SHInvokePrinterCommandW(HWND hwnd,UINT uAction,LPCWSTR lpBuf1,LPCWSTR lpBuf2,WINBOOL fModal);
WINBOOL  SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, WINBOOL fModal);
//C       extern  HRESULT SHLoadNonloadedIconOverlayIdentifiers(void);
HRESULT  SHLoadNonloadedIconOverlayIdentifiers();
//C       extern  HRESULT SHIsFileAvailableOffline(LPCWSTR pwszPath,LPDWORD pdwStatus);
HRESULT  SHIsFileAvailableOffline(LPCWSTR pwszPath, LPDWORD pdwStatus);
//C       extern  HRESULT SHSetLocalizedName(LPWSTR pszPath,LPCWSTR pszResModule,int idsRes);
HRESULT  SHSetLocalizedName(LPWSTR pszPath, LPCWSTR pszResModule, int idsRes);
//C       int  ShellMessageBoxA(HINSTANCE hAppInst,HWND hWnd,LPCSTR lpcText,LPCSTR lpcTitle,UINT fuStyle,...);
int  ShellMessageBoxA(HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle,...);
//C       int  ShellMessageBoxW(HINSTANCE hAppInst,HWND hWnd,LPCWSTR lpcText,LPCWSTR lpcTitle,UINT fuStyle,...);
int  ShellMessageBoxW(HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle,...);
//C       extern  WINBOOL IsLFNDriveA(LPCSTR pszPath);
WINBOOL  IsLFNDriveA(LPCSTR pszPath);
//C       extern  WINBOOL IsLFNDriveW(LPCWSTR pszPath);
WINBOOL  IsLFNDriveW(LPCWSTR pszPath);
//C       extern HRESULT SHEnumerateUnreadMailAccountsA(HKEY hKeyUser,DWORD dwIndex,LPSTR pszMailAddress,int cchMailAddress);
HRESULT  SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
//C       extern HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser,DWORD dwIndex,LPWSTR pszMailAddress,int cchMailAddress);
HRESULT  SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);
//C       extern HRESULT SHGetUnreadMailCountA(HKEY hKeyUser,LPCSTR pszMailAddress,DWORD *pdwCount,FILETIME *pFileTime,LPSTR pszShellExecuteCommand,int cchShellExecuteCommand);
HRESULT  SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
//C       extern HRESULT SHGetUnreadMailCountW(HKEY hKeyUser,LPCWSTR pszMailAddress,DWORD *pdwCount,FILETIME *pFileTime,LPWSTR pszShellExecuteCommand,int cchShellExecuteCommand);
HRESULT  SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);
//C       extern HRESULT SHSetUnreadMailCountA(LPCSTR pszMailAddress,DWORD dwCount,LPCSTR pszShellExecuteCommand);
HRESULT  SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
//C       extern HRESULT SHSetUnreadMailCountW(LPCWSTR pszMailAddress,DWORD dwCount,LPCWSTR pszShellExecuteCommand);
HRESULT  SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
//C       extern WINBOOL SHTestTokenMembership(HANDLE hToken,ULONG ulRID);
WINBOOL  SHTestTokenMembership(HANDLE hToken, ULONG ulRID);
//C       extern HRESULT SHGetImageList(int iImageList,const IID *const riid,void **ppvObj);
HRESULT  SHGetImageList(int iImageList, IID *riid, void **ppvObj);
//C       typedef HRESULT ( *PFNCANSHAREFOLDERW)(LPCWSTR pszPath);
alias HRESULT  function(LPCWSTR pszPath)PFNCANSHAREFOLDERW;
//C       typedef HRESULT ( *PFNSHOWSHAREFOLDERUIW)(HWND hwndParent,LPCWSTR pszPath);
alias HRESULT  function(HWND hwndParent, LPCWSTR pszPath)PFNSHOWSHAREFOLDERUIW;
//C     typedef struct _SHSTOCKICONINFO {
//C         DWORD cbSize;
//C         HICON hIcon;
//C         int iSysImageIndex;
//C         int iIcon;
//C         WCHAR szPath[260];
//C     } SHSTOCKICONINFO;
struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int iSysImageIndex;
    int iIcon;
    WCHAR [260]szPath;
}
alias _SHSTOCKICONINFO SHSTOCKICONINFO;
//C     typedef enum SHSTOCKICONID {
//C         SIID_DOCNOASSOC = 0,
//C         SIID_DOCASSOC = 1,
//C         SIID_APPLICATION = 2,
//C         SIID_FOLDER = 3,
//C         SIID_FOLDEROPEN = 4,
//C         SIID_DRIVE525 = 5,
//C         SIID_DRIVE35 = 6,
//C         SIID_DRIVEREMOVE = 7,
//C         SIID_DRIVEFIXED = 8,
//C         SIID_DRIVENET = 9,
//C         SIID_DRIVENETDISABLED = 10,
//C         SIID_DRIVECD = 11,
//C         SIID_DRIVERAM = 12,
//C         SIID_WORLD = 13,
//C         SIID_SERVER = 15,
//C         SIID_PRINTER = 16,
//C         SIID_MYNETWORK = 17,
//C         SIID_FIND = 22,
//C         SIID_HELP = 23,
//C         SIID_SHARE = 28,
//C         SIID_LINK = 29,
//C         SIID_SLOWFILE = 30,
//C         SIID_RECYCLER = 31,
//C         SIID_RECYCLERFULL = 32,
//C         SIID_MEDIACDAUDIO = 40,
//C         SIID_LOCK = 47,
//C         SIID_AUTOLIST = 49,
//C         SIID_PRINTERNET = 50,
//C         SIID_SERVERSHARE = 51,
//C         SIID_PRINTERFAX = 52,
//C         SIID_PRINTERFAXNET = 53,
//C         SIID_PRINTERFILE = 54,
//C         SIID_STACK = 55,
//C         SIID_MEDIASVCD = 56,
//C         SIID_STUFFEDFOLDER = 57,
//C         SIID_DRIVEUNKNOWN = 58,
//C         SIID_DRIVEDVD = 59,
//C         SIID_MEDIADVD = 60,
//C         SIID_MEDIADVDRAM = 61,
//C         SIID_MEDIADVDRW = 62,
//C         SIID_MEDIADVDR = 63,
//C         SIID_MEDIADVDROM = 64,
//C         SIID_MEDIACDAUDIOPLUS = 65,
//C         SIID_MEDIACDRW = 66,
//C         SIID_MEDIACDR = 67,
//C         SIID_MEDIACDBURN = 68,
//C         SIID_MEDIABLANKCD = 69,
//C         SIID_MEDIACDROM = 70,
//C         SIID_AUDIOFILES = 71,
//C         SIID_IMAGEFILES = 72,
//C         SIID_VIDEOFILES = 73,
//C         SIID_MIXEDFILES = 74,
//C         SIID_FOLDERBACK = 75,
//C         SIID_FOLDERFRONT = 76,
//C         SIID_SHIELD = 77,
//C         SIID_WARNING = 78,
//C         SIID_INFO = 79,
//C         SIID_ERROR = 80,
//C         SIID_KEY = 81,
//C         SIID_SOFTWARE = 82,
//C         SIID_RENAME = 83,
//C         SIID_DELETE = 84,
//C         SIID_MEDIAAUDIODVD = 85,
//C         SIID_MEDIAMOVIEDVD = 86,
//C         SIID_MEDIAENHANCEDCD = 87,
//C         SIID_MEDIAENHANCEDDVD = 88,
//C         SIID_MEDIAHDDVD = 89,
//C         SIID_MEDIABLURAY = 90,
//C         SIID_MEDIAVCD = 91,
//C         SIID_MEDIADVDPLUSR = 92,
//C         SIID_MEDIADVDPLUSRW = 93,
//C         SIID_DESKTOPPC = 94,
//C         SIID_MOBILEPC = 95,
//C         SIID_USERS = 96,
//C         SIID_MEDIASMARTMEDIA = 97,
//C         SIID_MEDIACOMPACTFLASH = 98,
//C         SIID_DEVICECELLPHONE = 99,
//C         SIID_DEVICECAMERA = 100,
//C         SIID_DEVICEVIDEOCAMERA = 101,
//C         SIID_DEVICEAUDIOPLAYER = 102,
//C         SIID_NETWORKCONNECT = 103,
//C         SIID_INTERNET = 104,
//C         SIID_ZIPFILE = 105,
//C         SIID_SETTINGS = 106,
//C         SIID_DRIVEHDDVD = 132,
//C         SIID_DRIVEBD = 133,
//C         SIID_MEDIAHDDVDROM = 134,
//C         SIID_MEDIAHDDVDR = 135,
//C         SIID_MEDIAHDDVDRAM = 136,
//C         SIID_MEDIABDROM = 137,
//C         SIID_MEDIABDR = 138,
//C         SIID_MEDIABDRE = 139,
//C         SIID_CLUSTEREDDRIVE = 140,
//C         SIID_MAX_ICONS = 174
//C     } SHSTOCKICONID;
enum SHSTOCKICONID
{
    SIID_DOCNOASSOC,
    SIID_DOCASSOC,
    SIID_APPLICATION,
    SIID_FOLDER,
    SIID_FOLDEROPEN,
    SIID_DRIVE525,
    SIID_DRIVE35,
    SIID_DRIVEREMOVE,
    SIID_DRIVEFIXED,
    SIID_DRIVENET,
    SIID_DRIVENETDISABLED,
    SIID_DRIVECD,
    SIID_DRIVERAM,
    SIID_WORLD,
    SIID_SERVER = 15,
    SIID_PRINTER,
    SIID_MYNETWORK,
    SIID_FIND = 22,
    SIID_HELP,
    SIID_SHARE = 28,
    SIID_LINK,
    SIID_SLOWFILE,
    SIID_RECYCLER,
    SIID_RECYCLERFULL,
    SIID_MEDIACDAUDIO = 40,
    SIID_LOCK = 47,
    SIID_AUTOLIST = 49,
    SIID_PRINTERNET,
    SIID_SERVERSHARE,
    SIID_PRINTERFAX,
    SIID_PRINTERFAXNET,
    SIID_PRINTERFILE,
    SIID_STACK,
    SIID_MEDIASVCD,
    SIID_STUFFEDFOLDER,
    SIID_DRIVEUNKNOWN,
    SIID_DRIVEDVD,
    SIID_MEDIADVD,
    SIID_MEDIADVDRAM,
    SIID_MEDIADVDRW,
    SIID_MEDIADVDR,
    SIID_MEDIADVDROM,
    SIID_MEDIACDAUDIOPLUS,
    SIID_MEDIACDRW,
    SIID_MEDIACDR,
    SIID_MEDIACDBURN,
    SIID_MEDIABLANKCD,
    SIID_MEDIACDROM,
    SIID_AUDIOFILES,
    SIID_IMAGEFILES,
    SIID_VIDEOFILES,
    SIID_MIXEDFILES,
    SIID_FOLDERBACK,
    SIID_FOLDERFRONT,
    SIID_SHIELD,
    SIID_WARNING,
    SIID_INFO,
    SIID_ERROR,
    SIID_KEY,
    SIID_SOFTWARE,
    SIID_RENAME,
    SIID_DELETE,
    SIID_MEDIAAUDIODVD,
    SIID_MEDIAMOVIEDVD,
    SIID_MEDIAENHANCEDCD,
    SIID_MEDIAENHANCEDDVD,
    SIID_MEDIAHDDVD,
    SIID_MEDIABLURAY,
    SIID_MEDIAVCD,
    SIID_MEDIADVDPLUSR,
    SIID_MEDIADVDPLUSRW,
    SIID_DESKTOPPC,
    SIID_MOBILEPC,
    SIID_USERS,
    SIID_MEDIASMARTMEDIA,
    SIID_MEDIACOMPACTFLASH,
    SIID_DEVICECELLPHONE,
    SIID_DEVICECAMERA,
    SIID_DEVICEVIDEOCAMERA,
    SIID_DEVICEAUDIOPLAYER,
    SIID_NETWORKCONNECT,
    SIID_INTERNET,
    SIID_ZIPFILE,
    SIID_SETTINGS,
    SIID_DRIVEHDDVD = 132,
    SIID_DRIVEBD,
    SIID_MEDIAHDDVDROM,
    SIID_MEDIAHDDVDR,
    SIID_MEDIAHDDVDRAM,
    SIID_MEDIABDROM,
    SIID_MEDIABDR,
    SIID_MEDIABDRE,
    SIID_CLUSTEREDDRIVE,
    SIID_MAX_ICONS = 174,
}
//C     typedef struct _PERF_DATA_BLOCK {
//C       WCHAR Signature[4];
//C       DWORD LittleEndian;
//C       DWORD Version;
//C       DWORD Revision;
//C       DWORD TotalByteLength;
//C       DWORD HeaderLength;
//C       DWORD NumObjectTypes;
//C       LONG DefaultObject;
//C       SYSTEMTIME SystemTime;
//C       LARGE_INTEGER PerfTime;
//C       LARGE_INTEGER PerfFreq;
//C       LARGE_INTEGER PerfTime100nSec;
//C       DWORD SystemNameLength;
//C       DWORD SystemNameOffset;
//C     } PERF_DATA_BLOCK,*PPERF_DATA_BLOCK;
struct _PERF_DATA_BLOCK
{
    WCHAR [4]Signature;
    DWORD LittleEndian;
    DWORD Version;
    DWORD Revision;
    DWORD TotalByteLength;
    DWORD HeaderLength;
    DWORD NumObjectTypes;
    LONG DefaultObject;
    SYSTEMTIME SystemTime;
    LARGE_INTEGER PerfTime;
    LARGE_INTEGER PerfFreq;
    LARGE_INTEGER PerfTime100nSec;
    DWORD SystemNameLength;
    DWORD SystemNameOffset;
}
alias _PERF_DATA_BLOCK PERF_DATA_BLOCK;
alias _PERF_DATA_BLOCK *PPERF_DATA_BLOCK;
//C     typedef struct _PERF_OBJECT_TYPE {
//C       DWORD TotalByteLength;
//C       DWORD DefinitionLength;
//C       DWORD HeaderLength;
//C       DWORD ObjectNameTitleIndex;
//C       DWORD ObjectNameTitle;
//C       DWORD ObjectHelpTitleIndex;
//C       DWORD ObjectHelpTitle;
//C       DWORD DetailLevel;
//C       DWORD NumCounters;
//C       LONG DefaultCounter;
//C       LONG NumInstances;
//C       DWORD CodePage;
//C       LARGE_INTEGER PerfTime;
//C       LARGE_INTEGER PerfFreq;
//C     } PERF_OBJECT_TYPE,*PPERF_OBJECT_TYPE;
struct _PERF_OBJECT_TYPE
{
    DWORD TotalByteLength;
    DWORD DefinitionLength;
    DWORD HeaderLength;
    DWORD ObjectNameTitleIndex;
    DWORD ObjectNameTitle;
    DWORD ObjectHelpTitleIndex;
    DWORD ObjectHelpTitle;
    DWORD DetailLevel;
    DWORD NumCounters;
    LONG DefaultCounter;
    LONG NumInstances;
    DWORD CodePage;
    LARGE_INTEGER PerfTime;
    LARGE_INTEGER PerfFreq;
}
alias _PERF_OBJECT_TYPE PERF_OBJECT_TYPE;
alias _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE;
//C     typedef struct _PERF_COUNTER_DEFINITION {
//C       DWORD ByteLength;
//C       DWORD CounterNameTitleIndex;
//C       DWORD CounterNameTitle;
//C       DWORD CounterHelpTitleIndex;
//C       DWORD CounterHelpTitle;
//C       LONG DefaultScale;
//C       DWORD DetailLevel;
//C       DWORD CounterType;
//C       DWORD CounterSize;
//C       DWORD CounterOffset;
//C     } PERF_COUNTER_DEFINITION,*PPERF_COUNTER_DEFINITION;
struct _PERF_COUNTER_DEFINITION
{
    DWORD ByteLength;
    DWORD CounterNameTitleIndex;
    DWORD CounterNameTitle;
    DWORD CounterHelpTitleIndex;
    DWORD CounterHelpTitle;
    LONG DefaultScale;
    DWORD DetailLevel;
    DWORD CounterType;
    DWORD CounterSize;
    DWORD CounterOffset;
}
alias _PERF_COUNTER_DEFINITION PERF_COUNTER_DEFINITION;
alias _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION;
//C     typedef struct _PERF_INSTANCE_DEFINITION {
//C       DWORD ByteLength;
//C       DWORD ParentObjectTitleIndex;
//C       DWORD ParentObjectInstance;
//C       LONG UniqueID;
//C       DWORD NameOffset;
//C       DWORD NameLength;
//C     } PERF_INSTANCE_DEFINITION,*PPERF_INSTANCE_DEFINITION;
struct _PERF_INSTANCE_DEFINITION
{
    DWORD ByteLength;
    DWORD ParentObjectTitleIndex;
    DWORD ParentObjectInstance;
    LONG UniqueID;
    DWORD NameOffset;
    DWORD NameLength;
}
alias _PERF_INSTANCE_DEFINITION PERF_INSTANCE_DEFINITION;
alias _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION;
//C     typedef struct _PERF_COUNTER_BLOCK {
//C       DWORD ByteLength;
//C     } PERF_COUNTER_BLOCK,*PPERF_COUNTER_BLOCK;
struct _PERF_COUNTER_BLOCK
{
    DWORD ByteLength;
}
alias _PERF_COUNTER_BLOCK PERF_COUNTER_BLOCK;
alias _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK;
//C     typedef DWORD ( PM_OPEN_PROC)(LPWSTR);
alias DWORD function(LPWSTR )PM_OPEN_PROC;
//C     typedef DWORD ( PM_COLLECT_PROC)(LPWSTR,LPVOID *,LPDWORD,LPDWORD);
alias DWORD function(LPWSTR , LPVOID *, LPDWORD , LPDWORD )PM_COLLECT_PROC;
//C     typedef DWORD ( PM_CLOSE_PROC)(void);
alias DWORD function()PM_CLOSE_PROC;
//C     typedef DWORD ( PM_QUERY_PROC)(LPDWORD,LPVOID *,LPDWORD,LPDWORD);
alias DWORD function(LPDWORD , LPVOID *, LPDWORD , LPDWORD )PM_QUERY_PROC;
//C     struct timeval
//C     {
//C      long tv_sec;
//C      long tv_usec;
//C     };
struct timeval
{
    int tv_sec;
    int tv_usec;
}
//C     typedef unsigned char u_char;
alias ubyte u_char;
//C     typedef unsigned short u_short;
alias ushort u_short;
//C     typedef unsigned int u_int;
alias uint u_int;
//C     typedef unsigned long u_long;
alias uint u_long;
//C     typedef unsigned long long u_int64;
alias ulong u_int64;
//C     typedef struct in_addr {
//C       union {
//C         struct { u_char s_b1,s_b2,s_b3,s_b4; } S_un_b;
struct _N132
{
    u_char s_b1;
    u_char s_b2;
    u_char s_b3;
    u_char s_b4;
}
//C         struct { u_short s_w1,s_w2; } S_un_w;
struct _N133
{
    u_short s_w1;
    u_short s_w2;
}
//C         u_long S_addr;
//C       } S_un;
union _N131
{
    _N132 S_un_b;
    _N133 S_un_w;
    u_long S_addr;
}
//C     } IN_ADDR,*PIN_ADDR,*LPIN_ADDR;
struct in_addr
{
    _N131 S_un;
}
alias in_addr IN_ADDR;
alias in_addr *PIN_ADDR;
alias in_addr *LPIN_ADDR;
//C     typedef UINT_PTR SOCKET;
alias UINT_PTR SOCKET;
//C     typedef struct fd_set
//C     {
//C      u_int fd_count;
//C      SOCKET fd_array[64];
//C     } fd_set;
struct fd_set
{
    u_int fd_count;
    SOCKET [64]fd_array;
}
//C     int __WSAFDIsSet(SOCKET,fd_set *);
int  __WSAFDIsSet(SOCKET , fd_set *);
//C     typedef struct fd_set FD_SET;
alias fd_set FD_SET;
//C     typedef struct fd_set *PFD_SET;
alias fd_set *PFD_SET;
//C     typedef struct fd_set *LPFD_SET;
alias fd_set *LPFD_SET;
//C     struct hostent {
//C      char *h_name;
//C      char **h_aliases;
//C      short h_addrtype;
//C      short h_length;
//C      char **h_addr_list;
//C     };
struct hostent
{
    char *h_name;
    char **h_aliases;
    short h_addrtype;
    short h_length;
    char **h_addr_list;
}
//C     struct netent {
//C      char *n_name;
//C      char **n_aliases;
//C      short n_addrtype;
//C      u_long n_net;
//C     };
struct netent
{
    char *n_name;
    char **n_aliases;
    short n_addrtype;
    u_long n_net;
}
//C     struct servent {
//C      char *s_name;
//C      char **s_aliases;
//C      char *s_proto;
//C      short s_port;
//C     };
struct servent
{
    char *s_name;
    char **s_aliases;
    char *s_proto;
    short s_port;
}
//C     struct protoent {
//C      char *p_name;
//C      char **p_aliases;
//C      short p_proto;
//C     };
struct protoent
{
    char *p_name;
    char **p_aliases;
    short p_proto;
}
//C     struct sockproto {
//C      u_short sp_family;
//C      u_short sp_protocol;
//C     };
struct sockproto
{
    u_short sp_family;
    u_short sp_protocol;
}
//C     struct linger {
//C      u_short l_onoff;
//C      u_short l_linger;
//C     };
struct linger
{
    u_short l_onoff;
    u_short l_linger;
}
//C     struct sockaddr {
//C      u_short sa_family;
//C      char sa_data[14];
//C     };
struct sockaddr
{
    u_short sa_family;
    char [14]sa_data;
}
//C     struct sockaddr_in {
//C      short sin_family;
//C      u_short sin_port;
//C      struct in_addr sin_addr;
//C      char sin_zero[8];
//C     };
struct sockaddr_in
{
    short sin_family;
    u_short sin_port;
    in_addr sin_addr;
    char [8]sin_zero;
}
//C     typedef struct hostent HOSTENT;
alias hostent HOSTENT;
//C     typedef struct hostent *PHOSTENT;
alias hostent *PHOSTENT;
//C     typedef struct hostent *LPHOSTENT;
alias hostent *LPHOSTENT;
//C     typedef struct servent SERVENT;
alias servent SERVENT;
//C     typedef struct servent *PSERVENT;
alias servent *PSERVENT;
//C     typedef struct servent *LPSERVENT;
alias servent *LPSERVENT;
//C     typedef struct protoent PROTOENT;
alias protoent PROTOENT;
//C     typedef struct protoent *PPROTOENT;
alias protoent *PPROTOENT;
//C     typedef struct protoent *LPPROTOENT;
alias protoent *LPPROTOENT;
//C     typedef struct sockaddr SOCKADDR;
alias sockaddr SOCKADDR;
//C     typedef struct sockaddr *PSOCKADDR;
alias sockaddr *PSOCKADDR;
//C     typedef struct sockaddr *LPSOCKADDR;
alias sockaddr *LPSOCKADDR;
//C     typedef struct sockaddr_in SOCKADDR_IN;
alias sockaddr_in SOCKADDR_IN;
//C     typedef struct sockaddr_in *PSOCKADDR_IN;
alias sockaddr_in *PSOCKADDR_IN;
//C     typedef struct sockaddr_in *LPSOCKADDR_IN;
alias sockaddr_in *LPSOCKADDR_IN;
//C     typedef struct linger LINGER;
alias linger LINGER;
//C     typedef struct linger *PLINGER;
alias linger *PLINGER;
//C     typedef struct linger *LPLINGER;
alias linger *LPLINGER;
//C     typedef struct timeval TIMEVAL;
alias timeval TIMEVAL;
//C     typedef struct timeval *PTIMEVAL;
alias timeval *PTIMEVAL;
//C     typedef struct timeval *LPTIMEVAL;
alias timeval *LPTIMEVAL;
//C     struct ip_mreq {
//C      struct in_addr imr_multiaddr;
//C      struct in_addr imr_interface;
//C     };
struct ip_mreq
{
    in_addr imr_multiaddr;
    in_addr imr_interface;
}
//C     typedef struct WSAData {
//C      WORD wVersion;
//C      WORD wHighVersion;
//C      unsigned short iMaxSockets;
//C      unsigned short iMaxUdpDg;
//C      char *lpVendorInfo;
//C      char szDescription[256 +1];
//C      char szSystemStatus[128 +1];
//C     } WSADATA,*LPWSADATA;
struct WSAData
{
    WORD wVersion;
    WORD wHighVersion;
    ushort iMaxSockets;
    ushort iMaxUdpDg;
    char *lpVendorInfo;
    char [257]szDescription;
    char [129]szSystemStatus;
}
alias WSAData WSADATA;
alias WSAData *LPWSADATA;
//C     typedef struct _TRANSMIT_FILE_BUFFERS {
//C      LPVOID Head;
//C      DWORD HeadLength;
//C      LPVOID Tail;
//C      DWORD TailLength;
//C     } TRANSMIT_FILE_BUFFERS,*PTRANSMIT_FILE_BUFFERS,*LPTRANSMIT_FILE_BUFFERS;
struct _TRANSMIT_FILE_BUFFERS
{
    LPVOID Head;
    DWORD HeadLength;
    LPVOID Tail;
    DWORD TailLength;
}
alias _TRANSMIT_FILE_BUFFERS TRANSMIT_FILE_BUFFERS;
alias _TRANSMIT_FILE_BUFFERS *PTRANSMIT_FILE_BUFFERS;
alias _TRANSMIT_FILE_BUFFERS *LPTRANSMIT_FILE_BUFFERS;
//C        SOCKET accept(SOCKET s,struct sockaddr *addr,int *addrlen);
SOCKET  accept(SOCKET s, sockaddr *addr, int *addrlen);
//C        int bind(SOCKET s,const struct sockaddr *name,int namelen);
int  bind(SOCKET s, sockaddr *name, int namelen);
//C        int closesocket(SOCKET s);
int  closesocket(SOCKET s);
//C        int connect(SOCKET s,const struct sockaddr *name,int namelen);
int  connect(SOCKET s, sockaddr *name, int namelen);
//C        int ioctlsocket(SOCKET s,long cmd,u_long *argp);
int  ioctlsocket(SOCKET s, int cmd, u_long *argp);
//C        int getpeername(SOCKET s,struct sockaddr *name,int *namelen);
int  getpeername(SOCKET s, sockaddr *name, int *namelen);
//C        int getsockname(SOCKET s,struct sockaddr *name,int *namelen);
int  getsockname(SOCKET s, sockaddr *name, int *namelen);
//C        int getsockopt(SOCKET s,int level,int optname,char *optval,int *optlen);
int  getsockopt(SOCKET s, int level, int optname, char *optval, int *optlen);
//C        u_long htonl(u_long hostlong);
u_long  htonl(u_long hostlong);
//C        u_short htons(u_short hostshort);
u_short  htons(u_short hostshort);
//C        unsigned long inet_addr(const char *cp);
uint  inet_addr(char *cp);
//C        char * inet_ntoa(struct in_addr);
char * inet_ntoa(in_addr);
//C        int listen(SOCKET s,int backlog);
int  listen(SOCKET s, int backlog);
//C        u_long ntohl(u_long netlong);
u_long  ntohl(u_long netlong);
//C        u_short ntohs(u_short netshort);
u_short  ntohs(u_short netshort);
//C        int recv(SOCKET s,char *buf,int len,int flags);
int  recv(SOCKET s, char *buf, int len, int flags);
//C        int recvfrom(SOCKET s,char *buf,int len,int flags,struct sockaddr *from,int *fromlen);
int  recvfrom(SOCKET s, char *buf, int len, int flags, sockaddr *from, int *fromlen);
//C        int select(int nfds,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,const PTIMEVAL timeout);
int  select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, PTIMEVAL timeout);
//C        int send(SOCKET s,const char *buf,int len,int flags);
int  send(SOCKET s, char *buf, int len, int flags);
//C        int sendto(SOCKET s,const char *buf,int len,int flags,const struct sockaddr *to,int tolen);
int  sendto(SOCKET s, char *buf, int len, int flags, sockaddr *to, int tolen);
//C        int setsockopt(SOCKET s,int level,int optname,const char *optval,int optlen);
int  setsockopt(SOCKET s, int level, int optname, char *optval, int optlen);
//C        int shutdown(SOCKET s,int how);
int  shutdown(SOCKET s, int how);
//C        SOCKET socket(int af,int type,int protocol);
SOCKET  socket(int af, int type, int protocol);
//C        struct hostent * gethostbyaddr(const char *addr,int len,int type);
hostent * gethostbyaddr(char *addr, int len, int type);
//C        struct hostent * gethostbyname(const char *name);
hostent * gethostbyname(char *name);
//C        int gethostname(char *name,int namelen);
int  gethostname(char *name, int namelen);
//C        struct servent * getservbyport(int port,const char *proto);
servent * getservbyport(int port, char *proto);
//C        struct servent * getservbyname(const char *name,const char *proto);
servent * getservbyname(char *name, char *proto);
//C        struct protoent * getprotobynumber(int number);
protoent * getprotobynumber(int number);
//C        struct protoent * getprotobyname(const char *name);
protoent * getprotobyname(char *name);
//C        int WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData);
int  WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData);
//C        int WSACleanup(void);
int  WSACleanup();
//C        void WSASetLastError(int iError);
void  WSASetLastError(int iError);
//C        int WSAGetLastError(void);
int  WSAGetLastError();
//C        WINBOOL WSAIsBlocking(void);
WINBOOL  WSAIsBlocking();
//C        int WSAUnhookBlockingHook(void);
int  WSAUnhookBlockingHook();
//C        FARPROC WSASetBlockingHook(FARPROC lpBlockFunc);
FARPROC  WSASetBlockingHook(FARPROC lpBlockFunc);
//C        int WSACancelBlockingCall(void);
int  WSACancelBlockingCall();
//C        HANDLE WSAAsyncGetServByName(HWND hWnd,u_int wMsg,const char *name,const char *proto,char *buf,int buflen);
HANDLE  WSAAsyncGetServByName(HWND hWnd, u_int wMsg, char *name, char *proto, char *buf, int buflen);
//C        HANDLE WSAAsyncGetServByPort(HWND hWnd,u_int wMsg,int port,const char *proto,char *buf,int buflen);
HANDLE  WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port, char *proto, char *buf, int buflen);
//C        HANDLE WSAAsyncGetProtoByName(HWND hWnd,u_int wMsg,const char *name,char *buf,int buflen);
HANDLE  WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg, char *name, char *buf, int buflen);
//C        HANDLE WSAAsyncGetProtoByNumber(HWND hWnd,u_int wMsg,int number,char *buf,int buflen);
HANDLE  WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg, int number, char *buf, int buflen);
//C        HANDLE WSAAsyncGetHostByName(HWND hWnd,u_int wMsg,const char *name,char *buf,int buflen);
HANDLE  WSAAsyncGetHostByName(HWND hWnd, u_int wMsg, char *name, char *buf, int buflen);
//C        HANDLE WSAAsyncGetHostByAddr(HWND hWnd,u_int wMsg,const char *addr,int len,int type,char *buf,int buflen);
HANDLE  WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg, char *addr, int len, int type, char *buf, int buflen);
//C        int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle);
int  WSACancelAsyncRequest(HANDLE hAsyncTaskHandle);
//C        int WSAAsyncSelect(SOCKET s,HWND hWnd,u_int wMsg,long lEvent);
int  WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg, int lEvent);
//C       int WSARecvEx(SOCKET s,char *buf,int len,int *flags);
int  WSARecvEx(SOCKET s, char *buf, int len, int *flags);
//C       WINBOOL TransmitFile(SOCKET hSocket,HANDLE hFile,DWORD nNumberOfBytesToWrite,DWORD nNumberOfBytesPerSend,LPOVERLAPPED lpOverlapped,LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,DWORD dwReserved);
WINBOOL  TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved);
//C       WINBOOL AcceptEx(SOCKET sListenSocket,SOCKET sAcceptSocket,PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,LPDWORD lpdwBytesReceived,LPOVERLAPPED lpOverlapped);
WINBOOL  AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped);
//C       void GetAcceptExSockaddrs(PVOID lpOutputBuffer,DWORD dwReceiveDataLength,DWORD dwLocalAddressLength,DWORD dwRemoteAddressLength,struct sockaddr **LocalSockaddr,LPINT LocalSockaddrLength,struct sockaddr **RemoteSockaddr,LPINT RemoteSockaddrLength);
void  GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength);
//C       typedef unsigned int ALG_ID;
alias uint ALG_ID;
//C       typedef ULONG_PTR HCRYPTKEY;
alias ULONG_PTR HCRYPTKEY;
//C       typedef ULONG_PTR HCRYPTPROV;
alias ULONG_PTR HCRYPTPROV;
//C       typedef ULONG_PTR HCRYPTHASH;
alias ULONG_PTR HCRYPTHASH;
//C       typedef struct _CMS_KEY_INFO {
//C         DWORD dwVersion;
//C         ALG_ID Algid;
//C         BYTE *pbOID;
//C         DWORD cbOID;
//C       } CMS_KEY_INFO,*PCMS_KEY_INFO;
struct _CMS_KEY_INFO
{
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
}
alias _CMS_KEY_INFO CMS_KEY_INFO;
alias _CMS_KEY_INFO *PCMS_KEY_INFO;
//C       typedef struct _HMAC_Info {
//C         ALG_ID HashAlgid;
//C         BYTE *pbInnerString;
//C         DWORD cbInnerString;
//C         BYTE *pbOuterString;
//C         DWORD cbOuterString;
//C       } HMAC_INFO,*PHMAC_INFO;
struct _HMAC_Info
{
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
}
alias _HMAC_Info HMAC_INFO;
alias _HMAC_Info *PHMAC_INFO;
//C       typedef struct _SCHANNEL_ALG {
//C         DWORD dwUse;
//C         ALG_ID Algid;
//C         DWORD cBits;
//C         DWORD dwFlags;
//C         DWORD dwReserved;
//C       } SCHANNEL_ALG,*PSCHANNEL_ALG;
struct _SCHANNEL_ALG
{
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
}
alias _SCHANNEL_ALG SCHANNEL_ALG;
alias _SCHANNEL_ALG *PSCHANNEL_ALG;
//C       typedef struct _PROV_ENUMALGS {
//C         ALG_ID aiAlgid;
//C         DWORD dwBitLen;
//C         DWORD dwNameLen;
//C         CHAR szName[20];
//C       } PROV_ENUMALGS;
struct _PROV_ENUMALGS
{
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR [20]szName;
}
alias _PROV_ENUMALGS PROV_ENUMALGS;
//C       typedef struct _PROV_ENUMALGS_EX {
//C         ALG_ID aiAlgid;
//C         DWORD dwDefaultLen;
//C         DWORD dwMinLen;
//C         DWORD dwMaxLen;
//C         DWORD dwProtocols;
//C         DWORD dwNameLen;
//C         CHAR szName[20];
//C         DWORD dwLongNameLen;
//C         CHAR szLongName[40];
//C       } PROV_ENUMALGS_EX;
struct _PROV_ENUMALGS_EX
{
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR [20]szName;
    DWORD dwLongNameLen;
    CHAR [40]szLongName;
}
alias _PROV_ENUMALGS_EX PROV_ENUMALGS_EX;
//C       typedef struct _PUBLICKEYSTRUC {
//C         BYTE bType;
//C         BYTE bVersion;
//C         WORD reserved;
//C         ALG_ID aiKeyAlg;
//C       } BLOBHEADER,PUBLICKEYSTRUC;
struct _PUBLICKEYSTRUC
{
    BYTE bType;
    BYTE bVersion;
    WORD reserved;
    ALG_ID aiKeyAlg;
}
alias _PUBLICKEYSTRUC BLOBHEADER;
alias _PUBLICKEYSTRUC PUBLICKEYSTRUC;
//C       typedef struct _RSAPUBKEY {
//C         DWORD magic;
//C         DWORD bitlen;
//C         DWORD pubexp;
//C       } RSAPUBKEY;
struct _RSAPUBKEY
{
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;
}
alias _RSAPUBKEY RSAPUBKEY;
//C       typedef struct _PUBKEY {
//C         DWORD magic;
//C         DWORD bitlen;
//C       } DHPUBKEY,DSSPUBKEY,KEAPUBKEY,TEKPUBKEY;
struct _PUBKEY
{
    DWORD magic;
    DWORD bitlen;
}
alias _PUBKEY DHPUBKEY;
alias _PUBKEY DSSPUBKEY;
alias _PUBKEY KEAPUBKEY;
alias _PUBKEY TEKPUBKEY;
//C       typedef struct _DSSSEED {
//C         DWORD counter;
//C         BYTE seed[20];
//C       } DSSSEED;
struct _DSSSEED
{
    DWORD counter;
    BYTE [20]seed;
}
alias _DSSSEED DSSSEED;
//C       typedef struct _PUBKEYVER3 {
//C         DWORD magic;
//C         DWORD bitlenP;
//C         DWORD bitlenQ;
//C         DWORD bitlenJ;
//C         DSSSEED DSSSeed;
//C       } DHPUBKEY_VER3,DSSPUBKEY_VER3;
struct _PUBKEYVER3
{
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DSSSEED DSSSeed;
}
alias _PUBKEYVER3 DHPUBKEY_VER3;
alias _PUBKEYVER3 DSSPUBKEY_VER3;
//C       typedef struct _PRIVKEYVER3 {
//C         DWORD magic;
//C         DWORD bitlenP;
//C         DWORD bitlenQ;
//C         DWORD bitlenJ;
//C         DWORD bitlenX;
//C         DSSSEED DSSSeed;
//C       } DHPRIVKEY_VER3,DSSPRIVKEY_VER3;
struct _PRIVKEYVER3
{
    DWORD magic;
    DWORD bitlenP;
    DWORD bitlenQ;
    DWORD bitlenJ;
    DWORD bitlenX;
    DSSSEED DSSSeed;
}
alias _PRIVKEYVER3 DHPRIVKEY_VER3;
alias _PRIVKEYVER3 DSSPRIVKEY_VER3;
//C       typedef struct _KEY_TYPE_SUBTYPE {
//C         DWORD dwKeySpec;
//C         GUID Type;
//C         GUID Subtype;
//C       } KEY_TYPE_SUBTYPE,*PKEY_TYPE_SUBTYPE;
struct _KEY_TYPE_SUBTYPE
{
    DWORD dwKeySpec;
    GUID Type;
    GUID Subtype;
}
alias _KEY_TYPE_SUBTYPE KEY_TYPE_SUBTYPE;
alias _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;
//C       typedef struct _CERT_FORTEZZA_DATA_PROP {
//C         unsigned char SerialNumber[8];
//C         int CertIndex;
//C         unsigned char CertLabel[36];
//C       } CERT_FORTEZZA_DATA_PROP;
struct _CERT_FORTEZZA_DATA_PROP
{
    ubyte [8]SerialNumber;
    int CertIndex;
    ubyte [36]CertLabel;
}
alias _CERT_FORTEZZA_DATA_PROP CERT_FORTEZZA_DATA_PROP;
//C       typedef struct _CRYPT_RC4_KEY_STATE {
//C         unsigned char Key[16];
//C         unsigned char SBox[256];
//C         unsigned char i;
//C         unsigned char j;
//C       } CRYPT_RC4_KEY_STATE,*PCRYPT_RC4_KEY_STATE;
struct _CRYPT_RC4_KEY_STATE
{
    ubyte [16]Key;
    ubyte [256]SBox;
    ubyte i;
    ubyte j;
}
alias _CRYPT_RC4_KEY_STATE CRYPT_RC4_KEY_STATE;
alias _CRYPT_RC4_KEY_STATE *PCRYPT_RC4_KEY_STATE;
//C       typedef struct _CRYPT_DES_KEY_STATE {
//C         unsigned char Key[8];
//C         unsigned char IV[8];
//C         unsigned char Feedback[8];
//C       } CRYPT_DES_KEY_STATE,*PCRYPT_DES_KEY_STATE;
struct _CRYPT_DES_KEY_STATE
{
    ubyte [8]Key;
    ubyte [8]IV;
    ubyte [8]Feedback;
}
alias _CRYPT_DES_KEY_STATE CRYPT_DES_KEY_STATE;
alias _CRYPT_DES_KEY_STATE *PCRYPT_DES_KEY_STATE;
//C       typedef struct _CRYPT_3DES_KEY_STATE {
//C         unsigned char Key[24];
//C         unsigned char IV[8];
//C         unsigned char Feedback[8];
//C       } CRYPT_3DES_KEY_STATE,*PCRYPT_3DES_KEY_STATE;
struct _CRYPT_3DES_KEY_STATE
{
    ubyte [24]Key;
    ubyte [8]IV;
    ubyte [8]Feedback;
}
alias _CRYPT_3DES_KEY_STATE CRYPT_3DES_KEY_STATE;
alias _CRYPT_3DES_KEY_STATE *PCRYPT_3DES_KEY_STATE;
//C       typedef struct _CRYPTOAPI_BLOB {
//C         DWORD cbData;
//C         BYTE *pbData;
//C       } CRYPT_INTEGER_BLOB,*PCRYPT_INTEGER_BLOB,CRYPT_UINT_BLOB,*PCRYPT_UINT_BLOB,CRYPT_OBJID_BLOB,*PCRYPT_OBJID_BLOB,CERT_NAME_BLOB,*PCERT_NAME_BLOB,CERT_RDN_VALUE_BLOB,*PCERT_RDN_VALUE_BLOB,CERT_BLOB,*PCERT_BLOB,CRL_BLOB,*PCRL_BLOB,DATA_BLOB,*PDATA_BLOB,CRYPT_DATA_BLOB,*PCRYPT_DATA_BLOB,CRYPT_HASH_BLOB,*PCRYPT_HASH_BLOB,CRYPT_DIGEST_BLOB,*PCRYPT_DIGEST_BLOB,CRYPT_DER_BLOB,*PCRYPT_DER_BLOB,CRYPT_ATTR_BLOB,*PCRYPT_ATTR_BLOB;
struct _CRYPTOAPI_BLOB
{
    DWORD cbData;
    BYTE *pbData;
}
alias _CRYPTOAPI_BLOB CRYPT_INTEGER_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_UINT_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_OBJID_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;
alias _CRYPTOAPI_BLOB CERT_NAME_BLOB;
alias _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;
alias _CRYPTOAPI_BLOB CERT_RDN_VALUE_BLOB;
alias _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;
alias _CRYPTOAPI_BLOB CERT_BLOB;
alias _CRYPTOAPI_BLOB *PCERT_BLOB;
alias _CRYPTOAPI_BLOB CRL_BLOB;
alias _CRYPTOAPI_BLOB *PCRL_BLOB;
alias _CRYPTOAPI_BLOB DATA_BLOB;
alias _CRYPTOAPI_BLOB *PDATA_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_DATA_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_HASH_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_DIGEST_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_DER_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;
alias _CRYPTOAPI_BLOB CRYPT_ATTR_BLOB;
alias _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;
//C       typedef struct _CMS_DH_KEY_INFO {
//C         DWORD dwVersion;
//C         ALG_ID Algid;
//C         LPSTR pszContentEncObjId;
//C         CRYPT_DATA_BLOB PubInfo;
//C         void *pReserved;
//C       } CMS_DH_KEY_INFO,*PCMS_DH_KEY_INFO;
struct _CMS_DH_KEY_INFO
{
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
}
alias _CMS_DH_KEY_INFO CMS_DH_KEY_INFO;
alias _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO;
//C        WINBOOL CryptAcquireContextA(HCRYPTPROV *phProv,LPCSTR szContainer,LPCSTR szProvider,DWORD dwProvType,DWORD dwFlags);
WINBOOL  CryptAcquireContextA(HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags);
//C        WINBOOL CryptAcquireContextW(HCRYPTPROV *phProv,LPCWSTR szContainer,LPCWSTR szProvider,DWORD dwProvType,DWORD dwFlags);
WINBOOL  CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags);
//C        WINBOOL CryptReleaseContext(HCRYPTPROV hProv,DWORD dwFlags);
WINBOOL  CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags);
//C        WINBOOL CryptGenKey(HCRYPTPROV hProv,ALG_ID Algid,DWORD dwFlags,HCRYPTKEY *phKey);
WINBOOL  CryptGenKey(HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey);
//C        WINBOOL CryptDeriveKey(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTHASH hBaseData,DWORD dwFlags,HCRYPTKEY *phKey);
WINBOOL  CryptDeriveKey(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey);
//C        WINBOOL CryptDestroyKey(HCRYPTKEY hKey);
WINBOOL  CryptDestroyKey(HCRYPTKEY hKey);
//C        WINBOOL CryptSetKeyParam(HCRYPTKEY hKey,DWORD dwParam,const BYTE *pbData,DWORD dwFlags);
WINBOOL  CryptSetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD dwFlags);
//C        WINBOOL CryptGetKeyParam(HCRYPTKEY hKey,DWORD dwParam,BYTE *pbData,DWORD *pdwDataLen,DWORD dwFlags);
WINBOOL  CryptGetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
//C        WINBOOL CryptSetHashParam(HCRYPTHASH hHash,DWORD dwParam,const BYTE *pbData,DWORD dwFlags);
WINBOOL  CryptSetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD dwFlags);
//C        WINBOOL CryptGetHashParam(HCRYPTHASH hHash,DWORD dwParam,BYTE *pbData,DWORD *pdwDataLen,DWORD dwFlags);
WINBOOL  CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
//C        WINBOOL CryptSetProvParam(HCRYPTPROV hProv,DWORD dwParam,const BYTE *pbData,DWORD dwFlags);
WINBOOL  CryptSetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD dwFlags);
//C        WINBOOL CryptGetProvParam(HCRYPTPROV hProv,DWORD dwParam,BYTE *pbData,DWORD *pdwDataLen,DWORD dwFlags);
WINBOOL  CryptGetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags);
//C        WINBOOL CryptGenRandom(HCRYPTPROV hProv,DWORD dwLen,BYTE *pbBuffer);
WINBOOL  CryptGenRandom(HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer);
//C        WINBOOL CryptGetUserKey(HCRYPTPROV hProv,DWORD dwKeySpec,HCRYPTKEY *phUserKey);
WINBOOL  CryptGetUserKey(HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey);
//C        WINBOOL CryptExportKey(HCRYPTKEY hKey,HCRYPTKEY hExpKey,DWORD dwBlobType,DWORD dwFlags,BYTE *pbData,DWORD *pdwDataLen);
WINBOOL  CryptExportKey(HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen);
//C        WINBOOL CryptImportKey(HCRYPTPROV hProv,const BYTE *pbData,DWORD dwDataLen,HCRYPTKEY hPubKey,DWORD dwFlags,HCRYPTKEY *phKey);
WINBOOL  CryptImportKey(HCRYPTPROV hProv, BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey);
//C        WINBOOL CryptEncrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,WINBOOL Final,DWORD dwFlags,BYTE *pbData,DWORD *pdwDataLen,DWORD dwBufLen);
WINBOOL  CryptEncrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, WINBOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen);
//C        WINBOOL CryptDecrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,WINBOOL Final,DWORD dwFlags,BYTE *pbData,DWORD *pdwDataLen);
WINBOOL  CryptDecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, WINBOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen);
//C        WINBOOL CryptCreateHash(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTKEY hKey,DWORD dwFlags,HCRYPTHASH *phHash);
WINBOOL  CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash);
//C        WINBOOL CryptHashData(HCRYPTHASH hHash,const BYTE *pbData,DWORD dwDataLen,DWORD dwFlags);
WINBOOL  CryptHashData(HCRYPTHASH hHash, BYTE *pbData, DWORD dwDataLen, DWORD dwFlags);
//C        WINBOOL CryptHashSessionKey(HCRYPTHASH hHash,HCRYPTKEY hKey,DWORD dwFlags);
WINBOOL  CryptHashSessionKey(HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags);
//C        WINBOOL CryptDestroyHash(HCRYPTHASH hHash);
WINBOOL  CryptDestroyHash(HCRYPTHASH hHash);
//C        WINBOOL CryptSignHashA(HCRYPTHASH hHash,DWORD dwKeySpec,LPCSTR szDescription,DWORD dwFlags,BYTE *pbSignature,DWORD *pdwSigLen);
WINBOOL  CryptSignHashA(HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen);
//C        WINBOOL CryptSignHashW(HCRYPTHASH hHash,DWORD dwKeySpec,LPCWSTR szDescription,DWORD dwFlags,BYTE *pbSignature,DWORD *pdwSigLen);
WINBOOL  CryptSignHashW(HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen);
//C        WINBOOL CryptVerifySignatureA(HCRYPTHASH hHash,const BYTE *pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCSTR szDescription,DWORD dwFlags);
WINBOOL  CryptVerifySignatureA(HCRYPTHASH hHash, BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags);
//C        WINBOOL CryptVerifySignatureW(HCRYPTHASH hHash,const BYTE *pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCWSTR szDescription,DWORD dwFlags);
WINBOOL  CryptVerifySignatureW(HCRYPTHASH hHash, BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags);
//C        WINBOOL CryptSetProviderA(LPCSTR pszProvName,DWORD dwProvType);
WINBOOL  CryptSetProviderA(LPCSTR pszProvName, DWORD dwProvType);
//C        WINBOOL CryptSetProviderW(LPCWSTR pszProvName,DWORD dwProvType);
WINBOOL  CryptSetProviderW(LPCWSTR pszProvName, DWORD dwProvType);
//C        WINBOOL CryptSetProviderExA(LPCSTR pszProvName,DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags);
WINBOOL  CryptSetProviderExA(LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags);
//C        WINBOOL CryptSetProviderExW(LPCWSTR pszProvName,DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags);
WINBOOL  CryptSetProviderExW(LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags);
//C        WINBOOL CryptGetDefaultProviderA(DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags,LPSTR pszProvName,DWORD *pcbProvName);
WINBOOL  CryptGetDefaultProviderA(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName);
//C        WINBOOL CryptGetDefaultProviderW(DWORD dwProvType,DWORD *pdwReserved,DWORD dwFlags,LPWSTR pszProvName,DWORD *pcbProvName);
WINBOOL  CryptGetDefaultProviderW(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName);
//C        WINBOOL CryptEnumProviderTypesA(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPSTR szTypeName,DWORD *pcbTypeName);
WINBOOL  CryptEnumProviderTypesA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName);
//C        WINBOOL CryptEnumProviderTypesW(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPWSTR szTypeName,DWORD *pcbTypeName);
WINBOOL  CryptEnumProviderTypesW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName);
//C        WINBOOL CryptEnumProvidersA(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPSTR szProvName,DWORD *pcbProvName);
WINBOOL  CryptEnumProvidersA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName);
//C        WINBOOL CryptEnumProvidersW(DWORD dwIndex,DWORD *pdwReserved,DWORD dwFlags,DWORD *pdwProvType,LPWSTR szProvName,DWORD *pcbProvName);
WINBOOL  CryptEnumProvidersW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName);
//C        WINBOOL CryptContextAddRef(HCRYPTPROV hProv,DWORD *pdwReserved,DWORD dwFlags);
WINBOOL  CryptContextAddRef(HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags);
//C        WINBOOL CryptDuplicateKey(HCRYPTKEY hKey,DWORD *pdwReserved,DWORD dwFlags,HCRYPTKEY *phKey);
WINBOOL  CryptDuplicateKey(HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey);
//C        WINBOOL CryptDuplicateHash(HCRYPTHASH hHash,DWORD *pdwReserved,DWORD dwFlags,HCRYPTHASH *phHash);
WINBOOL  CryptDuplicateHash(HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash);
//C       WINBOOL  GetEncSChannel(BYTE **pData,DWORD *dwDecSize);
WINBOOL  GetEncSChannel(BYTE **pData, DWORD *dwDecSize);
//C       typedef struct _CRYPT_BIT_BLOB {
//C         DWORD cbData;
//C         BYTE *pbData;
//C         DWORD cUnusedBits;
//C       } CRYPT_BIT_BLOB,*PCRYPT_BIT_BLOB;
struct _CRYPT_BIT_BLOB
{
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
}
alias _CRYPT_BIT_BLOB CRYPT_BIT_BLOB;
alias _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;
//C       typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
//C         LPSTR pszObjId;
//C         CRYPT_OBJID_BLOB Parameters;
//C       } CRYPT_ALGORITHM_IDENTIFIER,*PCRYPT_ALGORITHM_IDENTIFIER;
struct _CRYPT_ALGORITHM_IDENTIFIER
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
}
alias _CRYPT_ALGORITHM_IDENTIFIER CRYPT_ALGORITHM_IDENTIFIER;
alias _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;
//C       typedef struct _CRYPT_OBJID_TABLE {
//C         DWORD dwAlgId;
//C         LPCSTR pszObjId;
//C       } CRYPT_OBJID_TABLE,*PCRYPT_OBJID_TABLE;
struct _CRYPT_OBJID_TABLE
{
    DWORD dwAlgId;
    LPCSTR pszObjId;
}
alias _CRYPT_OBJID_TABLE CRYPT_OBJID_TABLE;
alias _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;
//C       typedef struct _CRYPT_HASH_INFO {
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         CRYPT_HASH_BLOB Hash;
//C       } CRYPT_HASH_INFO,*PCRYPT_HASH_INFO;
struct _CRYPT_HASH_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
}
alias _CRYPT_HASH_INFO CRYPT_HASH_INFO;
alias _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;
//C       typedef struct _CERT_EXTENSION {
//C         LPSTR pszObjId;
//C         WINBOOL fCritical;
//C         CRYPT_OBJID_BLOB Value;
//C       } CERT_EXTENSION,*PCERT_EXTENSION;
struct _CERT_EXTENSION
{
    LPSTR pszObjId;
    WINBOOL fCritical;
    CRYPT_OBJID_BLOB Value;
}
alias _CERT_EXTENSION CERT_EXTENSION;
alias _CERT_EXTENSION *PCERT_EXTENSION;
//C       typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
//C         LPSTR pszObjId;
//C         CRYPT_OBJID_BLOB Value;
//C       } CRYPT_ATTRIBUTE_TYPE_VALUE,*PCRYPT_ATTRIBUTE_TYPE_VALUE;
struct _CRYPT_ATTRIBUTE_TYPE_VALUE
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}
alias _CRYPT_ATTRIBUTE_TYPE_VALUE CRYPT_ATTRIBUTE_TYPE_VALUE;
alias _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;
//C       typedef struct _CRYPT_ATTRIBUTE {
//C         LPSTR pszObjId;
//C         DWORD cValue;
//C         PCRYPT_ATTR_BLOB rgValue;
//C       } CRYPT_ATTRIBUTE,*PCRYPT_ATTRIBUTE;
struct _CRYPT_ATTRIBUTE
{
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
}
alias _CRYPT_ATTRIBUTE CRYPT_ATTRIBUTE;
alias _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;
//C       typedef struct _CRYPT_ATTRIBUTES {
//C         DWORD cAttr;
//C         PCRYPT_ATTRIBUTE rgAttr;
//C       } CRYPT_ATTRIBUTES,*PCRYPT_ATTRIBUTES;
struct _CRYPT_ATTRIBUTES
{
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
}
alias _CRYPT_ATTRIBUTES CRYPT_ATTRIBUTES;
alias _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;
//C       typedef struct _CERT_RDN_ATTR {
//C         LPSTR pszObjId;
//C         DWORD dwValueType;
//C         CERT_RDN_VALUE_BLOB Value;
//C       } CERT_RDN_ATTR,*PCERT_RDN_ATTR;
struct _CERT_RDN_ATTR
{
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
}
alias _CERT_RDN_ATTR CERT_RDN_ATTR;
alias _CERT_RDN_ATTR *PCERT_RDN_ATTR;
//C       typedef struct _CERT_RDN {
//C         DWORD cRDNAttr;
//C         PCERT_RDN_ATTR rgRDNAttr;
//C       } CERT_RDN,*PCERT_RDN;
struct _CERT_RDN
{
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
}
alias _CERT_RDN CERT_RDN;
alias _CERT_RDN *PCERT_RDN;
//C       typedef struct _CERT_NAME_INFO {
//C         DWORD cRDN;
//C         PCERT_RDN rgRDN;
//C       } CERT_NAME_INFO,*PCERT_NAME_INFO;
struct _CERT_NAME_INFO
{
    DWORD cRDN;
    PCERT_RDN rgRDN;
}
alias _CERT_NAME_INFO CERT_NAME_INFO;
alias _CERT_NAME_INFO *PCERT_NAME_INFO;
//C       typedef struct _CERT_NAME_VALUE {
//C         DWORD dwValueType;
//C         CERT_RDN_VALUE_BLOB Value;
//C       } CERT_NAME_VALUE,*PCERT_NAME_VALUE;
struct _CERT_NAME_VALUE
{
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
}
alias _CERT_NAME_VALUE CERT_NAME_VALUE;
alias _CERT_NAME_VALUE *PCERT_NAME_VALUE;
//C       typedef struct _CERT_PUBLIC_KEY_INFO {
//C         CRYPT_ALGORITHM_IDENTIFIER Algorithm;
//C         CRYPT_BIT_BLOB PublicKey;
//C       } CERT_PUBLIC_KEY_INFO,*PCERT_PUBLIC_KEY_INFO;
struct _CERT_PUBLIC_KEY_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
}
alias _CERT_PUBLIC_KEY_INFO CERT_PUBLIC_KEY_INFO;
alias _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;
//C       typedef struct _CRYPT_PRIVATE_KEY_INFO{
//C         DWORD Version;
//C         CRYPT_ALGORITHM_IDENTIFIER Algorithm;
//C         CRYPT_DER_BLOB PrivateKey;
//C         PCRYPT_ATTRIBUTES pAttributes;
//C       } CRYPT_PRIVATE_KEY_INFO,*PCRYPT_PRIVATE_KEY_INFO;
struct _CRYPT_PRIVATE_KEY_INFO
{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
}
alias _CRYPT_PRIVATE_KEY_INFO CRYPT_PRIVATE_KEY_INFO;
alias _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO;
//C       typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {
//C         CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedPrivateKey;
//C       } CRYPT_ENCRYPTED_PRIVATE_KEY_INFO,*PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
}
alias _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
alias _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
//C       typedef WINBOOL ( *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER Algorithm,CRYPT_DATA_BLOB EncryptedPrivateKey,BYTE *pbClearTextKey,DWORD *pcbClearTextKey,LPVOID pVoidDecryptFunc);
alias WINBOOL  function(CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE *pbClearTextKey, DWORD *pcbClearTextKey, LPVOID pVoidDecryptFunc)PCRYPT_DECRYPT_PRIVATE_KEY_FUNC;
//C       typedef WINBOOL ( *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm,CRYPT_DATA_BLOB *pClearTextPrivateKey,BYTE *pbEncryptedKey,DWORD *pcbEncryptedKey,LPVOID pVoidEncryptFunc);
alias WINBOOL  function(CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, CRYPT_DATA_BLOB *pClearTextPrivateKey, BYTE *pbEncryptedKey, DWORD *pcbEncryptedKey, LPVOID pVoidEncryptFunc)PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC;
//C       typedef WINBOOL ( *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,HCRYPTPROV *phCryptProv,LPVOID pVoidResolveFunc);
alias WINBOOL  function(CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc)PCRYPT_RESOLVE_HCRYPTPROV_FUNC;
//C       typedef struct _CRYPT_PKCS8_IMPORT_PARAMS {
//C         CRYPT_DIGEST_BLOB PrivateKey;
//C         PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
//C         LPVOID pVoidResolveFunc;
//C         PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
//C         LPVOID pVoidDecryptFunc;
//C       } CRYPT_PKCS8_IMPORT_PARAMS,*PCRYPT_PKCS8_IMPORT_PARAMS,CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS,*PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
struct _CRYPT_PKCS8_IMPORT_PARAMS
{
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
}
alias _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PKCS8_IMPORT_PARAMS;
alias _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS;
alias _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
alias _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
//C       typedef struct _CRYPT_PKCS8_EXPORT_PARAMS {
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         LPSTR pszPrivateKeyObjId;
//C         PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
//C         LPVOID pVoidEncryptFunc;
//C       } CRYPT_PKCS8_EXPORT_PARAMS,*PCRYPT_PKCS8_EXPORT_PARAMS;
struct _CRYPT_PKCS8_EXPORT_PARAMS
{
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;
    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
}
alias _CRYPT_PKCS8_EXPORT_PARAMS CRYPT_PKCS8_EXPORT_PARAMS;
alias _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS;
//C       typedef struct _CERT_INFO {
//C         DWORD dwVersion;
//C         CRYPT_INTEGER_BLOB SerialNumber;
//C         CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
//C         CERT_NAME_BLOB Issuer;
//C         FILETIME NotBefore;
//C         FILETIME NotAfter;
//C         CERT_NAME_BLOB Subject;
//C         CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
//C         CRYPT_BIT_BLOB IssuerUniqueId;
//C         CRYPT_BIT_BLOB SubjectUniqueId;
//C         DWORD cExtension;
//C         PCERT_EXTENSION rgExtension;
//C       } CERT_INFO,*PCERT_INFO;
struct _CERT_INFO
{
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias _CERT_INFO CERT_INFO;
alias _CERT_INFO *PCERT_INFO;
//C       typedef struct _CRL_ENTRY {
//C         CRYPT_INTEGER_BLOB SerialNumber;
//C         FILETIME RevocationDate;
//C         DWORD cExtension;
//C         PCERT_EXTENSION rgExtension;
//C       } CRL_ENTRY,*PCRL_ENTRY;
struct _CRL_ENTRY
{
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias _CRL_ENTRY CRL_ENTRY;
alias _CRL_ENTRY *PCRL_ENTRY;
//C       typedef struct _CRL_INFO {
//C         DWORD dwVersion;
//C         CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
//C         CERT_NAME_BLOB Issuer;
//C         FILETIME ThisUpdate;
//C         FILETIME NextUpdate;
//C         DWORD cCRLEntry;
//C         PCRL_ENTRY rgCRLEntry;
//C         DWORD cExtension;
//C         PCERT_EXTENSION rgExtension;
//C       } CRL_INFO,*PCRL_INFO;
struct _CRL_INFO
{
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias _CRL_INFO CRL_INFO;
alias _CRL_INFO *PCRL_INFO;
//C       typedef struct _CERT_REQUEST_INFO {
//C         DWORD dwVersion;
//C         CERT_NAME_BLOB Subject;
//C         CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
//C         DWORD cAttribute;
//C         PCRYPT_ATTRIBUTE rgAttribute;
//C       } CERT_REQUEST_INFO,*PCERT_REQUEST_INFO;
struct _CERT_REQUEST_INFO
{
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}
alias _CERT_REQUEST_INFO CERT_REQUEST_INFO;
alias _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;
//C       typedef struct _CERT_KEYGEN_REQUEST_INFO {
//C         DWORD dwVersion;
//C         CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
//C         LPWSTR pwszChallengeString;
//C       } CERT_KEYGEN_REQUEST_INFO,*PCERT_KEYGEN_REQUEST_INFO;
struct _CERT_KEYGEN_REQUEST_INFO
{
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
}
alias _CERT_KEYGEN_REQUEST_INFO CERT_KEYGEN_REQUEST_INFO;
alias _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;
//C       typedef struct _CERT_SIGNED_CONTENT_INFO {
//C         CRYPT_DER_BLOB ToBeSigned;
//C         CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
//C         CRYPT_BIT_BLOB Signature;
//C       } CERT_SIGNED_CONTENT_INFO,*PCERT_SIGNED_CONTENT_INFO;
struct _CERT_SIGNED_CONTENT_INFO
{
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
}
alias _CERT_SIGNED_CONTENT_INFO CERT_SIGNED_CONTENT_INFO;
alias _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;
//C       typedef struct _CTL_USAGE {
//C         DWORD cUsageIdentifier;
//C         LPSTR *rgpszUsageIdentifier;
//C       } CTL_USAGE,*PCTL_USAGE,CERT_ENHKEY_USAGE,*PCERT_ENHKEY_USAGE;
struct _CTL_USAGE
{
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
}
alias _CTL_USAGE CTL_USAGE;
alias _CTL_USAGE *PCTL_USAGE;
alias _CTL_USAGE CERT_ENHKEY_USAGE;
alias _CTL_USAGE *PCERT_ENHKEY_USAGE;
//C       typedef struct _CTL_ENTRY {
//C         CRYPT_DATA_BLOB SubjectIdentifier;
//C         DWORD cAttribute;
//C         PCRYPT_ATTRIBUTE rgAttribute;
//C       } CTL_ENTRY,*PCTL_ENTRY;
struct _CTL_ENTRY
{
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}
alias _CTL_ENTRY CTL_ENTRY;
alias _CTL_ENTRY *PCTL_ENTRY;
//C       typedef struct _CTL_INFO {
//C         DWORD dwVersion;
//C         CTL_USAGE SubjectUsage;
//C         CRYPT_DATA_BLOB ListIdentifier;
//C         CRYPT_INTEGER_BLOB SequenceNumber;
//C         FILETIME ThisUpdate;
//C         FILETIME NextUpdate;
//C         CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
//C         DWORD cCTLEntry;
//C         PCTL_ENTRY rgCTLEntry;
//C         DWORD cExtension;
//C         PCERT_EXTENSION rgExtension;
//C       } CTL_INFO,*PCTL_INFO;
struct _CTL_INFO
{
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias _CTL_INFO CTL_INFO;
alias _CTL_INFO *PCTL_INFO;
//C       typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
//C         LPSTR pszTimeStampAlgorithm;
//C         LPSTR pszContentType;
//C         CRYPT_OBJID_BLOB Content;
//C         DWORD cAttribute;
//C         PCRYPT_ATTRIBUTE rgAttribute;
//C       } CRYPT_TIME_STAMP_REQUEST_INFO,*PCRYPT_TIME_STAMP_REQUEST_INFO;
struct _CRYPT_TIME_STAMP_REQUEST_INFO
{
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}
alias _CRYPT_TIME_STAMP_REQUEST_INFO CRYPT_TIME_STAMP_REQUEST_INFO;
alias _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;
//C       typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
//C         LPWSTR pwszName;
//C         LPWSTR pwszValue;
//C       } CRYPT_ENROLLMENT_NAME_VALUE_PAIR,*PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR
{
    LPWSTR pwszName;
    LPWSTR pwszValue;
}
alias _CRYPT_ENROLLMENT_NAME_VALUE_PAIR CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
alias _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
//C       typedef struct _CRYPT_CSP_PROVIDER {
//C         DWORD dwKeySpec;
//C         LPWSTR pwszProviderName;
//C         CRYPT_BIT_BLOB Signature;
//C       } CRYPT_CSP_PROVIDER,*PCRYPT_CSP_PROVIDER;
struct _CRYPT_CSP_PROVIDER
{
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
}
alias _CRYPT_CSP_PROVIDER CRYPT_CSP_PROVIDER;
alias _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER;
//C        WINBOOL CryptFormatObject(DWORD dwCertEncodingType,DWORD dwFormatType,DWORD dwFormatStrType,void *pFormatStruct,LPCSTR lpszStructType,const BYTE *pbEncoded,DWORD cbEncoded,void *pbFormat,DWORD *pcbFormat);
WINBOOL  CryptFormatObject(DWORD dwCertEncodingType, DWORD dwFormatType, DWORD dwFormatStrType, void *pFormatStruct, LPCSTR lpszStructType, BYTE *pbEncoded, DWORD cbEncoded, void *pbFormat, DWORD *pcbFormat);
//C       typedef LPVOID ( *PFN_CRYPT_ALLOC)(size_t cbSize);
alias LPVOID  function(size_t cbSize)PFN_CRYPT_ALLOC;
//C       typedef void ( *PFN_CRYPT_FREE)(LPVOID pv);
alias void  function(LPVOID pv)PFN_CRYPT_FREE;
//C       typedef struct _CRYPT_ENCODE_PARA {
//C         DWORD cbSize;
//C         PFN_CRYPT_ALLOC pfnAlloc;
//C         PFN_CRYPT_FREE pfnFree;
//C       } CRYPT_ENCODE_PARA,*PCRYPT_ENCODE_PARA;
struct _CRYPT_ENCODE_PARA
{
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
}
alias _CRYPT_ENCODE_PARA CRYPT_ENCODE_PARA;
alias _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA;
//C        WINBOOL CryptEncodeObjectEx(DWORD dwCertEncodingType,LPCSTR lpszStructType,const void *pvStructInfo,DWORD dwFlags,PCRYPT_ENCODE_PARA pEncodePara,void *pvEncoded,DWORD *pcbEncoded);
WINBOOL  CryptEncodeObjectEx(DWORD dwCertEncodingType, LPCSTR lpszStructType, void *pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void *pvEncoded, DWORD *pcbEncoded);
//C        WINBOOL CryptEncodeObject(DWORD dwCertEncodingType,LPCSTR lpszStructType,const void *pvStructInfo,BYTE *pbEncoded,DWORD *pcbEncoded);
WINBOOL  CryptEncodeObject(DWORD dwCertEncodingType, LPCSTR lpszStructType, void *pvStructInfo, BYTE *pbEncoded, DWORD *pcbEncoded);
//C       typedef struct _CRYPT_DECODE_PARA {
//C         DWORD cbSize;
//C         PFN_CRYPT_ALLOC pfnAlloc;
//C         PFN_CRYPT_FREE pfnFree;
//C       } CRYPT_DECODE_PARA,*PCRYPT_DECODE_PARA;
struct _CRYPT_DECODE_PARA
{
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
}
alias _CRYPT_DECODE_PARA CRYPT_DECODE_PARA;
alias _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA;
//C        WINBOOL CryptDecodeObjectEx(DWORD dwCertEncodingType,LPCSTR lpszStructType,const BYTE *pbEncoded,DWORD cbEncoded,DWORD dwFlags,PCRYPT_DECODE_PARA pDecodePara,void *pvStructInfo,DWORD *pcbStructInfo);
WINBOOL  CryptDecodeObjectEx(DWORD dwCertEncodingType, LPCSTR lpszStructType, BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCRYPT_DECODE_PARA pDecodePara, void *pvStructInfo, DWORD *pcbStructInfo);
//C        WINBOOL CryptDecodeObject(DWORD dwCertEncodingType,LPCSTR lpszStructType,const BYTE *pbEncoded,DWORD cbEncoded,DWORD dwFlags,void *pvStructInfo,DWORD *pcbStructInfo);
WINBOOL  CryptDecodeObject(DWORD dwCertEncodingType, LPCSTR lpszStructType, BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, void *pvStructInfo, DWORD *pcbStructInfo);
//C       typedef struct _CERT_EXTENSIONS {
//C         DWORD cExtension;
//C         PCERT_EXTENSION rgExtension;
//C       } CERT_EXTENSIONS,*PCERT_EXTENSIONS;
struct _CERT_EXTENSIONS
{
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias _CERT_EXTENSIONS CERT_EXTENSIONS;
alias _CERT_EXTENSIONS *PCERT_EXTENSIONS;
//C       typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
//C         CRYPT_DATA_BLOB KeyId;
//C         CERT_NAME_BLOB CertIssuer;
//C         CRYPT_INTEGER_BLOB CertSerialNumber;
//C       } CERT_AUTHORITY_KEY_ID_INFO,*PCERT_AUTHORITY_KEY_ID_INFO;
struct _CERT_AUTHORITY_KEY_ID_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
}
alias _CERT_AUTHORITY_KEY_ID_INFO CERT_AUTHORITY_KEY_ID_INFO;
alias _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;
//C       typedef struct _CERT_PRIVATE_KEY_VALIDITY {
//C         FILETIME NotBefore;
//C         FILETIME NotAfter;
//C       } CERT_PRIVATE_KEY_VALIDITY,*PCERT_PRIVATE_KEY_VALIDITY;
struct _CERT_PRIVATE_KEY_VALIDITY
{
    FILETIME NotBefore;
    FILETIME NotAfter;
}
alias _CERT_PRIVATE_KEY_VALIDITY CERT_PRIVATE_KEY_VALIDITY;
alias _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;
//C       typedef struct _CERT_KEY_ATTRIBUTES_INFO {
//C         CRYPT_DATA_BLOB KeyId;
//C         CRYPT_BIT_BLOB IntendedKeyUsage;
//C         PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
//C       } CERT_KEY_ATTRIBUTES_INFO,*PCERT_KEY_ATTRIBUTES_INFO;
struct _CERT_KEY_ATTRIBUTES_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
}
alias _CERT_KEY_ATTRIBUTES_INFO CERT_KEY_ATTRIBUTES_INFO;
alias _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;
//C       typedef struct _CERT_POLICY_ID {
//C         DWORD cCertPolicyElementId;
//C         LPSTR *rgpszCertPolicyElementId;
//C       } CERT_POLICY_ID,*PCERT_POLICY_ID;
struct _CERT_POLICY_ID
{
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
}
alias _CERT_POLICY_ID CERT_POLICY_ID;
alias _CERT_POLICY_ID *PCERT_POLICY_ID;
//C       typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
//C         DWORD cCertPolicyId;
//C         PCERT_POLICY_ID rgCertPolicyId;
//C         CRYPT_BIT_BLOB RestrictedKeyUsage;
//C       } CERT_KEY_USAGE_RESTRICTION_INFO,*PCERT_KEY_USAGE_RESTRICTION_INFO;
struct _CERT_KEY_USAGE_RESTRICTION_INFO
{
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
}
alias _CERT_KEY_USAGE_RESTRICTION_INFO CERT_KEY_USAGE_RESTRICTION_INFO;
alias _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;
//C       typedef struct _CERT_OTHER_NAME {
//C         LPSTR pszObjId;
//C         CRYPT_OBJID_BLOB Value;
//C       } CERT_OTHER_NAME,*PCERT_OTHER_NAME;
struct _CERT_OTHER_NAME
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}
alias _CERT_OTHER_NAME CERT_OTHER_NAME;
alias _CERT_OTHER_NAME *PCERT_OTHER_NAME;
//C       typedef struct _CERT_ALT_NAME_ENTRY {
//C         DWORD dwAltNameChoice;
//C          union {
//C           PCERT_OTHER_NAME pOtherName;
//C           LPWSTR pwszRfc822Name;
//C           LPWSTR pwszDNSName;
//C           CERT_NAME_BLOB DirectoryName;
//C           LPWSTR pwszURL;
//C           CRYPT_DATA_BLOB IPAddress;
//C           LPSTR pszRegisteredID;
//C         };
union _N134
{
    PCERT_OTHER_NAME pOtherName;
    LPWSTR pwszRfc822Name;
    LPWSTR pwszDNSName;
    CERT_NAME_BLOB DirectoryName;
    LPWSTR pwszURL;
    CRYPT_DATA_BLOB IPAddress;
    LPSTR pszRegisteredID;
}
//C       } CERT_ALT_NAME_ENTRY,*PCERT_ALT_NAME_ENTRY;
struct _CERT_ALT_NAME_ENTRY
{
    DWORD dwAltNameChoice;
    PCERT_OTHER_NAME pOtherName;
    LPWSTR pwszRfc822Name;
    LPWSTR pwszDNSName;
    CERT_NAME_BLOB DirectoryName;
    LPWSTR pwszURL;
    CRYPT_DATA_BLOB IPAddress;
    LPSTR pszRegisteredID;
}
alias _CERT_ALT_NAME_ENTRY CERT_ALT_NAME_ENTRY;
alias _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;
//C       typedef struct _CERT_ALT_NAME_INFO {
//C         DWORD cAltEntry;
//C         PCERT_ALT_NAME_ENTRY rgAltEntry;
//C       } CERT_ALT_NAME_INFO,*PCERT_ALT_NAME_INFO;
struct _CERT_ALT_NAME_INFO
{
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
}
alias _CERT_ALT_NAME_INFO CERT_ALT_NAME_INFO;
alias _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;
//C       typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
//C         CRYPT_BIT_BLOB SubjectType;
//C         WINBOOL fPathLenConstraint;
//C         DWORD dwPathLenConstraint;
//C         DWORD cSubtreesConstraint;
//C         CERT_NAME_BLOB *rgSubtreesConstraint;
//C       } CERT_BASIC_CONSTRAINTS_INFO,*PCERT_BASIC_CONSTRAINTS_INFO;
struct _CERT_BASIC_CONSTRAINTS_INFO
{
    CRYPT_BIT_BLOB SubjectType;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
}
alias _CERT_BASIC_CONSTRAINTS_INFO CERT_BASIC_CONSTRAINTS_INFO;
alias _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;
//C       typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
//C         WINBOOL fCA;
//C         WINBOOL fPathLenConstraint;
//C         DWORD dwPathLenConstraint;
//C       } CERT_BASIC_CONSTRAINTS2_INFO,*PCERT_BASIC_CONSTRAINTS2_INFO;
struct _CERT_BASIC_CONSTRAINTS2_INFO
{
    WINBOOL fCA;
    WINBOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
}
alias _CERT_BASIC_CONSTRAINTS2_INFO CERT_BASIC_CONSTRAINTS2_INFO;
alias _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;
//C       typedef struct _CERT_POLICY_QUALIFIER_INFO {
//C         LPSTR pszPolicyQualifierId;
//C         CRYPT_OBJID_BLOB Qualifier;
//C       } CERT_POLICY_QUALIFIER_INFO,*PCERT_POLICY_QUALIFIER_INFO;
struct _CERT_POLICY_QUALIFIER_INFO
{
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
}
alias _CERT_POLICY_QUALIFIER_INFO CERT_POLICY_QUALIFIER_INFO;
alias _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;
//C       typedef struct _CERT_POLICY_INFO {
//C         LPSTR pszPolicyIdentifier;
//C         DWORD cPolicyQualifier;
//C         CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
//C       } CERT_POLICY_INFO,*PCERT_POLICY_INFO;
struct _CERT_POLICY_INFO
{
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
}
alias _CERT_POLICY_INFO CERT_POLICY_INFO;
alias _CERT_POLICY_INFO *PCERT_POLICY_INFO;
//C       typedef struct _CERT_POLICIES_INFO {
//C         DWORD cPolicyInfo;
//C         CERT_POLICY_INFO *rgPolicyInfo;
//C       } CERT_POLICIES_INFO,*PCERT_POLICIES_INFO;
struct _CERT_POLICIES_INFO
{
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
}
alias _CERT_POLICIES_INFO CERT_POLICIES_INFO;
alias _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;
//C       typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
//C         LPSTR pszOrganization;
//C         DWORD cNoticeNumbers;
//C         int *rgNoticeNumbers;
//C       } CERT_POLICY_QUALIFIER_NOTICE_REFERENCE,*PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
{
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
}
alias _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
alias _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
//C       typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
//C         CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
//C         LPWSTR pszDisplayText;
//C       } CERT_POLICY_QUALIFIER_USER_NOTICE,*PCERT_POLICY_QUALIFIER_USER_NOTICE;
struct _CERT_POLICY_QUALIFIER_USER_NOTICE
{
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
}
alias _CERT_POLICY_QUALIFIER_USER_NOTICE CERT_POLICY_QUALIFIER_USER_NOTICE;
alias _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE;
//C       typedef struct _CPS_URLS {
//C         LPWSTR pszURL;
//C         CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
//C         CRYPT_DATA_BLOB *pDigest;
//C       } CPS_URLS,*PCPS_URLS;
struct _CPS_URLS
{
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
}
alias _CPS_URLS CPS_URLS;
alias _CPS_URLS *PCPS_URLS;
//C       typedef struct _CERT_POLICY95_QUALIFIER1 {
//C         LPWSTR pszPracticesReference;
//C         LPSTR pszNoticeIdentifier;
//C         LPSTR pszNSINoticeIdentifier;
//C         DWORD cCPSURLs;
//C         CPS_URLS *rgCPSURLs;
//C       } CERT_POLICY95_QUALIFIER1,*PCERT_POLICY95_QUALIFIER1;
struct _CERT_POLICY95_QUALIFIER1
{
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
}
alias _CERT_POLICY95_QUALIFIER1 CERT_POLICY95_QUALIFIER1;
alias _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1;
//C       typedef struct _CERT_POLICY_MAPPING {
//C         LPSTR pszIssuerDomainPolicy;
//C         LPSTR pszSubjectDomainPolicy;
//C       } CERT_POLICY_MAPPING,*PCERT_POLICY_MAPPING;
struct _CERT_POLICY_MAPPING
{
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
}
alias _CERT_POLICY_MAPPING CERT_POLICY_MAPPING;
alias _CERT_POLICY_MAPPING *PCERT_POLICY_MAPPING;
//C       typedef struct _CERT_POLICY_MAPPINGS_INFO {
//C         DWORD cPolicyMapping;
//C         PCERT_POLICY_MAPPING rgPolicyMapping;
//C       } CERT_POLICY_MAPPINGS_INFO,*PCERT_POLICY_MAPPINGS_INFO;
struct _CERT_POLICY_MAPPINGS_INFO
{
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
}
alias _CERT_POLICY_MAPPINGS_INFO CERT_POLICY_MAPPINGS_INFO;
alias _CERT_POLICY_MAPPINGS_INFO *PCERT_POLICY_MAPPINGS_INFO;
//C       typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
//C         WINBOOL fRequireExplicitPolicy;
//C         DWORD dwRequireExplicitPolicySkipCerts;
//C         WINBOOL fInhibitPolicyMapping;
//C         DWORD dwInhibitPolicyMappingSkipCerts;
//C       } CERT_POLICY_CONSTRAINTS_INFO,*PCERT_POLICY_CONSTRAINTS_INFO;
struct _CERT_POLICY_CONSTRAINTS_INFO
{
    WINBOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;
    WINBOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
}
alias _CERT_POLICY_CONSTRAINTS_INFO CERT_POLICY_CONSTRAINTS_INFO;
alias _CERT_POLICY_CONSTRAINTS_INFO *PCERT_POLICY_CONSTRAINTS_INFO;
//C       typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
//C         LPSTR pszObjId;
//C         DWORD cValue;
//C         PCRYPT_DER_BLOB rgValue;
//C       } CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY,*PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY
{
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
}
alias _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
alias _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
//C       typedef struct _CRYPT_CONTENT_INFO {
//C         LPSTR pszObjId;
//C         CRYPT_DER_BLOB Content;
//C       } CRYPT_CONTENT_INFO,*PCRYPT_CONTENT_INFO;
struct _CRYPT_CONTENT_INFO
{
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
}
alias _CRYPT_CONTENT_INFO CRYPT_CONTENT_INFO;
alias _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;
//C       typedef struct _CRYPT_SEQUENCE_OF_ANY {
//C         DWORD cValue;
//C         PCRYPT_DER_BLOB rgValue;
//C       } CRYPT_SEQUENCE_OF_ANY,*PCRYPT_SEQUENCE_OF_ANY;
struct _CRYPT_SEQUENCE_OF_ANY
{
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
}
alias _CRYPT_SEQUENCE_OF_ANY CRYPT_SEQUENCE_OF_ANY;
alias _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;
//C       typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
//C         CRYPT_DATA_BLOB KeyId;
//C         CERT_ALT_NAME_INFO AuthorityCertIssuer;
//C         CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
//C       } CERT_AUTHORITY_KEY_ID2_INFO,*PCERT_AUTHORITY_KEY_ID2_INFO;
struct _CERT_AUTHORITY_KEY_ID2_INFO
{
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;
    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
}
alias _CERT_AUTHORITY_KEY_ID2_INFO CERT_AUTHORITY_KEY_ID2_INFO;
alias _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;
//C       typedef struct _CERT_ACCESS_DESCRIPTION {
//C         LPSTR pszAccessMethod;
//C         CERT_ALT_NAME_ENTRY AccessLocation;
//C       } CERT_ACCESS_DESCRIPTION,*PCERT_ACCESS_DESCRIPTION;
struct _CERT_ACCESS_DESCRIPTION
{
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
}
alias _CERT_ACCESS_DESCRIPTION CERT_ACCESS_DESCRIPTION;
alias _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION;
//C       typedef struct _CERT_AUTHORITY_INFO_ACCESS {
//C         DWORD cAccDescr;
//C         PCERT_ACCESS_DESCRIPTION rgAccDescr;
//C       } CERT_AUTHORITY_INFO_ACCESS,*PCERT_AUTHORITY_INFO_ACCESS;
struct _CERT_AUTHORITY_INFO_ACCESS
{
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
}
alias _CERT_AUTHORITY_INFO_ACCESS CERT_AUTHORITY_INFO_ACCESS;
alias _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS;
//C       typedef struct _CRL_DIST_POINT_NAME {
//C         DWORD dwDistPointNameChoice;
//C          union {
//C           CERT_ALT_NAME_INFO FullName;
//C         };
union _N135
{
    CERT_ALT_NAME_INFO FullName;
}
//C       } CRL_DIST_POINT_NAME,*PCRL_DIST_POINT_NAME;
struct _CRL_DIST_POINT_NAME
{
    DWORD dwDistPointNameChoice;
    CERT_ALT_NAME_INFO FullName;
}
alias _CRL_DIST_POINT_NAME CRL_DIST_POINT_NAME;
alias _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;
//C       typedef struct _CRL_DIST_POINT {
//C         CRL_DIST_POINT_NAME DistPointName;
//C         CRYPT_BIT_BLOB ReasonFlags;
//C         CERT_ALT_NAME_INFO CRLIssuer;
//C       } CRL_DIST_POINT,*PCRL_DIST_POINT;
struct _CRL_DIST_POINT
{
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
}
alias _CRL_DIST_POINT CRL_DIST_POINT;
alias _CRL_DIST_POINT *PCRL_DIST_POINT;
//C       typedef struct _CRL_DIST_POINTS_INFO {
//C         DWORD cDistPoint;
//C         PCRL_DIST_POINT rgDistPoint;
//C       } CRL_DIST_POINTS_INFO,*PCRL_DIST_POINTS_INFO;
struct _CRL_DIST_POINTS_INFO
{
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
}
alias _CRL_DIST_POINTS_INFO CRL_DIST_POINTS_INFO;
alias _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;
//C       typedef struct _CROSS_CERT_DIST_POINTS_INFO {
//C         DWORD dwSyncDeltaTime;
//C         DWORD cDistPoint;
//C         PCERT_ALT_NAME_INFO rgDistPoint;
//C       } CROSS_CERT_DIST_POINTS_INFO,*PCROSS_CERT_DIST_POINTS_INFO;
struct _CROSS_CERT_DIST_POINTS_INFO
{
    DWORD dwSyncDeltaTime;
    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
}
alias _CROSS_CERT_DIST_POINTS_INFO CROSS_CERT_DIST_POINTS_INFO;
alias _CROSS_CERT_DIST_POINTS_INFO *PCROSS_CERT_DIST_POINTS_INFO;
//C       typedef struct _CERT_PAIR {
//C         CERT_BLOB Forward;
//C         CERT_BLOB Reverse;
//C       } CERT_PAIR,*PCERT_PAIR;
struct _CERT_PAIR
{
    CERT_BLOB Forward;
    CERT_BLOB Reverse;
}
alias _CERT_PAIR CERT_PAIR;
alias _CERT_PAIR *PCERT_PAIR;
//C       typedef struct _CRL_ISSUING_DIST_POINT {
//C         CRL_DIST_POINT_NAME DistPointName;
//C         WINBOOL fOnlyContainsUserCerts;
//C         WINBOOL fOnlyContainsCACerts;
//C         CRYPT_BIT_BLOB OnlySomeReasonFlags;
//C         WINBOOL fIndirectCRL;
//C       } CRL_ISSUING_DIST_POINT,*PCRL_ISSUING_DIST_POINT;
struct _CRL_ISSUING_DIST_POINT
{
    CRL_DIST_POINT_NAME DistPointName;
    WINBOOL fOnlyContainsUserCerts;
    WINBOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    WINBOOL fIndirectCRL;
}
alias _CRL_ISSUING_DIST_POINT CRL_ISSUING_DIST_POINT;
alias _CRL_ISSUING_DIST_POINT *PCRL_ISSUING_DIST_POINT;
//C       typedef struct _CERT_GENERAL_SUBTREE {
//C         CERT_ALT_NAME_ENTRY Base;
//C         DWORD dwMinimum;
//C         WINBOOL fMaximum;
//C         DWORD dwMaximum;
//C       } CERT_GENERAL_SUBTREE,*PCERT_GENERAL_SUBTREE;
struct _CERT_GENERAL_SUBTREE
{
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    WINBOOL fMaximum;
    DWORD dwMaximum;
}
alias _CERT_GENERAL_SUBTREE CERT_GENERAL_SUBTREE;
alias _CERT_GENERAL_SUBTREE *PCERT_GENERAL_SUBTREE;
//C       typedef struct _CERT_NAME_CONSTRAINTS_INFO {
//C         DWORD cPermittedSubtree;
//C         PCERT_GENERAL_SUBTREE rgPermittedSubtree;
//C         DWORD cExcludedSubtree;
//C         PCERT_GENERAL_SUBTREE rgExcludedSubtree;
//C       } CERT_NAME_CONSTRAINTS_INFO,*PCERT_NAME_CONSTRAINTS_INFO;
struct _CERT_NAME_CONSTRAINTS_INFO
{
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
}
alias _CERT_NAME_CONSTRAINTS_INFO CERT_NAME_CONSTRAINTS_INFO;
alias _CERT_NAME_CONSTRAINTS_INFO *PCERT_NAME_CONSTRAINTS_INFO;
//C       typedef struct _CERT_DSS_PARAMETERS {
//C         CRYPT_UINT_BLOB p;
//C         CRYPT_UINT_BLOB q;
//C         CRYPT_UINT_BLOB g;
//C       } CERT_DSS_PARAMETERS,*PCERT_DSS_PARAMETERS;
struct _CERT_DSS_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
}
alias _CERT_DSS_PARAMETERS CERT_DSS_PARAMETERS;
alias _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;
//C       typedef struct _CERT_DH_PARAMETERS {
//C         CRYPT_UINT_BLOB p;
//C         CRYPT_UINT_BLOB g;
//C       } CERT_DH_PARAMETERS,*PCERT_DH_PARAMETERS;
struct _CERT_DH_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
}
alias _CERT_DH_PARAMETERS CERT_DH_PARAMETERS;
alias _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS;
//C       typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
//C         CRYPT_BIT_BLOB seed;
//C         DWORD pgenCounter;
//C       } CERT_X942_DH_VALIDATION_PARAMS,*PCERT_X942_DH_VALIDATION_PARAMS;
struct _CERT_X942_DH_VALIDATION_PARAMS
{
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
}
alias _CERT_X942_DH_VALIDATION_PARAMS CERT_X942_DH_VALIDATION_PARAMS;
alias _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS;
//C       typedef struct _CERT_X942_DH_PARAMETERS {
//C         CRYPT_UINT_BLOB p;
//C         CRYPT_UINT_BLOB g;
//C         CRYPT_UINT_BLOB q;
//C         CRYPT_UINT_BLOB j;
//C         PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
//C       } CERT_X942_DH_PARAMETERS,*PCERT_X942_DH_PARAMETERS;
struct _CERT_X942_DH_PARAMETERS
{
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
}
alias _CERT_X942_DH_PARAMETERS CERT_X942_DH_PARAMETERS;
alias _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS;
//C       typedef struct _CRYPT_X942_OTHER_INFO {
//C         LPSTR pszContentEncryptionObjId;
//C         BYTE rgbCounter[4];
//C         BYTE rgbKeyLength[4];
//C         CRYPT_DATA_BLOB PubInfo;
//C       } CRYPT_X942_OTHER_INFO,*PCRYPT_X942_OTHER_INFO;
struct _CRYPT_X942_OTHER_INFO
{
    LPSTR pszContentEncryptionObjId;
    BYTE [4]rgbCounter;
    BYTE [4]rgbKeyLength;
    CRYPT_DATA_BLOB PubInfo;
}
alias _CRYPT_X942_OTHER_INFO CRYPT_X942_OTHER_INFO;
alias _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO;
//C       typedef struct _CRYPT_RC2_CBC_PARAMETERS {
//C         DWORD dwVersion;
//C         WINBOOL fIV;
//C         BYTE rgbIV[8];
//C       } CRYPT_RC2_CBC_PARAMETERS,*PCRYPT_RC2_CBC_PARAMETERS;
struct _CRYPT_RC2_CBC_PARAMETERS
{
    DWORD dwVersion;
    WINBOOL fIV;
    BYTE [8]rgbIV;
}
alias _CRYPT_RC2_CBC_PARAMETERS CRYPT_RC2_CBC_PARAMETERS;
alias _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;
//C       typedef struct _CRYPT_SMIME_CAPABILITY {
//C         LPSTR pszObjId;
//C         CRYPT_OBJID_BLOB Parameters;
//C       } CRYPT_SMIME_CAPABILITY,*PCRYPT_SMIME_CAPABILITY;
struct _CRYPT_SMIME_CAPABILITY
{
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
}
alias _CRYPT_SMIME_CAPABILITY CRYPT_SMIME_CAPABILITY;
alias _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;
//C       typedef struct _CRYPT_SMIME_CAPABILITIES {
//C         DWORD cCapability;
//C         PCRYPT_SMIME_CAPABILITY rgCapability;
//C       } CRYPT_SMIME_CAPABILITIES,*PCRYPT_SMIME_CAPABILITIES;
struct _CRYPT_SMIME_CAPABILITIES
{
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
}
alias _CRYPT_SMIME_CAPABILITIES CRYPT_SMIME_CAPABILITIES;
alias _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;
//C       typedef struct _CMC_TAGGED_ATTRIBUTE {
//C         DWORD dwBodyPartID;
//C         CRYPT_ATTRIBUTE Attribute;
//C       } CMC_TAGGED_ATTRIBUTE,*PCMC_TAGGED_ATTRIBUTE;
struct _CMC_TAGGED_ATTRIBUTE
{
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
}
alias _CMC_TAGGED_ATTRIBUTE CMC_TAGGED_ATTRIBUTE;
alias _CMC_TAGGED_ATTRIBUTE *PCMC_TAGGED_ATTRIBUTE;
//C       typedef struct _CMC_TAGGED_CERT_REQUEST {
//C         DWORD dwBodyPartID;
//C         CRYPT_DER_BLOB SignedCertRequest;
//C       } CMC_TAGGED_CERT_REQUEST,*PCMC_TAGGED_CERT_REQUEST;
struct _CMC_TAGGED_CERT_REQUEST
{
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
}
alias _CMC_TAGGED_CERT_REQUEST CMC_TAGGED_CERT_REQUEST;
alias _CMC_TAGGED_CERT_REQUEST *PCMC_TAGGED_CERT_REQUEST;
//C       typedef struct _CMC_TAGGED_REQUEST {
//C         DWORD dwTaggedRequestChoice;
//C          union {
//C           PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
//C         };
union _N136
{
    PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
}
//C       } CMC_TAGGED_REQUEST,*PCMC_TAGGED_REQUEST;
struct _CMC_TAGGED_REQUEST
{
    DWORD dwTaggedRequestChoice;
    PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
}
alias _CMC_TAGGED_REQUEST CMC_TAGGED_REQUEST;
alias _CMC_TAGGED_REQUEST *PCMC_TAGGED_REQUEST;
//C       typedef struct _CMC_TAGGED_CONTENT_INFO {
//C         DWORD dwBodyPartID;
//C         CRYPT_DER_BLOB EncodedContentInfo;
//C       } CMC_TAGGED_CONTENT_INFO,*PCMC_TAGGED_CONTENT_INFO;
struct _CMC_TAGGED_CONTENT_INFO
{
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
}
alias _CMC_TAGGED_CONTENT_INFO CMC_TAGGED_CONTENT_INFO;
alias _CMC_TAGGED_CONTENT_INFO *PCMC_TAGGED_CONTENT_INFO;
//C       typedef struct _CMC_TAGGED_OTHER_MSG {
//C         DWORD dwBodyPartID;
//C         LPSTR pszObjId;
//C         CRYPT_OBJID_BLOB Value;
//C       } CMC_TAGGED_OTHER_MSG,*PCMC_TAGGED_OTHER_MSG;
struct _CMC_TAGGED_OTHER_MSG
{
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
}
alias _CMC_TAGGED_OTHER_MSG CMC_TAGGED_OTHER_MSG;
alias _CMC_TAGGED_OTHER_MSG *PCMC_TAGGED_OTHER_MSG;
//C       typedef struct _CMC_DATA_INFO {
//C         DWORD cTaggedAttribute;
//C         PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
//C         DWORD cTaggedRequest;
//C         PCMC_TAGGED_REQUEST rgTaggedRequest;
//C         DWORD cTaggedContentInfo;
//C         PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
//C         DWORD cTaggedOtherMsg;
//C         PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
//C       } CMC_DATA_INFO,*PCMC_DATA_INFO;
struct _CMC_DATA_INFO
{
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
}
alias _CMC_DATA_INFO CMC_DATA_INFO;
alias _CMC_DATA_INFO *PCMC_DATA_INFO;
//C       typedef struct _CMC_RESPONSE_INFO {
//C         DWORD cTaggedAttribute;
//C         PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
//C         DWORD cTaggedContentInfo;
//C         PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
//C         DWORD cTaggedOtherMsg;
//C         PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
//C       } CMC_RESPONSE_INFO,*PCMC_RESPONSE_INFO;
struct _CMC_RESPONSE_INFO
{
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
}
alias _CMC_RESPONSE_INFO CMC_RESPONSE_INFO;
alias _CMC_RESPONSE_INFO *PCMC_RESPONSE_INFO;
//C       typedef struct _CMC_PEND_INFO {
//C         CRYPT_DATA_BLOB PendToken;
//C         FILETIME PendTime;
//C       } CMC_PEND_INFO,*PCMC_PEND_INFO;
struct _CMC_PEND_INFO
{
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
}
alias _CMC_PEND_INFO CMC_PEND_INFO;
alias _CMC_PEND_INFO *PCMC_PEND_INFO;
//C       typedef struct _CMC_STATUS_INFO {
//C         DWORD dwStatus;
//C         DWORD cBodyList;
//C         DWORD *rgdwBodyList;
//C         LPWSTR pwszStatusString;
//C         DWORD dwOtherInfoChoice;
//C          union {
//C           DWORD dwFailInfo;
//C           PCMC_PEND_INFO pPendInfo;
//C         };
union _N137
{
    DWORD dwFailInfo;
    PCMC_PEND_INFO pPendInfo;
}
//C       } CMC_STATUS_INFO,*PCMC_STATUS_INFO;
struct _CMC_STATUS_INFO
{
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    DWORD dwFailInfo;
    PCMC_PEND_INFO pPendInfo;
}
alias _CMC_STATUS_INFO CMC_STATUS_INFO;
alias _CMC_STATUS_INFO *PCMC_STATUS_INFO;
//C       typedef struct _CMC_ADD_EXTENSIONS_INFO {
//C         DWORD dwCmcDataReference;
//C         DWORD cCertReference;
//C         DWORD *rgdwCertReference;
//C         DWORD cExtension;
//C         PCERT_EXTENSION rgExtension;
//C       } CMC_ADD_EXTENSIONS_INFO,*PCMC_ADD_EXTENSIONS_INFO;
struct _CMC_ADD_EXTENSIONS_INFO
{
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias _CMC_ADD_EXTENSIONS_INFO CMC_ADD_EXTENSIONS_INFO;
alias _CMC_ADD_EXTENSIONS_INFO *PCMC_ADD_EXTENSIONS_INFO;
//C       typedef struct _CMC_ADD_ATTRIBUTES_INFO {
//C         DWORD dwCmcDataReference;
//C         DWORD cCertReference;
//C         DWORD *rgdwCertReference;
//C         DWORD cAttribute;
//C         PCRYPT_ATTRIBUTE rgAttribute;
//C       } CMC_ADD_ATTRIBUTES_INFO,*PCMC_ADD_ATTRIBUTES_INFO;
struct _CMC_ADD_ATTRIBUTES_INFO
{
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}
alias _CMC_ADD_ATTRIBUTES_INFO CMC_ADD_ATTRIBUTES_INFO;
alias _CMC_ADD_ATTRIBUTES_INFO *PCMC_ADD_ATTRIBUTES_INFO;
//C       typedef struct _CERT_TEMPLATE_EXT {
//C         LPSTR pszObjId;
//C         DWORD dwMajorVersion;
//C         WINBOOL fMinorVersion;
//C         DWORD dwMinorVersion;
//C       } CERT_TEMPLATE_EXT,*PCERT_TEMPLATE_EXT;
struct _CERT_TEMPLATE_EXT
{
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    WINBOOL fMinorVersion;
    DWORD dwMinorVersion;
}
alias _CERT_TEMPLATE_EXT CERT_TEMPLATE_EXT;
alias _CERT_TEMPLATE_EXT *PCERT_TEMPLATE_EXT;
//C       typedef void *HCRYPTOIDFUNCSET;
alias void *HCRYPTOIDFUNCSET;
//C       typedef void *HCRYPTOIDFUNCADDR;
alias void *HCRYPTOIDFUNCADDR;
//C       typedef struct _CRYPT_OID_FUNC_ENTRY {
//C         LPCSTR pszOID;
//C         void *pvFuncAddr;
//C       } CRYPT_OID_FUNC_ENTRY,*PCRYPT_OID_FUNC_ENTRY;
struct _CRYPT_OID_FUNC_ENTRY
{
    LPCSTR pszOID;
    void *pvFuncAddr;
}
alias _CRYPT_OID_FUNC_ENTRY CRYPT_OID_FUNC_ENTRY;
alias _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;
//C        WINBOOL CryptInstallOIDFunctionAddress(HMODULE hModule,DWORD dwEncodingType,LPCSTR pszFuncName,DWORD cFuncEntry,const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],DWORD dwFlags);
WINBOOL  CryptInstallOIDFunctionAddress(HMODULE hModule, DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, CRYPT_OID_FUNC_ENTRY *rgFuncEntry, DWORD dwFlags);
//C        HCRYPTOIDFUNCSET CryptInitOIDFunctionSet(LPCSTR pszFuncName,DWORD dwFlags);
HCRYPTOIDFUNCSET  CryptInitOIDFunctionSet(LPCSTR pszFuncName, DWORD dwFlags);
//C        WINBOOL CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPCSTR pszOID,DWORD dwFlags,void **ppvFuncAddr,HCRYPTOIDFUNCADDR *phFuncAddr);
WINBOOL  CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr);
//C        WINBOOL CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPWSTR pwszDllList,DWORD *pcchDllList);
WINBOOL  CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPWSTR pwszDllList, DWORD *pcchDllList);
//C        WINBOOL CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet,DWORD dwEncodingType,LPCWSTR pwszDll,DWORD dwFlags,void **ppvFuncAddr,HCRYPTOIDFUNCADDR *phFuncAddr);
WINBOOL  CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr);
//C        WINBOOL CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR hFuncAddr,DWORD dwFlags);
WINBOOL  CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags);
//C        WINBOOL CryptRegisterOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszDll,LPCSTR pszOverrideFuncName);
WINBOOL  CryptRegisterOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName);
//C        WINBOOL CryptUnregisterOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID);
WINBOOL  CryptUnregisterOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID);
//C        WINBOOL CryptRegisterDefaultOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,DWORD dwIndex,LPCWSTR pwszDll);
WINBOOL  CryptRegisterDefaultOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll);
//C        WINBOOL CryptUnregisterDefaultOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCWSTR pwszDll);
WINBOOL  CryptUnregisterDefaultOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll);
//C        WINBOOL CryptSetOIDFunctionValue(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszValueName,DWORD dwValueType,const BYTE *pbValueData,DWORD cbValueData);
WINBOOL  CryptSetOIDFunctionValue(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, BYTE *pbValueData, DWORD cbValueData);
//C        WINBOOL CryptGetOIDFunctionValue(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,LPCWSTR pwszValueName,DWORD *pdwValueType,BYTE *pbValueData,DWORD *pcbValueData);
WINBOOL  CryptGetOIDFunctionValue(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD *pdwValueType, BYTE *pbValueData, DWORD *pcbValueData);
//C       typedef WINBOOL ( *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,DWORD cValue,const DWORD rgdwValueType[],LPCWSTR const rgpwszValueName[],const BYTE *const rgpbValueData[],const DWORD rgcbValueData[],void *pvArg);
alias WINBOOL  function(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, DWORD *rgdwValueType, LPCWSTR *rgpwszValueName, BYTE **rgpbValueData, DWORD *rgcbValueData, void *pvArg)PFN_CRYPT_ENUM_OID_FUNC;
//C        WINBOOL CryptEnumOIDFunction(DWORD dwEncodingType,LPCSTR pszFuncName,LPCSTR pszOID,DWORD dwFlags,void *pvArg,PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
WINBOOL  CryptEnumOIDFunction(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc);
//C       typedef struct _CRYPT_OID_INFO {
//C         DWORD cbSize;
//C         LPCSTR pszOID;
//C         LPCWSTR pwszName;
//C         DWORD dwGroupId;
//C          union {
//C           DWORD dwValue;
//C           ALG_ID Algid;
//C           DWORD dwLength;
//C         };
union _N138
{
    DWORD dwValue;
    ALG_ID Algid;
    DWORD dwLength;
}
//C         CRYPT_DATA_BLOB ExtraInfo;
//C       } CRYPT_OID_INFO,*PCRYPT_OID_INFO;
struct _CRYPT_OID_INFO
{
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    DWORD dwValue;
    ALG_ID Algid;
    DWORD dwLength;
    CRYPT_DATA_BLOB ExtraInfo;
}
alias _CRYPT_OID_INFO CRYPT_OID_INFO;
alias _CRYPT_OID_INFO *PCRYPT_OID_INFO;
//C       typedef const CRYPT_OID_INFO CCRYPT_OID_INFO,*PCCRYPT_OID_INFO;
alias CRYPT_OID_INFO CCRYPT_OID_INFO;
alias CRYPT_OID_INFO *PCCRYPT_OID_INFO;
//C        PCCRYPT_OID_INFO CryptFindOIDInfo(DWORD dwKeyType,void *pvKey,DWORD dwGroupId);
PCCRYPT_OID_INFO  CryptFindOIDInfo(DWORD dwKeyType, void *pvKey, DWORD dwGroupId);
//C        WINBOOL CryptRegisterOIDInfo(PCCRYPT_OID_INFO pInfo,DWORD dwFlags);
WINBOOL  CryptRegisterOIDInfo(PCCRYPT_OID_INFO pInfo, DWORD dwFlags);
//C        WINBOOL CryptUnregisterOIDInfo(PCCRYPT_OID_INFO pInfo);
WINBOOL  CryptUnregisterOIDInfo(PCCRYPT_OID_INFO pInfo);
//C       typedef WINBOOL ( *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO pInfo,void *pvArg);
alias WINBOOL  function(PCCRYPT_OID_INFO pInfo, void *pvArg)PFN_CRYPT_ENUM_OID_INFO;
//C        WINBOOL CryptEnumOIDInfo(DWORD dwGroupId,DWORD dwFlags,void *pvArg,PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
WINBOOL  CryptEnumOIDInfo(DWORD dwGroupId, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo);
//C        LPCWSTR CryptFindLocalizedName(LPCWSTR pwszCryptName);
LPCWSTR  CryptFindLocalizedName(LPCWSTR pwszCryptName);
//C       typedef void *HCRYPTMSG;
alias void *HCRYPTMSG;
//C       typedef struct _CERT_ISSUER_SERIAL_NUMBER {
//C         CERT_NAME_BLOB Issuer;
//C         CRYPT_INTEGER_BLOB SerialNumber;
//C       } CERT_ISSUER_SERIAL_NUMBER,*PCERT_ISSUER_SERIAL_NUMBER;
struct _CERT_ISSUER_SERIAL_NUMBER
{
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
}
alias _CERT_ISSUER_SERIAL_NUMBER CERT_ISSUER_SERIAL_NUMBER;
alias _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER;
//C       typedef struct _CERT_ID {
//C         DWORD dwIdChoice;
//C          union {
//C           CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
//C           CRYPT_HASH_BLOB KeyId;
//C           CRYPT_HASH_BLOB HashId;
//C         };
union _N139
{
    CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
    CRYPT_HASH_BLOB KeyId;
    CRYPT_HASH_BLOB HashId;
}
//C       } CERT_ID,*PCERT_ID;
struct _CERT_ID
{
    DWORD dwIdChoice;
    CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
    CRYPT_HASH_BLOB KeyId;
    CRYPT_HASH_BLOB HashId;
}
alias _CERT_ID CERT_ID;
alias _CERT_ID *PCERT_ID;
//C       typedef struct _CMSG_SIGNER_ENCODE_INFO {
//C         DWORD cbSize;
//C         PCERT_INFO pCertInfo;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         void *pvHashAuxInfo;
//C         DWORD cAuthAttr;
//C         PCRYPT_ATTRIBUTE rgAuthAttr;
//C         DWORD cUnauthAttr;
//C         PCRYPT_ATTRIBUTE rgUnauthAttr;
//C       } CMSG_SIGNER_ENCODE_INFO,*PCMSG_SIGNER_ENCODE_INFO;
struct _CMSG_SIGNER_ENCODE_INFO
{
    DWORD cbSize;
    PCERT_INFO pCertInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
}
alias _CMSG_SIGNER_ENCODE_INFO CMSG_SIGNER_ENCODE_INFO;
alias _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;
//C       typedef struct _CMSG_SIGNED_ENCODE_INFO {
//C         DWORD cbSize;
//C         DWORD cSigners;
//C         PCMSG_SIGNER_ENCODE_INFO rgSigners;
//C         DWORD cCertEncoded;
//C         PCERT_BLOB rgCertEncoded;
//C         DWORD cCrlEncoded;
//C         PCRL_BLOB rgCrlEncoded;
//C       } CMSG_SIGNED_ENCODE_INFO,*PCMSG_SIGNED_ENCODE_INFO;
struct _CMSG_SIGNED_ENCODE_INFO
{
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;
}
alias _CMSG_SIGNED_ENCODE_INFO CMSG_SIGNED_ENCODE_INFO;
alias _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;
//C       typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,*PCMSG_RECIPIENT_ENCODE_INFO;
alias _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO;
alias _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO;
//C       typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
//C         void *pvEncryptionAuxInfo;
//C         DWORD cRecipients;
//C         PCERT_INFO *rgpRecipients;
//C       } CMSG_ENVELOPED_ENCODE_INFO,*PCMSG_ENVELOPED_ENCODE_INFO;
struct _CMSG_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCERT_INFO *rgpRecipients;
}
alias _CMSG_ENVELOPED_ENCODE_INFO CMSG_ENVELOPED_ENCODE_INFO;
alias _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;
//C       typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
//C         DWORD cbSize;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         void *pvKeyEncryptionAuxInfo;
//C         HCRYPTPROV hCryptProv;
//C         CRYPT_BIT_BLOB RecipientPublicKey;
//C         CERT_ID RecipientId;
//C       } CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
}
alias _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
alias _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
//C       typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
//C         DWORD cbSize;
//C         CRYPT_BIT_BLOB RecipientPublicKey;
//C         CERT_ID RecipientId;
//C         FILETIME Date;
//C         PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
//C       } CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}
alias _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
alias _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
//C       typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
//C         DWORD cbSize;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         void *pvKeyEncryptionAuxInfo;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
//C         void *pvKeyWrapAuxInfo;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         DWORD dwKeyChoice;
//C          union {
//C           PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
//C           PCERT_ID pSenderId;
//C         };
union _N140
{
    PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
    PCERT_ID pSenderId;
}
//C         CRYPT_DATA_BLOB UserKeyingMaterial;
//C         DWORD cRecipientEncryptedKeys;
//C         PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
//C       } CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO,*PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    DWORD dwKeyChoice;
    PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;
    PCERT_ID pSenderId;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
}
alias _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
alias _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
//C       typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
//C         DWORD cbSize;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         void *pvKeyEncryptionAuxInfo;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeyChoice;
//C          union {
//C           HCRYPTKEY hKeyEncryptionKey;
//C           void *pvKeyEncryptionKey;
//C         };
union _N141
{
    HCRYPTKEY hKeyEncryptionKey;
    void *pvKeyEncryptionKey;
}
//C         CRYPT_DATA_BLOB KeyId;
//C         FILETIME Date;
//C         PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
//C       } CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO,*PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    HCRYPTKEY hKeyEncryptionKey;
    void *pvKeyEncryptionKey;
    CRYPT_DATA_BLOB KeyId;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}
alias _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
alias _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
//C       struct _CMSG_RECIPIENT_ENCODE_INFO {
//C         DWORD dwRecipientChoice;
//C          union {
//C           PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
//C           PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
//C           PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
//C         };
union _N142
{
    PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
    PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
    PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
}
//C       };
struct _CMSG_RECIPIENT_ENCODE_INFO
{
    DWORD dwRecipientChoice;
    PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;
    PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;
    PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
}
//C       typedef struct _CMSG_RC2_AUX_INFO {
//C         DWORD cbSize;
//C         DWORD dwBitLen;
//C       } CMSG_RC2_AUX_INFO,*PCMSG_RC2_AUX_INFO;
struct _CMSG_RC2_AUX_INFO
{
    DWORD cbSize;
    DWORD dwBitLen;
}
alias _CMSG_RC2_AUX_INFO CMSG_RC2_AUX_INFO;
alias _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO;
//C       typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
//C         DWORD cbSize;
//C         DWORD dwFlags;
//C       } CMSG_SP3_COMPATIBLE_AUX_INFO,*PCMSG_SP3_COMPATIBLE_AUX_INFO;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO
{
    DWORD cbSize;
    DWORD dwFlags;
}
alias _CMSG_SP3_COMPATIBLE_AUX_INFO CMSG_SP3_COMPATIBLE_AUX_INFO;
alias _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO;
//C       typedef struct _CMSG_RC4_AUX_INFO {
//C         DWORD cbSize;
//C         DWORD dwBitLen;
//C       } CMSG_RC4_AUX_INFO,*PCMSG_RC4_AUX_INFO;
struct _CMSG_RC4_AUX_INFO
{
    DWORD cbSize;
    DWORD dwBitLen;
}
alias _CMSG_RC4_AUX_INFO CMSG_RC4_AUX_INFO;
alias _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO;
//C       typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
//C         DWORD cbSize;
//C         CMSG_SIGNED_ENCODE_INFO SignedInfo;
//C         CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
//C       } CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO,*PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO
{
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
}
alias _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
alias _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
//C       typedef struct _CMSG_HASHED_ENCODE_INFO {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         void *pvHashAuxInfo;
//C       } CMSG_HASHED_ENCODE_INFO,*PCMSG_HASHED_ENCODE_INFO;
struct _CMSG_HASHED_ENCODE_INFO
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
}
alias _CMSG_HASHED_ENCODE_INFO CMSG_HASHED_ENCODE_INFO;
alias _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;
//C       typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
//C         DWORD cbSize;
//C         CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
//C         void *pvEncryptionAuxInfo;
//C       } CMSG_ENCRYPTED_ENCODE_INFO,*PCMSG_ENCRYPTED_ENCODE_INFO;
struct _CMSG_ENCRYPTED_ENCODE_INFO
{
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
}
alias _CMSG_ENCRYPTED_ENCODE_INFO CMSG_ENCRYPTED_ENCODE_INFO;
alias _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;
//C       typedef WINBOOL ( *PFN_CMSG_STREAM_OUTPUT)(const void *pvArg,BYTE *pbData,DWORD cbData,WINBOOL fFinal);
alias WINBOOL  function(void *pvArg, BYTE *pbData, DWORD cbData, WINBOOL fFinal)PFN_CMSG_STREAM_OUTPUT;
//C       typedef struct _CMSG_STREAM_INFO {
//C         DWORD cbContent;
//C         PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
//C         void *pvArg;
//C       } CMSG_STREAM_INFO,*PCMSG_STREAM_INFO;
struct _CMSG_STREAM_INFO
{
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
}
alias _CMSG_STREAM_INFO CMSG_STREAM_INFO;
alias _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;
//C        HCRYPTMSG CryptMsgOpenToEncode(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,void const *pvMsgEncodeInfo,LPSTR pszInnerContentObjID,PCMSG_STREAM_INFO pStreamInfo);
HCRYPTMSG  CryptMsgOpenToEncode(DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo);
//C        DWORD CryptMsgCalculateEncodedLength(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,void const *pvMsgEncodeInfo,LPSTR pszInnerContentObjID,DWORD cbData);
DWORD  CryptMsgCalculateEncodedLength(DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData);
//C        HCRYPTMSG CryptMsgOpenToDecode(DWORD dwMsgEncodingType,DWORD dwFlags,DWORD dwMsgType,HCRYPTPROV hCryptProv,PCERT_INFO pRecipientInfo,PCMSG_STREAM_INFO pStreamInfo);
HCRYPTMSG  CryptMsgOpenToDecode(DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, HCRYPTPROV hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo);
//C        HCRYPTMSG CryptMsgDuplicate(HCRYPTMSG hCryptMsg);
HCRYPTMSG  CryptMsgDuplicate(HCRYPTMSG hCryptMsg);
//C        WINBOOL CryptMsgClose(HCRYPTMSG hCryptMsg);
WINBOOL  CryptMsgClose(HCRYPTMSG hCryptMsg);
//C        WINBOOL CryptMsgUpdate(HCRYPTMSG hCryptMsg,const BYTE *pbData,DWORD cbData,WINBOOL fFinal);
WINBOOL  CryptMsgUpdate(HCRYPTMSG hCryptMsg, BYTE *pbData, DWORD cbData, WINBOOL fFinal);
//C        WINBOOL CryptMsgGetParam(HCRYPTMSG hCryptMsg,DWORD dwParamType,DWORD dwIndex,void *pvData,DWORD *pcbData);
WINBOOL  CryptMsgGetParam(HCRYPTMSG hCryptMsg, DWORD dwParamType, DWORD dwIndex, void *pvData, DWORD *pcbData);
//C       typedef struct _CMSG_SIGNER_INFO {
//C         DWORD dwVersion;
//C         CERT_NAME_BLOB Issuer;
//C         CRYPT_INTEGER_BLOB SerialNumber;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedHash;
//C         CRYPT_ATTRIBUTES AuthAttrs;
//C         CRYPT_ATTRIBUTES UnauthAttrs;
//C       } CMSG_SIGNER_INFO,*PCMSG_SIGNER_INFO;
struct _CMSG_SIGNER_INFO
{
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
}
alias _CMSG_SIGNER_INFO CMSG_SIGNER_INFO;
alias _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;
//C       typedef struct _CMSG_CMS_SIGNER_INFO {
//C         DWORD dwVersion;
//C         CERT_ID SignerId;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedHash;
//C         CRYPT_ATTRIBUTES AuthAttrs;
//C         CRYPT_ATTRIBUTES UnauthAttrs;
//C       } CMSG_CMS_SIGNER_INFO,*PCMSG_CMS_SIGNER_INFO;
struct _CMSG_CMS_SIGNER_INFO
{
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
}
alias _CMSG_CMS_SIGNER_INFO CMSG_CMS_SIGNER_INFO;
alias _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO;
//C       typedef CRYPT_ATTRIBUTES CMSG_ATTR;
alias CRYPT_ATTRIBUTES CMSG_ATTR;
//C       typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
alias CRYPT_ATTRIBUTES *PCMSG_ATTR;
//C       typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
//C         DWORD dwVersion;
//C         CERT_ID RecipientId;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedKey;
//C       } CMSG_KEY_TRANS_RECIPIENT_INFO,*PCMSG_KEY_TRANS_RECIPIENT_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_INFO
{
    DWORD dwVersion;
    CERT_ID RecipientId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
}
alias _CMSG_KEY_TRANS_RECIPIENT_INFO CMSG_KEY_TRANS_RECIPIENT_INFO;
alias _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO;
//C       typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
//C         CERT_ID RecipientId;
//C         CRYPT_DATA_BLOB EncryptedKey;
//C         FILETIME Date;
//C         PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
//C       } CMSG_RECIPIENT_ENCRYPTED_KEY_INFO,*PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
{
    CERT_ID RecipientId;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}
alias _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
alias _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
//C       typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
//C         DWORD dwVersion;
//C         DWORD dwOriginatorChoice;
//C          union {
//C           CERT_ID OriginatorCertId;
//C           CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
//C         };
union _N143
{
    CERT_ID OriginatorCertId;
    CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
}
//C         CRYPT_DATA_BLOB UserKeyingMaterial;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         DWORD cRecipientEncryptedKeys;
//C         PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
//C       } CMSG_KEY_AGREE_RECIPIENT_INFO,*PCMSG_KEY_AGREE_RECIPIENT_INFO;
struct _CMSG_KEY_AGREE_RECIPIENT_INFO
{
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    CERT_ID OriginatorCertId;
    CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
}
alias _CMSG_KEY_AGREE_RECIPIENT_INFO CMSG_KEY_AGREE_RECIPIENT_INFO;
alias _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO;
//C       typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
//C         DWORD dwVersion;
//C         CRYPT_DATA_BLOB KeyId;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedKey;
//C         FILETIME Date;
//C         PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
//C       } CMSG_MAIL_LIST_RECIPIENT_INFO,*PCMSG_MAIL_LIST_RECIPIENT_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_INFO
{
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
}
alias _CMSG_MAIL_LIST_RECIPIENT_INFO CMSG_MAIL_LIST_RECIPIENT_INFO;
alias _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO;
//C       typedef struct _CMSG_CMS_RECIPIENT_INFO {
//C         DWORD dwRecipientChoice;
//C          union {
//C           PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
//C           PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
//C           PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
//C         };
union _N144
{
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
}
//C       } CMSG_CMS_RECIPIENT_INFO,*PCMSG_CMS_RECIPIENT_INFO;
struct _CMSG_CMS_RECIPIENT_INFO
{
    DWORD dwRecipientChoice;
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
}
alias _CMSG_CMS_RECIPIENT_INFO CMSG_CMS_RECIPIENT_INFO;
alias _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO;
//C        WINBOOL CryptMsgControl(HCRYPTMSG hCryptMsg,DWORD dwFlags,DWORD dwCtrlType,void const *pvCtrlPara);
WINBOOL  CryptMsgControl(HCRYPTMSG hCryptMsg, DWORD dwFlags, DWORD dwCtrlType, void *pvCtrlPara);
//C       typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwSignerIndex;
//C         DWORD dwSignerType;
//C         void *pvSigner;
//C       } CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA,*PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
}
alias _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
alias _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
//C       typedef struct _CMSG_CTRL_DECRYPT_PARA {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         DWORD dwRecipientIndex;
//C       } CMSG_CTRL_DECRYPT_PARA,*PCMSG_CTRL_DECRYPT_PARA;
struct _CMSG_CTRL_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    DWORD dwRecipientIndex;
}
alias _CMSG_CTRL_DECRYPT_PARA CMSG_CTRL_DECRYPT_PARA;
alias _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;
//C       typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
//C         DWORD dwRecipientIndex;
//C       } CMSG_CTRL_KEY_TRANS_DECRYPT_PARA,*PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
}
alias _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
alias _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
//C       typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
//C         DWORD dwRecipientIndex;
//C         DWORD dwRecipientEncryptedKeyIndex;
//C         CRYPT_BIT_BLOB OriginatorPublicKey;
//C       } CMSG_CTRL_KEY_AGREE_DECRYPT_PARA,*PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
}
alias _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
alias _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
//C       typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
//C         DWORD dwRecipientIndex;
//C         DWORD dwKeyChoice;
//C          union {
//C           HCRYPTKEY hKeyEncryptionKey;
//C           void *pvKeyEncryptionKey;
//C         };
union _N145
{
    HCRYPTKEY hKeyEncryptionKey;
    void *pvKeyEncryptionKey;
}
//C       } CMSG_CTRL_MAIL_LIST_DECRYPT_PARA,*PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    HCRYPTKEY hKeyEncryptionKey;
    void *pvKeyEncryptionKey;
}
alias _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
alias _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
//C       typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
//C         DWORD cbSize;
//C         DWORD dwSignerIndex;
//C         CRYPT_DATA_BLOB blob;
//C       } CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
}
alias _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
alias _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
//C       typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
//C         DWORD cbSize;
//C         DWORD dwSignerIndex;
//C         DWORD dwUnauthAttrIndex;
//C       } CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA,*PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA
{
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
}
alias _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
alias _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
//C       WINBOOL CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV hCryptProv,DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,PBYTE pbSignerInfoCountersignature,DWORD cbSignerInfoCountersignature,PCERT_INFO pciCountersigner);
WINBOOL  CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner);
//C       WINBOOL CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV hCryptProv,DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,PBYTE pbSignerInfoCountersignature,DWORD cbSignerInfoCountersignature,DWORD dwSignerType,void *pvSigner,DWORD dwFlags,void *pvReserved);
WINBOOL  CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, DWORD dwSignerType, void *pvSigner, DWORD dwFlags, void *pvReserved);
//C       WINBOOL CryptMsgCountersign(HCRYPTMSG hCryptMsg,DWORD dwIndex,DWORD cCountersigners,PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
WINBOOL  CryptMsgCountersign(HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners);
//C       WINBOOL CryptMsgCountersignEncoded(DWORD dwEncodingType,PBYTE pbSignerInfo,DWORD cbSignerInfo,DWORD cCountersigners,PCMSG_SIGNER_ENCODE_INFO rgCountersigners,PBYTE pbCountersignature,PDWORD pcbCountersignature);
WINBOOL  CryptMsgCountersignEncoded(DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature);
//C       typedef void *( *PFN_CMSG_ALLOC)(size_t cb);
alias void * function(size_t cb)PFN_CMSG_ALLOC;
//C       typedef void ( *PFN_CMSG_FREE)(void *pv);
alias void  function(void *pv)PFN_CMSG_FREE;
//C       typedef WINBOOL ( *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv,PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,PVOID pvEncryptAuxInfo,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,PFN_CMSG_ALLOC pfnAlloc,HCRYPTKEY *phEncryptKey,PBYTE *ppbEncryptParameters,PDWORD pcbEncryptParameters);
alias WINBOOL  function(HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY *phEncryptKey, PBYTE *ppbEncryptParameters, PDWORD pcbEncryptParameters)PFN_CMSG_GEN_ENCRYPT_KEY;
//C       typedef WINBOOL ( *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv,HCRYPTKEY hEncryptKey,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,PBYTE pbData,PDWORD pcbData);
alias WINBOOL  function(HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData)PFN_CMSG_EXPORT_ENCRYPT_KEY;
//C       typedef WINBOOL ( *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv,DWORD dwKeySpec,PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,PBYTE pbEncodedKey,DWORD cbEncodedKey,HCRYPTKEY *phEncryptKey);
alias WINBOOL  function(HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey)PFN_CMSG_IMPORT_ENCRYPT_KEY;
//C       typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
//C         void *pvEncryptionAuxInfo;
//C         DWORD cRecipients;
//C         PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
//C         PFN_CMSG_ALLOC pfnAlloc;
//C         PFN_CMSG_FREE pfnFree;
//C         DWORD dwEncryptFlags;
//C         HCRYPTKEY hContentEncryptKey;
//C         DWORD dwFlags;
//C       } CMSG_CONTENT_ENCRYPT_INFO,*PCMSG_CONTENT_ENCRYPT_INFO;
struct _CMSG_CONTENT_ENCRYPT_INFO
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    HCRYPTKEY hContentEncryptKey;
    DWORD dwFlags;
}
alias _CMSG_CONTENT_ENCRYPT_INFO CMSG_CONTENT_ENCRYPT_INFO;
alias _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO;
//C       typedef WINBOOL ( *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,DWORD dwFlags,void *pvReserved);
alias WINBOOL  function(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved)PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY;
//C       typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
//C         DWORD cbSize;
//C         DWORD dwRecipientIndex;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedKey;
//C         DWORD dwFlags;
//C       } CMSG_KEY_TRANS_ENCRYPT_INFO,*PCMSG_KEY_TRANS_ENCRYPT_INFO;
struct _CMSG_KEY_TRANS_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
}
alias _CMSG_KEY_TRANS_ENCRYPT_INFO CMSG_KEY_TRANS_ENCRYPT_INFO;
alias _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO;
//C       typedef WINBOOL ( *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,DWORD dwFlags,void *pvReserved);
alias WINBOOL  function(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved)PFN_CMSG_EXPORT_KEY_TRANS;
//C       typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
//C         DWORD cbSize;
//C         CRYPT_DATA_BLOB EncryptedKey;
//C       } CMSG_KEY_AGREE_KEY_ENCRYPT_INFO,*PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
{
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
}
alias _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
alias _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
//C       typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
//C         DWORD cbSize;
//C         DWORD dwRecipientIndex;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB UserKeyingMaterial;
//C         DWORD dwOriginatorChoice;
//C          union {
//C           CERT_ID OriginatorCertId;
//C           CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
//C         };
union _N146
{
    CERT_ID OriginatorCertId;
    CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
}
//C         DWORD cKeyAgreeKeyEncryptInfo;
//C         PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
//C         DWORD dwFlags;
//C       } CMSG_KEY_AGREE_ENCRYPT_INFO,*PCMSG_KEY_AGREE_ENCRYPT_INFO;
struct _CMSG_KEY_AGREE_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    CERT_ID OriginatorCertId;
    CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
}
alias _CMSG_KEY_AGREE_ENCRYPT_INFO CMSG_KEY_AGREE_ENCRYPT_INFO;
alias _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO;
//C       typedef WINBOOL ( *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,DWORD dwFlags,void *pvReserved);
alias WINBOOL  function(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved)PFN_CMSG_EXPORT_KEY_AGREE;
//C       typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
//C         DWORD cbSize;
//C         DWORD dwRecipientIndex;
//C         CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
//C         CRYPT_DATA_BLOB EncryptedKey;
//C         DWORD dwFlags;
//C       } CMSG_MAIL_LIST_ENCRYPT_INFO,*PCMSG_MAIL_LIST_ENCRYPT_INFO;
struct _CMSG_MAIL_LIST_ENCRYPT_INFO
{
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
}
alias _CMSG_MAIL_LIST_ENCRYPT_INFO CMSG_MAIL_LIST_ENCRYPT_INFO;
alias _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO;
//C       typedef WINBOOL ( *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,DWORD dwFlags,void *pvReserved);
alias WINBOOL  function(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved)PFN_CMSG_EXPORT_MAIL_LIST;
//C       typedef WINBOOL ( *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,DWORD dwFlags,void *pvReserved,HCRYPTKEY *phContentEncryptKey);
alias WINBOOL  function(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey)PFN_CMSG_IMPORT_KEY_TRANS;
//C       typedef WINBOOL ( *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,DWORD dwFlags,void *pvReserved,HCRYPTKEY *phContentEncryptKey);
alias WINBOOL  function(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey)PFN_CMSG_IMPORT_KEY_AGREE;
//C       typedef WINBOOL ( *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,DWORD dwFlags,void *pvReserved,HCRYPTKEY *phContentEncryptKey);
alias WINBOOL  function(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey)PFN_CMSG_IMPORT_MAIL_LIST;
//C       typedef void *HCERTSTORE;
alias void *HCERTSTORE;
//C       typedef struct _CERT_CONTEXT {
//C         DWORD dwCertEncodingType;
//C         BYTE *pbCertEncoded;
//C         DWORD cbCertEncoded;
//C         PCERT_INFO pCertInfo;
//C         HCERTSTORE hCertStore;
//C       } CERT_CONTEXT,*PCERT_CONTEXT;
struct _CERT_CONTEXT
{
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
}
alias _CERT_CONTEXT CERT_CONTEXT;
alias _CERT_CONTEXT *PCERT_CONTEXT;
//C       typedef const CERT_CONTEXT *PCCERT_CONTEXT;
alias CERT_CONTEXT *PCCERT_CONTEXT;
//C       typedef struct _CRL_CONTEXT {
//C         DWORD dwCertEncodingType;
//C         BYTE *pbCrlEncoded;
//C         DWORD cbCrlEncoded;
//C         PCRL_INFO pCrlInfo;
//C         HCERTSTORE hCertStore;
//C       } CRL_CONTEXT,*PCRL_CONTEXT;
struct _CRL_CONTEXT
{
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
}
alias _CRL_CONTEXT CRL_CONTEXT;
alias _CRL_CONTEXT *PCRL_CONTEXT;
//C       typedef const CRL_CONTEXT *PCCRL_CONTEXT;
alias CRL_CONTEXT *PCCRL_CONTEXT;
//C       typedef struct _CTL_CONTEXT {
//C         DWORD dwMsgAndCertEncodingType;
//C         BYTE *pbCtlEncoded;
//C         DWORD cbCtlEncoded;
//C         PCTL_INFO pCtlInfo;
//C         HCERTSTORE hCertStore;
//C         HCRYPTMSG hCryptMsg;
//C         BYTE *pbCtlContent;
//C         DWORD cbCtlContent;
//C       } CTL_CONTEXT,*PCTL_CONTEXT;
struct _CTL_CONTEXT
{
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
}
alias _CTL_CONTEXT CTL_CONTEXT;
alias _CTL_CONTEXT *PCTL_CONTEXT;
//C       typedef const CTL_CONTEXT *PCCTL_CONTEXT;
alias CTL_CONTEXT *PCCTL_CONTEXT;
//C       typedef struct _CRYPT_KEY_PROV_PARAM {
//C         DWORD dwParam;
//C         BYTE *pbData;
//C         DWORD cbData;
//C         DWORD dwFlags;
//C       } CRYPT_KEY_PROV_PARAM,*PCRYPT_KEY_PROV_PARAM;
struct _CRYPT_KEY_PROV_PARAM
{
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
}
alias _CRYPT_KEY_PROV_PARAM CRYPT_KEY_PROV_PARAM;
alias _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;
//C       typedef struct _CRYPT_KEY_PROV_INFO {
//C         LPWSTR pwszContainerName;
//C         LPWSTR pwszProvName;
//C         DWORD dwProvType;
//C         DWORD dwFlags;
//C         DWORD cProvParam;
//C         PCRYPT_KEY_PROV_PARAM rgProvParam;
//C         DWORD dwKeySpec;
//C       } CRYPT_KEY_PROV_INFO,*PCRYPT_KEY_PROV_INFO;
struct _CRYPT_KEY_PROV_INFO
{
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
}
alias _CRYPT_KEY_PROV_INFO CRYPT_KEY_PROV_INFO;
alias _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;
//C       typedef struct _CERT_KEY_CONTEXT {
//C         DWORD cbSize;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C       } CERT_KEY_CONTEXT,*PCERT_KEY_CONTEXT;
struct _CERT_KEY_CONTEXT
{
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
}
alias _CERT_KEY_CONTEXT CERT_KEY_CONTEXT;
alias _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;
//C       typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
//C          union {
//C           HKEY hKeyBase;
//C           void *pvBase;
//C         };
union _N147
{
    HKEY hKeyBase;
    void *pvBase;
}
//C          union {
//C           void *pvSystemStore;
//C           LPCSTR pszSystemStore;
//C           LPCWSTR pwszSystemStore;
//C         };
union _N148
{
    void *pvSystemStore;
    LPCSTR pszSystemStore;
    LPCWSTR pwszSystemStore;
}
//C       } CERT_SYSTEM_STORE_RELOCATE_PARA,*PCERT_SYSTEM_STORE_RELOCATE_PARA;
struct _CERT_SYSTEM_STORE_RELOCATE_PARA
{
    HKEY hKeyBase;
    void *pvBase;
    void *pvSystemStore;
    LPCSTR pszSystemStore;
    LPCWSTR pwszSystemStore;
}
alias _CERT_SYSTEM_STORE_RELOCATE_PARA CERT_SYSTEM_STORE_RELOCATE_PARA;
alias _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA;
//C       typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
//C         HKEY hKeyBase;
//C         LPWSTR pwszRegPath;
//C       } CERT_REGISTRY_STORE_CLIENT_GPT_PARA,*PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA
{
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
}
alias _CERT_REGISTRY_STORE_CLIENT_GPT_PARA CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
alias _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
//C       typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
//C         HKEY hKey;
//C         LPWSTR pwszStoreDirectory;
//C       } CERT_REGISTRY_STORE_ROAMING_PARA,*PCERT_REGISTRY_STORE_ROAMING_PARA;
struct _CERT_REGISTRY_STORE_ROAMING_PARA
{
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
}
alias _CERT_REGISTRY_STORE_ROAMING_PARA CERT_REGISTRY_STORE_ROAMING_PARA;
alias _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA;
//C       typedef struct _CERT_LDAP_STORE_OPENED_PARA {
//C         void *pvLdapSessionHandle;
//C         LPCWSTR pwszLdapUrl;
//C       } CERT_LDAP_STORE_OPENED_PARA,*PCERT_LDAP_STORE_OPENED_PARA;
struct _CERT_LDAP_STORE_OPENED_PARA
{
    void *pvLdapSessionHandle;
    LPCWSTR pwszLdapUrl;
}
alias _CERT_LDAP_STORE_OPENED_PARA CERT_LDAP_STORE_OPENED_PARA;
alias _CERT_LDAP_STORE_OPENED_PARA *PCERT_LDAP_STORE_OPENED_PARA;
//C        HCERTSTORE CertOpenStore(LPCSTR lpszStoreProvider,DWORD dwEncodingType,HCRYPTPROV hCryptProv,DWORD dwFlags,const void *pvPara);
HCERTSTORE  CertOpenStore(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags, void *pvPara);
//C       typedef void *HCERTSTOREPROV;
alias void *HCERTSTOREPROV;
//C       typedef struct _CERT_STORE_PROV_INFO {
//C         DWORD cbSize;
//C         DWORD cStoreProvFunc;
//C         void **rgpvStoreProvFunc;
//C         HCERTSTOREPROV hStoreProv;
//C         DWORD dwStoreProvFlags;
//C         HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
//C       } CERT_STORE_PROV_INFO,*PCERT_STORE_PROV_INFO;
struct _CERT_STORE_PROV_INFO
{
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
}
alias _CERT_STORE_PROV_INFO CERT_STORE_PROV_INFO;
alias _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;
//C       typedef WINBOOL ( *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR lpszStoreProvider,DWORD dwEncodingType,HCRYPTPROV hCryptProv,DWORD dwFlags,const void *pvPara,HCERTSTORE hCertStore,PCERT_STORE_PROV_INFO pStoreProvInfo);
alias WINBOOL  function(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags, void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo)PFN_CERT_DLL_OPEN_STORE_PROV_FUNC;
//C       typedef void ( *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv,DWORD dwFlags);
alias void  function(HCERTSTOREPROV hStoreProv, DWORD dwFlags)PFN_CERT_STORE_PROV_CLOSE;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pStoreCertContext,DWORD dwFlags,PCCERT_CONTEXT *ppProvCertContext);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext)PFN_CERT_STORE_PROV_READ_CERT;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags)PFN_CERT_STORE_PROV_WRITE_CERT;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags)PFN_CERT_STORE_PROV_DELETE_CERT;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData)PFN_CERT_STORE_PROV_SET_CERT_PROPERTY;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pStoreCrlContext,DWORD dwFlags,PCCRL_CONTEXT *ppProvCrlContext);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext)PFN_CERT_STORE_PROV_READ_CRL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags)PFN_CERT_STORE_PROV_WRITE_CRL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags)PFN_CERT_STORE_PROV_DELETE_CRL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData)PFN_CERT_STORE_PROV_SET_CRL_PROPERTY;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pStoreCtlContext,DWORD dwFlags,PCCTL_CONTEXT *ppProvCtlContext);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext)PFN_CERT_STORE_PROV_READ_CTL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags)PFN_CERT_STORE_PROV_WRITE_CTL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags)PFN_CERT_STORE_PROV_DELETE_CTL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData)PFN_CERT_STORE_PROV_SET_CTL_PROPERTY;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV hStoreProv,DWORD dwFlags,DWORD dwCtrlType,void const *pvCtrlPara);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType, void *pvCtrlPara)PFN_CERT_STORE_PROV_CONTROL;
//C       typedef struct _CERT_STORE_PROV_FIND_INFO {
//C         DWORD cbSize;
//C         DWORD dwMsgAndCertEncodingType;
//C         DWORD dwFindFlags;
//C         DWORD dwFindType;
//C         const void *pvFindPara;
//C       } CERT_STORE_PROV_FIND_INFO,*PCERT_STORE_PROV_FIND_INFO;
struct _CERT_STORE_PROV_FIND_INFO
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    void *pvFindPara;
}
alias _CERT_STORE_PROV_FIND_INFO CERT_STORE_PROV_FIND_INFO;
alias _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO;
//C       typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,*PCCERT_STORE_PROV_FIND_INFO;
alias CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO;
alias CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCERT_CONTEXT pPrevCertContext,DWORD dwFlags,void **ppvStoreProvFindInfo,PCCERT_CONTEXT *ppProvCertContext);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext)PFN_CERT_STORE_PROV_FIND_CERT;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,void *pvStoreProvFindInfo,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void *pvStoreProvFindInfo, DWORD dwFlags)PFN_CERT_STORE_PROV_FREE_FIND_CERT;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,void *pvData,DWORD *pcbData);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData)PFN_CERT_STORE_PROV_GET_CERT_PROPERTY;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCRL_CONTEXT pPrevCrlContext,DWORD dwFlags,void **ppvStoreProvFindInfo,PCCRL_CONTEXT *ppProvCrlContext);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext)PFN_CERT_STORE_PROV_FIND_CRL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,void *pvStoreProvFindInfo,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void *pvStoreProvFindInfo, DWORD dwFlags)PFN_CERT_STORE_PROV_FREE_FIND_CRL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,void *pvData,DWORD *pcbData);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData)PFN_CERT_STORE_PROV_GET_CRL_PROPERTY;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV hStoreProv,PCCERT_STORE_PROV_FIND_INFO pFindInfo,PCCTL_CONTEXT pPrevCtlContext,DWORD dwFlags,void **ppvStoreProvFindInfo,PCCTL_CONTEXT *ppProvCtlContext);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCTL_CONTEXT *ppProvCtlContext)PFN_CERT_STORE_PROV_FIND_CTL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,void *pvStoreProvFindInfo,DWORD dwFlags);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags)PFN_CERT_STORE_PROV_FREE_FIND_CTL;
//C       typedef WINBOOL ( *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv,PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,void *pvData,DWORD *pcbData);
alias WINBOOL  function(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData)PFN_CERT_STORE_PROV_GET_CTL_PROPERTY;
//C        HCERTSTORE CertDuplicateStore(HCERTSTORE hCertStore);
HCERTSTORE  CertDuplicateStore(HCERTSTORE hCertStore);
//C        WINBOOL CertSaveStore(HCERTSTORE hCertStore,DWORD dwEncodingType,DWORD dwSaveAs,DWORD dwSaveTo,void *pvSaveToPara,DWORD dwFlags);
WINBOOL  CertSaveStore(HCERTSTORE hCertStore, DWORD dwEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void *pvSaveToPara, DWORD dwFlags);
//C        WINBOOL CertCloseStore(HCERTSTORE hCertStore,DWORD dwFlags);
WINBOOL  CertCloseStore(HCERTSTORE hCertStore, DWORD dwFlags);
//C        PCCERT_CONTEXT CertGetSubjectCertificateFromStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,PCERT_INFO pCertId);
PCCERT_CONTEXT  CertGetSubjectCertificateFromStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, PCERT_INFO pCertId);
//C        PCCERT_CONTEXT CertEnumCertificatesInStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pPrevCertContext);
PCCERT_CONTEXT  CertEnumCertificatesInStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext);
//C        PCCERT_CONTEXT CertFindCertificateInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCERT_CONTEXT pPrevCertContext);
PCCERT_CONTEXT  CertFindCertificateInStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void *pvFindPara, PCCERT_CONTEXT pPrevCertContext);
//C        PCCERT_CONTEXT CertGetIssuerCertificateFromStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pSubjectContext,PCCERT_CONTEXT pPrevIssuerContext,DWORD *pdwFlags);
PCCERT_CONTEXT  CertGetIssuerCertificateFromStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD *pdwFlags);
//C        WINBOOL CertVerifySubjectCertificateContext(PCCERT_CONTEXT pSubject,PCCERT_CONTEXT pIssuer,DWORD *pdwFlags);
WINBOOL  CertVerifySubjectCertificateContext(PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD *pdwFlags);
//C        PCCERT_CONTEXT CertDuplicateCertificateContext(PCCERT_CONTEXT pCertContext);
PCCERT_CONTEXT  CertDuplicateCertificateContext(PCCERT_CONTEXT pCertContext);
//C        PCCERT_CONTEXT CertCreateCertificateContext(DWORD dwCertEncodingType,const BYTE *pbCertEncoded,DWORD cbCertEncoded);
PCCERT_CONTEXT  CertCreateCertificateContext(DWORD dwCertEncodingType, BYTE *pbCertEncoded, DWORD cbCertEncoded);
//C        WINBOOL CertFreeCertificateContext(PCCERT_CONTEXT pCertContext);
WINBOOL  CertFreeCertificateContext(PCCERT_CONTEXT pCertContext);
//C        WINBOOL CertSetCertificateContextProperty(PCCERT_CONTEXT pCertContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
WINBOOL  CertSetCertificateContextProperty(PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData);
//C        WINBOOL CertGetCertificateContextProperty(PCCERT_CONTEXT pCertContext,DWORD dwPropId,void *pvData,DWORD *pcbData);
WINBOOL  CertGetCertificateContextProperty(PCCERT_CONTEXT pCertContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
//C        DWORD CertEnumCertificateContextProperties(PCCERT_CONTEXT pCertContext,DWORD dwPropId);
DWORD  CertEnumCertificateContextProperties(PCCERT_CONTEXT pCertContext, DWORD dwPropId);
//C        WINBOOL CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT pCertContext,DWORD cOptAttr,PCRYPT_ATTRIBUTE rgOptAttr,DWORD dwFlags,void *pvReserved,PCTL_ENTRY pCtlEntry,DWORD *pcbCtlEntry);
WINBOOL  CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void *pvReserved, PCTL_ENTRY pCtlEntry, DWORD *pcbCtlEntry);
//C        WINBOOL CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT pCertContext,PCTL_ENTRY pCtlEntry,DWORD dwFlags);
WINBOOL  CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags);
//C        PCCRL_CONTEXT CertGetCRLFromStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pIssuerContext,PCCRL_CONTEXT pPrevCrlContext,DWORD *pdwFlags);
PCCRL_CONTEXT  CertGetCRLFromStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD *pdwFlags);
//C        PCCRL_CONTEXT CertEnumCRLsInStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pPrevCrlContext);
PCCRL_CONTEXT  CertEnumCRLsInStore(HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext);
//C        PCCRL_CONTEXT CertFindCRLInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCRL_CONTEXT pPrevCrlContext);
PCCRL_CONTEXT  CertFindCRLInStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void *pvFindPara, PCCRL_CONTEXT pPrevCrlContext);
//C       typedef struct _CRL_FIND_ISSUED_FOR_PARA {
//C         PCCERT_CONTEXT pSubjectCert;
//C         PCCERT_CONTEXT pIssuerCert;
//C       } CRL_FIND_ISSUED_FOR_PARA,*PCRL_FIND_ISSUED_FOR_PARA;
struct _CRL_FIND_ISSUED_FOR_PARA
{
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
}
alias _CRL_FIND_ISSUED_FOR_PARA CRL_FIND_ISSUED_FOR_PARA;
alias _CRL_FIND_ISSUED_FOR_PARA *PCRL_FIND_ISSUED_FOR_PARA;
//C        PCCRL_CONTEXT CertDuplicateCRLContext(PCCRL_CONTEXT pCrlContext);
PCCRL_CONTEXT  CertDuplicateCRLContext(PCCRL_CONTEXT pCrlContext);
//C        PCCRL_CONTEXT CertCreateCRLContext(DWORD dwCertEncodingType,const BYTE *pbCrlEncoded,DWORD cbCrlEncoded);
PCCRL_CONTEXT  CertCreateCRLContext(DWORD dwCertEncodingType, BYTE *pbCrlEncoded, DWORD cbCrlEncoded);
//C        WINBOOL CertFreeCRLContext(PCCRL_CONTEXT pCrlContext);
WINBOOL  CertFreeCRLContext(PCCRL_CONTEXT pCrlContext);
//C        WINBOOL CertSetCRLContextProperty(PCCRL_CONTEXT pCrlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
WINBOOL  CertSetCRLContextProperty(PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData);
//C        WINBOOL CertGetCRLContextProperty(PCCRL_CONTEXT pCrlContext,DWORD dwPropId,void *pvData,DWORD *pcbData);
WINBOOL  CertGetCRLContextProperty(PCCRL_CONTEXT pCrlContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
//C        DWORD CertEnumCRLContextProperties(PCCRL_CONTEXT pCrlContext,DWORD dwPropId);
DWORD  CertEnumCRLContextProperties(PCCRL_CONTEXT pCrlContext, DWORD dwPropId);
//C        WINBOOL CertFindCertificateInCRL(PCCERT_CONTEXT pCert,PCCRL_CONTEXT pCrlContext,DWORD dwFlags,void *pvReserved,PCRL_ENTRY *ppCrlEntry);
WINBOOL  CertFindCertificateInCRL(PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void *pvReserved, PCRL_ENTRY *ppCrlEntry);
//C        WINBOOL CertIsValidCRLForCertificate(PCCERT_CONTEXT pCert,PCCRL_CONTEXT pCrl,DWORD dwFlags,void *pvReserved);
WINBOOL  CertIsValidCRLForCertificate(PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrl, DWORD dwFlags, void *pvReserved);
//C        WINBOOL CertAddEncodedCertificateToStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,const BYTE *pbCertEncoded,DWORD cbCertEncoded,DWORD dwAddDisposition,PCCERT_CONTEXT *ppCertContext);
WINBOOL  CertAddEncodedCertificateToStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, BYTE *pbCertEncoded, DWORD cbCertEncoded, DWORD dwAddDisposition, PCCERT_CONTEXT *ppCertContext);
//C        WINBOOL CertAddCertificateContextToStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pCertContext,DWORD dwAddDisposition,PCCERT_CONTEXT *ppStoreContext);
WINBOOL  CertAddCertificateContextToStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext);
//C        WINBOOL CertAddSerializedElementToStore(HCERTSTORE hCertStore,const BYTE *pbElement,DWORD cbElement,DWORD dwAddDisposition,DWORD dwFlags,DWORD dwContextTypeFlags,DWORD *pdwContextType,const void **ppvContext);
WINBOOL  CertAddSerializedElementToStore(HCERTSTORE hCertStore, BYTE *pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, DWORD *pdwContextType, void **ppvContext);
//C        WINBOOL CertDeleteCertificateFromStore(PCCERT_CONTEXT pCertContext);
WINBOOL  CertDeleteCertificateFromStore(PCCERT_CONTEXT pCertContext);
//C        WINBOOL CertAddEncodedCRLToStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,const BYTE *pbCrlEncoded,DWORD cbCrlEncoded,DWORD dwAddDisposition,PCCRL_CONTEXT *ppCrlContext);
WINBOOL  CertAddEncodedCRLToStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, BYTE *pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT *ppCrlContext);
//C        WINBOOL CertAddCRLContextToStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pCrlContext,DWORD dwAddDisposition,PCCRL_CONTEXT *ppStoreContext);
WINBOOL  CertAddCRLContextToStore(HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext);
//C        WINBOOL CertDeleteCRLFromStore(PCCRL_CONTEXT pCrlContext);
WINBOOL  CertDeleteCRLFromStore(PCCRL_CONTEXT pCrlContext);
//C        WINBOOL CertSerializeCertificateStoreElement(PCCERT_CONTEXT pCertContext,DWORD dwFlags,BYTE *pbElement,DWORD *pcbElement);
WINBOOL  CertSerializeCertificateStoreElement(PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
//C        WINBOOL CertSerializeCRLStoreElement(PCCRL_CONTEXT pCrlContext,DWORD dwFlags,BYTE *pbElement,DWORD *pcbElement);
WINBOOL  CertSerializeCRLStoreElement(PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
//C        PCCTL_CONTEXT CertDuplicateCTLContext(PCCTL_CONTEXT pCtlContext);
PCCTL_CONTEXT  CertDuplicateCTLContext(PCCTL_CONTEXT pCtlContext);
//C        PCCTL_CONTEXT CertCreateCTLContext(DWORD dwMsgAndCertEncodingType,const BYTE *pbCtlEncoded,DWORD cbCtlEncoded);
PCCTL_CONTEXT  CertCreateCTLContext(DWORD dwMsgAndCertEncodingType, BYTE *pbCtlEncoded, DWORD cbCtlEncoded);
//C        WINBOOL CertFreeCTLContext(PCCTL_CONTEXT pCtlContext);
WINBOOL  CertFreeCTLContext(PCCTL_CONTEXT pCtlContext);
//C        WINBOOL CertSetCTLContextProperty(PCCTL_CONTEXT pCtlContext,DWORD dwPropId,DWORD dwFlags,const void *pvData);
WINBOOL  CertSetCTLContextProperty(PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData);
//C        WINBOOL CertGetCTLContextProperty(PCCTL_CONTEXT pCtlContext,DWORD dwPropId,void *pvData,DWORD *pcbData);
WINBOOL  CertGetCTLContextProperty(PCCTL_CONTEXT pCtlContext, DWORD dwPropId, void *pvData, DWORD *pcbData);
//C        DWORD CertEnumCTLContextProperties(PCCTL_CONTEXT pCtlContext,DWORD dwPropId);
DWORD  CertEnumCTLContextProperties(PCCTL_CONTEXT pCtlContext, DWORD dwPropId);
//C        PCCTL_CONTEXT CertEnumCTLsInStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pPrevCtlContext);
PCCTL_CONTEXT  CertEnumCTLsInStore(HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext);
//C        PCTL_ENTRY CertFindSubjectInCTL(DWORD dwEncodingType,DWORD dwSubjectType,void *pvSubject,PCCTL_CONTEXT pCtlContext,DWORD dwFlags);
PCTL_ENTRY  CertFindSubjectInCTL(DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
//C       typedef struct _CTL_ANY_SUBJECT_INFO {
//C         CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
//C         CRYPT_DATA_BLOB SubjectIdentifier;
//C       } CTL_ANY_SUBJECT_INFO,*PCTL_ANY_SUBJECT_INFO;
struct _CTL_ANY_SUBJECT_INFO
{
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
}
alias _CTL_ANY_SUBJECT_INFO CTL_ANY_SUBJECT_INFO;
alias _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;
//C        PCCTL_CONTEXT CertFindCTLInStore(HCERTSTORE hCertStore,DWORD dwMsgAndCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCTL_CONTEXT pPrevCtlContext);
PCCTL_CONTEXT  CertFindCTLInStore(HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void *pvFindPara, PCCTL_CONTEXT pPrevCtlContext);
//C       typedef struct _CTL_FIND_USAGE_PARA {
//C         DWORD cbSize;
//C         CTL_USAGE SubjectUsage;
//C         CRYPT_DATA_BLOB ListIdentifier;
//C         PCERT_INFO pSigner;
//C       } CTL_FIND_USAGE_PARA,*PCTL_FIND_USAGE_PARA;
struct _CTL_FIND_USAGE_PARA
{
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
}
alias _CTL_FIND_USAGE_PARA CTL_FIND_USAGE_PARA;
alias _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;
//C       typedef struct _CTL_FIND_SUBJECT_PARA {
//C         DWORD cbSize;
//C         PCTL_FIND_USAGE_PARA pUsagePara;
//C         DWORD dwSubjectType;
//C         void *pvSubject;
//C       } CTL_FIND_SUBJECT_PARA,*PCTL_FIND_SUBJECT_PARA;
struct _CTL_FIND_SUBJECT_PARA
{
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
}
alias _CTL_FIND_SUBJECT_PARA CTL_FIND_SUBJECT_PARA;
alias _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;
//C        WINBOOL CertAddEncodedCTLToStore(HCERTSTORE hCertStore,DWORD dwMsgAndCertEncodingType,const BYTE *pbCtlEncoded,DWORD cbCtlEncoded,DWORD dwAddDisposition,PCCTL_CONTEXT *ppCtlContext);
WINBOOL  CertAddEncodedCTLToStore(HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, BYTE *pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT *ppCtlContext);
//C        WINBOOL CertAddCTLContextToStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pCtlContext,DWORD dwAddDisposition,PCCTL_CONTEXT *ppStoreContext);
WINBOOL  CertAddCTLContextToStore(HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext);
//C        WINBOOL CertSerializeCTLStoreElement(PCCTL_CONTEXT pCtlContext,DWORD dwFlags,BYTE *pbElement,DWORD *pcbElement);
WINBOOL  CertSerializeCTLStoreElement(PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement);
//C        WINBOOL CertDeleteCTLFromStore(PCCTL_CONTEXT pCtlContext);
WINBOOL  CertDeleteCTLFromStore(PCCTL_CONTEXT pCtlContext);
//C        WINBOOL CertAddCertificateLinkToStore(HCERTSTORE hCertStore,PCCERT_CONTEXT pCertContext,DWORD dwAddDisposition,PCCERT_CONTEXT *ppStoreContext);
WINBOOL  CertAddCertificateLinkToStore(HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext);
//C        WINBOOL CertAddCRLLinkToStore(HCERTSTORE hCertStore,PCCRL_CONTEXT pCrlContext,DWORD dwAddDisposition,PCCRL_CONTEXT *ppStoreContext);
WINBOOL  CertAddCRLLinkToStore(HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext);
//C        WINBOOL CertAddCTLLinkToStore(HCERTSTORE hCertStore,PCCTL_CONTEXT pCtlContext,DWORD dwAddDisposition,PCCTL_CONTEXT *ppStoreContext);
WINBOOL  CertAddCTLLinkToStore(HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext);
//C        WINBOOL CertAddStoreToCollection(HCERTSTORE hCollectionStore,HCERTSTORE hSiblingStore,DWORD dwUpdateFlags,DWORD dwPriority);
WINBOOL  CertAddStoreToCollection(HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority);
//C        void CertRemoveStoreFromCollection(HCERTSTORE hCollectionStore,HCERTSTORE hSiblingStore);
void  CertRemoveStoreFromCollection(HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore);
//C        WINBOOL CertControlStore(HCERTSTORE hCertStore,DWORD dwFlags,DWORD dwCtrlType,void const *pvCtrlPara);
WINBOOL  CertControlStore(HCERTSTORE hCertStore, DWORD dwFlags, DWORD dwCtrlType, void *pvCtrlPara);
//C        WINBOOL CertSetStoreProperty(HCERTSTORE hCertStore,DWORD dwPropId,DWORD dwFlags,const void *pvData);
WINBOOL  CertSetStoreProperty(HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, void *pvData);
//C        WINBOOL CertGetStoreProperty(HCERTSTORE hCertStore,DWORD dwPropId,void *pvData,DWORD *pcbData);
WINBOOL  CertGetStoreProperty(HCERTSTORE hCertStore, DWORD dwPropId, void *pvData, DWORD *pcbData);
//C       typedef struct _CERT_CREATE_CONTEXT_PARA {
//C         DWORD cbSize;
//C         PFN_CRYPT_FREE pfnFree;
//C         void *pvFree;
//C       } CERT_CREATE_CONTEXT_PARA,*PCERT_CREATE_CONTEXT_PARA;
struct _CERT_CREATE_CONTEXT_PARA
{
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;
}
alias _CERT_CREATE_CONTEXT_PARA CERT_CREATE_CONTEXT_PARA;
alias _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA;
//C        const void * CertCreateContext(DWORD dwContextType,DWORD dwEncodingType,const BYTE *pbEncoded,DWORD cbEncoded,DWORD dwFlags,PCERT_CREATE_CONTEXT_PARA pCreatePara);
void * CertCreateContext(DWORD dwContextType, DWORD dwEncodingType, BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara);
//C       typedef struct _CERT_SYSTEM_STORE_INFO {
//C         DWORD cbSize;
//C       } CERT_SYSTEM_STORE_INFO,*PCERT_SYSTEM_STORE_INFO;
struct _CERT_SYSTEM_STORE_INFO
{
    DWORD cbSize;
}
alias _CERT_SYSTEM_STORE_INFO CERT_SYSTEM_STORE_INFO;
alias _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO;
//C       typedef struct _CERT_PHYSICAL_STORE_INFO {
//C         DWORD cbSize;
//C         LPSTR pszOpenStoreProvider;
//C         DWORD dwOpenEncodingType;
//C         DWORD dwOpenFlags;
//C         CRYPT_DATA_BLOB OpenParameters;
//C         DWORD dwFlags;
//C         DWORD dwPriority;
//C       } CERT_PHYSICAL_STORE_INFO,*PCERT_PHYSICAL_STORE_INFO;
struct _CERT_PHYSICAL_STORE_INFO
{
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
}
alias _CERT_PHYSICAL_STORE_INFO CERT_PHYSICAL_STORE_INFO;
alias _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO;
//C        WINBOOL CertRegisterSystemStore(const void *pvSystemStore,DWORD dwFlags,PCERT_SYSTEM_STORE_INFO pStoreInfo,void *pvReserved);
WINBOOL  CertRegisterSystemStore(void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved);
//C        WINBOOL CertRegisterPhysicalStore(const void *pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName,PCERT_PHYSICAL_STORE_INFO pStoreInfo,void *pvReserved);
WINBOOL  CertRegisterPhysicalStore(void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved);
//C        WINBOOL CertUnregisterSystemStore(const void *pvSystemStore,DWORD dwFlags);
WINBOOL  CertUnregisterSystemStore(void *pvSystemStore, DWORD dwFlags);
//C        WINBOOL CertUnregisterPhysicalStore(const void *pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName);
WINBOOL  CertUnregisterPhysicalStore(void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName);
//C       typedef WINBOOL ( *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(LPCWSTR pwszStoreLocation,DWORD dwFlags,void *pvReserved,void *pvArg);
alias WINBOOL  function(LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg)PFN_CERT_ENUM_SYSTEM_STORE_LOCATION;
//C       typedef WINBOOL ( *PFN_CERT_ENUM_SYSTEM_STORE)(const void *pvSystemStore,DWORD dwFlags,PCERT_SYSTEM_STORE_INFO pStoreInfo,void *pvReserved,void *pvArg);
alias WINBOOL  function(void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg)PFN_CERT_ENUM_SYSTEM_STORE;
//C       typedef WINBOOL ( *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *pvSystemStore,DWORD dwFlags,LPCWSTR pwszStoreName,PCERT_PHYSICAL_STORE_INFO pStoreInfo,void *pvReserved,void *pvArg);
alias WINBOOL  function(void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg)PFN_CERT_ENUM_PHYSICAL_STORE;
//C        WINBOOL CertEnumSystemStoreLocation(DWORD dwFlags,void *pvArg,PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
WINBOOL  CertEnumSystemStoreLocation(DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum);
//C        WINBOOL CertEnumSystemStore(DWORD dwFlags,void *pvSystemStoreLocationPara,void *pvArg,PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
WINBOOL  CertEnumSystemStore(DWORD dwFlags, void *pvSystemStoreLocationPara, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum);
//C        WINBOOL CertEnumPhysicalStore(const void *pvSystemStore,DWORD dwFlags,void *pvArg,PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
WINBOOL  CertEnumPhysicalStore(void *pvSystemStore, DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum);
//C        WINBOOL CertGetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,DWORD dwFlags,PCERT_ENHKEY_USAGE pUsage,DWORD *pcbUsage);
WINBOOL  CertGetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext, DWORD dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD *pcbUsage);
//C        WINBOOL CertSetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext,PCERT_ENHKEY_USAGE pUsage);
WINBOOL  CertSetEnhancedKeyUsage(PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage);
//C        WINBOOL CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,LPCSTR pszUsageIdentifier);
WINBOOL  CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
//C        WINBOOL CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext,LPCSTR pszUsageIdentifier);
WINBOOL  CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier);
//C        WINBOOL CertGetValidUsages(DWORD cCerts,PCCERT_CONTEXT *rghCerts,int *cNumOIDs,LPSTR *rghOIDs,DWORD *pcbOIDs);
WINBOOL  CertGetValidUsages(DWORD cCerts, PCCERT_CONTEXT *rghCerts, int *cNumOIDs, LPSTR *rghOIDs, DWORD *pcbOIDs);
//C        WINBOOL CryptMsgGetAndVerifySigner(HCRYPTMSG hCryptMsg,DWORD cSignerStore,HCERTSTORE *rghSignerStore,DWORD dwFlags,PCCERT_CONTEXT *ppSigner,DWORD *pdwSignerIndex);
WINBOOL  CryptMsgGetAndVerifySigner(HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE *rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT *ppSigner, DWORD *pdwSignerIndex);
//C        WINBOOL CryptMsgSignCTL(DWORD dwMsgEncodingType,BYTE *pbCtlContent,DWORD cbCtlContent,PCMSG_SIGNED_ENCODE_INFO pSignInfo,DWORD dwFlags,BYTE *pbEncoded,DWORD *pcbEncoded);
WINBOOL  CryptMsgSignCTL(DWORD dwMsgEncodingType, BYTE *pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded);
//C        WINBOOL CryptMsgEncodeAndSignCTL(DWORD dwMsgEncodingType,PCTL_INFO pCtlInfo,PCMSG_SIGNED_ENCODE_INFO pSignInfo,DWORD dwFlags,BYTE *pbEncoded,DWORD *pcbEncoded);
WINBOOL  CryptMsgEncodeAndSignCTL(DWORD dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded);
//C        WINBOOL CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB pSubjectIdentifier,PCCTL_CONTEXT pCtlContext,DWORD dwFlags,void *pvReserved,PCRYPT_DER_BLOB pEncodedAttributes);
WINBOOL  CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void *pvReserved, PCRYPT_DER_BLOB pEncodedAttributes);
//C        WINBOOL CertEnumSubjectInSortedCTL(PCCTL_CONTEXT pCtlContext,void **ppvNextSubject,PCRYPT_DER_BLOB pSubjectIdentifier,PCRYPT_DER_BLOB pEncodedAttributes);
WINBOOL  CertEnumSubjectInSortedCTL(PCCTL_CONTEXT pCtlContext, void **ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes);
//C       typedef struct _CTL_VERIFY_USAGE_PARA {
//C         DWORD cbSize;
//C         CRYPT_DATA_BLOB ListIdentifier;
//C         DWORD cCtlStore;
//C         HCERTSTORE *rghCtlStore;
//C         DWORD cSignerStore;
//C         HCERTSTORE *rghSignerStore;
//C       } CTL_VERIFY_USAGE_PARA,*PCTL_VERIFY_USAGE_PARA;
struct _CTL_VERIFY_USAGE_PARA
{
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
}
alias _CTL_VERIFY_USAGE_PARA CTL_VERIFY_USAGE_PARA;
alias _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;
//C       typedef struct _CTL_VERIFY_USAGE_STATUS {
//C         DWORD cbSize;
//C         DWORD dwError;
//C         DWORD dwFlags;
//C         PCCTL_CONTEXT *ppCtl;
//C         DWORD dwCtlEntryIndex;
//C         PCCERT_CONTEXT *ppSigner;
//C         DWORD dwSignerIndex;
//C       } CTL_VERIFY_USAGE_STATUS,*PCTL_VERIFY_USAGE_STATUS;
struct _CTL_VERIFY_USAGE_STATUS
{
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
}
alias _CTL_VERIFY_USAGE_STATUS CTL_VERIFY_USAGE_STATUS;
alias _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;
//C        WINBOOL CertVerifyCTLUsage(DWORD dwEncodingType,DWORD dwSubjectType,void *pvSubject,PCTL_USAGE pSubjectUsage,DWORD dwFlags,PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);
WINBOOL  CertVerifyCTLUsage(DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus);
//C       typedef struct _CERT_REVOCATION_CRL_INFO {
//C         DWORD cbSize;
//C         PCCRL_CONTEXT pBaseCrlContext;
//C         PCCRL_CONTEXT pDeltaCrlContext;
//C         PCRL_ENTRY pCrlEntry;
//C         WINBOOL fDeltaCrlEntry;
//C       } CERT_REVOCATION_CRL_INFO,*PCERT_REVOCATION_CRL_INFO;
struct _CERT_REVOCATION_CRL_INFO
{
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;
    PCRL_ENTRY pCrlEntry;
    WINBOOL fDeltaCrlEntry;
}
alias _CERT_REVOCATION_CRL_INFO CERT_REVOCATION_CRL_INFO;
alias _CERT_REVOCATION_CRL_INFO *PCERT_REVOCATION_CRL_INFO;
//C       typedef struct _CERT_REVOCATION_PARA {
//C         DWORD cbSize;
//C         PCCERT_CONTEXT pIssuerCert;
//C         DWORD cCertStore;
//C         HCERTSTORE *rgCertStore;
//C         HCERTSTORE hCrlStore;
//C         LPFILETIME pftTimeToUse;
//C       } CERT_REVOCATION_PARA,*PCERT_REVOCATION_PARA;
struct _CERT_REVOCATION_PARA
{
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
}
alias _CERT_REVOCATION_PARA CERT_REVOCATION_PARA;
alias _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;
//C       typedef struct _CERT_REVOCATION_STATUS {
//C         DWORD cbSize;
//C         DWORD dwIndex;
//C         DWORD dwError;
//C         DWORD dwReason;
//C         WINBOOL fHasFreshnessTime;
//C         DWORD dwFreshnessTime;
//C       } CERT_REVOCATION_STATUS,*PCERT_REVOCATION_STATUS;
struct _CERT_REVOCATION_STATUS
{
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
}
alias _CERT_REVOCATION_STATUS CERT_REVOCATION_STATUS;
alias _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;
//C        WINBOOL CertVerifyRevocation(DWORD dwEncodingType,DWORD dwRevType,DWORD cContext,PVOID rgpvContext[],DWORD dwFlags,PCERT_REVOCATION_PARA pRevPara,PCERT_REVOCATION_STATUS pRevStatus);
WINBOOL  CertVerifyRevocation(DWORD dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID *rgpvContext, DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus);
//C       WINBOOL CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB pInt1,PCRYPT_INTEGER_BLOB pInt2);
WINBOOL  CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2);
//C        WINBOOL CertCompareCertificate(DWORD dwCertEncodingType,PCERT_INFO pCertId1,PCERT_INFO pCertId2);
WINBOOL  CertCompareCertificate(DWORD dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2);
//C        WINBOOL CertCompareCertificateName(DWORD dwCertEncodingType,PCERT_NAME_BLOB pCertName1,PCERT_NAME_BLOB pCertName2);
WINBOOL  CertCompareCertificateName(DWORD dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2);
//C        WINBOOL CertIsRDNAttrsInCertificateName(DWORD dwCertEncodingType,DWORD dwFlags,PCERT_NAME_BLOB pCertName,PCERT_RDN pRDN);
WINBOOL  CertIsRDNAttrsInCertificateName(DWORD dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN);
//C        WINBOOL CertComparePublicKeyInfo(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPublicKey1,PCERT_PUBLIC_KEY_INFO pPublicKey2);
WINBOOL  CertComparePublicKeyInfo(DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2);
//C        DWORD CertGetPublicKeyLength(DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pPublicKey);
DWORD  CertGetPublicKeyLength(DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey);
//C        WINBOOL CryptVerifyCertificateSignature(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,const BYTE *pbEncoded,DWORD cbEncoded,PCERT_PUBLIC_KEY_INFO pPublicKey);
WINBOOL  CryptVerifyCertificateSignature(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, BYTE *pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey);
//C        WINBOOL CryptVerifyCertificateSignatureEx(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,DWORD dwSubjectType,void *pvSubject,DWORD dwIssuerType,void *pvIssuer,DWORD dwFlags,void *pvReserved);
WINBOOL  CryptVerifyCertificateSignatureEx(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, DWORD dwSubjectType, void *pvSubject, DWORD dwIssuerType, void *pvIssuer, DWORD dwFlags, void *pvReserved);
//C        WINBOOL CryptHashToBeSigned(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,const BYTE *pbEncoded,DWORD cbEncoded,BYTE *pbComputedHash,DWORD *pcbComputedHash);
WINBOOL  CryptHashToBeSigned(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash);
//C        WINBOOL CryptHashCertificate(HCRYPTPROV hCryptProv,ALG_ID Algid,DWORD dwFlags,const BYTE *pbEncoded,DWORD cbEncoded,BYTE *pbComputedHash,DWORD *pcbComputedHash);
WINBOOL  CryptHashCertificate(HCRYPTPROV hCryptProv, ALG_ID Algid, DWORD dwFlags, BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash);
//C        WINBOOL CryptSignCertificate(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,const BYTE *pbEncodedToBeSigned,DWORD cbEncodedToBeSigned,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,const void *pvHashAuxInfo,BYTE *pbSignature,DWORD *pcbSignature);
WINBOOL  CryptSignCertificate(HCRYPTPROV hCryptProv, DWORD dwKeySpec, DWORD dwCertEncodingType, BYTE *pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvHashAuxInfo, BYTE *pbSignature, DWORD *pcbSignature);
//C        WINBOOL CryptSignAndEncodeCertificate(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,LPCSTR lpszStructType,const void *pvStructInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,const void *pvHashAuxInfo,PBYTE pbEncoded,DWORD *pcbEncoded);
WINBOOL  CryptSignAndEncodeCertificate(HCRYPTPROV hCryptProv, DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType, void *pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvHashAuxInfo, PBYTE pbEncoded, DWORD *pcbEncoded);
//C        LONG CertVerifyTimeValidity(LPFILETIME pTimeToVerify,PCERT_INFO pCertInfo);
LONG  CertVerifyTimeValidity(LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo);
//C        LONG CertVerifyCRLTimeValidity(LPFILETIME pTimeToVerify,PCRL_INFO pCrlInfo);
LONG  CertVerifyCRLTimeValidity(LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo);
//C        WINBOOL CertVerifyValidityNesting(PCERT_INFO pSubjectInfo,PCERT_INFO pIssuerInfo);
WINBOOL  CertVerifyValidityNesting(PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo);
//C        WINBOOL CertVerifyCRLRevocation(DWORD dwCertEncodingType,PCERT_INFO pCertId,DWORD cCrlInfo,PCRL_INFO rgpCrlInfo[]);
WINBOOL  CertVerifyCRLRevocation(DWORD dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO *rgpCrlInfo);
//C        LPCSTR CertAlgIdToOID(DWORD dwAlgId);
LPCSTR  CertAlgIdToOID(DWORD dwAlgId);
//C        DWORD CertOIDToAlgId(LPCSTR pszObjId);
DWORD  CertOIDToAlgId(LPCSTR pszObjId);
//C        PCERT_EXTENSION CertFindExtension(LPCSTR pszObjId,DWORD cExtensions,CERT_EXTENSION rgExtensions[]);
PCERT_EXTENSION  CertFindExtension(LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION *rgExtensions);
//C        PCRYPT_ATTRIBUTE CertFindAttribute(LPCSTR pszObjId,DWORD cAttr,CRYPT_ATTRIBUTE rgAttr[]);
PCRYPT_ATTRIBUTE  CertFindAttribute(LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE *rgAttr);
//C        PCERT_RDN_ATTR CertFindRDNAttr(LPCSTR pszObjId,PCERT_NAME_INFO pName);
PCERT_RDN_ATTR  CertFindRDNAttr(LPCSTR pszObjId, PCERT_NAME_INFO pName);
//C        WINBOOL CertGetIntendedKeyUsage(DWORD dwCertEncodingType,PCERT_INFO pCertInfo,BYTE *pbKeyUsage,DWORD cbKeyUsage);
WINBOOL  CertGetIntendedKeyUsage(DWORD dwCertEncodingType, PCERT_INFO pCertInfo, BYTE *pbKeyUsage, DWORD cbKeyUsage);
//C       typedef void *HCRYPTDEFAULTCONTEXT;
alias void *HCRYPTDEFAULTCONTEXT;
//C        WINBOOL CryptInstallDefaultContext(HCRYPTPROV hCryptProv,DWORD dwDefaultType,const void *pvDefaultPara,DWORD dwFlags,void *pvReserved,HCRYPTDEFAULTCONTEXT *phDefaultContext);
WINBOOL  CryptInstallDefaultContext(HCRYPTPROV hCryptProv, DWORD dwDefaultType, void *pvDefaultPara, DWORD dwFlags, void *pvReserved, HCRYPTDEFAULTCONTEXT *phDefaultContext);
//C       typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
//C         DWORD cOID;
//C         LPSTR *rgpszOID;
//C       } CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA,*PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA
{
    DWORD cOID;
    LPSTR *rgpszOID;
}
alias _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
alias _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
//C        WINBOOL CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT hDefaultContext,DWORD dwFlags,void *pvReserved);
WINBOOL  CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void *pvReserved);
//C        WINBOOL CryptExportPublicKeyInfo(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,DWORD *pcbInfo);
WINBOOL  CryptExportPublicKeyInfo(HCRYPTPROV hCryptProv, DWORD dwKeySpec, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);
//C        WINBOOL CryptExportPublicKeyInfoEx(HCRYPTPROV hCryptProv,DWORD dwKeySpec,DWORD dwCertEncodingType,LPSTR pszPublicKeyObjId,DWORD dwFlags,void *pvAuxInfo,PCERT_PUBLIC_KEY_INFO pInfo,DWORD *pcbInfo);
WINBOOL  CryptExportPublicKeyInfoEx(HCRYPTPROV hCryptProv, DWORD dwKeySpec, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo);
//C        WINBOOL CryptImportPublicKeyInfo(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,HCRYPTKEY *phKey);
WINBOOL  CryptImportPublicKeyInfo(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY *phKey);
//C        WINBOOL CryptImportPublicKeyInfoEx(HCRYPTPROV hCryptProv,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,ALG_ID aiKeyAlg,DWORD dwFlags,void *pvAuxInfo,HCRYPTKEY *phKey);
WINBOOL  CryptImportPublicKeyInfoEx(HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void *pvAuxInfo, HCRYPTKEY *phKey);
//C        WINBOOL CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT pCert,DWORD dwFlags,void *pvReserved,HCRYPTPROV *phCryptProv,DWORD *pdwKeySpec,WINBOOL *pfCallerFreeProv);
WINBOOL  CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvReserved, HCRYPTPROV *phCryptProv, DWORD *pdwKeySpec, WINBOOL *pfCallerFreeProv);
//C        WINBOOL CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT pCert,DWORD dwFlags,void *pvReserved);
WINBOOL  CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvReserved);
//C       typedef WINBOOL ( *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv,CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,DWORD dwFlags,void *pvAuxInfo);
alias WINBOOL  function(HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD dwFlags, void *pvAuxInfo)PFN_IMPORT_PRIV_KEY_FUNC;
//C        WINBOOL CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS sImportParams,DWORD dwFlags,HCRYPTPROV *phCryptProv,void *pvAuxInfo);
WINBOOL  CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS sImportParams, DWORD dwFlags, HCRYPTPROV *phCryptProv, void *pvAuxInfo);
//C       typedef WINBOOL ( *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv,DWORD dwKeySpec,LPSTR pszPrivateKeyObjId,DWORD dwFlags,void *pvAuxInfo,CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,DWORD *pcbPrivateKeyBlob);
alias WINBOOL  function(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD *pcbPrivateKeyBlob)PFN_EXPORT_PRIV_KEY_FUNC;
//C        WINBOOL CryptExportPKCS8(HCRYPTPROV hCryptProv,DWORD dwKeySpec,LPSTR pszPrivateKeyObjId,DWORD dwFlags,void *pvAuxInfo,BYTE *pbPrivateKeyBlob,DWORD *pcbPrivateKeyBlob);
WINBOOL  CryptExportPKCS8(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, BYTE *pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob);
//C        WINBOOL CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS *psExportParams,DWORD dwFlags,void *pvAuxInfo,BYTE *pbPrivateKeyBlob,DWORD *pcbPrivateKeyBlob);
WINBOOL  CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS *psExportParams, DWORD dwFlags, void *pvAuxInfo, BYTE *pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob);
//C        WINBOOL CryptHashPublicKeyInfo(HCRYPTPROV hCryptProv,ALG_ID Algid,DWORD dwFlags,DWORD dwCertEncodingType,PCERT_PUBLIC_KEY_INFO pInfo,BYTE *pbComputedHash,DWORD *pcbComputedHash);
WINBOOL  CryptHashPublicKeyInfo(HCRYPTPROV hCryptProv, ALG_ID Algid, DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE *pbComputedHash, DWORD *pcbComputedHash);
//C        DWORD CertRDNValueToStrA(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPSTR psz,DWORD csz);
DWORD  CertRDNValueToStrA(DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz);
//C        DWORD CertRDNValueToStrW(DWORD dwValueType,PCERT_RDN_VALUE_BLOB pValue,LPWSTR psz,DWORD csz);
DWORD  CertRDNValueToStrW(DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz);
//C        DWORD CertNameToStrA(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPSTR psz,DWORD csz);
DWORD  CertNameToStrA(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPSTR psz, DWORD csz);
//C        DWORD CertNameToStrW(DWORD dwCertEncodingType,PCERT_NAME_BLOB pName,DWORD dwStrType,LPWSTR psz,DWORD csz);
DWORD  CertNameToStrW(DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz);
//C        WINBOOL CertStrToNameA(DWORD dwCertEncodingType,LPCSTR pszX500,DWORD dwStrType,void *pvReserved,BYTE *pbEncoded,DWORD *pcbEncoded,LPCSTR *ppszError);
WINBOOL  CertStrToNameA(DWORD dwCertEncodingType, LPCSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCSTR *ppszError);
//C        WINBOOL CertStrToNameW(DWORD dwCertEncodingType,LPCWSTR pszX500,DWORD dwStrType,void *pvReserved,BYTE *pbEncoded,DWORD *pcbEncoded,LPCWSTR *ppszError);
WINBOOL  CertStrToNameW(DWORD dwCertEncodingType, LPCWSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCWSTR *ppszError);
//C        DWORD CertGetNameStringA(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void *pvTypePara,LPSTR pszNameString,DWORD cchNameString);
DWORD  CertGetNameStringA(PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPSTR pszNameString, DWORD cchNameString);
//C        DWORD CertGetNameStringW(PCCERT_CONTEXT pCertContext,DWORD dwType,DWORD dwFlags,void *pvTypePara,LPWSTR pszNameString,DWORD cchNameString);
DWORD  CertGetNameStringW(PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString);
//C       typedef PCCERT_CONTEXT ( *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvGetArg,DWORD dwCertEncodingType,PCERT_INFO pSignerId,HCERTSTORE hMsgCertStore);
alias PCCERT_CONTEXT  function(void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore)PFN_CRYPT_GET_SIGNER_CERTIFICATE;
//C       typedef struct _CRYPT_SIGN_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgEncodingType;
//C         PCCERT_CONTEXT pSigningCert;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         void *pvHashAuxInfo;
//C         DWORD cMsgCert;
//C         PCCERT_CONTEXT *rgpMsgCert;
//C         DWORD cMsgCrl;
//C         PCCRL_CONTEXT *rgpMsgCrl;
//C         DWORD cAuthAttr;
//C         PCRYPT_ATTRIBUTE rgAuthAttr;
//C         DWORD cUnauthAttr;
//C         PCRYPT_ATTRIBUTE rgUnauthAttr;
//C         DWORD dwFlags;
//C         DWORD dwInnerContentType;
//C       } CRYPT_SIGN_MESSAGE_PARA,*PCRYPT_SIGN_MESSAGE_PARA;
struct _CRYPT_SIGN_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;
}
alias _CRYPT_SIGN_MESSAGE_PARA CRYPT_SIGN_MESSAGE_PARA;
alias _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;
//C       typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgAndCertEncodingType;
//C         HCRYPTPROV hCryptProv;
//C         PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
//C         void *pvGetArg;
//C       } CRYPT_VERIFY_MESSAGE_PARA,*PCRYPT_VERIFY_MESSAGE_PARA;
struct _CRYPT_VERIFY_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;
}
alias _CRYPT_VERIFY_MESSAGE_PARA CRYPT_VERIFY_MESSAGE_PARA;
alias _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;
//C       typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgEncodingType;
//C         HCRYPTPROV hCryptProv;
//C         CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
//C         void *pvEncryptionAuxInfo;
//C         DWORD dwFlags;
//C         DWORD dwInnerContentType;
//C       } CRYPT_ENCRYPT_MESSAGE_PARA,*PCRYPT_ENCRYPT_MESSAGE_PARA;
struct _CRYPT_ENCRYPT_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
}
alias _CRYPT_ENCRYPT_MESSAGE_PARA CRYPT_ENCRYPT_MESSAGE_PARA;
alias _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;
//C       typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgAndCertEncodingType;
//C         DWORD cCertStore;
//C         HCERTSTORE *rghCertStore;
//C       } CRYPT_DECRYPT_MESSAGE_PARA,*PCRYPT_DECRYPT_MESSAGE_PARA;
struct _CRYPT_DECRYPT_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;
}
alias _CRYPT_DECRYPT_MESSAGE_PARA CRYPT_DECRYPT_MESSAGE_PARA;
alias _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;
//C       typedef struct _CRYPT_HASH_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgEncodingType;
//C         HCRYPTPROV hCryptProv;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         void *pvHashAuxInfo;
//C       } CRYPT_HASH_MESSAGE_PARA,*PCRYPT_HASH_MESSAGE_PARA;
struct _CRYPT_HASH_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
}
alias _CRYPT_HASH_MESSAGE_PARA CRYPT_HASH_MESSAGE_PARA;
alias _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;
//C       typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgAndCertEncodingType;
//C         HCRYPTPROV hCryptProv;
//C         DWORD dwKeySpec;
//C         CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
//C         void *pvHashAuxInfo;
//C         CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
//C       } CRYPT_KEY_SIGN_MESSAGE_PARA,*PCRYPT_KEY_SIGN_MESSAGE_PARA;
struct _CRYPT_KEY_SIGN_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
}
alias _CRYPT_KEY_SIGN_MESSAGE_PARA CRYPT_KEY_SIGN_MESSAGE_PARA;
alias _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;
//C       typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
//C         DWORD cbSize;
//C         DWORD dwMsgEncodingType;
//C         HCRYPTPROV hCryptProv;
//C       } CRYPT_KEY_VERIFY_MESSAGE_PARA,*PCRYPT_KEY_VERIFY_MESSAGE_PARA;
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA
{
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV hCryptProv;
}
alias _CRYPT_KEY_VERIFY_MESSAGE_PARA CRYPT_KEY_VERIFY_MESSAGE_PARA;
alias _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
//C        WINBOOL CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,WINBOOL fDetachedSignature,DWORD cToBeSigned,const BYTE *rgpbToBeSigned[],DWORD rgcbToBeSigned[],BYTE *pbSignedBlob,DWORD *pcbSignedBlob);
WINBOOL  CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara, WINBOOL fDetachedSignature, DWORD cToBeSigned, BYTE **rgpbToBeSigned, DWORD *rgcbToBeSigned, BYTE *pbSignedBlob, DWORD *pcbSignedBlob);
//C        WINBOOL CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbSignedBlob,DWORD cbSignedBlob,BYTE *pbDecoded,DWORD *pcbDecoded,PCCERT_CONTEXT *ppSignerCert);
WINBOOL  CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppSignerCert);
//C        LONG CryptGetMessageSignerCount(DWORD dwMsgEncodingType,const BYTE *pbSignedBlob,DWORD cbSignedBlob);
LONG  CryptGetMessageSignerCount(DWORD dwMsgEncodingType, BYTE *pbSignedBlob, DWORD cbSignedBlob);
//C        HCERTSTORE CryptGetMessageCertificates(DWORD dwMsgAndCertEncodingType,HCRYPTPROV hCryptProv,DWORD dwFlags,const BYTE *pbSignedBlob,DWORD cbSignedBlob);
HCERTSTORE  CryptGetMessageCertificates(DWORD dwMsgAndCertEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags, BYTE *pbSignedBlob, DWORD cbSignedBlob);
//C        WINBOOL CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbDetachedSignBlob,DWORD cbDetachedSignBlob,DWORD cToBeSigned,const BYTE *rgpbToBeSigned[],DWORD rgcbToBeSigned[],PCCERT_CONTEXT *ppSignerCert);
WINBOOL  CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, BYTE *pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, BYTE **rgpbToBeSigned, DWORD *rgcbToBeSigned, PCCERT_CONTEXT *ppSignerCert);
//C        WINBOOL CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,DWORD cRecipientCert,PCCERT_CONTEXT rgpRecipientCert[],const BYTE *pbToBeEncrypted,DWORD cbToBeEncrypted,BYTE *pbEncryptedBlob,DWORD *pcbEncryptedBlob);
WINBOOL  CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT *rgpRecipientCert, BYTE *pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE *pbEncryptedBlob, DWORD *pcbEncryptedBlob);
//C        WINBOOL CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,const BYTE *pbEncryptedBlob,DWORD cbEncryptedBlob,BYTE *pbDecrypted,DWORD *pcbDecrypted,PCCERT_CONTEXT *ppXchgCert);
WINBOOL  CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert);
//C        WINBOOL CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara,PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,DWORD cRecipientCert,PCCERT_CONTEXT rgpRecipientCert[],const BYTE *pbToBeSignedAndEncrypted,DWORD cbToBeSignedAndEncrypted,BYTE *pbSignedAndEncryptedBlob,DWORD *pcbSignedAndEncryptedBlob);
WINBOOL  CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT *rgpRecipientCert, BYTE *pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE *pbSignedAndEncryptedBlob, DWORD *pcbSignedAndEncryptedBlob);
//C        WINBOOL CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbEncryptedBlob,DWORD cbEncryptedBlob,BYTE *pbDecrypted,DWORD *pcbDecrypted,PCCERT_CONTEXT *ppXchgCert,PCCERT_CONTEXT *ppSignerCert);
WINBOOL  CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert);
//C        WINBOOL CryptDecodeMessage(DWORD dwMsgTypeFlags,PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,DWORD dwSignerIndex,const BYTE *pbEncodedBlob,DWORD cbEncodedBlob,DWORD dwPrevInnerContentType,DWORD *pdwMsgType,DWORD *pdwInnerContentType,BYTE *pbDecoded,DWORD *pcbDecoded,PCCERT_CONTEXT *ppXchgCert,PCCERT_CONTEXT *ppSignerCert);
WINBOOL  CryptDecodeMessage(DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, BYTE *pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, DWORD *pdwMsgType, DWORD *pdwInnerContentType, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert);
//C        WINBOOL CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA pHashPara,WINBOOL fDetachedHash,DWORD cToBeHashed,const BYTE *rgpbToBeHashed[],DWORD rgcbToBeHashed[],BYTE *pbHashedBlob,DWORD *pcbHashedBlob,BYTE *pbComputedHash,DWORD *pcbComputedHash);
WINBOOL  CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA pHashPara, WINBOOL fDetachedHash, DWORD cToBeHashed, BYTE **rgpbToBeHashed, DWORD *rgcbToBeHashed, BYTE *pbHashedBlob, DWORD *pcbHashedBlob, BYTE *pbComputedHash, DWORD *pcbComputedHash);
//C        WINBOOL CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,BYTE *pbHashedBlob,DWORD cbHashedBlob,BYTE *pbToBeHashed,DWORD *pcbToBeHashed,BYTE *pbComputedHash,DWORD *pcbComputedHash);
WINBOOL  CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbHashedBlob, DWORD cbHashedBlob, BYTE *pbToBeHashed, DWORD *pcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash);
//C        WINBOOL CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara,BYTE *pbDetachedHashBlob,DWORD cbDetachedHashBlob,DWORD cToBeHashed,const BYTE *rgpbToBeHashed[],DWORD rgcbToBeHashed[],BYTE *pbComputedHash,DWORD *pcbComputedHash);
WINBOOL  CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, BYTE **rgpbToBeHashed, DWORD *rgcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash);
//C        WINBOOL CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,const BYTE *pbToBeSigned,DWORD cbToBeSigned,BYTE *pbSignedBlob,DWORD *pcbSignedBlob);
WINBOOL  CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, BYTE *pbToBeSigned, DWORD cbToBeSigned, BYTE *pbSignedBlob, DWORD *pcbSignedBlob);
//C        WINBOOL CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,const BYTE *pbSignedBlob,DWORD cbSignedBlob,BYTE *pbDecoded,DWORD *pcbDecoded);
WINBOOL  CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded);
//C        HCERTSTORE CertOpenSystemStoreA(HCRYPTPROV hProv,LPCSTR szSubsystemProtocol);
HCERTSTORE  CertOpenSystemStoreA(HCRYPTPROV hProv, LPCSTR szSubsystemProtocol);
//C        HCERTSTORE CertOpenSystemStoreW(HCRYPTPROV hProv,LPCWSTR szSubsystemProtocol);
HCERTSTORE  CertOpenSystemStoreW(HCRYPTPROV hProv, LPCWSTR szSubsystemProtocol);
//C        WINBOOL CertAddEncodedCertificateToSystemStoreA(LPCSTR szCertStoreName,const BYTE *pbCertEncoded,DWORD cbCertEncoded);
WINBOOL  CertAddEncodedCertificateToSystemStoreA(LPCSTR szCertStoreName, BYTE *pbCertEncoded, DWORD cbCertEncoded);
//C        WINBOOL CertAddEncodedCertificateToSystemStoreW(LPCWSTR szCertStoreName,const BYTE *pbCertEncoded,DWORD cbCertEncoded);
WINBOOL  CertAddEncodedCertificateToSystemStoreW(LPCWSTR szCertStoreName, BYTE *pbCertEncoded, DWORD cbCertEncoded);
//C       typedef struct _CERT_CHAIN {
//C         DWORD cCerts;
//C         PCERT_BLOB certs;
//C         CRYPT_KEY_PROV_INFO keyLocatorInfo;
//C       } CERT_CHAIN,*PCERT_CHAIN;
struct _CERT_CHAIN
{
    DWORD cCerts;
    PCERT_BLOB certs;
    CRYPT_KEY_PROV_INFO keyLocatorInfo;
}
alias _CERT_CHAIN CERT_CHAIN;
alias _CERT_CHAIN *PCERT_CHAIN;
//C       HRESULT FindCertsByIssuer(PCERT_CHAIN pCertChains,DWORD *pcbCertChains,DWORD *pcCertChains,BYTE *pbEncodedIssuerName,DWORD cbEncodedIssuerName,LPCWSTR pwszPurpose,DWORD dwKeySpec);
HRESULT  FindCertsByIssuer(PCERT_CHAIN pCertChains, DWORD *pcbCertChains, DWORD *pcCertChains, BYTE *pbEncodedIssuerName, DWORD cbEncodedIssuerName, LPCWSTR pwszPurpose, DWORD dwKeySpec);
//C        WINBOOL CryptQueryObject(DWORD dwObjectType,const void *pvObject,DWORD dwExpectedContentTypeFlags,DWORD dwExpectedFormatTypeFlags,DWORD dwFlags,DWORD *pdwMsgAndCertEncodingType,DWORD *pdwContentType,DWORD *pdwFormatType,HCERTSTORE *phCertStore,HCRYPTMSG *phMsg,const void **ppvContext);
WINBOOL  CryptQueryObject(DWORD dwObjectType, void *pvObject, DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags, DWORD dwFlags, DWORD *pdwMsgAndCertEncodingType, DWORD *pdwContentType, DWORD *pdwFormatType, HCERTSTORE *phCertStore, HCRYPTMSG *phMsg, void **ppvContext);
//C        LPVOID CryptMemAlloc(ULONG cbSize);
LPVOID  CryptMemAlloc(ULONG cbSize);
//C        LPVOID CryptMemRealloc(LPVOID pv,ULONG cbSize);
LPVOID  CryptMemRealloc(LPVOID pv, ULONG cbSize);
//C        void CryptMemFree(LPVOID pv);
void  CryptMemFree(LPVOID pv);
//C       typedef HANDLE HCRYPTASYNC,*PHCRYPTASYNC;
alias HANDLE HCRYPTASYNC;
alias HANDLE *PHCRYPTASYNC;
//C       typedef void ( *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid,LPVOID pvParam);
alias void  function(LPSTR pszParamOid, LPVOID pvParam)PFN_CRYPT_ASYNC_PARAM_FREE_FUNC;
//C        WINBOOL CryptCreateAsyncHandle(DWORD dwFlags,PHCRYPTASYNC phAsync);
WINBOOL  CryptCreateAsyncHandle(DWORD dwFlags, PHCRYPTASYNC phAsync);
//C        WINBOOL CryptSetAsyncParam(HCRYPTASYNC hAsync,LPSTR pszParamOid,LPVOID pvParam,PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
WINBOOL  CryptSetAsyncParam(HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID pvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree);
//C        WINBOOL CryptGetAsyncParam(HCRYPTASYNC hAsync,LPSTR pszParamOid,LPVOID *ppvParam,PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *ppfnFree);
WINBOOL  CryptGetAsyncParam(HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID *ppvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *ppfnFree);
//C        WINBOOL CryptCloseAsyncHandle(HCRYPTASYNC hAsync);
WINBOOL  CryptCloseAsyncHandle(HCRYPTASYNC hAsync);
//C       typedef struct _CRYPT_BLOB_ARRAY {
//C         DWORD cBlob;
//C         PCRYPT_DATA_BLOB rgBlob;
//C       } CRYPT_BLOB_ARRAY,*PCRYPT_BLOB_ARRAY;
struct _CRYPT_BLOB_ARRAY
{
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
}
alias _CRYPT_BLOB_ARRAY CRYPT_BLOB_ARRAY;
alias _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY;
//C       typedef struct _CRYPT_CREDENTIALS {
//C         DWORD cbSize;
//C         LPCSTR pszCredentialsOid;
//C         LPVOID pvCredentials;
//C       } CRYPT_CREDENTIALS,*PCRYPT_CREDENTIALS;
struct _CRYPT_CREDENTIALS
{
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
}
alias _CRYPT_CREDENTIALS CRYPT_CREDENTIALS;
alias _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS;
//C       typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
//C         DWORD cbSize;
//C         LPSTR pszUsername;
//C         LPSTR pszPassword;
//C       } CRYPT_PASSWORD_CREDENTIALSA,*PCRYPT_PASSWORD_CREDENTIALSA;
struct _CRYPT_PASSWORD_CREDENTIALSA
{
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
}
alias _CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALSA;
alias _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA;
//C       typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
//C         DWORD cbSize;
//C         LPWSTR pszUsername;
//C         LPWSTR pszPassword;
//C       } CRYPT_PASSWORD_CREDENTIALSW,*PCRYPT_PASSWORD_CREDENTIALSW;
struct _CRYPT_PASSWORD_CREDENTIALSW
{
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
}
alias _CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALSW;
alias _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW;
//C       typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
alias CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
//C       typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
alias PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
//C       typedef void ( *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid,PCRYPT_BLOB_ARRAY pObject,LPVOID pvFreeContext);
alias void  function(LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext)PFN_FREE_ENCODED_OBJECT_FUNC;
//C       typedef struct _CRYPT_RETRIEVE_AUX_INFO {
//C         DWORD cbSize;
//C         FILETIME *pLastSyncTime;
//C         DWORD dwMaxUrlRetrievalByteCount;
//C       } CRYPT_RETRIEVE_AUX_INFO,*PCRYPT_RETRIEVE_AUX_INFO;
struct _CRYPT_RETRIEVE_AUX_INFO
{
    DWORD cbSize;
    FILETIME *pLastSyncTime;
    DWORD dwMaxUrlRetrievalByteCount;
}
alias _CRYPT_RETRIEVE_AUX_INFO CRYPT_RETRIEVE_AUX_INFO;
alias _CRYPT_RETRIEVE_AUX_INFO *PCRYPT_RETRIEVE_AUX_INFO;
//C        WINBOOL CryptRetrieveObjectByUrlA(LPCSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID *ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
WINBOOL  CryptRetrieveObjectByUrlA(LPCSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
//C        WINBOOL CryptRetrieveObjectByUrlW(LPCWSTR pszUrl,LPCSTR pszObjectOid,DWORD dwRetrievalFlags,DWORD dwTimeout,LPVOID *ppvObject,HCRYPTASYNC hAsyncRetrieve,PCRYPT_CREDENTIALS pCredentials,LPVOID pvVerify,PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
WINBOOL  CryptRetrieveObjectByUrlW(LPCWSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);
//C       typedef WINBOOL ( *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD dwFlags,void *pvArg);
alias WINBOOL  function(DWORD dwFlags, void *pvArg)PFN_CRYPT_CANCEL_RETRIEVAL;
//C        WINBOOL CryptInstallCancelRetrieval(PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,const void *pvArg,DWORD dwFlags,void *pvReserved);
WINBOOL  CryptInstallCancelRetrieval(PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel, void *pvArg, DWORD dwFlags, void *pvReserved);
//C        WINBOOL CryptUninstallCancelRetrieval(DWORD dwFlags,void *pvReserved);
WINBOOL  CryptUninstallCancelRetrieval(DWORD dwFlags, void *pvReserved);
//C        WINBOOL CryptCancelAsyncRetrieval(HCRYPTASYNC hAsyncRetrieval);
WINBOOL  CryptCancelAsyncRetrieval(HCRYPTASYNC hAsyncRetrieval);
//C       typedef void ( *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID pvCompletion,DWORD dwCompletionCode,LPCSTR pszUrl,LPSTR pszObjectOid,LPVOID pvObject);
alias void  function(LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject)PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC;
//C       typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
//C         PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
//C         LPVOID pvCompletion;
//C       } CRYPT_ASYNC_RETRIEVAL_COMPLETION,*PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION
{
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    LPVOID pvCompletion;
}
alias _CRYPT_ASYNC_RETRIEVAL_COMPLETION CRYPT_ASYNC_RETRIEVAL_COMPLETION;
alias _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
//C       typedef WINBOOL ( *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC hAsyncRetrieve);
alias WINBOOL  function(HCRYPTASYNC hAsyncRetrieve)PFN_CANCEL_ASYNC_RETRIEVAL_FUNC;
//C       typedef struct _CRYPT_URL_ARRAY {
//C         DWORD cUrl;
//C         LPWSTR *rgwszUrl;
//C       } CRYPT_URL_ARRAY,*PCRYPT_URL_ARRAY;
struct _CRYPT_URL_ARRAY
{
    DWORD cUrl;
    LPWSTR *rgwszUrl;
}
alias _CRYPT_URL_ARRAY CRYPT_URL_ARRAY;
alias _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY;
//C       typedef struct _CRYPT_URL_INFO {
//C         DWORD cbSize;
//C         DWORD dwSyncDeltaTime;
//C         DWORD cGroup;
//C         DWORD *rgcGroupEntry;
//C       } CRYPT_URL_INFO,*PCRYPT_URL_INFO;
struct _CRYPT_URL_INFO
{
    DWORD cbSize;
    DWORD dwSyncDeltaTime;
    DWORD cGroup;
    DWORD *rgcGroupEntry;
}
alias _CRYPT_URL_INFO CRYPT_URL_INFO;
alias _CRYPT_URL_INFO *PCRYPT_URL_INFO;
//C        WINBOOL CryptGetObjectUrl(LPCSTR pszUrlOid,LPVOID pvPara,DWORD dwFlags,PCRYPT_URL_ARRAY pUrlArray,DWORD *pcbUrlArray,PCRYPT_URL_INFO pUrlInfo,DWORD *pcbUrlInfo,LPVOID pvReserved);
WINBOOL  CryptGetObjectUrl(LPCSTR pszUrlOid, LPVOID pvPara, DWORD dwFlags, PCRYPT_URL_ARRAY pUrlArray, DWORD *pcbUrlArray, PCRYPT_URL_INFO pUrlInfo, DWORD *pcbUrlInfo, LPVOID pvReserved);
//C       typedef struct _CERT_CRL_CONTEXT_PAIR {
//C         PCCERT_CONTEXT pCertContext;
//C         PCCRL_CONTEXT pCrlContext;
//C       } CERT_CRL_CONTEXT_PAIR,*PCERT_CRL_CONTEXT_PAIR;
struct _CERT_CRL_CONTEXT_PAIR
{
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
}
alias _CERT_CRL_CONTEXT_PAIR CERT_CRL_CONTEXT_PAIR;
alias _CERT_CRL_CONTEXT_PAIR *PCERT_CRL_CONTEXT_PAIR;
//C       typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
alias CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
//C        WINBOOL CryptGetTimeValidObject(LPCSTR pszTimeValidOid,LPVOID pvPara,PCCERT_CONTEXT pIssuer,LPFILETIME pftValidFor,DWORD dwFlags,DWORD dwTimeout,LPVOID *ppvObject,PCRYPT_CREDENTIALS pCredentials,LPVOID pvReserved);
WINBOOL  CryptGetTimeValidObject(LPCSTR pszTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, LPFILETIME pftValidFor, DWORD dwFlags, DWORD dwTimeout, LPVOID *ppvObject, PCRYPT_CREDENTIALS pCredentials, LPVOID pvReserved);
//C        WINBOOL CryptFlushTimeValidObject(LPCSTR pszFlushTimeValidOid,LPVOID pvPara,PCCERT_CONTEXT pIssuer,DWORD dwFlags,LPVOID pvReserved);
WINBOOL  CryptFlushTimeValidObject(LPCSTR pszFlushTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, DWORD dwFlags, LPVOID pvReserved);
//C       typedef struct _CRYPTPROTECT_PROMPTSTRUCT {
//C         DWORD cbSize;
//C         DWORD dwPromptFlags;
//C         HWND hwndApp;
//C         LPCWSTR szPrompt;
//C       } CRYPTPROTECT_PROMPTSTRUCT,*PCRYPTPROTECT_PROMPTSTRUCT;
struct _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
}
alias _CRYPTPROTECT_PROMPTSTRUCT CRYPTPROTECT_PROMPTSTRUCT;
alias _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT;
//C        WINBOOL CryptProtectData(DATA_BLOB *pDataIn,LPCWSTR szDataDescr,DATA_BLOB *pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,DWORD dwFlags,DATA_BLOB *pDataOut);
WINBOOL  CryptProtectData(DATA_BLOB *pDataIn, LPCWSTR szDataDescr, DATA_BLOB *pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, DWORD dwFlags, DATA_BLOB *pDataOut);
//C        WINBOOL CryptUnprotectData(DATA_BLOB *pDataIn,LPWSTR *ppszDataDescr,DATA_BLOB *pOptionalEntropy,PVOID pvReserved,CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,DWORD dwFlags,DATA_BLOB *pDataOut);
WINBOOL  CryptUnprotectData(DATA_BLOB *pDataIn, LPWSTR *ppszDataDescr, DATA_BLOB *pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, DWORD dwFlags, DATA_BLOB *pDataOut);
//C        WINBOOL CryptProtectMemory(LPVOID pDataIn,DWORD cbDataIn,DWORD dwFlags);
WINBOOL  CryptProtectMemory(LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags);
//C        WINBOOL CryptUnprotectMemory(LPVOID pDataIn,DWORD cbDataIn,DWORD dwFlags);
WINBOOL  CryptUnprotectMemory(LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags);
//C        PCCERT_CONTEXT CertCreateSelfSignCertificate(HCRYPTPROV hProv,PCERT_NAME_BLOB pSubjectIssuerBlob,DWORD dwFlags,PCRYPT_KEY_PROV_INFO pKeyProvInfo,PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,PSYSTEMTIME pStartTime,PSYSTEMTIME pEndTime,PCERT_EXTENSIONS pExtensions);
PCCERT_CONTEXT  CertCreateSelfSignCertificate(HCRYPTPROV hProv, PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags, PCRYPT_KEY_PROV_INFO pKeyProvInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime, PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions);
//C        WINBOOL CryptGetKeyIdentifierProperty(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void *pvReserved,void *pvData,DWORD *pcbData);
WINBOOL  CryptGetKeyIdentifierProperty(CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvData, DWORD *pcbData);
//C        WINBOOL CryptSetKeyIdentifierProperty(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void *pvReserved,const void *pvData);
WINBOOL  CryptSetKeyIdentifierProperty(CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvData);
//C       typedef WINBOOL ( *PFN_CRYPT_ENUM_KEYID_PROP)(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwFlags,void *pvReserved,void *pvArg,DWORD cProp,DWORD *rgdwPropId,void **rgpvData,DWORD *rgcbData);
alias WINBOOL  function(CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData)PFN_CRYPT_ENUM_KEYID_PROP;
//C        WINBOOL CryptEnumKeyIdentifierProperties(const CRYPT_HASH_BLOB *pKeyIdentifier,DWORD dwPropId,DWORD dwFlags,LPCWSTR pwszComputerName,void *pvReserved,void *pvArg,PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
WINBOOL  CryptEnumKeyIdentifierProperties(CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvArg, PFN_CRYPT_ENUM_KEYID_PROP pfnEnum);
//C        WINBOOL CryptCreateKeyIdentifierFromCSP(DWORD dwCertEncodingType,LPCSTR pszPubKeyOID,const PUBLICKEYSTRUC *pPubKeyStruc,DWORD cbPubKeyStruc,DWORD dwFlags,void *pvReserved,BYTE *pbHash,DWORD *pcbHash);
WINBOOL  CryptCreateKeyIdentifierFromCSP(DWORD dwCertEncodingType, LPCSTR pszPubKeyOID, PUBLICKEYSTRUC *pPubKeyStruc, DWORD cbPubKeyStruc, DWORD dwFlags, void *pvReserved, BYTE *pbHash, DWORD *pcbHash);
//C       typedef HANDLE HCERTCHAINENGINE;
alias HANDLE HCERTCHAINENGINE;
//C       typedef struct _CERT_CHAIN_ENGINE_CONFIG {
//C         DWORD cbSize;
//C         HCERTSTORE hRestrictedRoot;
//C         HCERTSTORE hRestrictedTrust;
//C         HCERTSTORE hRestrictedOther;
//C         DWORD cAdditionalStore;
//C         HCERTSTORE *rghAdditionalStore;
//C         DWORD dwFlags;
//C         DWORD dwUrlRetrievalTimeout;
//C         DWORD MaximumCachedCertificates;
//C         DWORD CycleDetectionModulus;
//C       } CERT_CHAIN_ENGINE_CONFIG,*PCERT_CHAIN_ENGINE_CONFIG;
struct _CERT_CHAIN_ENGINE_CONFIG
{
    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE *rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;
}
alias _CERT_CHAIN_ENGINE_CONFIG CERT_CHAIN_ENGINE_CONFIG;
alias _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG;
//C        WINBOOL CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG pConfig,HCERTCHAINENGINE *phChainEngine);
WINBOOL  CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG pConfig, HCERTCHAINENGINE *phChainEngine);
//C        void CertFreeCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
void  CertFreeCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
//C        WINBOOL CertResyncCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
WINBOOL  CertResyncCertificateChainEngine(HCERTCHAINENGINE hChainEngine);
//C       typedef struct _CERT_TRUST_STATUS {
//C         DWORD dwErrorStatus;
//C         DWORD dwInfoStatus;
//C       } CERT_TRUST_STATUS,*PCERT_TRUST_STATUS;
struct _CERT_TRUST_STATUS
{
    DWORD dwErrorStatus;
    DWORD dwInfoStatus;
}
alias _CERT_TRUST_STATUS CERT_TRUST_STATUS;
alias _CERT_TRUST_STATUS *PCERT_TRUST_STATUS;
//C       typedef struct _CERT_REVOCATION_INFO {
//C         DWORD cbSize;
//C         DWORD dwRevocationResult;
//C         LPCSTR pszRevocationOid;
//C         LPVOID pvOidSpecificInfo;
//C         WINBOOL fHasFreshnessTime;
//C         DWORD dwFreshnessTime;
//C         PCERT_REVOCATION_CRL_INFO pCrlInfo;
//C       } CERT_REVOCATION_INFO,*PCERT_REVOCATION_INFO;
struct _CERT_REVOCATION_INFO
{
    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;
    WINBOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
    PCERT_REVOCATION_CRL_INFO pCrlInfo;
}
alias _CERT_REVOCATION_INFO CERT_REVOCATION_INFO;
alias _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO;
//C       typedef struct _CERT_TRUST_LIST_INFO {
//C         DWORD cbSize;
//C         PCTL_ENTRY pCtlEntry;
//C         PCCTL_CONTEXT pCtlContext;
//C       } CERT_TRUST_LIST_INFO,*PCERT_TRUST_LIST_INFO;
struct _CERT_TRUST_LIST_INFO
{
    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;
}
alias _CERT_TRUST_LIST_INFO CERT_TRUST_LIST_INFO;
alias _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO;
//C       typedef struct _CERT_CHAIN_ELEMENT {
//C         DWORD cbSize;
//C         PCCERT_CONTEXT pCertContext;
//C         CERT_TRUST_STATUS TrustStatus;
//C         PCERT_REVOCATION_INFO pRevocationInfo;
//C         PCERT_ENHKEY_USAGE pIssuanceUsage;
//C         PCERT_ENHKEY_USAGE pApplicationUsage;
//C         LPCWSTR pwszExtendedErrorInfo;
//C       } CERT_CHAIN_ELEMENT,*PCERT_CHAIN_ELEMENT;
struct _CERT_CHAIN_ELEMENT
{
    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;
    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;
    LPCWSTR pwszExtendedErrorInfo;
}
alias _CERT_CHAIN_ELEMENT CERT_CHAIN_ELEMENT;
alias _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT;
//C       typedef struct _CERT_SIMPLE_CHAIN {
//C         DWORD cbSize;
//C         CERT_TRUST_STATUS TrustStatus;
//C         DWORD cElement;
//C         PCERT_CHAIN_ELEMENT *rgpElement;
//C         PCERT_TRUST_LIST_INFO pTrustListInfo;
//C         WINBOOL fHasRevocationFreshnessTime;
//C         DWORD dwRevocationFreshnessTime;
//C       } CERT_SIMPLE_CHAIN,*PCERT_SIMPLE_CHAIN;
struct _CERT_SIMPLE_CHAIN
{
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT *rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
}
alias _CERT_SIMPLE_CHAIN CERT_SIMPLE_CHAIN;
alias _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN;
//C       typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT,*PCERT_CHAIN_CONTEXT;
alias _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT;
alias _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT;
//C       typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
alias CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
//C       struct _CERT_CHAIN_CONTEXT {
//C         DWORD cbSize;
//C         CERT_TRUST_STATUS TrustStatus;
//C         DWORD cChain;
//C         PCERT_SIMPLE_CHAIN *rgpChain;
//C         DWORD cLowerQualityChainContext;
//C         PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;
//C         WINBOOL fHasRevocationFreshnessTime;
//C         DWORD dwRevocationFreshnessTime;
//C       };
struct _CERT_CHAIN_CONTEXT
{
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN *rgpChain;
    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;
    WINBOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;
}
//C       typedef struct _CERT_USAGE_MATCH {
//C         DWORD dwType;
//C         CERT_ENHKEY_USAGE Usage;
//C       } CERT_USAGE_MATCH,*PCERT_USAGE_MATCH;
struct _CERT_USAGE_MATCH
{
    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;
}
alias _CERT_USAGE_MATCH CERT_USAGE_MATCH;
alias _CERT_USAGE_MATCH *PCERT_USAGE_MATCH;
//C       typedef struct _CTL_USAGE_MATCH {
//C         DWORD dwType;
//C         CTL_USAGE Usage;
//C       } CTL_USAGE_MATCH,*PCTL_USAGE_MATCH;
struct _CTL_USAGE_MATCH
{
    DWORD dwType;
    CTL_USAGE Usage;
}
alias _CTL_USAGE_MATCH CTL_USAGE_MATCH;
alias _CTL_USAGE_MATCH *PCTL_USAGE_MATCH;
//C       typedef struct _CERT_CHAIN_PARA {
//C         DWORD cbSize;
//C         CERT_USAGE_MATCH RequestedUsage;
//C       } CERT_CHAIN_PARA,*PCERT_CHAIN_PARA;
struct _CERT_CHAIN_PARA
{
    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
}
alias _CERT_CHAIN_PARA CERT_CHAIN_PARA;
alias _CERT_CHAIN_PARA *PCERT_CHAIN_PARA;
//C        WINBOOL CertGetCertificateChain(HCERTCHAINENGINE hChainEngine,PCCERT_CONTEXT pCertContext,LPFILETIME pTime,HCERTSTORE hAdditionalStore,PCERT_CHAIN_PARA pChainPara,DWORD dwFlags,LPVOID pvReserved,PCCERT_CHAIN_CONTEXT *ppChainContext);
WINBOOL  CertGetCertificateChain(HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT *ppChainContext);
//C        void CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);
void  CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);
//C        PCCERT_CHAIN_CONTEXT CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);
PCCERT_CHAIN_CONTEXT  CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT pChainContext);
//C       typedef struct _CRL_REVOCATION_INFO {
//C         PCRL_ENTRY pCrlEntry;
//C         PCCRL_CONTEXT pCrlContext;
//C         PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
//C       } CRL_REVOCATION_INFO,*PCRL_REVOCATION_INFO;
struct _CRL_REVOCATION_INFO
{
    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;
}
alias _CRL_REVOCATION_INFO CRL_REVOCATION_INFO;
alias _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO;
//C        PCCERT_CHAIN_CONTEXT CertFindChainInStore(HCERTSTORE hCertStore,DWORD dwCertEncodingType,DWORD dwFindFlags,DWORD dwFindType,const void *pvFindPara,PCCERT_CHAIN_CONTEXT pPrevChainContext);
PCCERT_CHAIN_CONTEXT  CertFindChainInStore(HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, void *pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext);
//C       typedef WINBOOL ( *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(PCCERT_CONTEXT pCert,void *pvFindArg);
alias WINBOOL  function(PCCERT_CONTEXT pCert, void *pvFindArg)PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK;
//C       typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
//C         DWORD cbSize;
//C         LPCSTR pszUsageIdentifier;
//C         DWORD dwKeySpec;
//C         DWORD dwAcquirePrivateKeyFlags;
//C         DWORD cIssuer;
//C         CERT_NAME_BLOB *rgIssuer;
//C         PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
//C         void *pvFindArg;
//C       } CERT_CHAIN_FIND_ISSUER_PARA,*PCERT_CHAIN_FIND_ISSUER_PARA,CERT_CHAIN_FIND_BY_ISSUER_PARA,*PCERT_CHAIN_FIND_BY_ISSUER_PARA;
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA
{
    DWORD cbSize;
    LPCSTR pszUsageIdentifier;
    DWORD dwKeySpec;
    DWORD dwAcquirePrivateKeyFlags;
    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;
}
alias _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_ISSUER_PARA;
alias _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA;
alias _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_BY_ISSUER_PARA;
alias _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
//C       typedef struct _CERT_CHAIN_POLICY_PARA {
//C         DWORD cbSize;
//C         DWORD dwFlags;
//C         void *pvExtraPolicyPara;
//C       } CERT_CHAIN_POLICY_PARA,*PCERT_CHAIN_POLICY_PARA;
struct _CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
}
alias _CERT_CHAIN_POLICY_PARA CERT_CHAIN_POLICY_PARA;
alias _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA;
//C       typedef struct _CERT_CHAIN_POLICY_STATUS {
//C         DWORD cbSize;
//C         DWORD dwError;
//C         LONG lChainIndex;
//C         LONG lElementIndex;
//C         void *pvExtraPolicyStatus;
//C       } CERT_CHAIN_POLICY_STATUS,*PCERT_CHAIN_POLICY_STATUS;
struct _CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
}
alias _CERT_CHAIN_POLICY_STATUS CERT_CHAIN_POLICY_STATUS;
alias _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS;
//C        WINBOOL CertVerifyCertificateChainPolicy(LPCSTR pszPolicyOID,PCCERT_CHAIN_CONTEXT pChainContext,PCERT_CHAIN_POLICY_PARA pPolicyPara,PCERT_CHAIN_POLICY_STATUS pPolicyStatus);
WINBOOL  CertVerifyCertificateChainPolicy(LPCSTR pszPolicyOID, PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara, PCERT_CHAIN_POLICY_STATUS pPolicyStatus);
//C       typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
//C         DWORD cbSize;
//C         DWORD dwRegPolicySettings;
//C         PCMSG_SIGNER_INFO pSignerInfo;
//C       } AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,*PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
}
alias _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
alias _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
//C       typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
//C         DWORD cbSize;
//C         WINBOOL fCommercial;
//C       } AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,*PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS
{
    DWORD cbSize;
    WINBOOL fCommercial;
}
alias _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
alias _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
//C       typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
//C         DWORD cbSize;
//C         DWORD dwRegPolicySettings;
//C         WINBOOL fCommercial;
//C       } AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,*PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA
{
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    WINBOOL fCommercial;
}
alias _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
alias _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
//C       typedef struct _HTTPSPolicyCallbackData {
//C          union {
//C           DWORD cbStruct;
//C           DWORD cbSize;
//C         };
union _N149
{
    DWORD cbStruct;
    DWORD cbSize;
}
//C         DWORD dwAuthType;
//C         DWORD fdwChecks;
//C         WCHAR *pwszServerName;
//C       } HTTPSPolicyCallbackData,*PHTTPSPolicyCallbackData,SSL_EXTRA_CERT_CHAIN_POLICY_PARA,*PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
struct _HTTPSPolicyCallbackData
{
    DWORD cbStruct;
    DWORD cbSize;
    DWORD dwAuthType;
    DWORD fdwChecks;
    WCHAR *pwszServerName;
}
alias _HTTPSPolicyCallbackData HTTPSPolicyCallbackData;
alias _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData;
alias _HTTPSPolicyCallbackData SSL_EXTRA_CERT_CHAIN_POLICY_PARA;
alias _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
//C        WINBOOL CryptStringToBinaryA(LPCSTR pszString,DWORD cchString,DWORD dwFlags,BYTE *pbBinary,DWORD *pcbBinary,DWORD *pdwSkip,DWORD *pdwFlags);
WINBOOL  CryptStringToBinaryA(LPCSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);
//C        WINBOOL CryptStringToBinaryW(LPCWSTR pszString,DWORD cchString,DWORD dwFlags,BYTE *pbBinary,DWORD *pcbBinary,DWORD *pdwSkip,DWORD *pdwFlags);
WINBOOL  CryptStringToBinaryW(LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);
//C        WINBOOL CryptBinaryToStringA(const BYTE *pbBinary,DWORD cbBinary,DWORD dwFlags,LPSTR pszString,DWORD *pcchString);
WINBOOL  CryptBinaryToStringA(BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD *pcchString);
//C        WINBOOL CryptBinaryToStringW(const BYTE *pbBinary,DWORD cbBinary,DWORD dwFlags,LPWSTR pszString,DWORD *pcchString);
WINBOOL  CryptBinaryToStringW(BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString);
//C        HCERTSTORE PFXImportCertStore(CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,DWORD dwFlags);
HCERTSTORE  PFXImportCertStore(CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
//C        WINBOOL PFXIsPFXBlob(CRYPT_DATA_BLOB *pPFX);
WINBOOL  PFXIsPFXBlob(CRYPT_DATA_BLOB *pPFX);
//C        WINBOOL PFXVerifyPassword(CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,DWORD dwFlags);
WINBOOL  PFXVerifyPassword(CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
//C        WINBOOL PFXExportCertStoreEx(HCERTSTORE hStore,CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,void *pvReserved,DWORD dwFlags);
WINBOOL  PFXExportCertStoreEx(HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, void *pvReserved, DWORD dwFlags);
//C        WINBOOL PFXExportCertStore(HCERTSTORE hStore,CRYPT_DATA_BLOB *pPFX,LPCWSTR szPassword,DWORD dwFlags);
WINBOOL  PFXExportCertStore(HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags);
//C       typedef struct _CERTIFICATE_BLOB {
//C         DWORD dwCertEncodingType;
//C         DWORD cbData;
//C         PBYTE pbData;
//C       } EFS_CERTIFICATE_BLOB,*PEFS_CERTIFICATE_BLOB;
struct _CERTIFICATE_BLOB
{
    DWORD dwCertEncodingType;
    DWORD cbData;
    PBYTE pbData;
}
alias _CERTIFICATE_BLOB EFS_CERTIFICATE_BLOB;
alias _CERTIFICATE_BLOB *PEFS_CERTIFICATE_BLOB;
//C       typedef struct _EFS_HASH_BLOB {
//C         DWORD cbData;
//C         PBYTE pbData;
//C       } EFS_HASH_BLOB,*PEFS_HASH_BLOB;
struct _EFS_HASH_BLOB
{
    DWORD cbData;
    PBYTE pbData;
}
alias _EFS_HASH_BLOB EFS_HASH_BLOB;
alias _EFS_HASH_BLOB *PEFS_HASH_BLOB;
//C       typedef struct _EFS_RPC_BLOB {
//C         DWORD cbData;
//C         PBYTE pbData;
//C       } EFS_RPC_BLOB,*PEFS_RPC_BLOB;
struct _EFS_RPC_BLOB
{
    DWORD cbData;
    PBYTE pbData;
}
alias _EFS_RPC_BLOB EFS_RPC_BLOB;
alias _EFS_RPC_BLOB *PEFS_RPC_BLOB;
//C       typedef struct _EFS_KEY_INFO {
//C         DWORD dwVersion;
//C         ULONG Entropy;
//C         ALG_ID Algorithm;
//C         ULONG KeyLength;
//C       } EFS_KEY_INFO,*PEFS_KEY_INFO;
struct _EFS_KEY_INFO
{
    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;
}
alias _EFS_KEY_INFO EFS_KEY_INFO;
alias _EFS_KEY_INFO *PEFS_KEY_INFO;
//C       typedef struct _ENCRYPTION_CERTIFICATE {
//C         DWORD cbTotalLength;
//C         SID *pUserSid;
//C         PEFS_CERTIFICATE_BLOB pCertBlob;
//C       } ENCRYPTION_CERTIFICATE,*PENCRYPTION_CERTIFICATE;
struct _ENCRYPTION_CERTIFICATE
{
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
}
alias _ENCRYPTION_CERTIFICATE ENCRYPTION_CERTIFICATE;
alias _ENCRYPTION_CERTIFICATE *PENCRYPTION_CERTIFICATE;
//C       typedef struct _ENCRYPTION_CERTIFICATE_HASH {
//C         DWORD cbTotalLength;
//C         SID *pUserSid;
//C         PEFS_HASH_BLOB pHash;
//C         LPWSTR lpDisplayInformation;
//C       } ENCRYPTION_CERTIFICATE_HASH,*PENCRYPTION_CERTIFICATE_HASH;
struct _ENCRYPTION_CERTIFICATE_HASH
{
    DWORD cbTotalLength;
    SID *pUserSid;
    PEFS_HASH_BLOB pHash;
    LPWSTR lpDisplayInformation;
}
alias _ENCRYPTION_CERTIFICATE_HASH ENCRYPTION_CERTIFICATE_HASH;
alias _ENCRYPTION_CERTIFICATE_HASH *PENCRYPTION_CERTIFICATE_HASH;
//C       typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
//C         DWORD nCert_Hash;
//C         PENCRYPTION_CERTIFICATE_HASH *pUsers;
//C       } ENCRYPTION_CERTIFICATE_HASH_LIST,*PENCRYPTION_CERTIFICATE_HASH_LIST;
struct _ENCRYPTION_CERTIFICATE_HASH_LIST
{
    DWORD nCert_Hash;
    PENCRYPTION_CERTIFICATE_HASH *pUsers;
}
alias _ENCRYPTION_CERTIFICATE_HASH_LIST ENCRYPTION_CERTIFICATE_HASH_LIST;
alias _ENCRYPTION_CERTIFICATE_HASH_LIST *PENCRYPTION_CERTIFICATE_HASH_LIST;
//C       typedef struct _ENCRYPTION_CERTIFICATE_LIST {
//C         DWORD nUsers;
//C         PENCRYPTION_CERTIFICATE *pUsers;
//C       } ENCRYPTION_CERTIFICATE_LIST,*PENCRYPTION_CERTIFICATE_LIST;
struct _ENCRYPTION_CERTIFICATE_LIST
{
    DWORD nUsers;
    PENCRYPTION_CERTIFICATE *pUsers;
}
alias _ENCRYPTION_CERTIFICATE_LIST ENCRYPTION_CERTIFICATE_LIST;
alias _ENCRYPTION_CERTIFICATE_LIST *PENCRYPTION_CERTIFICATE_LIST;
//C        DWORD QueryUsersOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers);
DWORD  QueryUsersOnEncryptedFile(LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers);
//C        DWORD QueryRecoveryAgentsOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents);
DWORD  QueryRecoveryAgentsOnEncryptedFile(LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents);
//C        DWORD RemoveUsersFromEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
DWORD  RemoveUsersFromEncryptedFile(LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
//C        DWORD AddUsersToEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_LIST pUsers);
DWORD  AddUsersToEncryptedFile(LPCWSTR lpFileName, PENCRYPTION_CERTIFICATE_LIST pUsers);
//C        DWORD SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE pEncryptionCertificate);
DWORD  SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE pEncryptionCertificate);
//C        void FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
void  FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
//C        WINBOOL EncryptionDisable(LPCWSTR DirPath,WINBOOL Disable);
WINBOOL  EncryptionDisable(LPCWSTR DirPath, WINBOOL Disable);
//C        DWORD DuplicateEncryptionInfoFile(LPCWSTR SrcFileName,LPCWSTR DstFileName,DWORD dwCreationDistribution,DWORD dwAttributes,const LPSECURITY_ATTRIBUTES lpSecurityAttributes);
DWORD  DuplicateEncryptionInfoFile(LPCWSTR SrcFileName, LPCWSTR DstFileName, DWORD dwCreationDistribution, DWORD dwAttributes, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
//C       typedef struct {
//C         RPC_NS_HANDLE LookupContext;
//C         RPC_BINDING_HANDLE ProposedHandle;
//C         RPC_BINDING_VECTOR *Bindings;
//C       } RPC_IMPORT_CONTEXT_P,*PRPC_IMPORT_CONTEXT_P;
struct _N150
{
    RPC_NS_HANDLE LookupContext;
    RPC_BINDING_HANDLE ProposedHandle;
    RPC_BINDING_VECTOR *Bindings;
}
alias _N150 RPC_IMPORT_CONTEXT_P;
alias _N150 *PRPC_IMPORT_CONTEXT_P;
//C        RPC_STATUS I_RpcNsGetBuffer(PRPC_MESSAGE Message);
RPC_STATUS  I_RpcNsGetBuffer(PRPC_MESSAGE Message);
//C        RPC_STATUS I_RpcNsSendReceive(PRPC_MESSAGE Message,RPC_BINDING_HANDLE *Handle);
RPC_STATUS  I_RpcNsSendReceive(PRPC_MESSAGE Message, RPC_BINDING_HANDLE *Handle);
//C        void I_RpcNsRaiseException(PRPC_MESSAGE Message,RPC_STATUS Status);
void  I_RpcNsRaiseException(PRPC_MESSAGE Message, RPC_STATUS Status);
//C        RPC_STATUS I_RpcReBindBuffer(PRPC_MESSAGE Message);
RPC_STATUS  I_RpcReBindBuffer(PRPC_MESSAGE Message);
//C        RPC_STATUS I_NsServerBindSearch();
RPC_STATUS  I_NsServerBindSearch();
//C        RPC_STATUS I_NsClientBindSearch();
RPC_STATUS  I_NsClientBindSearch();
//C        void I_NsClientBindDone();
void  I_NsClientBindDone();
//C       typedef unsigned char byte;

//C       typedef byte cs_byte;
alias byte cs_byte;
//C       typedef unsigned char boolean;
alias ubyte boolean;
//C       void * MIDL_user_allocate(SIZE_T);
void * MIDL_user_allocate(SIZE_T );
//C       void MIDL_user_free(void *);
void  MIDL_user_free(void *);
//C       typedef void *NDR_CCONTEXT;
alias void *NDR_CCONTEXT;
//C       typedef struct _NDR_SCONTEXT {
//C         void *pad[2];
//C         void *userContext;
//C       } *NDR_SCONTEXT;
struct _NDR_SCONTEXT
{
    void *[2]pad;
    void *userContext;
}
alias _NDR_SCONTEXT *NDR_SCONTEXT;
//C       typedef void ( *NDR_RUNDOWN)(void *context);
alias void  function(void *context)NDR_RUNDOWN;
//C       typedef void ( *NDR_NOTIFY_ROUTINE)(void);
alias void  function()NDR_NOTIFY_ROUTINE;
//C       typedef void ( *NDR_NOTIFY2_ROUTINE)(boolean flag);
alias void  function(boolean flag)NDR_NOTIFY2_ROUTINE;
//C       typedef struct _SCONTEXT_QUEUE {
//C         unsigned long NumberOfObjects;
//C         NDR_SCONTEXT *ArrayOfObjects;
//C       } SCONTEXT_QUEUE,*PSCONTEXT_QUEUE;
struct _SCONTEXT_QUEUE
{
    uint NumberOfObjects;
    NDR_SCONTEXT *ArrayOfObjects;
}
alias _SCONTEXT_QUEUE SCONTEXT_QUEUE;
alias _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;
//C        RPC_BINDING_HANDLE NDRCContextBinding(NDR_CCONTEXT CContext);
RPC_BINDING_HANDLE  NDRCContextBinding(NDR_CCONTEXT CContext);
//C        void NDRCContextMarshall(NDR_CCONTEXT CContext,void *pBuff);
void  NDRCContextMarshall(NDR_CCONTEXT CContext, void *pBuff);
//C        void NDRCContextUnmarshall(NDR_CCONTEXT *pCContext,RPC_BINDING_HANDLE hBinding,void *pBuff,unsigned long DataRepresentation);
void  NDRCContextUnmarshall(NDR_CCONTEXT *pCContext, RPC_BINDING_HANDLE hBinding, void *pBuff, uint DataRepresentation);
//C        void NDRSContextMarshall(NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn);
void  NDRSContextMarshall(NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn);
//C        NDR_SCONTEXT NDRSContextUnmarshall(void *pBuff,unsigned long DataRepresentation);
NDR_SCONTEXT  NDRSContextUnmarshall(void *pBuff, uint DataRepresentation);
//C        void NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn);
void  NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn);
//C        void NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle,NDR_SCONTEXT CContext,void *pBuff,NDR_RUNDOWN userRunDownIn,void *CtxGuard,unsigned long Flags);
void  NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn, void *CtxGuard, uint Flags);
//C        NDR_SCONTEXT NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle,void *pBuff,unsigned long DataRepresentation);
NDR_SCONTEXT  NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle, void *pBuff, uint DataRepresentation);
//C        NDR_SCONTEXT NDRSContextUnmarshall2(RPC_BINDING_HANDLE BindingHandle,void *pBuff,unsigned long DataRepresentation,void *CtxGuard,unsigned long Flags);
NDR_SCONTEXT  NDRSContextUnmarshall2(RPC_BINDING_HANDLE BindingHandle, void *pBuff, uint DataRepresentation, void *CtxGuard, uint Flags);
//C        void RpcSsDestroyClientContext(void **ContextHandle);
void  RpcSsDestroyClientContext(void **ContextHandle);
//C     typedef unsigned long error_status_t;
alias uint error_status_t;
//C       struct _MIDL_STUB_MESSAGE;
//C       struct _MIDL_STUB_DESC;
//C       struct _FULL_PTR_XLAT_TABLES;
//C       typedef unsigned char *RPC_BUFPTR;
alias ubyte *RPC_BUFPTR;
//C       typedef unsigned long RPC_LENGTH;
alias uint RPC_LENGTH;
//C       typedef void ( *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
alias void  function(_MIDL_STUB_MESSAGE *)EXPR_EVAL;
//C       typedef const unsigned char *PFORMAT_STRING;
alias ubyte *PFORMAT_STRING;
//C       typedef struct {
//C         long Dimension;
//C         unsigned long *BufferConformanceMark;
//C         unsigned long *BufferVarianceMark;
//C         unsigned long *MaxCountArray;
//C         unsigned long *OffsetArray;
//C         unsigned long *ActualCountArray;
//C       } ARRAY_INFO,*PARRAY_INFO;
struct _N151
{
    int Dimension;
    uint *BufferConformanceMark;
    uint *BufferVarianceMark;
    uint *MaxCountArray;
    uint *OffsetArray;
    uint *ActualCountArray;
}
alias _N151 ARRAY_INFO;
alias _N151 *PARRAY_INFO;
//C       typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
alias _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
//C       typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
alias _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
//C       typedef struct {
//C         unsigned long WireCodeset;
//C         unsigned long DesiredReceivingCodeset;
//C         void *CSArrayInfo;
//C       } CS_STUB_INFO;
struct _N152
{
    uint WireCodeset;
    uint DesiredReceivingCodeset;
    void *CSArrayInfo;
}
alias _N152 CS_STUB_INFO;
//C       struct _MIDL_SYNTAX_INFO;
//C       typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO,*PMIDL_SYNTAX_INFO;
alias _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO;
alias _MIDL_SYNTAX_INFO *PMIDL_SYNTAX_INFO;
//C       struct NDR_ALLOC_ALL_NODES_CONTEXT;
//C       struct NDR_POINTER_QUEUE_STATE;
//C       struct _NDR_PROC_CONTEXT;
//C       typedef struct _MIDL_STUB_MESSAGE {
//C         PRPC_MESSAGE RpcMsg;
//C         unsigned char *Buffer;
//C         unsigned char *BufferStart;
//C         unsigned char *BufferEnd;
//C         unsigned char *BufferMark;
//C         unsigned long BufferLength;
//C         unsigned long MemorySize;
//C         unsigned char *Memory;
//C         unsigned char IsClient;
//C         unsigned char Pad;
//C         unsigned short uFlags2;
//C         int ReuseBuffer;
//C         struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
//C         struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
//C         int IgnoreEmbeddedPointers;
//C         unsigned char *PointerBufferMark;
//C         unsigned char fBufferValid;
//C         unsigned char uFlags;
//C         unsigned short UniquePtrCount;
//C         ULONG_PTR MaxCount;
//C         unsigned long Offset;
//C         unsigned long ActualCount;
//C         void *( *pfnAllocate)(size_t);
//C         void ( *pfnFree)(void *);
//C         unsigned char *StackTop;
//C         unsigned char *pPresentedType;
//C         unsigned char *pTransmitType;
//C         handle_t SavedHandle;
//C         const struct _MIDL_STUB_DESC *StubDesc;
//C         struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
//C         unsigned long FullPtrRefId;
//C         unsigned long PointerLength;
//C         int fInDontFree : 1;
//C         int fDontCallFreeInst : 1;
//C         int fInOnlyParam : 1;
//C         int fHasReturn : 1;
//C         int fHasExtensions : 1;
//C         int fHasNewCorrDesc : 1;
//C         int fIsOicfServer : 1;
//C         int fHasMemoryValidateCallback : 1;
//C         int fUnused : 8;
//C         int fUnused2 : 16;
//C         unsigned long dwDestContext;
//C         void *pvDestContext;
//C         NDR_SCONTEXT *SavedContextHandles;
//C         long ParamNumber;
//C         struct IRpcChannelBuffer *pRpcChannelBuffer;
//C         PARRAY_INFO pArrayInfo;
//C         unsigned long *SizePtrCountArray;
//C         unsigned long *SizePtrOffsetArray;
//C         unsigned long *SizePtrLengthArray;
//C         void *pArgQueue;
//C         unsigned long dwStubPhase;
//C         void *LowStackMark;
//C         PNDR_ASYNC_MESSAGE pAsyncMsg;
//C         PNDR_CORRELATION_INFO pCorrInfo;
//C         unsigned char *pCorrMemory;
//C         void *pMemoryList;
//C         CS_STUB_INFO *pCSInfo;
//C         unsigned char *ConformanceMark;
//C         unsigned char *VarianceMark;
//C         INT_PTR Unused;
//C         struct _NDR_PROC_CONTEXT *pContext;
//C         void *pUserMarshalList;
//C         INT_PTR Reserved51_2;
//C         INT_PTR Reserved51_3;
//C         INT_PTR Reserved51_4;
//C         INT_PTR Reserved51_5;
//C       } MIDL_STUB_MESSAGE,*PMIDL_STUB_MESSAGE;
struct _MIDL_STUB_MESSAGE
{
    PRPC_MESSAGE RpcMsg;
    ubyte *Buffer;
    ubyte *BufferStart;
    ubyte *BufferEnd;
    ubyte *BufferMark;
    uint BufferLength;
    uint MemorySize;
    ubyte *Memory;
    ubyte IsClient;
    ubyte Pad;
    ushort uFlags2;
    int ReuseBuffer;
    NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    NDR_POINTER_QUEUE_STATE *pPointerQueueState;
    int IgnoreEmbeddedPointers;
    ubyte *PointerBufferMark;
    ubyte fBufferValid;
    ubyte uFlags;
    ushort UniquePtrCount;
    ULONG_PTR MaxCount;
    uint Offset;
    uint ActualCount;
    void * function(size_t )pfnAllocate;
    void  function(void *)pfnFree;
    ubyte *StackTop;
    ubyte *pPresentedType;
    ubyte *pTransmitType;
    handle_t SavedHandle;
    _MIDL_STUB_DESC *StubDesc;
    _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
    uint FullPtrRefId;
    uint PointerLength;
    int __bitfield1;
    int fInDontFree() { return (__bitfield1 << 31) >> 31; }
    int fDontCallFreeInst() { return (__bitfield1 << 30) >> 31; }
    int fInOnlyParam() { return (__bitfield1 << 29) >> 31; }
    int fHasReturn() { return (__bitfield1 << 28) >> 31; }
    int fHasExtensions() { return (__bitfield1 << 27) >> 31; }
    int fHasNewCorrDesc() { return (__bitfield1 << 26) >> 31; }
    int fIsOicfServer() { return (__bitfield1 << 25) >> 31; }
    int fHasMemoryValidateCallback() { return (__bitfield1 << 24) >> 31; }
    int fUnused() { return (__bitfield1 << 16) >> 24; }
    int fUnused2() { return (__bitfield1 << 0) >> 16; }
    uint dwDestContext;
    void *pvDestContext;
    NDR_SCONTEXT *SavedContextHandles;
    int ParamNumber;
    IRpcChannelBuffer *pRpcChannelBuffer;
    PARRAY_INFO pArrayInfo;
    uint *SizePtrCountArray;
    uint *SizePtrOffsetArray;
    uint *SizePtrLengthArray;
    void *pArgQueue;
    uint dwStubPhase;
    void *LowStackMark;
    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    ubyte *pCorrMemory;
    void *pMemoryList;
    CS_STUB_INFO *pCSInfo;
    ubyte *ConformanceMark;
    ubyte *VarianceMark;
    INT_PTR Unused;
    _NDR_PROC_CONTEXT *pContext;
    void *pUserMarshalList;
    INT_PTR Reserved51_2;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;
}
alias _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
alias _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;
//C       typedef void *( *GENERIC_BINDING_ROUTINE)(void *);
alias void * function(void *)GENERIC_BINDING_ROUTINE;
//C       typedef void ( *GENERIC_UNBIND_ROUTINE)(void *,unsigned char *);
alias void  function(void *, ubyte *)GENERIC_UNBIND_ROUTINE;
//C       typedef struct _GENERIC_BINDING_ROUTINE_PAIR {
//C         GENERIC_BINDING_ROUTINE pfnBind;
//C         GENERIC_UNBIND_ROUTINE pfnUnbind;
//C       } GENERIC_BINDING_ROUTINE_PAIR,*PGENERIC_BINDING_ROUTINE_PAIR;
struct _GENERIC_BINDING_ROUTINE_PAIR
{
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
}
alias _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;
alias _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;
//C       typedef struct __GENERIC_BINDING_INFO {
//C         void *pObj;
//C         unsigned int Size;
//C         GENERIC_BINDING_ROUTINE pfnBind;
//C         GENERIC_UNBIND_ROUTINE pfnUnbind;
//C       } GENERIC_BINDING_INFO,*PGENERIC_BINDING_INFO;
struct __GENERIC_BINDING_INFO
{
    void *pObj;
    uint Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
}
alias __GENERIC_BINDING_INFO GENERIC_BINDING_INFO;
alias __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;
//C       typedef void ( *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
alias void  function(PMIDL_STUB_MESSAGE )XMIT_HELPER_ROUTINE;
//C       typedef struct _XMIT_ROUTINE_QUINTUPLE {
//C         XMIT_HELPER_ROUTINE pfnTranslateToXmit;
//C         XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
//C         XMIT_HELPER_ROUTINE pfnFreeXmit;
//C         XMIT_HELPER_ROUTINE pfnFreeInst;
//C       } XMIT_ROUTINE_QUINTUPLE,*PXMIT_ROUTINE_QUINTUPLE;
struct _XMIT_ROUTINE_QUINTUPLE
{
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
}
alias _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;
alias _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;
//C       typedef ULONG ( *USER_MARSHAL_SIZING_ROUTINE)(ULONG *,ULONG,void *);
alias ULONG  function(ULONG *, ULONG , void *)USER_MARSHAL_SIZING_ROUTINE;
//C       typedef unsigned char *( *USER_MARSHAL_MARSHALLING_ROUTINE)(ULONG *,unsigned char *,void *);
alias ubyte * function(ULONG *, ubyte *, void *)USER_MARSHAL_MARSHALLING_ROUTINE;
//C       typedef unsigned char *( *USER_MARSHAL_UNMARSHALLING_ROUTINE)(ULONG *,unsigned char *,void *);
alias ubyte * function(ULONG *, ubyte *, void *)USER_MARSHAL_UNMARSHALLING_ROUTINE;
//C       typedef void ( *USER_MARSHAL_FREEING_ROUTINE)(ULONG *,void *);
alias void  function(ULONG *, void *)USER_MARSHAL_FREEING_ROUTINE;
//C       typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
//C         USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
//C         USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
//C         USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
//C         USER_MARSHAL_FREEING_ROUTINE pfnFree;
//C       } USER_MARSHAL_ROUTINE_QUADRUPLE;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
}
alias _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;
//C       typedef enum _USER_MARSHAL_CB_TYPE {
//C         USER_MARSHAL_CB_BUFFER_SIZE,USER_MARSHAL_CB_MARSHALL,USER_MARSHAL_CB_UNMARSHALL,USER_MARSHAL_CB_FREE
//C       } USER_MARSHAL_CB_TYPE;
enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE,
}
alias _USER_MARSHAL_CB_TYPE USER_MARSHAL_CB_TYPE;
//C       typedef struct _USER_MARSHAL_CB {
//C         unsigned long Flags;
//C         PMIDL_STUB_MESSAGE pStubMsg;
//C         PFORMAT_STRING pReserve;
//C         unsigned long Signature;
//C         USER_MARSHAL_CB_TYPE CBType;
//C         PFORMAT_STRING pFormat;
//C         PFORMAT_STRING pTypeFormat;
//C       } USER_MARSHAL_CB;
struct _USER_MARSHAL_CB
{
    uint Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    uint Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
}
alias _USER_MARSHAL_CB USER_MARSHAL_CB;
//C       typedef struct _MALLOC_FREE_STRUCT {
//C         void *( *pfnAllocate)(size_t);
//C         void ( *pfnFree)(void *);
//C       } MALLOC_FREE_STRUCT;
struct _MALLOC_FREE_STRUCT
{
    void * function(size_t )pfnAllocate;
    void  function(void *)pfnFree;
}
alias _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;
//C       typedef struct _COMM_FAULT_OFFSETS {
//C         short CommOffset;
//C         short FaultOffset;
//C       } COMM_FAULT_OFFSETS;
struct _COMM_FAULT_OFFSETS
{
    short CommOffset;
    short FaultOffset;
}
alias _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;
//C       typedef enum _IDL_CS_CONVERT {
//C         IDL_CS_NO_CONVERT,IDL_CS_IN_PLACE_CONVERT,IDL_CS_NEW_BUFFER_CONVERT
//C       } IDL_CS_CONVERT;
enum _IDL_CS_CONVERT
{
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT,
}
alias _IDL_CS_CONVERT IDL_CS_CONVERT;
//C       typedef void ( *CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,unsigned long ulLocalBufferSize,IDL_CS_CONVERT *conversionType,unsigned long *pulNetworkBufferSize,error_status_t *pStatus);
alias void  function(RPC_BINDING_HANDLE hBinding, uint ulNetworkCodeSet, uint ulLocalBufferSize, IDL_CS_CONVERT *conversionType, uint *pulNetworkBufferSize, error_status_t *pStatus)CS_TYPE_NET_SIZE_ROUTINE;
//C       typedef void ( *CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,unsigned long ulNetworkBufferSize,IDL_CS_CONVERT *conversionType,unsigned long *pulLocalBufferSize,error_status_t *pStatus);
alias void  function(RPC_BINDING_HANDLE hBinding, uint ulNetworkCodeSet, uint ulNetworkBufferSize, IDL_CS_CONVERT *conversionType, uint *pulLocalBufferSize, error_status_t *pStatus)CS_TYPE_LOCAL_SIZE_ROUTINE;
//C       typedef void ( *CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,void *pLocalData,unsigned long ulLocalDataLength,byte *pNetworkData,unsigned long *pulNetworkDataLength,error_status_t *pStatus);
alias void  function(RPC_BINDING_HANDLE hBinding, uint ulNetworkCodeSet, void *pLocalData, uint ulLocalDataLength, byte *pNetworkData, uint *pulNetworkDataLength, error_status_t *pStatus)CS_TYPE_TO_NETCS_ROUTINE;
//C       typedef void ( *CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding,unsigned long ulNetworkCodeSet,byte *pNetworkData,unsigned long ulNetworkDataLength,unsigned long ulLocalBufferSize,void *pLocalData,unsigned long *pulLocalDataLength,error_status_t *pStatus);
alias void  function(RPC_BINDING_HANDLE hBinding, uint ulNetworkCodeSet, byte *pNetworkData, uint ulNetworkDataLength, uint ulLocalBufferSize, void *pLocalData, uint *pulLocalDataLength, error_status_t *pStatus)CS_TYPE_FROM_NETCS_ROUTINE;
//C       typedef void ( *CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned long *pulSendingTag,unsigned long *pulDesiredReceivingTag,unsigned long *pulReceivingTag,error_status_t *pStatus);
alias void  function(RPC_BINDING_HANDLE hBinding, int fServerSide, uint *pulSendingTag, uint *pulDesiredReceivingTag, uint *pulReceivingTag, error_status_t *pStatus)CS_TAG_GETTING_ROUTINE;
//C       void RpcCsGetTags(RPC_BINDING_HANDLE hBinding,int fServerSide,unsigned long *pulSendingTag,unsigned long *pulDesiredReceivingTag,unsigned long *pulReceivingTag,error_status_t *pStatus);
void  RpcCsGetTags(RPC_BINDING_HANDLE hBinding, int fServerSide, uint *pulSendingTag, uint *pulDesiredReceivingTag, uint *pulReceivingTag, error_status_t *pStatus);
//C       typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES {
//C         CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
//C         CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
//C         CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
//C         CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
//C       } NDR_CS_SIZE_CONVERT_ROUTINES;
struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
}
alias _NDR_CS_SIZE_CONVERT_ROUTINES NDR_CS_SIZE_CONVERT_ROUTINES;
//C       typedef struct _NDR_CS_ROUTINES {
//C         NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
//C         CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
//C       } NDR_CS_ROUTINES;
struct _NDR_CS_ROUTINES
{
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
}
alias _NDR_CS_ROUTINES NDR_CS_ROUTINES;
//C       typedef struct _MIDL_STUB_DESC {
//C         void *RpcInterfaceInformation;
//C         void *( *pfnAllocate)(size_t);
//C         void ( *pfnFree)(void *);
//C         union {
//C           handle_t *pAutoHandle;
//C           handle_t *pPrimitiveHandle;
//C           PGENERIC_BINDING_INFO pGenericBindingInfo;
//C         } IMPLICIT_HANDLE_INFO;
union _N153
{
    handle_t *pAutoHandle;
    handle_t *pPrimitiveHandle;
    PGENERIC_BINDING_INFO pGenericBindingInfo;
}
//C         const NDR_RUNDOWN *apfnNdrRundownRoutines;
//C         const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
//C         const EXPR_EVAL *apfnExprEval;
//C         const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
//C         const unsigned char *pFormatTypes;
//C         int fCheckBounds;
//C         unsigned long Version;
//C         MALLOC_FREE_STRUCT *pMallocFreeStruct;
//C         long MIDLVersion;
//C         const COMM_FAULT_OFFSETS *CommFaultOffsets;
//C         const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
//C         const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
//C         ULONG_PTR mFlags;
//C         const NDR_CS_ROUTINES *CsRoutineTables;
//C         void *Reserved4;
//C         ULONG_PTR Reserved5;
//C       } MIDL_STUB_DESC;
struct _MIDL_STUB_DESC
{
    void *RpcInterfaceInformation;
    void * function(size_t )pfnAllocate;
    void  function(void *)pfnFree;
    _N153 IMPLICIT_HANDLE_INFO;
    NDR_RUNDOWN *apfnNdrRundownRoutines;
    GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
    EXPR_EVAL *apfnExprEval;
    XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
    ubyte *pFormatTypes;
    int fCheckBounds;
    uint Version;
    MALLOC_FREE_STRUCT *pMallocFreeStruct;
    int MIDLVersion;
    COMM_FAULT_OFFSETS *CommFaultOffsets;
    USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
    NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
    ULONG_PTR mFlags;
    NDR_CS_ROUTINES *CsRoutineTables;
    void *Reserved4;
    ULONG_PTR Reserved5;
}
alias _MIDL_STUB_DESC MIDL_STUB_DESC;
//C       typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;
alias MIDL_STUB_DESC *PMIDL_STUB_DESC;
//C       typedef void *PMIDL_XMIT_TYPE;
alias void *PMIDL_XMIT_TYPE;
//C       typedef struct _MIDL_FORMAT_STRING {
//C         short Pad;
//C         unsigned char Format[];
//C       } MIDL_FORMAT_STRING;
struct _MIDL_FORMAT_STRING
{
    short Pad;
    ubyte []Format;
}
alias _MIDL_FORMAT_STRING MIDL_FORMAT_STRING;
//C       typedef void ( *STUB_THUNK)(PMIDL_STUB_MESSAGE);
alias void  function(PMIDL_STUB_MESSAGE )STUB_THUNK;
//C       typedef long ( *SERVER_ROUTINE)();
alias int  function()SERVER_ROUTINE;
//C       typedef struct _MIDL_SERVER_INFO_ {
//C         PMIDL_STUB_DESC pStubDesc;
//C         const SERVER_ROUTINE *DispatchTable;
//C         PFORMAT_STRING ProcString;
//C         const unsigned short *FmtStringOffset;
//C         const STUB_THUNK *ThunkTable;
//C         PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
//C         ULONG_PTR nCount;
//C         PMIDL_SYNTAX_INFO pSyntaxInfo;
//C       } MIDL_SERVER_INFO,*PMIDL_SERVER_INFO;
struct _MIDL_SERVER_INFO_
{
    PMIDL_STUB_DESC pStubDesc;
    SERVER_ROUTINE *DispatchTable;
    PFORMAT_STRING ProcString;
    ushort *FmtStringOffset;
    STUB_THUNK *ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
}
alias _MIDL_SERVER_INFO_ MIDL_SERVER_INFO;
alias _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;
//C       typedef struct _MIDL_STUBLESS_PROXY_INFO {
//C         PMIDL_STUB_DESC pStubDesc;
//C         PFORMAT_STRING ProcFormatString;
//C         const unsigned short *FormatStringOffset;
//C         PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
//C         ULONG_PTR nCount;
//C         PMIDL_SYNTAX_INFO pSyntaxInfo;
//C       } MIDL_STUBLESS_PROXY_INFO;
struct _MIDL_STUBLESS_PROXY_INFO
{
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    ushort *FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
}
alias _MIDL_STUBLESS_PROXY_INFO MIDL_STUBLESS_PROXY_INFO;
//C       typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
alias MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
//C       struct _MIDL_SYNTAX_INFO {
//C         RPC_SYNTAX_IDENTIFIER TransferSyntax;
//C         RPC_DISPATCH_TABLE *DispatchTable;
//C         PFORMAT_STRING ProcString;
//C         const unsigned short *FmtStringOffset;
//C         PFORMAT_STRING TypeString;
//C         const void *aUserMarshalQuadruple;
//C         ULONG_PTR pReserved1;
//C         ULONG_PTR pReserved2;
//C       };
struct _MIDL_SYNTAX_INFO
{
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    RPC_DISPATCH_TABLE *DispatchTable;
    PFORMAT_STRING ProcString;
    ushort *FmtStringOffset;
    PFORMAT_STRING TypeString;
    void *aUserMarshalQuadruple;
    ULONG_PTR pReserved1;
    ULONG_PTR pReserved2;
}
//C       typedef unsigned short *PARAM_OFFSETTABLE,*PPARAM_OFFSETTABLE;
alias ushort *PARAM_OFFSETTABLE;
alias ushort *PPARAM_OFFSETTABLE;
//C       typedef union _CLIENT_CALL_RETURN {
//C         void *Pointer;
//C         LONG_PTR Simple;
//C       } CLIENT_CALL_RETURN;
union _CLIENT_CALL_RETURN
{
    void *Pointer;
    LONG_PTR Simple;
}
alias _CLIENT_CALL_RETURN CLIENT_CALL_RETURN;
//C       typedef enum {
//C         XLAT_SERVER = 1,XLAT_CLIENT
//C       } XLAT_SIDE;
enum
{
    XLAT_SERVER = 1,
    XLAT_CLIENT,
}
alias int XLAT_SIDE;
//C       typedef struct _FULL_PTR_TO_REFID_ELEMENT {
//C         struct _FULL_PTR_TO_REFID_ELEMENT *Next;
//C         void *Pointer;
//C         unsigned long RefId;
//C         unsigned char State;
//C       } FULL_PTR_TO_REFID_ELEMENT,*PFULL_PTR_TO_REFID_ELEMENT;
struct _FULL_PTR_TO_REFID_ELEMENT
{
    _FULL_PTR_TO_REFID_ELEMENT *Next;
    void *Pointer;
    uint RefId;
    ubyte State;
}
alias _FULL_PTR_TO_REFID_ELEMENT FULL_PTR_TO_REFID_ELEMENT;
alias _FULL_PTR_TO_REFID_ELEMENT *PFULL_PTR_TO_REFID_ELEMENT;
//C       typedef struct _FULL_PTR_XLAT_TABLES {
//C         struct {
//C           void **XlatTable;
//C           unsigned char *StateTable;
//C           unsigned long NumberOfEntries;
//C         } RefIdToPointer;
struct _N155
{
    void **XlatTable;
    ubyte *StateTable;
    uint NumberOfEntries;
}
//C         struct {
//C           PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
//C           unsigned long NumberOfBuckets;
//C           unsigned long HashMask;
//C         } PointerToRefId;
struct _N156
{
    PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
    uint NumberOfBuckets;
    uint HashMask;
}
//C         unsigned long NextRefId;
//C         XLAT_SIDE XlatSide;
//C       } FULL_PTR_XLAT_TABLES,*PFULL_PTR_XLAT_TABLES;
struct _FULL_PTR_XLAT_TABLES
{
    _N155 RefIdToPointer;
    _N156 PointerToRefId;
    uint NextRefId;
    XLAT_SIDE XlatSide;
}
alias _FULL_PTR_XLAT_TABLES FULL_PTR_XLAT_TABLES;
alias _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;
//C       RPC_STATUS NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf,unsigned long *pCount,MIDL_SYNTAX_INFO **pArr);
RPC_STATUS  NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf, uint *pCount, MIDL_SYNTAX_INFO **pArr);
//C       RPC_STATUS NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf,unsigned long *pCount,MIDL_SYNTAX_INFO **pArr,unsigned long *pPreferSyntaxIndex);
RPC_STATUS  NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf, uint *pCount, MIDL_SYNTAX_INFO **pArr, uint *pPreferSyntaxIndex);
//C        void NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,unsigned char FormatChar);
void  NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, ubyte FormatChar);
//C        unsigned char * NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned char * NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
ubyte * NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT ContextHandle,int fCheck);
void  NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck);
//C        void NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine);
void  NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine);
//C        void NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_SCONTEXT ContextHandle,NDR_RUNDOWN RundownRoutine,PFORMAT_STRING pFormat);
void  NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat);
//C        void NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,unsigned char FormatChar);
void  NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, ubyte FormatChar);
//C        unsigned char * NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        void NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory,unsigned long CacheSize,unsigned long flags);
void  NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, uint CacheSize, uint flags);
//C        void NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg);
void  NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg);
//C        void NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg);
void  NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg);
//C        unsigned char * NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        unsigned char * NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **ppMemory,PFORMAT_STRING pFormat,unsigned char fMustAlloc);
ubyte * NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, ubyte **ppMemory, PFORMAT_STRING pFormat, ubyte fMustAlloc);
//C        void NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,NDR_CCONTEXT *pContextHandle,RPC_BINDING_HANDLE BindHandle);
void  NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT *pContextHandle, RPC_BINDING_HANDLE BindHandle);
//C        NDR_SCONTEXT NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg);
NDR_SCONTEXT  NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg);
//C        NDR_SCONTEXT NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
NDR_SCONTEXT  NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        NDR_SCONTEXT NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
NDR_SCONTEXT  NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        void NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        unsigned long NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned long NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
uint  NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        void NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pMemory,PFORMAT_STRING pFormat);
void  NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pMemory, PFORMAT_STRING pFormat);
//C        void NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,long NumberParams);
void  NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, int NumberParams);
//C        void NdrConvert(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
void  NdrConvert(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        unsigned char * NdrUserMarshalSimpleTypeConvert(unsigned long *pFlags,unsigned char *pBuffer,unsigned char FormatChar);
ubyte * NdrUserMarshalSimpleTypeConvert(uint *pFlags, ubyte *pBuffer, ubyte FormatChar);
//C        void NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum);
void  NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint ProcNum);
//C        unsigned char * NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor);
ubyte * NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor);
//C        void NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned long RequestedBufferSize);
void  NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint RequestedBufferSize);
//C        void NdrClientInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,unsigned int ProcNum);
void  NdrClientInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, uint ProcNum);
//C        unsigned char * NdrServerInitialize(PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor);
ubyte * NdrServerInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor);
//C        unsigned char * NdrServerInitializeUnmarshall (PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PRPC_MESSAGE pRpcMsg);
ubyte * NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg);
//C        void NdrServerInitializeMarshall (PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg);
void  NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg);
//C        unsigned char * NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned long BufferLength,RPC_BINDING_HANDLE Handle);
ubyte * NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, uint BufferLength, RPC_BINDING_HANDLE Handle);
//C        unsigned char * NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned long BufferLength,RPC_BINDING_HANDLE Handle);
ubyte * NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, uint BufferLength, RPC_BINDING_HANDLE Handle);
//C        unsigned char * NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pBufferEnd);
ubyte * NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pBufferEnd);
//C        unsigned char * NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg,unsigned char *pBufferEnd,RPC_BINDING_HANDLE *pAutoHandle);
ubyte * NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg, ubyte *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle);
//C        void NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg);
void  NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg);
//C        RPC_STATUS NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg,RPC_VERSION *pVersion);
RPC_STATUS  NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion);
//C       CLIENT_CALL_RETURN  NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
CLIENT_CALL_RETURN  NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat,...);
//C       CLIENT_CALL_RETURN  NdrClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
CLIENT_CALL_RETURN  NdrClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat,...);
//C       CLIENT_CALL_RETURN  NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
CLIENT_CALL_RETURN  NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat,...);
//C       CLIENT_CALL_RETURN  NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,...);
CLIENT_CALL_RETURN  NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat,...);
//C       typedef enum {
//C         STUB_UNMARSHAL,STUB_CALL_SERVER,STUB_MARSHAL,STUB_CALL_SERVER_NO_HRESULT
//C       } STUB_PHASE;
enum
{
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT,
}
alias int STUB_PHASE;
//C       typedef enum {
//C         PROXY_CALCSIZE,PROXY_GETBUFFER,PROXY_MARSHAL,PROXY_SENDRECEIVE,PROXY_UNMARSHAL
//C       } PROXY_PHASE;
enum
{
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL,
}
alias int PROXY_PHASE;
//C       struct IRpcStubBuffer;
//C        void NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg);
void  NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg);
//C        long NdrAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  NdrAsyncStubCall(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        long NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  NdrDcomAsyncStubCall(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        long NdrStubCall2(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  NdrStubCall2(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        void NdrServerCall2(PRPC_MESSAGE pRpcMsg);
void  NdrServerCall2(PRPC_MESSAGE pRpcMsg);
//C        long NdrStubCall (struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  NdrStubCall(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        void NdrServerCall(PRPC_MESSAGE pRpcMsg);
void  NdrServerCall(PRPC_MESSAGE pRpcMsg);
//C        int NdrServerUnmarshall(struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,PMIDL_STUB_MESSAGE pStubMsg,PMIDL_STUB_DESC pStubDescriptor,PFORMAT_STRING pFormat,void *pParamList);
int  NdrServerUnmarshall(IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void *pParamList);
//C        void NdrServerMarshall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat);
void  NdrServerMarshall(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
//C        RPC_STATUS NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg,unsigned long *pCommStatus,unsigned long *pFaultStatus,RPC_STATUS Status);
RPC_STATUS  NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg, uint *pCommStatus, uint *pFaultStatus, RPC_STATUS Status);
//C        int NdrSH_UPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,RPC_BUFPTR pBuffer);
int  NdrSH_UPDecision(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem, RPC_BUFPTR pBuffer);
//C        int NdrSH_TLUPDecision(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem);
int  NdrSH_TLUPDecision(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem);
//C        int NdrSH_TLUPDecisionBuffer(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem);
int  NdrSH_TLUPDecisionBuffer(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem);
//C        int NdrSH_IfAlloc(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
int  NdrSH_IfAlloc(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem, uint Count);
//C        int NdrSH_IfAllocRef(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
int  NdrSH_IfAllocRef(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem, uint Count);
//C        int NdrSH_IfAllocSet(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
int  NdrSH_IfAllocSet(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem, uint Count);
//C        RPC_BUFPTR NdrSH_IfCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
RPC_BUFPTR  NdrSH_IfCopy(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem, uint Count);
//C        RPC_BUFPTR NdrSH_IfAllocCopy(PMIDL_STUB_MESSAGE pStubMsg,unsigned char **pPtrInMem,unsigned long Count);
RPC_BUFPTR  NdrSH_IfAllocCopy(PMIDL_STUB_MESSAGE pStubMsg, ubyte **pPtrInMem, uint Count);
//C        unsigned long NdrSH_Copy(unsigned char *pStubMsg,unsigned char *pPtrInMem,unsigned long Count);
uint  NdrSH_Copy(ubyte *pStubMsg, ubyte *pPtrInMem, uint Count);
//C        void NdrSH_IfFree(PMIDL_STUB_MESSAGE pMessage,unsigned char *pPtr);
void  NdrSH_IfFree(PMIDL_STUB_MESSAGE pMessage, ubyte *pPtr);
//C        RPC_BUFPTR NdrSH_StringMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char *pMemory,unsigned long Count,int Size);
RPC_BUFPTR  NdrSH_StringMarshall(PMIDL_STUB_MESSAGE pMessage, ubyte *pMemory, uint Count, int Size);
//C        RPC_BUFPTR NdrSH_StringUnMarshall(PMIDL_STUB_MESSAGE pMessage,unsigned char **pMemory,int Size);
RPC_BUFPTR  NdrSH_StringUnMarshall(PMIDL_STUB_MESSAGE pMessage, ubyte **pMemory, int Size);
//C       typedef void *RPC_SS_THREAD_HANDLE;
alias void *RPC_SS_THREAD_HANDLE;
//C       typedef void * RPC_CLIENT_ALLOC(size_t Size);
alias void *function(size_t Size)RPC_CLIENT_ALLOC;
//C       typedef void RPC_CLIENT_FREE(void *Ptr);
alias void function(void *Ptr)RPC_CLIENT_FREE;
//C        void * RpcSsAllocate(size_t Size);
void * RpcSsAllocate(size_t Size);
//C        void RpcSsDisableAllocate(void);
void  RpcSsDisableAllocate();
//C        void RpcSsEnableAllocate(void);
void  RpcSsEnableAllocate();
//C        void RpcSsFree(void *NodeToFree);
void  RpcSsFree(void *NodeToFree);
//C        RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle(void);
RPC_SS_THREAD_HANDLE  RpcSsGetThreadHandle();
//C        void RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree);
void  RpcSsSetClientAllocFree(void * function(size_t Size)ClientAlloc, void  function(void *Ptr)ClientFree);
//C        void RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
void  RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
//C        void RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree,RPC_CLIENT_ALLOC **OldClientAlloc,RPC_CLIENT_FREE **OldClientFree);
void  RpcSsSwapClientAllocFree(void * function(size_t Size)ClientAlloc, void  function(void *Ptr)ClientFree, void * function(size_t Size)*OldClientAlloc, void  function(void *Ptr)*OldClientFree);
//C        void * RpcSmAllocate(size_t Size,RPC_STATUS *pStatus);
void * RpcSmAllocate(size_t Size, RPC_STATUS *pStatus);
//C        RPC_STATUS RpcSmClientFree(void *pNodeToFree);
RPC_STATUS  RpcSmClientFree(void *pNodeToFree);
//C        RPC_STATUS RpcSmDestroyClientContext(void **ContextHandle);
RPC_STATUS  RpcSmDestroyClientContext(void **ContextHandle);
//C        RPC_STATUS RpcSmDisableAllocate(void);
RPC_STATUS  RpcSmDisableAllocate();
//C        RPC_STATUS RpcSmEnableAllocate(void);
RPC_STATUS  RpcSmEnableAllocate();
//C        RPC_STATUS RpcSmFree(void *NodeToFree);
RPC_STATUS  RpcSmFree(void *NodeToFree);
//C        RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle (RPC_STATUS *pStatus);
RPC_SS_THREAD_HANDLE  RpcSmGetThreadHandle(RPC_STATUS *pStatus);
//C        RPC_STATUS RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree);
RPC_STATUS  RpcSmSetClientAllocFree(void * function(size_t Size)ClientAlloc, void  function(void *Ptr)ClientFree);
//C        RPC_STATUS RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
RPC_STATUS  RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
//C        RPC_STATUS RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc,RPC_CLIENT_FREE *ClientFree,RPC_CLIENT_ALLOC **OldClientAlloc,RPC_CLIENT_FREE **OldClientFree);
RPC_STATUS  RpcSmSwapClientAllocFree(void * function(size_t Size)ClientAlloc, void  function(void *Ptr)ClientFree, void * function(size_t Size)*OldClientAlloc, void  function(void *Ptr)*OldClientFree);
//C        void NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage);
void  NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage);
//C        void NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage);
void  NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage);
//C        void NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage);
void  NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage);
//C        void * NdrRpcSmClientAllocate(size_t Size);
void * NdrRpcSmClientAllocate(size_t Size);
//C        void NdrRpcSmClientFree(void *NodeToFree);
void  NdrRpcSmClientFree(void *NodeToFree);
//C        void * NdrRpcSsDefaultAllocate(size_t Size);
void * NdrRpcSsDefaultAllocate(size_t Size);
//C        void NdrRpcSsDefaultFree(void *NodeToFree);
void  NdrRpcSsDefaultFree(void *NodeToFree);
//C        PFULL_PTR_XLAT_TABLES NdrFullPointerXlatInit(unsigned long NumberOfPointers,XLAT_SIDE XlatSide);
PFULL_PTR_XLAT_TABLES  NdrFullPointerXlatInit(uint NumberOfPointers, XLAT_SIDE XlatSide);
//C        void NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables);
void  NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables);
//C        int NdrFullPointerQueryPointer(PFULL_PTR_XLAT_TABLES pXlatTables,void *pPointer,unsigned char QueryType,unsigned long *pRefId);
int  NdrFullPointerQueryPointer(PFULL_PTR_XLAT_TABLES pXlatTables, void *pPointer, ubyte QueryType, uint *pRefId);
//C        int NdrFullPointerQueryRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned long RefId,unsigned char QueryType,void **ppPointer);
int  NdrFullPointerQueryRefId(PFULL_PTR_XLAT_TABLES pXlatTables, uint RefId, ubyte QueryType, void **ppPointer);
//C        void NdrFullPointerInsertRefId(PFULL_PTR_XLAT_TABLES pXlatTables,unsigned long RefId,void *pPointer);
void  NdrFullPointerInsertRefId(PFULL_PTR_XLAT_TABLES pXlatTables, uint RefId, void *pPointer);
//C        int NdrFullPointerFree(PFULL_PTR_XLAT_TABLES pXlatTables,void *Pointer);
int  NdrFullPointerFree(PFULL_PTR_XLAT_TABLES pXlatTables, void *Pointer);
//C        void * NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg,size_t Len);
void * NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg, size_t Len);
//C        void NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg,PFORMAT_STRING pFormat,void *ArgAddr);
void  NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr);
//C        void * NdrOleAllocate(size_t Size);
void * NdrOleAllocate(size_t Size);
//C        void NdrOleFree(void *NodeToFree);
void  NdrOleFree(void *NodeToFree);
//C       typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
//C         void *Buffer;
//C         unsigned long BufferSize;
//C         void *( *pfnAllocate)(size_t);
//C         void ( *pfnFree)(void *);
//C         struct IRpcChannelBuffer *pRpcChannelBuffer;
//C         ULONG_PTR Reserved[5];
//C       } NDR_USER_MARSHAL_INFO_LEVEL1;
struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *Buffer;
    uint BufferSize;
    void * function(size_t )pfnAllocate;
    void  function(void *)pfnFree;
    IRpcChannelBuffer *pRpcChannelBuffer;
    ULONG_PTR [5]Reserved;
}
alias _NDR_USER_MARSHAL_INFO_LEVEL1 NDR_USER_MARSHAL_INFO_LEVEL1;
//C       typedef struct _NDR_USER_MARSHAL_INFO {
//C         unsigned long InformationLevel;
//C          union {
//C           NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
//C         };
union _N159
{
    NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
}
//C       } NDR_USER_MARSHAL_INFO;
struct _NDR_USER_MARSHAL_INFO
{
    uint InformationLevel;
    NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
}
alias _NDR_USER_MARSHAL_INFO NDR_USER_MARSHAL_INFO;
//C       RPC_STATUS NdrGetUserMarshalInfo(unsigned long *pFlags,unsigned long InformationLevel,NDR_USER_MARSHAL_INFO *pMarshalInfo);
RPC_STATUS  NdrGetUserMarshalInfo(uint *pFlags, uint InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo);
//C       RPC_STATUS NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub,RPC_SERVER_INTERFACE *pServerIf);
RPC_STATUS  NdrCreateServerInterfaceFromStub(IRpcStubBuffer *pStub, RPC_SERVER_INTERFACE *pServerIf);
//C       CLIENT_CALL_RETURN  NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
CLIENT_CALL_RETURN  NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, uint nProcNum, void *pReturnValue,...);
//C       CLIENT_CALL_RETURN  Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
CLIENT_CALL_RETURN  Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, uint nProcNum, void *pReturnValue,...);
//C       CLIENT_CALL_RETURN  Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo,unsigned long nProcNum,void *pReturnValue,...);
CLIENT_CALL_RETURN  Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, uint nProcNum, void *pReturnValue,...);
//C       struct IRpcStubBuffer;
//C        void Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg);
void  Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg);
//C        void Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg);
void  Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg);
//C        void Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg);
void  Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg);
//C        long Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  Ndr64AsyncStubCall(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        long Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  Ndr64DcomAsyncStubCall(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        long NdrStubCall3 (struct IRpcStubBuffer *pThis,struct IRpcChannelBuffer *pChannel,PRPC_MESSAGE pRpcMsg,unsigned long *pdwStubPhase);
int  NdrStubCall3(IRpcStubBuffer *pThis, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, uint *pdwStubPhase);
//C        void NdrServerCallAll(PRPC_MESSAGE pRpcMsg);
void  NdrServerCallAll(PRPC_MESSAGE pRpcMsg);
//C        void NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg);
void  NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg);
//C        void NdrServerCall3(PRPC_MESSAGE pRpcMsg);
void  NdrServerCall3(PRPC_MESSAGE pRpcMsg);
//C        void NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory);
void  NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory);
//C        void NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg,void **ppMemory);
void  NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory);
//C        void NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg,void *pMemory);
void  NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory);
//C        void NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg,void **ppMemory,PFORMAT_STRING pFormat);
void  NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory, PFORMAT_STRING pFormat);
//C       void RpcUserFree(handle_t AsyncHandle,void *pBuffer);
void  RpcUserFree(handle_t AsyncHandle, void *pBuffer);
//C       typedef int ( *_onexit_t)(void);
alias int  function()_onexit_t;
//C       typedef struct _div_t {
//C         int quot;
//C         int rem;
//C       } div_t;
struct _div_t
{
    int quot;
    int rem;
}
alias _div_t div_t;
//C       typedef struct _ldiv_t {
//C         long quot;
//C         long rem;
//C       } ldiv_t;
struct _ldiv_t
{
    int quot;
    int rem;
}
alias _ldiv_t ldiv_t;
//C       typedef struct {
//C         unsigned char ld[10];
//C       } _LDOUBLE;
struct _N160
{
    ubyte [10]ld;
}
alias _N160 _LDOUBLE;
//C       typedef struct {
//C         double x;
//C       } _CRT_DOUBLE;
struct _N161
{
    double x;
}
alias _N161 _CRT_DOUBLE;
//C       typedef struct {
//C         float f;
//C       } _CRT_FLOAT;
struct _N162
{
    float f;
}
alias _N162 _CRT_FLOAT;
//C       typedef struct {
//C         long double x;
//C       } _LONGDOUBLE;
struct _N163
{
    real x;
}
alias _N163 _LONGDOUBLE;
//C       typedef struct {
//C         unsigned char ld12[12];
//C       } _LDBL12;
struct _N164
{
    ubyte [12]ld12;
}
alias _N164 _LDBL12;
//C       typedef void ( *_purecall_handler)(void);
alias void  function()_purecall_handler;
//C       typedef void ( *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
alias void  function(wchar_t *, wchar_t *, wchar_t *, uint , uintptr_t )_invalid_parameter_handler;
//C       _invalid_parameter_handler  _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
_invalid_parameter_handler  _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
//C       _invalid_parameter_handler  _get_invalid_parameter_handler(void);
_invalid_parameter_handler  _get_invalid_parameter_handler();
//C       errno_t  _set_errno(int _Value);
errno_t  _set_errno(int _Value);
//C       errno_t  _get_errno(int *_Value);
errno_t  _get_errno(int *_Value);
//C       errno_t  _set_doserrno(unsigned long _Value);
errno_t  _set_doserrno(uint _Value);
//C       errno_t  _get_doserrno(unsigned long *_Value);
errno_t  _get_doserrno(uint *_Value);
//C       extern int * __imp___argc;
extern int *__imp___argc;
//C       extern char *** __imp___argv;
extern char ***__imp___argv;
//C       extern wchar_t *** __imp___wargv;
extern wchar_t ***__imp___wargv;
//C       extern char *** __imp__environ;
extern char ***__imp__environ;
//C       extern wchar_t *** __imp__wenviron;
extern wchar_t ***__imp__wenviron;
//C       extern char ** __imp__pgmptr;
extern char **__imp__pgmptr;
//C       extern wchar_t ** __imp__wpgmptr;
extern wchar_t **__imp__wpgmptr;
//C       errno_t  _get_pgmptr(char **_Value);
errno_t  _get_pgmptr(char **_Value);
//C       errno_t  _get_wpgmptr(wchar_t **_Value);
errno_t  _get_wpgmptr(wchar_t **_Value);
//C       extern int * __imp__fmode;
extern int *__imp__fmode;
//C       extern unsigned int * __imp__osplatform;
extern uint *__imp__osplatform;
//C       extern unsigned int * __imp__osver;
extern uint *__imp__osver;
//C       extern unsigned int * __imp__winver;
extern uint *__imp__winver;
//C       extern unsigned int * __imp__winmajor;
extern uint *__imp__winmajor;
//C       extern unsigned int * __imp__winminor;
extern uint *__imp__winminor;
//C       errno_t  _get_osplatform(unsigned int *_Value);
errno_t  _get_osplatform(uint *_Value);
//C       errno_t  _get_osver(unsigned int *_Value);
errno_t  _get_osver(uint *_Value);
//C       errno_t  _get_winver(unsigned int *_Value);
errno_t  _get_winver(uint *_Value);
//C       errno_t  _get_winmajor(unsigned int *_Value);
errno_t  _get_winmajor(uint *_Value);
//C       errno_t  _get_winminor(unsigned int *_Value);
errno_t  _get_winminor(uint *_Value);
//C       void   exit(int _Code) ;
void  exit(int _Code);
//C       void   _exit(int _Code) ;
void  _exit(int _Code);
//C       void  _Exit() ;
void  _Exit(int );
//C       void   abort(void);
void  abort();
//C       int  abs(int _X);
int  abs(int _X);
//C       long  labs(long _X);
int  labs(int _X);
//C        long long  _abs64(long long);
long  _abs64(long );
//C       int  atexit(void ( *)(void));
int  atexit(void  function());
//C       double  atof(const char *_String);
double  atof(char *_String);
//C       double  _atof_l(const char *_String,_locale_t _Locale);
double  _atof_l(char *_String, _locale_t _Locale);
//C       int  atoi(const char *_Str);
int  atoi(char *_Str);
//C       long  atol(const char *_Str);
int  atol(char *_Str);
//C       void * bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(const void *,const void *));
void * bsearch(void *_Key, void *_Base, size_t _NumOfElements, size_t _SizeOfElements, int  function(void *, void *)_PtFuncCompare);
//C       void  qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(const void *,const void *));
void  qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, int  function(void *, void *)_PtFuncCompare);
//C       unsigned short  _byteswap_ushort(unsigned short _Short);
ushort  _byteswap_ushort(ushort _Short);
//C       unsigned long  _byteswap_ulong (unsigned long _Long);
uint  _byteswap_ulong(uint _Long);
//C        unsigned long long  _byteswap_uint64(unsigned long long _Int64);
ulong  _byteswap_uint64(ulong _Int64);
//C       div_t  div(int _Numerator,int _Denominator);
div_t  div(int _Numerator, int _Denominator);
//C       char * getenv(const char *_VarName) ;
char * getenv(char *_VarName);
//C       ldiv_t  ldiv(long _Numerator,long _Denominator);
ldiv_t  ldiv(int _Numerator, int _Denominator);
//C       int  mblen(const char *_Ch,size_t _MaxCount);
int  mblen(char *_Ch, size_t _MaxCount);
//C       int  mbtowc(wchar_t *  _DstCh,const char *  _SrcCh,size_t _SrcSizeInBytes);
int  mbtowc(wchar_t *_DstCh, char *_SrcCh, size_t _SrcSizeInBytes);
//C       size_t  mbstowcs(wchar_t *  _Dest,const char *  _Source,size_t _MaxCount);
size_t  mbstowcs(wchar_t *_Dest, char *_Source, size_t _MaxCount);
//C       int  rand(void);
int  rand();
//C       void  srand(unsigned int _Seed);
void  srand(uint _Seed);
//C       double   strtod(const char *  _Str,char **  _EndPtr);
double  strtod(char *_Str, char **_EndPtr);
//C       float   strtof(const char *  nptr,char **  endptr);
float  strtof(char *nptr, char **endptr);
//C       long double   strtold(const char *  ,char **  );
real  strtold(char *, char **);
//C       extern double  
//C       __strtod (const char *  ,char ** );
double  __strtod(char *, char **);
//C       float  __mingw_strtof (const char * ,char ** );
float  __mingw_strtof(char *, char **);
//C       long double  __mingw_strtold(const char * ,char ** );
real  __mingw_strtold(char *, char **);
//C       long  strtol(const char *  _Str,char **  _EndPtr,int _Radix);
int  strtol(char *_Str, char **_EndPtr, int _Radix);
//C       unsigned long  strtoul(const char *  _Str,char **  _EndPtr,int _Radix);
uint  strtoul(char *_Str, char **_EndPtr, int _Radix);
//C       int  system(const char *_Command);
int  system(char *_Command);
//C       int  wctomb(char *_MbCh,wchar_t _WCh) ;
int  wctomb(char *_MbCh, wchar_t _WCh);
//C       size_t  wcstombs(char *  _Dest,const wchar_t *  _Source,size_t _MaxCount) ;
size_t  wcstombs(char *_Dest, wchar_t *_Source, size_t _MaxCount);
//C       void * calloc(size_t _NumOfElements,size_t _SizeOfElements);
void * calloc(size_t _NumOfElements, size_t _SizeOfElements);
//C       void  free(void *_Memory);
void  free(void *_Memory);
//C       void * malloc(size_t _Size);
void * malloc(size_t _Size);
//C       void * realloc(void *_Memory,size_t _NewSize);
void * realloc(void *_Memory, size_t _NewSize);
//C       double  wcstod(const wchar_t *  _Str,wchar_t **  _EndPtr);
double  wcstod(wchar_t *_Str, wchar_t **_EndPtr);
//C       float  wcstof(const wchar_t *  nptr,wchar_t **  endptr);
float  wcstof(wchar_t *nptr, wchar_t **endptr);
//C       double  __mingw_wcstod(const wchar_t *  _Str,wchar_t **  _EndPtr);
double  __mingw_wcstod(wchar_t *_Str, wchar_t **_EndPtr);
//C       float  __mingw_wcstof(const wchar_t *  nptr,wchar_t **  endptr);
float  __mingw_wcstof(wchar_t *nptr, wchar_t **endptr);
//C       long double  __mingw_wcstold(const wchar_t * ,wchar_t ** );
real  __mingw_wcstold(wchar_t *, wchar_t **);
//C       float  wcstof( const wchar_t * ,wchar_t ** );
float  wcstof(wchar_t *, wchar_t **);
//C       long double  wcstold(const wchar_t * ,wchar_t ** );
real  wcstold(wchar_t *, wchar_t **);
//C       long  wcstol(const wchar_t *  _Str,wchar_t **  _EndPtr,int _Radix);
int  wcstol(wchar_t *_Str, wchar_t **_EndPtr, int _Radix);
//C       unsigned long  wcstoul(const wchar_t *  _Str,wchar_t **  _EndPtr,int _Radix);
uint  wcstoul(wchar_t *_Str, wchar_t **_EndPtr, int _Radix);
//C        unsigned long long  _lrotl(unsigned long long _Val,int _Shift);
ulong  _lrotl(ulong _Val, int _Shift);
//C        unsigned long long  _lrotr(unsigned long long _Val,int _Shift);
ulong  _lrotr(ulong _Val, int _Shift);
//C       _onexit_t  _onexit(_onexit_t _Func);
_onexit_t  _onexit(_onexit_t _Func);
//C       void  perror(const char *_ErrMsg);
void  perror(char *_ErrMsg);
//C        unsigned long long  _rotl64(unsigned long long _Val,int _Shift);
ulong  _rotl64(ulong _Val, int _Shift);
//C        unsigned long long  _rotr64(unsigned long long Value,int Shift);
ulong  _rotr64(ulong Value, int Shift);
//C       unsigned int  _rotr(unsigned int _Val,int _Shift);
uint  _rotr(uint _Val, int _Shift);
//C       unsigned int  _rotl(unsigned int _Val,int _Shift);
uint  _rotl(uint _Val, int _Shift);
//C        unsigned long long  _rotr64(unsigned long long _Val,int _Shift);
ulong  _rotr64(ulong _Val, int _Shift);
//C       char * ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
char * ecvt(double _Val, int _NumOfDigits, int *_PtDec, int *_PtSign);
//C       char * fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
char * fcvt(double _Val, int _NumOfDec, int *_PtDec, int *_PtSign);
//C       char * gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
char * gcvt(double _Val, int _NumOfDigits, char *_DstBuf);
//C       char * itoa(int _Val,char *_DstBuf,int _Radix) ;
char * itoa(int _Val, char *_DstBuf, int _Radix);
//C       char * ltoa(long _Val,char *_DstBuf,int _Radix) ;
char * ltoa(int _Val, char *_DstBuf, int _Radix);
//C       int  putenv(const char *_EnvString) ;
int  putenv(char *_EnvString);
//C       void  swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;
void  swab(char *_Buf1, char *_Buf2, int _SizeInBytes);
//C       char * ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
char * ultoa(uint _Val, char *_Dstbuf, int _Radix);
//C       _onexit_t  onexit(_onexit_t _Func);
_onexit_t  onexit(_onexit_t _Func);
//C       typedef struct {  long long quot,rem; } lldiv_t;
struct _N165
{
    long quot;
    long rem;
}
alias _N165 lldiv_t;
//C        lldiv_t  lldiv(long long,long long);
lldiv_t  lldiv(long , long );
//C        long long  llabs(long long);
long  llabs(long );
//C        long long  strtoll(const char * ,char ** __restrict,int);
long  strtoll(char *, char **, int );
//C        unsigned long long  strtoull(const char * ,char ** ,int);
ulong  strtoull(char *, char **, int );
//C        long long  atoll (const char *);
long  atoll(char *);
//C        long long  wtoll (const wchar_t *);
long  wtoll(wchar_t *);
//C        char * lltoa (long long,char *,int);
char * lltoa(long , char *, int );
//C        char * ulltoa (unsigned long long ,char *,int);
char * ulltoa(ulong , char *, int );
//C        wchar_t * lltow (long long,wchar_t *,int);
wchar_t * lltow(long , wchar_t *, int );
//C        wchar_t * ulltow (unsigned long long,wchar_t *,int);
wchar_t * ulltow(ulong , wchar_t *, int );
//C       typedef struct _heapinfo {
//C         int *_pentry;
//C         size_t _size;
//C         int _useflag;
//C       } _HEAPINFO;
struct _heapinfo
{
    int *_pentry;
    size_t _size;
    int _useflag;
}
alias _heapinfo _HEAPINFO;
//C       extern unsigned int _amblksiz;
extern uint _amblksiz;
//C     void * __mingw_aligned_malloc (size_t _Size,size_t _Alignment);
void * __mingw_aligned_malloc(size_t _Size, size_t _Alignment);
//C     void __mingw_aligned_free (void *_Memory);
void  __mingw_aligned_free(void *_Memory);
//C     void * __mingw_aligned_offset_realloc (void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
void * __mingw_aligned_offset_realloc(void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
//C     void * __mingw_aligned_realloc (void *_Memory,size_t _Size,size_t _Offset);
void * __mingw_aligned_realloc(void *_Memory, size_t _Size, size_t _Offset);
//C       static  void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
//C         if(_Ptr) {
//C           *((unsigned int*)_Ptr) = _Marker;
//C           _Ptr = (char*)_Ptr + 16;
//C         }
//C         return _Ptr;
//C       }
//C       static  void  _freea(void *_Memory) {
void * _MarkAllocaS(void *, uint );
//C         unsigned int _Marker;
//C         if(_Memory) {
//C           _Memory = (char*)_Memory - 16;
//C           _Marker = *(unsigned int *)_Memory;
//C           if(_Marker==0xDDDD) {
//C      free(_Memory);
//C           }
//C         }
//C       }
//C     typedef enum tagREGCLS {
void  _freea(void *);
//C       REGCLS_SINGLEUSE = 0,REGCLS_MULTIPLEUSE = 1,REGCLS_MULTI_SEPARATE = 2,REGCLS_SUSPENDED = 4,REGCLS_SURROGATE = 8
//C     } REGCLS;
enum tagREGCLS
{
    REGCLS_SINGLEUSE,
    REGCLS_MULTIPLEUSE,
    REGCLS_MULTI_SEPARATE,
    REGCLS_SUSPENDED = 4,
    REGCLS_SURROGATE = 8,
}
alias tagREGCLS REGCLS;
//C     typedef struct IRpcStubBuffer IRpcStubBuffer;
//C     typedef struct IRpcChannelBuffer IRpcChannelBuffer;
//C     extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
//C     extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
//C     typedef struct tagRemHGLOBAL {
//C         LONG fNullHGlobal;
//C         ULONG cbData;
//C         byte data[1];
//C     } RemHGLOBAL;
struct tagRemHGLOBAL
{
    LONG fNullHGlobal;
    ULONG cbData;
    byte [1]data;
}
alias tagRemHGLOBAL RemHGLOBAL;
//C     typedef struct tagRemHMETAFILEPICT {
//C         LONG mm;
//C         LONG xExt;
//C         LONG yExt;
//C         ULONG cbData;
//C         byte data[1];
//C     } RemHMETAFILEPICT;
struct tagRemHMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte [1]data;
}
alias tagRemHMETAFILEPICT RemHMETAFILEPICT;
//C     typedef struct tagRemHENHMETAFILE {
//C         ULONG cbData;
//C         byte data[1];
//C     } RemHENHMETAFILE;
struct tagRemHENHMETAFILE
{
    ULONG cbData;
    byte [1]data;
}
alias tagRemHENHMETAFILE RemHENHMETAFILE;
//C     typedef struct tagRemHBITMAP {
//C         ULONG cbData;
//C         byte data[1];
//C     } RemHBITMAP;
struct tagRemHBITMAP
{
    ULONG cbData;
    byte [1]data;
}
alias tagRemHBITMAP RemHBITMAP;
//C     typedef struct tagRemHPALETTE {
//C         ULONG cbData;
//C         byte data[1];
//C     } RemHPALETTE;
struct tagRemHPALETTE
{
    ULONG cbData;
    byte [1]data;
}
alias tagRemHPALETTE RemHPALETTE;
//C     typedef struct tagRemBRUSH {
//C         ULONG cbData;
//C         byte data[1];
//C     } RemHBRUSH;
struct tagRemBRUSH
{
    ULONG cbData;
    byte [1]data;
}
alias tagRemBRUSH RemHBRUSH;
//C     typedef WCHAR OLECHAR;
alias WCHAR OLECHAR;
//C     typedef OLECHAR *LPOLESTR;
alias OLECHAR *LPOLESTR;
//C     typedef const OLECHAR *LPCOLESTR;
alias OLECHAR *LPCOLESTR;
//C     typedef double DOUBLE;
alias double DOUBLE;
//C     typedef struct _COAUTHIDENTITY {
//C         USHORT *User;
//C         ULONG UserLength;
//C         USHORT *Domain;
//C         ULONG DomainLength;
//C         USHORT *Password;
//C         ULONG PasswordLength;
//C         ULONG Flags;
//C     } COAUTHIDENTITY;
struct _COAUTHIDENTITY
{
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
}
alias _COAUTHIDENTITY COAUTHIDENTITY;
//C     typedef struct _COAUTHINFO {
//C         DWORD dwAuthnSvc;
//C         DWORD dwAuthzSvc;
//C         LPWSTR pwszServerPrincName;
//C         DWORD dwAuthnLevel;
//C         DWORD dwImpersonationLevel;
//C         COAUTHIDENTITY *pAuthIdentityData;
//C         DWORD dwCapabilities;
//C     } COAUTHINFO;
struct _COAUTHINFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
}
alias _COAUTHINFO COAUTHINFO;
//C     typedef LONG SCODE;
alias LONG SCODE;
//C     typedef SCODE *PSCODE;
alias SCODE *PSCODE;
//C     typedef enum tagMEMCTX {
//C         MEMCTX_TASK = 1,
//C         MEMCTX_SHARED = 2,
//C         MEMCTX_MACSYSTEM = 3,
//C         MEMCTX_UNKNOWN = -1,
//C         MEMCTX_SAME = -2
//C     } MEMCTX;
enum tagMEMCTX
{
    MEMCTX_TASK = 1,
    MEMCTX_SHARED,
    MEMCTX_MACSYSTEM,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2,
}
alias tagMEMCTX MEMCTX;
//C     typedef enum tagCLSCTX {
//C         CLSCTX_INPROC_SERVER = 0x1,
//C         CLSCTX_INPROC_HANDLER = 0x2,
//C         CLSCTX_LOCAL_SERVER = 0x4,
//C         CLSCTX_INPROC_SERVER16 = 0x8,
//C         CLSCTX_REMOTE_SERVER = 0x10,
//C         CLSCTX_INPROC_HANDLER16 = 0x20,
//C         CLSCTX_RESERVED1 = 0x40,
//C         CLSCTX_RESERVED2 = 0x80,
//C         CLSCTX_RESERVED3 = 0x100,
//C         CLSCTX_RESERVED4 = 0x200,
//C         CLSCTX_NO_CODE_DOWNLOAD = 0x400,
//C         CLSCTX_RESERVED5 = 0x800,
//C         CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
//C         CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
//C         CLSCTX_NO_FAILURE_LOG = 0x4000,
//C         CLSCTX_DISABLE_AAA = 0x8000,
//C         CLSCTX_ENABLE_AAA = 0x10000,
//C         CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
//C         CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
//C         CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000
//C     } CLSCTX;
enum tagCLSCTX
{
    CLSCTX_INPROC_SERVER = 1,
    CLSCTX_INPROC_HANDLER,
    CLSCTX_LOCAL_SERVER = 4,
    CLSCTX_INPROC_SERVER16 = 8,
    CLSCTX_REMOTE_SERVER = 16,
    CLSCTX_INPROC_HANDLER16 = 32,
    CLSCTX_RESERVED1 = 64,
    CLSCTX_RESERVED2 = 128,
    CLSCTX_RESERVED3 = 256,
    CLSCTX_RESERVED4 = 512,
    CLSCTX_NO_CODE_DOWNLOAD = 1024,
    CLSCTX_RESERVED5 = 2048,
    CLSCTX_NO_CUSTOM_MARSHAL = 4096,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
    CLSCTX_NO_FAILURE_LOG = 16384,
    CLSCTX_DISABLE_AAA = 32768,
    CLSCTX_ENABLE_AAA = 65536,
    CLSCTX_FROM_DEFAULT_CONTEXT = 131072,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 262144,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 524288,
}
alias tagCLSCTX CLSCTX;
//C     typedef enum tagMSHLFLAGS {
//C         MSHLFLAGS_NORMAL = 0,
//C         MSHLFLAGS_TABLESTRONG = 1,
//C         MSHLFLAGS_TABLEWEAK = 2,
//C         MSHLFLAGS_NOPING = 4,
//C         MSHLFLAGS_RESERVED1 = 8,
//C         MSHLFLAGS_RESERVED2 = 16,
//C         MSHLFLAGS_RESERVED3 = 32,
//C         MSHLFLAGS_RESERVED4 = 64
//C     } MSHLFLAGS;
enum tagMSHLFLAGS
{
    MSHLFLAGS_NORMAL,
    MSHLFLAGS_TABLESTRONG,
    MSHLFLAGS_TABLEWEAK,
    MSHLFLAGS_NOPING = 4,
    MSHLFLAGS_RESERVED1 = 8,
    MSHLFLAGS_RESERVED2 = 16,
    MSHLFLAGS_RESERVED3 = 32,
    MSHLFLAGS_RESERVED4 = 64,
}
alias tagMSHLFLAGS MSHLFLAGS;
//C     typedef enum tagMSHCTX {
//C         MSHCTX_LOCAL = 0,
//C         MSHCTX_NOSHAREDMEM = 1,
//C         MSHCTX_DIFFERENTMACHINE = 2,
//C         MSHCTX_INPROC = 3,
//C         MSHCTX_CROSSCTX = 4
//C     } MSHCTX;
enum tagMSHCTX
{
    MSHCTX_LOCAL,
    MSHCTX_NOSHAREDMEM,
    MSHCTX_DIFFERENTMACHINE,
    MSHCTX_INPROC,
    MSHCTX_CROSSCTX,
}
alias tagMSHCTX MSHCTX;
//C     typedef enum tagDVASPECT {
//C         DVASPECT_CONTENT = 1,
//C         DVASPECT_THUMBNAIL = 2,
//C         DVASPECT_ICON = 4,
//C         DVASPECT_DOCPRINT = 8
//C     } DVASPECT;
enum tagDVASPECT
{
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8,
}
alias tagDVASPECT DVASPECT;
//C     typedef enum tagSTGC {
//C         STGC_DEFAULT = 0,
//C         STGC_OVERWRITE = 1,
//C         STGC_ONLYIFCURRENT = 2,
//C         STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
//C         STGC_CONSOLIDATE = 8
//C     } STGC;
enum tagSTGC
{
    STGC_DEFAULT,
    STGC_OVERWRITE,
    STGC_ONLYIFCURRENT,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8,
}
alias tagSTGC STGC;
//C     typedef enum tagSTGMOVE {
//C         STGMOVE_MOVE = 0,
//C         STGMOVE_COPY = 1,
//C         STGMOVE_SHALLOWCOPY = 2
//C     } STGMOVE;
enum tagSTGMOVE
{
    STGMOVE_MOVE,
    STGMOVE_COPY,
    STGMOVE_SHALLOWCOPY,
}
alias tagSTGMOVE STGMOVE;
//C     typedef enum tagSTATFLAG {
//C         STATFLAG_DEFAULT = 0,
//C         STATFLAG_NONAME = 1,
//C         STATFLAG_NOOPEN = 2
//C     } STATFLAG;
enum tagSTATFLAG
{
    STATFLAG_DEFAULT,
    STATFLAG_NONAME,
    STATFLAG_NOOPEN,
}
alias tagSTATFLAG STATFLAG;
//C     typedef void *HCONTEXT;
alias void *HCONTEXT;
//C     typedef struct _BYTE_BLOB {
//C         ULONG clSize;
//C         byte abData[1];
//C     } BYTE_BLOB;
struct _BYTE_BLOB
{
    ULONG clSize;
    byte [1]abData;
}
alias _BYTE_BLOB BYTE_BLOB;
//C     typedef BYTE_BLOB *UP_BYTE_BLOB;
alias BYTE_BLOB *UP_BYTE_BLOB;
//C     typedef struct _WORD_BLOB {
//C         ULONG clSize;
//C         unsigned short asData[1];
//C     } WORD_BLOB;
struct _WORD_BLOB
{
    ULONG clSize;
    ushort [1]asData;
}
alias _WORD_BLOB WORD_BLOB;
//C     typedef WORD_BLOB *UP_WORD_BLOB;
alias WORD_BLOB *UP_WORD_BLOB;
//C     typedef struct _DWORD_BLOB {
//C         ULONG clSize;
//C         ULONG alData[1];
//C     } DWORD_BLOB;
struct _DWORD_BLOB
{
    ULONG clSize;
    ULONG [1]alData;
}
alias _DWORD_BLOB DWORD_BLOB;
//C     typedef DWORD_BLOB *UP_DWORD_BLOB;
alias DWORD_BLOB *UP_DWORD_BLOB;
//C     typedef struct _FLAGGED_BYTE_BLOB {
//C         ULONG fFlags;
//C         ULONG clSize;
//C         byte abData[1];
//C     } FLAGGED_BYTE_BLOB;
struct _FLAGGED_BYTE_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    byte [1]abData;
}
alias _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;
//C     typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
alias FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
//C     typedef struct _FLAGGED_WORD_BLOB {
//C         ULONG fFlags;
//C         ULONG clSize;
//C         unsigned short asData[1];
//C     } FLAGGED_WORD_BLOB;
struct _FLAGGED_WORD_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    ushort [1]asData;
}
alias _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;
//C     typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
alias FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
//C     typedef struct _BYTE_SIZEDARR {
//C         ULONG clSize;
//C         byte *pData;
//C     } BYTE_SIZEDARR;
struct _BYTE_SIZEDARR
{
    ULONG clSize;
    byte *pData;
}
alias _BYTE_SIZEDARR BYTE_SIZEDARR;
//C     typedef struct _SHORT_SIZEDARR {
//C         ULONG clSize;
//C         unsigned short *pData;
//C     } WORD_SIZEDARR;
struct _SHORT_SIZEDARR
{
    ULONG clSize;
    ushort *pData;
}
alias _SHORT_SIZEDARR WORD_SIZEDARR;
//C     typedef struct _LONG_SIZEDARR {
//C         ULONG clSize;
//C         ULONG *pData;
//C     } DWORD_SIZEDARR;
struct _LONG_SIZEDARR
{
    ULONG clSize;
    ULONG *pData;
}
alias _LONG_SIZEDARR DWORD_SIZEDARR;
//C     typedef struct _HYPER_SIZEDARR {
//C         ULONG clSize;
//C         long long *pData;
//C     } HYPER_SIZEDARR;
struct _HYPER_SIZEDARR
{
    ULONG clSize;
    long *pData;
}
alias _HYPER_SIZEDARR HYPER_SIZEDARR;
//C     typedef struct _userCLIPFORMAT {
//C         LONG fContext;
//C         union {
//C             DWORD dwValue;
//C             wchar_t *pwszName;
//C         } u;
union _N166
{
    DWORD dwValue;
    wchar_t *pwszName;
}
//C     } userCLIPFORMAT;
struct _userCLIPFORMAT
{
    LONG fContext;
    _N166 u;
}
alias _userCLIPFORMAT userCLIPFORMAT;
//C     typedef userCLIPFORMAT *wireCLIPFORMAT;
alias userCLIPFORMAT *wireCLIPFORMAT;
//C     typedef WORD CLIPFORMAT;
alias WORD CLIPFORMAT;
//C     typedef struct _GDI_NONREMOTE {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             DWORD_BLOB *hRemote;
//C         } u;
union _N167
{
    LONG hInproc;
    DWORD_BLOB *hRemote;
}
//C     } GDI_NONREMOTE;
struct _GDI_NONREMOTE
{
    LONG fContext;
    _N167 u;
}
alias _GDI_NONREMOTE GDI_NONREMOTE;
//C     typedef struct _userHGLOBAL {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             FLAGGED_BYTE_BLOB *hRemote;
//C             INT64 hInproc64;
//C         } tagged_union;
union _N168
{
    LONG hInproc;
    FLAGGED_BYTE_BLOB *hRemote;
    INT64 hInproc64;
}
//C     } userHGLOBAL;
struct _userHGLOBAL
{
    LONG fContext;
    _N168 tagged_union;
}
alias _userHGLOBAL userHGLOBAL;
//C     typedef userHGLOBAL *wireHGLOBAL;
alias userHGLOBAL *wireHGLOBAL;
//C     typedef struct _userHMETAFILE {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             BYTE_BLOB *hRemote;
//C             INT64 hInproc64;
//C         } tagged_union;
union _N169
{
    LONG hInproc;
    BYTE_BLOB *hRemote;
    INT64 hInproc64;
}
//C     } userHMETAFILE;
struct _userHMETAFILE
{
    LONG fContext;
    _N169 tagged_union;
}
alias _userHMETAFILE userHMETAFILE;
//C     typedef struct _remoteMETAFILEPICT {
//C         LONG mm;
//C         LONG xExt;
//C         LONG yExt;
//C         userHMETAFILE *hMF;
//C     } remoteMETAFILEPICT;
struct _remoteMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
}
alias _remoteMETAFILEPICT remoteMETAFILEPICT;
//C     typedef struct _userHMETAFILEPICT {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             remoteMETAFILEPICT *hRemote;
//C             INT64 hInproc64;
//C         } tagged_union;
union _N170
{
    LONG hInproc;
    remoteMETAFILEPICT *hRemote;
    INT64 hInproc64;
}
//C     } userHMETAFILEPICT;
struct _userHMETAFILEPICT
{
    LONG fContext;
    _N170 tagged_union;
}
alias _userHMETAFILEPICT userHMETAFILEPICT;
//C     typedef struct _userHENHMETAFILE {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             BYTE_BLOB *hRemote;
//C             INT64 hInproc64;
//C         } tagged_union;
union _N171
{
    LONG hInproc;
    BYTE_BLOB *hRemote;
    INT64 hInproc64;
}
//C     } userHENHMETAFILE;
struct _userHENHMETAFILE
{
    LONG fContext;
    _N171 tagged_union;
}
alias _userHENHMETAFILE userHENHMETAFILE;
//C     typedef struct _userBITMAP {
//C         LONG bmType;
//C         LONG bmWidth;
//C         LONG bmHeight;
//C         LONG bmWidthBytes;
//C         WORD bmPlanes;
//C         WORD bmBitsPixel;
//C         ULONG cbSize;
//C         byte pBuffer[1];
//C     } userBITMAP;
struct _userBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte [1]pBuffer;
}
alias _userBITMAP userBITMAP;
//C     typedef struct _userHBITMAP {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             userBITMAP *hRemote;
//C             INT64 hInproc64;
//C         } u;
union _N172
{
    LONG hInproc;
    userBITMAP *hRemote;
    INT64 hInproc64;
}
//C     } userHBITMAP;
struct _userHBITMAP
{
    LONG fContext;
    _N172 u;
}
alias _userHBITMAP userHBITMAP;
//C     typedef struct _userHPALETTE {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             LOGPALETTE *hRemote;
//C             INT64 hInproc64;
//C         } u;
union _N173
{
    LONG hInproc;
    LOGPALETTE *hRemote;
    INT64 hInproc64;
}
//C     } userHPALETTE;
struct _userHPALETTE
{
    LONG fContext;
    _N173 u;
}
alias _userHPALETTE userHPALETTE;
//C     typedef struct _RemotableHandle {
//C         LONG fContext;
//C         union {
//C             LONG hInproc;
//C             LONG hRemote;
//C         } tagged_union;
union _N174
{
    LONG hInproc;
    LONG hRemote;
}
//C     } RemotableHandle;
struct _RemotableHandle
{
    LONG fContext;
    _N174 tagged_union;
}
alias _RemotableHandle RemotableHandle;
//C     typedef RemotableHandle *wireHWND;
alias RemotableHandle *wireHWND;
//C     typedef RemotableHandle *wireHMENU;
alias RemotableHandle *wireHMENU;
//C     typedef RemotableHandle *wireHACCEL;
alias RemotableHandle *wireHACCEL;
//C     typedef RemotableHandle *wireHBRUSH;
alias RemotableHandle *wireHBRUSH;
//C     typedef RemotableHandle *wireHFONT;
alias RemotableHandle *wireHFONT;
//C     typedef RemotableHandle *wireHDC;
alias RemotableHandle *wireHDC;
//C     typedef RemotableHandle *wireHICON;
alias RemotableHandle *wireHICON;
//C     typedef RemotableHandle *wireHRGN;
alias RemotableHandle *wireHRGN;
//C     typedef userHBITMAP *wireHBITMAP;
alias userHBITMAP *wireHBITMAP;
//C     typedef userHPALETTE *wireHPALETTE;
alias userHPALETTE *wireHPALETTE;
//C     typedef userHENHMETAFILE *wireHENHMETAFILE;
alias userHENHMETAFILE *wireHENHMETAFILE;
//C     typedef userHMETAFILE *wireHMETAFILE;
alias userHMETAFILE *wireHMETAFILE;
//C     typedef userHMETAFILEPICT *wireHMETAFILEPICT;
alias userHMETAFILEPICT *wireHMETAFILEPICT;
//C     typedef void *HMETAFILEPICT;
alias void *HMETAFILEPICT;
//C     typedef double DATE;
alias double DATE;
//C       typedef union tagCY {
//C          struct {
//C           ULONG Lo;
//C           LONG Hi;
//C         } ;
struct _N175
{
    ULONG Lo;
    LONG Hi;
}
//C         LONGLONG int64;
//C       } CY;
union tagCY
{
    ULONG Lo;
    LONG Hi;
    LONGLONG int64;
}
alias tagCY CY;
//C     typedef CY *LPCY;
alias CY *LPCY;
//C       typedef struct tagDEC {
//C         USHORT wReserved;
//C          union {
//C            struct {
//C      BYTE scale;
//C      BYTE sign;
//C           } ;
struct _N177
{
    BYTE scale;
    BYTE sign;
}
//C           USHORT signscale;
//C         } ;
union _N176
{
    BYTE scale;
    BYTE sign;
    USHORT signscale;
}
//C         ULONG Hi32;
//C          union {
//C            struct {
//C      ULONG Lo32;
//C      ULONG Mid32;
//C           } ;
struct _N179
{
    ULONG Lo32;
    ULONG Mid32;
}
//C           ULONGLONG Lo64;
//C         } ;
union _N178
{
    ULONG Lo32;
    ULONG Mid32;
    ULONGLONG Lo64;
}
//C       } DECIMAL;
struct tagDEC
{
    USHORT wReserved;
    BYTE scale;
    BYTE sign;
    USHORT signscale;
    ULONG Hi32;
    ULONG Lo32;
    ULONG Mid32;
    ULONGLONG Lo64;
}
alias tagDEC DECIMAL;
//C     typedef DECIMAL *LPDECIMAL;
alias DECIMAL *LPDECIMAL;
//C     typedef FLAGGED_WORD_BLOB *wireBSTR;
alias FLAGGED_WORD_BLOB *wireBSTR;
//C     typedef OLECHAR *BSTR;
alias OLECHAR *BSTR;
//C     typedef BSTR *LPBSTR;
alias BSTR *LPBSTR;
//C     typedef short VARIANT_BOOL;
alias short VARIANT_BOOL;
//C     typedef VARIANT_BOOL _VARIANT_BOOL;
alias VARIANT_BOOL _VARIANT_BOOL;
//C     typedef struct tagBSTRBLOB {
//C         ULONG cbSize;
//C         BYTE *pData;
//C     } BSTRBLOB;
struct tagBSTRBLOB
{
    ULONG cbSize;
    BYTE *pData;
}
alias tagBSTRBLOB BSTRBLOB;
//C     typedef struct tagBSTRBLOB *LPBSTRBLOB;
alias tagBSTRBLOB *LPBSTRBLOB;
//C     typedef struct tagBLOB {
//C         ULONG cbSize;
//C         BYTE *pBlobData;
//C     } BLOB;
struct tagBLOB
{
    ULONG cbSize;
    BYTE *pBlobData;
}
alias tagBLOB BLOB;
//C     typedef struct tagBLOB *LPBLOB;
alias tagBLOB *LPBLOB;
//C     typedef struct tagCLIPDATA {
//C         ULONG cbSize;
//C         LONG ulClipFmt;
//C         BYTE *pClipData;
//C     } CLIPDATA;
struct tagCLIPDATA
{
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE *pClipData;
}
alias tagCLIPDATA CLIPDATA;
//C     typedef unsigned short VARTYPE;
alias ushort VARTYPE;
//C     enum VARENUM {
//C         VT_EMPTY = 0,
//C         VT_NULL = 1,
//C         VT_I2 = 2,
//C         VT_I4 = 3,
//C         VT_R4 = 4,
//C         VT_R8 = 5,
//C         VT_CY = 6,
//C         VT_DATE = 7,
//C         VT_BSTR = 8,
//C         VT_DISPATCH = 9,
//C         VT_ERROR = 10,
//C         VT_BOOL = 11,
//C         VT_VARIANT = 12,
//C         VT_UNKNOWN = 13,
//C         VT_DECIMAL = 14,
//C         VT_I1 = 16,
//C         VT_UI1 = 17,
//C         VT_UI2 = 18,
//C         VT_UI4 = 19,
//C         VT_I8 = 20,
//C         VT_UI8 = 21,
//C         VT_INT = 22,
//C         VT_UINT = 23,
//C         VT_VOID = 24,
//C         VT_HRESULT = 25,
//C         VT_PTR = 26,
//C         VT_SAFEARRAY = 27,
//C         VT_CARRAY = 28,
//C         VT_USERDEFINED = 29,
//C         VT_LPSTR = 30,
//C         VT_LPWSTR = 31,
//C         VT_RECORD = 36,
//C         VT_INT_PTR = 37,
//C         VT_UINT_PTR = 38,
//C         VT_FILETIME = 64,
//C         VT_BLOB = 65,
//C         VT_STREAM = 66,
//C         VT_STORAGE = 67,
//C         VT_STREAMED_OBJECT = 68,
//C         VT_STORED_OBJECT = 69,
//C         VT_BLOB_OBJECT = 70,
//C         VT_CF = 71,
//C         VT_CLSID = 72,
//C         VT_VERSIONED_STREAM = 73,
//C         VT_BSTR_BLOB = 0xfff,
//C         VT_VECTOR = 0x1000,
//C         VT_ARRAY = 0x2000,
//C         VT_BYREF = 0x4000,
//C         VT_RESERVED = 0x8000,
//C         VT_ILLEGAL = 0xffff,
//C         VT_ILLEGALMASKED = 0xfff,
//C         VT_TYPEMASK = 0xfff
//C     };
enum VARENUM
{
    VT_EMPTY,
    VT_NULL,
    VT_I2,
    VT_I4,
    VT_R4,
    VT_R8,
    VT_CY,
    VT_DATE,
    VT_BSTR,
    VT_DISPATCH,
    VT_ERROR,
    VT_BOOL,
    VT_VARIANT,
    VT_UNKNOWN,
    VT_DECIMAL,
    VT_I1 = 16,
    VT_UI1,
    VT_UI2,
    VT_UI4,
    VT_I8,
    VT_UI8,
    VT_INT,
    VT_UINT,
    VT_VOID,
    VT_HRESULT,
    VT_PTR,
    VT_SAFEARRAY,
    VT_CARRAY,
    VT_USERDEFINED,
    VT_LPSTR,
    VT_LPWSTR,
    VT_RECORD = 36,
    VT_INT_PTR,
    VT_UINT_PTR,
    VT_FILETIME = 64,
    VT_BLOB,
    VT_STREAM,
    VT_STORAGE,
    VT_STREAMED_OBJECT,
    VT_STORED_OBJECT,
    VT_BLOB_OBJECT,
    VT_CF,
    VT_CLSID,
    VT_VERSIONED_STREAM,
    VT_BSTR_BLOB = 4095,
    VT_VECTOR,
    VT_ARRAY = 8192,
    VT_BYREF = 16384,
    VT_RESERVED = 32768,
    VT_ILLEGAL = 65535,
    VT_ILLEGALMASKED = 4095,
    VT_TYPEMASK = 4095,
}
//C     typedef ULONG PROPID;
alias ULONG PROPID;
//C     typedef struct _tagpropertykey {
//C         GUID fmtid;
//C         DWORD pid;
//C     } PROPERTYKEY;
struct _tagpropertykey
{
    GUID fmtid;
    DWORD pid;
}
alias _tagpropertykey PROPERTYKEY;
//C     typedef struct tagCSPLATFORM {
//C         DWORD dwPlatformId;
//C         DWORD dwVersionHi;
//C         DWORD dwVersionLo;
//C         DWORD dwProcessorArch;
//C     } CSPLATFORM;
struct tagCSPLATFORM
{
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
}
alias tagCSPLATFORM CSPLATFORM;
//C     typedef struct tagQUERYCONTEXT {
//C         DWORD dwContext;
//C         CSPLATFORM Platform;
//C         LCID Locale;
//C         DWORD dwVersionHi;
//C         DWORD dwVersionLo;
//C     } QUERYCONTEXT;
struct tagQUERYCONTEXT
{
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
}
alias tagQUERYCONTEXT QUERYCONTEXT;
//C     typedef enum tagTYSPEC {
//C         TYSPEC_CLSID = 0,
//C         TYSPEC_FILEEXT = 1,
//C         TYSPEC_MIMETYPE = 2,
//C         TYSPEC_FILENAME = 3,
//C         TYSPEC_PROGID = 4,
//C         TYSPEC_PACKAGENAME = 5,
//C         TYSPEC_OBJECTID = 6
//C     } TYSPEC;
enum tagTYSPEC
{
    TYSPEC_CLSID,
    TYSPEC_FILEEXT,
    TYSPEC_MIMETYPE,
    TYSPEC_FILENAME,
    TYSPEC_PROGID,
    TYSPEC_PACKAGENAME,
    TYSPEC_OBJECTID,
}
alias tagTYSPEC TYSPEC;
//C     typedef struct __WIDL_wtypes_generated_name_00000000 {
//C         DWORD tyspec;
//C         union {
//C             CLSID clsid;
//C             LPOLESTR pFileExt;
//C             LPOLESTR pMimeType;
//C             LPOLESTR pProgId;
//C             LPOLESTR pFileName;
//C             struct {
//C                 LPOLESTR pPackageName;
//C                 GUID PolicyId;
//C             } ByName;
struct _N181
{
    LPOLESTR pPackageName;
    GUID PolicyId;
}
//C             struct {
//C                 GUID ObjectId;
//C                 GUID PolicyId;
//C             } ByObjectId;
struct _N182
{
    GUID ObjectId;
    GUID PolicyId;
}
//C         } tagged_union;
union _N180
{
    CLSID clsid;
    LPOLESTR pFileExt;
    LPOLESTR pMimeType;
    LPOLESTR pProgId;
    LPOLESTR pFileName;
    _N181 ByName;
    _N182 ByObjectId;
}
//C     } uCLSSPEC;
struct __WIDL_wtypes_generated_name_00000000
{
    DWORD tyspec;
    _N180 tagged_union;
}
alias __WIDL_wtypes_generated_name_00000000 uCLSSPEC;
//C     typedef struct IUnknown IUnknown;
//C     typedef struct AsyncIUnknown AsyncIUnknown;
//C     typedef struct IClassFactory IClassFactory;
//C     typedef IUnknown *LPUNKNOWN;
alias IUnknown *LPUNKNOWN;
//C     extern const GUID IID_IUnknown;
extern const GUID IID_IUnknown;
//C     typedef struct IUnknownVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IUnknown* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IUnknown* This);
//C         ULONG ( *Release)(
//C             IUnknown* This);
//C     } IUnknownVtbl;
struct IUnknownVtbl
{
    HRESULT  function(IUnknown *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IUnknown *This)AddRef;
    ULONG  function(IUnknown *This)Release;
}
//C     struct IUnknown {
//C         IUnknownVtbl* lpVtbl;
//C     };
struct IUnknown
{
    IUnknownVtbl *lpVtbl;
}
//C     HRESULT IUnknown_QueryInterface_Proxy(
//C         IUnknown* This,
//C         const IID *const riid,
//C         void **ppvObject);
HRESULT  IUnknown_QueryInterface_Proxy(IUnknown *This, IID *riid, void **ppvObject);
//C     void IUnknown_QueryInterface_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     ULONG IUnknown_AddRef_Proxy(
//C         IUnknown* This);
ULONG  IUnknown_AddRef_Proxy(IUnknown *This);
//C     void IUnknown_AddRef_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     ULONG IUnknown_Release_Proxy(
//C         IUnknown* This);
ULONG  IUnknown_Release_Proxy(IUnknown *This);
//C     void IUnknown_Release_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     extern const GUID IID_AsyncIUnknown;
extern const GUID IID_AsyncIUnknown;
//C     typedef struct AsyncIUnknownVtbl {
//C         HRESULT ( *QueryInterface)(
//C             AsyncIUnknown* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             AsyncIUnknown* This);
//C         ULONG ( *Release)(
//C             AsyncIUnknown* This);
//C         HRESULT ( *Begin_QueryInterface)(
//C             AsyncIUnknown* This,
//C             const IID *const riid);
//C         HRESULT ( *Finish_QueryInterface)(
//C             AsyncIUnknown* This,
//C             void **ppvObject);
//C         HRESULT ( *Begin_AddRef)(
//C             AsyncIUnknown* This);
//C         ULONG ( *Finish_AddRef)(
//C             AsyncIUnknown* This);
//C         HRESULT ( *Begin_Release)(
//C             AsyncIUnknown* This);
//C         ULONG ( *Finish_Release)(
//C             AsyncIUnknown* This);
//C     } AsyncIUnknownVtbl;
struct AsyncIUnknownVtbl
{
    HRESULT  function(AsyncIUnknown *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIUnknown *This)AddRef;
    ULONG  function(AsyncIUnknown *This)Release;
    HRESULT  function(AsyncIUnknown *This, IID *riid)Begin_QueryInterface;
    HRESULT  function(AsyncIUnknown *This, void **ppvObject)Finish_QueryInterface;
    HRESULT  function(AsyncIUnknown *This)Begin_AddRef;
    ULONG  function(AsyncIUnknown *This)Finish_AddRef;
    HRESULT  function(AsyncIUnknown *This)Begin_Release;
    ULONG  function(AsyncIUnknown *This)Finish_Release;
}
//C     struct AsyncIUnknown {
//C         AsyncIUnknownVtbl* lpVtbl;
//C     };
struct AsyncIUnknown
{
    AsyncIUnknownVtbl *lpVtbl;
}
//C     HRESULT AsyncIUnknown_Begin_QueryInterface_Proxy(
//C         AsyncIUnknown* This,
//C         const IID *const riid);
HRESULT  AsyncIUnknown_Begin_QueryInterface_Proxy(AsyncIUnknown *This, IID *riid);
//C     void AsyncIUnknown_Begin_QueryInterface_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  AsyncIUnknown_Begin_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT AsyncIUnknown_Finish_QueryInterface_Proxy(
//C         AsyncIUnknown* This,
//C         void **ppvObject);
HRESULT  AsyncIUnknown_Finish_QueryInterface_Proxy(AsyncIUnknown *This, void **ppvObject);
//C     void AsyncIUnknown_Finish_QueryInterface_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  AsyncIUnknown_Finish_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT AsyncIUnknown_Begin_AddRef_Proxy(
//C         AsyncIUnknown* This);
HRESULT  AsyncIUnknown_Begin_AddRef_Proxy(AsyncIUnknown *This);
//C     void AsyncIUnknown_Begin_AddRef_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  AsyncIUnknown_Begin_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     ULONG AsyncIUnknown_Finish_AddRef_Proxy(
//C         AsyncIUnknown* This);
ULONG  AsyncIUnknown_Finish_AddRef_Proxy(AsyncIUnknown *This);
//C     void AsyncIUnknown_Finish_AddRef_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  AsyncIUnknown_Finish_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT AsyncIUnknown_Begin_Release_Proxy(
//C         AsyncIUnknown* This);
HRESULT  AsyncIUnknown_Begin_Release_Proxy(AsyncIUnknown *This);
//C     void AsyncIUnknown_Begin_Release_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  AsyncIUnknown_Begin_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     ULONG AsyncIUnknown_Finish_Release_Proxy(
//C         AsyncIUnknown* This);
ULONG  AsyncIUnknown_Finish_Release_Proxy(AsyncIUnknown *This);
//C     void AsyncIUnknown_Finish_Release_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  AsyncIUnknown_Finish_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     typedef IClassFactory *LPCLASSFACTORY;
alias IClassFactory *LPCLASSFACTORY;
//C     extern const GUID IID_IClassFactory;
extern const GUID IID_IClassFactory;
//C     typedef struct IClassFactoryVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IClassFactory* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IClassFactory* This);
//C         ULONG ( *Release)(
//C             IClassFactory* This);
//C         HRESULT ( *CreateInstance)(
//C             IClassFactory* This,
//C             IUnknown *pUnkOuter,
//C             const IID *const riid,
//C             void **ppvObject);
//C         HRESULT ( *LockServer)(
//C             IClassFactory* This,
//C             WINBOOL fLock);
//C     } IClassFactoryVtbl;
struct IClassFactoryVtbl
{
    HRESULT  function(IClassFactory *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IClassFactory *This)AddRef;
    ULONG  function(IClassFactory *This)Release;
    HRESULT  function(IClassFactory *This, IUnknown *pUnkOuter, IID *riid, void **ppvObject)CreateInstance;
    HRESULT  function(IClassFactory *This, WINBOOL fLock)LockServer;
}
//C     struct IClassFactory {
//C         IClassFactoryVtbl* lpVtbl;
//C     };
struct IClassFactory
{
    IClassFactoryVtbl *lpVtbl;
}
//C     HRESULT IClassFactory_RemoteCreateInstance_Proxy(
//C         IClassFactory* This,
//C         const IID *const riid,
//C         IUnknown **ppvObject);
HRESULT  IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, IID *riid, IUnknown **ppvObject);
//C     void IClassFactory_RemoteCreateInstance_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IClassFactory_RemoteLockServer_Proxy(
//C         IClassFactory* This,
//C         WINBOOL fLock);
HRESULT  IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, WINBOOL fLock);
//C     void IClassFactory_RemoteLockServer_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IClassFactory_CreateInstance_Proxy(
//C         IClassFactory* This,
//C         IUnknown *pUnkOuter,
//C         const IID *const riid,
//C         void **ppvObject);
HRESULT  IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, IID *riid, void **ppvObject);
//C     HRESULT IClassFactory_CreateInstance_Stub(
//C         IClassFactory* This,
//C         const IID *const riid,
//C         IUnknown **ppvObject);
HRESULT  IClassFactory_CreateInstance_Stub(IClassFactory *This, IID *riid, IUnknown **ppvObject);
//C     HRESULT IClassFactory_LockServer_Proxy(
//C         IClassFactory* This,
//C         WINBOOL fLock);
HRESULT  IClassFactory_LockServer_Proxy(IClassFactory *This, WINBOOL fLock);
//C     HRESULT IClassFactory_LockServer_Stub(
//C         IClassFactory* This,
//C         WINBOOL fLock);
HRESULT  IClassFactory_LockServer_Stub(IClassFactory *This, WINBOOL fLock);
//C     typedef struct IEnumUnknown IEnumUnknown;
//C     typedef struct IBindCtx IBindCtx;
//C     typedef struct IEnumMoniker IEnumMoniker;
//C     typedef struct IRunningObjectTable IRunningObjectTable;
//C     typedef struct IPersist IPersist;
//C     typedef struct IPersistStream IPersistStream;
//C     typedef struct IMoniker IMoniker;
//C     typedef struct IEnumString IEnumString;
//C     typedef struct ISequentialStream ISequentialStream;
//C     typedef struct IStream IStream;
//C     typedef struct IEnumSTATSTG IEnumSTATSTG;
//C     typedef struct IStorage IStorage;
//C     typedef struct IEnumFORMATETC IEnumFORMATETC;
//C     typedef struct IEnumSTATDATA IEnumSTATDATA;
//C     typedef struct IAdviseSink IAdviseSink;
//C     typedef struct IDataObject IDataObject;
//C     typedef struct IMarshal IMarshal;
//C     typedef struct IMarshal2 IMarshal2;
//C     typedef struct IMalloc IMalloc;
//C     typedef struct IMallocSpy IMallocSpy;
//C     typedef struct IStdMarshalInfo IStdMarshalInfo;
//C     typedef struct IExternalConnection IExternalConnection;
//C     typedef struct IMultiQI IMultiQI;
//C     typedef struct AsyncIMultiQI AsyncIMultiQI;
//C     typedef struct IInternalUnknown IInternalUnknown;
//C     typedef struct IRunnableObject IRunnableObject;
//C     typedef struct IROTData IROTData;
//C     typedef struct IPersistFile IPersistFile;
//C     typedef struct IPersistStorage IPersistStorage;
//C     typedef struct ILockBytes ILockBytes;
//C     typedef struct IRootStorage IRootStorage;
//C     typedef struct AsyncIAdviseSink AsyncIAdviseSink;
//C     typedef struct IAdviseSink2 IAdviseSink2;
//C     typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;
//C     typedef struct IDataAdviseHolder IDataAdviseHolder;
//C     typedef struct IMessageFilter IMessageFilter;
//C     typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;
//C     typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;
//C     typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;
//C     typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;
//C     typedef struct IRpcProxyBuffer IRpcProxyBuffer;
//C     typedef struct IPSFactoryBuffer IPSFactoryBuffer;
//C     typedef struct IChannelHook IChannelHook;
//C     typedef struct IClientSecurity IClientSecurity;
//C     typedef struct IServerSecurity IServerSecurity;
//C     typedef struct IClassActivator IClassActivator;
//C     typedef struct IRpcOptions IRpcOptions;
//C     typedef struct IFillLockBytes IFillLockBytes;
//C     typedef struct IProgressNotify IProgressNotify;
//C     typedef struct ILayoutStorage ILayoutStorage;
//C     typedef struct IBlockingLock IBlockingLock;
//C     typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;
//C     typedef struct IOplockStorage IOplockStorage;
//C     typedef struct ISurrogate ISurrogate;
//C     typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;
//C     typedef struct IDirectWriterLock IDirectWriterLock;
//C     typedef struct ISynchronize ISynchronize;
//C     typedef struct ISynchronizeHandle ISynchronizeHandle;
//C     typedef struct ISynchronizeEvent ISynchronizeEvent;
//C     typedef struct ISynchronizeContainer ISynchronizeContainer;
//C     typedef struct ISynchronizeMutex ISynchronizeMutex;
//C     typedef struct ICancelMethodCalls ICancelMethodCalls;
//C     typedef struct IAsyncManager IAsyncManager;
//C     typedef struct ICallFactory ICallFactory;
//C     typedef struct IRpcHelper IRpcHelper;
//C     typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;
//C     typedef struct IWaitMultiple IWaitMultiple;
//C     typedef struct IUrlMon IUrlMon;
//C     typedef struct IForegroundTransfer IForegroundTransfer;
//C     typedef struct IAddrTrackingControl IAddrTrackingControl;
//C     typedef struct IAddrExclusionControl IAddrExclusionControl;
//C     typedef struct IPipeByte IPipeByte;
//C     typedef struct AsyncIPipeByte AsyncIPipeByte;
//C     typedef struct IPipeLong IPipeLong;
//C     typedef struct AsyncIPipeLong AsyncIPipeLong;
//C     typedef struct IPipeDouble IPipeDouble;
//C     typedef struct AsyncIPipeDouble AsyncIPipeDouble;
//C     typedef struct IThumbnailExtractor IThumbnailExtractor;
//C     typedef struct IDummyHICONIncluder IDummyHICONIncluder;
//C     typedef struct IEnumContextProps IEnumContextProps;
//C     typedef struct IContext IContext;
//C     typedef struct IObjContext IObjContext;
//C     typedef struct IProcessLock IProcessLock;
//C     typedef struct ISurrogateService ISurrogateService;
//C     typedef struct IComThreadingInfo IComThreadingInfo;
//C     typedef struct IProcessInitControl IProcessInitControl;
//C     typedef struct IInitializeSpy IInitializeSpy;
//C     typedef struct _COSERVERINFO {
//C         DWORD dwReserved1;
//C         LPWSTR pwszName;
//C         COAUTHINFO *pAuthInfo;
//C         DWORD dwReserved2;
//C     } COSERVERINFO;
struct _COSERVERINFO
{
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
}
alias _COSERVERINFO COSERVERINFO;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_s_ifspec;
//C       typedef IMarshal *LPMARSHAL;
alias IMarshal *LPMARSHAL;
//C       extern const IID IID_IMarshal;
extern const IID IID_IMarshal;
//C       typedef struct IMarshalVtbl {
//C           HRESULT ( *QueryInterface)(IMarshal *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMarshal *This);
//C           ULONG ( *Release)(IMarshal *This);
//C           HRESULT ( *GetUnmarshalClass)(IMarshal *This,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags,CLSID *pCid);
//C           HRESULT ( *GetMarshalSizeMax)(IMarshal *This,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags,DWORD *pSize);
//C           HRESULT ( *MarshalInterface)(IMarshal *This,IStream *pStm,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags);
//C           HRESULT ( *UnmarshalInterface)(IMarshal *This,IStream *pStm,const IID *const riid,void **ppv);
//C           HRESULT ( *ReleaseMarshalData)(IMarshal *This,IStream *pStm);
//C           HRESULT ( *DisconnectObject)(IMarshal *This,DWORD dwReserved);
//C       } IMarshalVtbl;
struct IMarshalVtbl
{
    HRESULT  function(IMarshal *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMarshal *This)AddRef;
    ULONG  function(IMarshal *This)Release;
    HRESULT  function(IMarshal *This, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid)GetUnmarshalClass;
    HRESULT  function(IMarshal *This, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize)GetMarshalSizeMax;
    HRESULT  function(IMarshal *This, IStream *pStm, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags)MarshalInterface;
    HRESULT  function(IMarshal *This, IStream *pStm, IID *riid, void **ppv)UnmarshalInterface;
    HRESULT  function(IMarshal *This, IStream *pStm)ReleaseMarshalData;
    HRESULT  function(IMarshal *This, DWORD dwReserved)DisconnectObject;
}
//C       struct IMarshal {
//C         struct IMarshalVtbl *lpVtbl;
//C       };
struct IMarshal
{
    IMarshalVtbl *lpVtbl;
}
//C       HRESULT IMarshal_GetUnmarshalClass_Proxy(IMarshal *This,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags,CLSID *pCid);
HRESULT  IMarshal_GetUnmarshalClass_Proxy(IMarshal *This, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);
//C       void IMarshal_GetUnmarshalClass_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMarshal_GetUnmarshalClass_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IMarshal_GetMarshalSizeMax_Proxy(IMarshal *This,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags,DWORD *pSize);
HRESULT  IMarshal_GetMarshalSizeMax_Proxy(IMarshal *This, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);
//C       void IMarshal_GetMarshalSizeMax_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMarshal_GetMarshalSizeMax_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IMarshal_MarshalInterface_Proxy(IMarshal *This,IStream *pStm,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags);
HRESULT  IMarshal_MarshalInterface_Proxy(IMarshal *This, IStream *pStm, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);
//C       void IMarshal_MarshalInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMarshal_MarshalInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IMarshal_UnmarshalInterface_Proxy(IMarshal *This,IStream *pStm,const IID *const riid,void **ppv);
HRESULT  IMarshal_UnmarshalInterface_Proxy(IMarshal *This, IStream *pStm, IID *riid, void **ppv);
//C       void IMarshal_UnmarshalInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMarshal_UnmarshalInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IMarshal_ReleaseMarshalData_Proxy(IMarshal *This,IStream *pStm);
HRESULT  IMarshal_ReleaseMarshalData_Proxy(IMarshal *This, IStream *pStm);
//C       void IMarshal_ReleaseMarshalData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMarshal_ReleaseMarshalData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IMarshal_DisconnectObject_Proxy(IMarshal *This,DWORD dwReserved);
HRESULT  IMarshal_DisconnectObject_Proxy(IMarshal *This, DWORD dwReserved);
//C       void IMarshal_DisconnectObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMarshal_DisconnectObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IMarshal2 *LPMARSHAL2;
alias IMarshal2 *LPMARSHAL2;
//C       extern const IID IID_IMarshal2;
extern const IID IID_IMarshal2;
//C       typedef struct IMarshal2Vtbl {
//C           HRESULT ( *QueryInterface)(IMarshal2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMarshal2 *This);
//C           ULONG ( *Release)(IMarshal2 *This);
//C           HRESULT ( *GetUnmarshalClass)(IMarshal2 *This,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags,CLSID *pCid);
//C           HRESULT ( *GetMarshalSizeMax)(IMarshal2 *This,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags,DWORD *pSize);
//C           HRESULT ( *MarshalInterface)(IMarshal2 *This,IStream *pStm,const IID *const riid,void *pv,DWORD dwDestContext,void *pvDestContext,DWORD mshlflags);
//C           HRESULT ( *UnmarshalInterface)(IMarshal2 *This,IStream *pStm,const IID *const riid,void **ppv);
//C           HRESULT ( *ReleaseMarshalData)(IMarshal2 *This,IStream *pStm);
//C           HRESULT ( *DisconnectObject)(IMarshal2 *This,DWORD dwReserved);
//C       } IMarshal2Vtbl;
struct IMarshal2Vtbl
{
    HRESULT  function(IMarshal2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMarshal2 *This)AddRef;
    ULONG  function(IMarshal2 *This)Release;
    HRESULT  function(IMarshal2 *This, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid)GetUnmarshalClass;
    HRESULT  function(IMarshal2 *This, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize)GetMarshalSizeMax;
    HRESULT  function(IMarshal2 *This, IStream *pStm, IID *riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags)MarshalInterface;
    HRESULT  function(IMarshal2 *This, IStream *pStm, IID *riid, void **ppv)UnmarshalInterface;
    HRESULT  function(IMarshal2 *This, IStream *pStm)ReleaseMarshalData;
    HRESULT  function(IMarshal2 *This, DWORD dwReserved)DisconnectObject;
}
//C       struct IMarshal2 {
//C         struct IMarshal2Vtbl *lpVtbl;
//C       };
struct IMarshal2
{
    IMarshal2Vtbl *lpVtbl;
}
//C       typedef IMalloc *LPMALLOC;
alias IMalloc *LPMALLOC;
//C       extern const IID IID_IMalloc;
extern const IID IID_IMalloc;
//C       typedef struct IMallocVtbl {
//C           HRESULT ( *QueryInterface)(IMalloc *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMalloc *This);
//C           ULONG ( *Release)(IMalloc *This);
//C           void *( *Alloc)(IMalloc *This,SIZE_T cb);
//C           void *( *Realloc)(IMalloc *This,void *pv,SIZE_T cb);
//C           void ( *Free)(IMalloc *This,void *pv);
//C           SIZE_T ( *GetSize)(IMalloc *This,void *pv);
//C           int ( *DidAlloc)(IMalloc *This,void *pv);
//C           void ( *HeapMinimize)(IMalloc *This);
//C       } IMallocVtbl;
struct IMallocVtbl
{
    HRESULT  function(IMalloc *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMalloc *This)AddRef;
    ULONG  function(IMalloc *This)Release;
    void * function(IMalloc *This, SIZE_T cb)Alloc;
    void * function(IMalloc *This, void *pv, SIZE_T cb)Realloc;
    void  function(IMalloc *This, void *pv)Free;
    SIZE_T  function(IMalloc *This, void *pv)GetSize;
    int  function(IMalloc *This, void *pv)DidAlloc;
    void  function(IMalloc *This)HeapMinimize;
}
//C       struct IMalloc {
//C         struct IMallocVtbl *lpVtbl;
//C       };
struct IMalloc
{
    IMallocVtbl *lpVtbl;
}
//C       void * IMalloc_Alloc_Proxy(IMalloc *This,SIZE_T cb);
void * IMalloc_Alloc_Proxy(IMalloc *This, SIZE_T cb);
//C       void IMalloc_Alloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMalloc_Alloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void * IMalloc_Realloc_Proxy(IMalloc *This,void *pv,SIZE_T cb);
void * IMalloc_Realloc_Proxy(IMalloc *This, void *pv, SIZE_T cb);
//C       void IMalloc_Realloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMalloc_Realloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IMalloc_Free_Proxy(IMalloc *This,void *pv);
void  IMalloc_Free_Proxy(IMalloc *This, void *pv);
//C       void IMalloc_Free_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMalloc_Free_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       SIZE_T IMalloc_GetSize_Proxy(IMalloc *This,void *pv);
SIZE_T  IMalloc_GetSize_Proxy(IMalloc *This, void *pv);
//C       void IMalloc_GetSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMalloc_GetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       int IMalloc_DidAlloc_Proxy(IMalloc *This,void *pv);
int  IMalloc_DidAlloc_Proxy(IMalloc *This, void *pv);
//C       void IMalloc_DidAlloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMalloc_DidAlloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IMalloc_HeapMinimize_Proxy(IMalloc *This);
void  IMalloc_HeapMinimize_Proxy(IMalloc *This);
//C       void IMalloc_HeapMinimize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMalloc_HeapMinimize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IMallocSpy *LPMALLOCSPY;
alias IMallocSpy *LPMALLOCSPY;
//C       extern const IID IID_IMallocSpy;
extern const IID IID_IMallocSpy;
//C       typedef struct IMallocSpyVtbl {
//C           HRESULT ( *QueryInterface)(IMallocSpy *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMallocSpy *This);
//C           ULONG ( *Release)(IMallocSpy *This);
//C           SIZE_T ( *PreAlloc)(IMallocSpy *This,SIZE_T cbRequest);
//C           void *( *PostAlloc)(IMallocSpy *This,void *pActual);
//C           void *( *PreFree)(IMallocSpy *This,void *pRequest,WINBOOL fSpyed);
//C           void ( *PostFree)(IMallocSpy *This,WINBOOL fSpyed);
//C           SIZE_T ( *PreRealloc)(IMallocSpy *This,void *pRequest,SIZE_T cbRequest,void **ppNewRequest,WINBOOL fSpyed);
//C           void *( *PostRealloc)(IMallocSpy *This,void *pActual,WINBOOL fSpyed);
//C           void *( *PreGetSize)(IMallocSpy *This,void *pRequest,WINBOOL fSpyed);
//C           SIZE_T ( *PostGetSize)(IMallocSpy *This,SIZE_T cbActual,WINBOOL fSpyed);
//C           void *( *PreDidAlloc)(IMallocSpy *This,void *pRequest,WINBOOL fSpyed);
//C           int ( *PostDidAlloc)(IMallocSpy *This,void *pRequest,WINBOOL fSpyed,int fActual);
//C           void ( *PreHeapMinimize)(IMallocSpy *This);
//C           void ( *PostHeapMinimize)(IMallocSpy *This);
//C       } IMallocSpyVtbl;
struct IMallocSpyVtbl
{
    HRESULT  function(IMallocSpy *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMallocSpy *This)AddRef;
    ULONG  function(IMallocSpy *This)Release;
    SIZE_T  function(IMallocSpy *This, SIZE_T cbRequest)PreAlloc;
    void * function(IMallocSpy *This, void *pActual)PostAlloc;
    void * function(IMallocSpy *This, void *pRequest, WINBOOL fSpyed)PreFree;
    void  function(IMallocSpy *This, WINBOOL fSpyed)PostFree;
    SIZE_T  function(IMallocSpy *This, void *pRequest, SIZE_T cbRequest, void **ppNewRequest, WINBOOL fSpyed)PreRealloc;
    void * function(IMallocSpy *This, void *pActual, WINBOOL fSpyed)PostRealloc;
    void * function(IMallocSpy *This, void *pRequest, WINBOOL fSpyed)PreGetSize;
    SIZE_T  function(IMallocSpy *This, SIZE_T cbActual, WINBOOL fSpyed)PostGetSize;
    void * function(IMallocSpy *This, void *pRequest, WINBOOL fSpyed)PreDidAlloc;
    int  function(IMallocSpy *This, void *pRequest, WINBOOL fSpyed, int fActual)PostDidAlloc;
    void  function(IMallocSpy *This)PreHeapMinimize;
    void  function(IMallocSpy *This)PostHeapMinimize;
}
//C       struct IMallocSpy {
//C         struct IMallocSpyVtbl *lpVtbl;
//C       };
struct IMallocSpy
{
    IMallocSpyVtbl *lpVtbl;
}
//C       SIZE_T IMallocSpy_PreAlloc_Proxy(IMallocSpy *This,SIZE_T cbRequest);
SIZE_T  IMallocSpy_PreAlloc_Proxy(IMallocSpy *This, SIZE_T cbRequest);
//C       void IMallocSpy_PreAlloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PreAlloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void * IMallocSpy_PostAlloc_Proxy(IMallocSpy *This,void *pActual);
void * IMallocSpy_PostAlloc_Proxy(IMallocSpy *This, void *pActual);
//C       void IMallocSpy_PostAlloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PostAlloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void * IMallocSpy_PreFree_Proxy(IMallocSpy *This,void *pRequest,WINBOOL fSpyed);
void * IMallocSpy_PreFree_Proxy(IMallocSpy *This, void *pRequest, WINBOOL fSpyed);
//C       void IMallocSpy_PreFree_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PreFree_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IMallocSpy_PostFree_Proxy(IMallocSpy *This,WINBOOL fSpyed);
void  IMallocSpy_PostFree_Proxy(IMallocSpy *This, WINBOOL fSpyed);
//C       void IMallocSpy_PostFree_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PostFree_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       SIZE_T IMallocSpy_PreRealloc_Proxy(IMallocSpy *This,void *pRequest,SIZE_T cbRequest,void **ppNewRequest,WINBOOL fSpyed);
SIZE_T  IMallocSpy_PreRealloc_Proxy(IMallocSpy *This, void *pRequest, SIZE_T cbRequest, void **ppNewRequest, WINBOOL fSpyed);
//C       void IMallocSpy_PreRealloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PreRealloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void * IMallocSpy_PostRealloc_Proxy(IMallocSpy *This,void *pActual,WINBOOL fSpyed);
void * IMallocSpy_PostRealloc_Proxy(IMallocSpy *This, void *pActual, WINBOOL fSpyed);
//C       void IMallocSpy_PostRealloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PostRealloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void * IMallocSpy_PreGetSize_Proxy(IMallocSpy *This,void *pRequest,WINBOOL fSpyed);
void * IMallocSpy_PreGetSize_Proxy(IMallocSpy *This, void *pRequest, WINBOOL fSpyed);
//C       void IMallocSpy_PreGetSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PreGetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       SIZE_T IMallocSpy_PostGetSize_Proxy(IMallocSpy *This,SIZE_T cbActual,WINBOOL fSpyed);
SIZE_T  IMallocSpy_PostGetSize_Proxy(IMallocSpy *This, SIZE_T cbActual, WINBOOL fSpyed);
//C       void IMallocSpy_PostGetSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PostGetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void * IMallocSpy_PreDidAlloc_Proxy(IMallocSpy *This,void *pRequest,WINBOOL fSpyed);
void * IMallocSpy_PreDidAlloc_Proxy(IMallocSpy *This, void *pRequest, WINBOOL fSpyed);
//C       void IMallocSpy_PreDidAlloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PreDidAlloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       int IMallocSpy_PostDidAlloc_Proxy(IMallocSpy *This,void *pRequest,WINBOOL fSpyed,int fActual);
int  IMallocSpy_PostDidAlloc_Proxy(IMallocSpy *This, void *pRequest, WINBOOL fSpyed, int fActual);
//C       void IMallocSpy_PostDidAlloc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PostDidAlloc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IMallocSpy_PreHeapMinimize_Proxy(IMallocSpy *This);
void  IMallocSpy_PreHeapMinimize_Proxy(IMallocSpy *This);
//C       void IMallocSpy_PreHeapMinimize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PreHeapMinimize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IMallocSpy_PostHeapMinimize_Proxy(IMallocSpy *This);
void  IMallocSpy_PostHeapMinimize_Proxy(IMallocSpy *This);
//C       void IMallocSpy_PostHeapMinimize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMallocSpy_PostHeapMinimize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IStdMarshalInfo *LPSTDMARSHALINFO;
alias IStdMarshalInfo *LPSTDMARSHALINFO;
//C       extern const IID IID_IStdMarshalInfo;
extern const IID IID_IStdMarshalInfo;
//C       typedef struct IStdMarshalInfoVtbl {
//C           HRESULT ( *QueryInterface)(IStdMarshalInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IStdMarshalInfo *This);
//C           ULONG ( *Release)(IStdMarshalInfo *This);
//C           HRESULT ( *GetClassForHandler)(IStdMarshalInfo *This,DWORD dwDestContext,void *pvDestContext,CLSID *pClsid);
//C       } IStdMarshalInfoVtbl;
struct IStdMarshalInfoVtbl
{
    HRESULT  function(IStdMarshalInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IStdMarshalInfo *This)AddRef;
    ULONG  function(IStdMarshalInfo *This)Release;
    HRESULT  function(IStdMarshalInfo *This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid)GetClassForHandler;
}
//C       struct IStdMarshalInfo {
//C         struct IStdMarshalInfoVtbl *lpVtbl;
//C       };
struct IStdMarshalInfo
{
    IStdMarshalInfoVtbl *lpVtbl;
}
//C       HRESULT IStdMarshalInfo_GetClassForHandler_Proxy(IStdMarshalInfo *This,DWORD dwDestContext,void *pvDestContext,CLSID *pClsid);
HRESULT  IStdMarshalInfo_GetClassForHandler_Proxy(IStdMarshalInfo *This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid);
//C       void IStdMarshalInfo_GetClassForHandler_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IStdMarshalInfo_GetClassForHandler_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IExternalConnection *LPEXTERNALCONNECTION;
alias IExternalConnection *LPEXTERNALCONNECTION;
//C       typedef enum tagEXTCONN {
//C         EXTCONN_STRONG = 0x1,EXTCONN_WEAK = 0x2,EXTCONN_CALLABLE = 0x4
//C       } EXTCONN;
enum tagEXTCONN
{
    EXTCONN_STRONG = 1,
    EXTCONN_WEAK,
    EXTCONN_CALLABLE = 4,
}
alias tagEXTCONN EXTCONN;
//C       extern const IID IID_IExternalConnection;
extern const IID IID_IExternalConnection;
//C       typedef struct IExternalConnectionVtbl {
//C           HRESULT ( *QueryInterface)(IExternalConnection *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IExternalConnection *This);
//C           ULONG ( *Release)(IExternalConnection *This);
//C           DWORD ( *AddConnection)(IExternalConnection *This,DWORD extconn,DWORD reserved);
//C           DWORD ( *ReleaseConnection)(IExternalConnection *This,DWORD extconn,DWORD reserved,WINBOOL fLastReleaseCloses);
//C       } IExternalConnectionVtbl;
struct IExternalConnectionVtbl
{
    HRESULT  function(IExternalConnection *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IExternalConnection *This)AddRef;
    ULONG  function(IExternalConnection *This)Release;
    DWORD  function(IExternalConnection *This, DWORD extconn, DWORD reserved)AddConnection;
    DWORD  function(IExternalConnection *This, DWORD extconn, DWORD reserved, WINBOOL fLastReleaseCloses)ReleaseConnection;
}
//C       struct IExternalConnection {
//C         struct IExternalConnectionVtbl *lpVtbl;
//C       };
struct IExternalConnection
{
    IExternalConnectionVtbl *lpVtbl;
}
//C       DWORD IExternalConnection_AddConnection_Proxy(IExternalConnection *This,DWORD extconn,DWORD reserved);
DWORD  IExternalConnection_AddConnection_Proxy(IExternalConnection *This, DWORD extconn, DWORD reserved);
//C       void IExternalConnection_AddConnection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IExternalConnection_AddConnection_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       DWORD IExternalConnection_ReleaseConnection_Proxy(IExternalConnection *This,DWORD extconn,DWORD reserved,WINBOOL fLastReleaseCloses);
DWORD  IExternalConnection_ReleaseConnection_Proxy(IExternalConnection *This, DWORD extconn, DWORD reserved, WINBOOL fLastReleaseCloses);
//C       void IExternalConnection_ReleaseConnection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IExternalConnection_ReleaseConnection_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IMultiQI *LPMULTIQI;
alias IMultiQI *LPMULTIQI;
//C       typedef struct tagMULTI_QI {
//C         const IID *pIID;
//C         IUnknown *pItf;
//C         HRESULT hr;
//C       } MULTI_QI;
struct tagMULTI_QI
{
    IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
}
alias tagMULTI_QI MULTI_QI;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_s_ifspec;
//C       extern const IID IID_IMultiQI;
extern const IID IID_IMultiQI;
//C       typedef struct IMultiQIVtbl {
//C           HRESULT ( *QueryInterface)(IMultiQI *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMultiQI *This);
//C           ULONG ( *Release)(IMultiQI *This);
//C           HRESULT ( *QueryMultipleInterfaces)(IMultiQI *This,ULONG cMQIs,MULTI_QI *pMQIs);
//C       } IMultiQIVtbl;
struct IMultiQIVtbl
{
    HRESULT  function(IMultiQI *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMultiQI *This)AddRef;
    ULONG  function(IMultiQI *This)Release;
    HRESULT  function(IMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs)QueryMultipleInterfaces;
}
//C       struct IMultiQI {
//C         struct IMultiQIVtbl *lpVtbl;
//C       };
struct IMultiQI
{
    IMultiQIVtbl *lpVtbl;
}
//C       HRESULT IMultiQI_QueryMultipleInterfaces_Proxy(IMultiQI *This,ULONG cMQIs,MULTI_QI *pMQIs);
HRESULT  IMultiQI_QueryMultipleInterfaces_Proxy(IMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);
//C       void IMultiQI_QueryMultipleInterfaces_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMultiQI_QueryMultipleInterfaces_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_AsyncIMultiQI;
extern const IID IID_AsyncIMultiQI;
//C       typedef struct AsyncIMultiQIVtbl {
//C           HRESULT ( *QueryInterface)(AsyncIMultiQI *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(AsyncIMultiQI *This);
//C           ULONG ( *Release)(AsyncIMultiQI *This);
//C           HRESULT ( *Begin_QueryMultipleInterfaces)(AsyncIMultiQI *This,ULONG cMQIs,MULTI_QI *pMQIs);
//C           HRESULT ( *Finish_QueryMultipleInterfaces)(AsyncIMultiQI *This,MULTI_QI *pMQIs);
//C       } AsyncIMultiQIVtbl;
struct AsyncIMultiQIVtbl
{
    HRESULT  function(AsyncIMultiQI *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIMultiQI *This)AddRef;
    ULONG  function(AsyncIMultiQI *This)Release;
    HRESULT  function(AsyncIMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs)Begin_QueryMultipleInterfaces;
    HRESULT  function(AsyncIMultiQI *This, MULTI_QI *pMQIs)Finish_QueryMultipleInterfaces;
}
//C       struct AsyncIMultiQI {
//C         struct AsyncIMultiQIVtbl *lpVtbl;
//C       };
struct AsyncIMultiQI
{
    AsyncIMultiQIVtbl *lpVtbl;
}
//C       HRESULT AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy(AsyncIMultiQI *This,ULONG cMQIs,MULTI_QI *pMQIs);
HRESULT  AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy(AsyncIMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);
//C       void AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy(AsyncIMultiQI *This,MULTI_QI *pMQIs);
HRESULT  AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy(AsyncIMultiQI *This, MULTI_QI *pMQIs);
//C       void AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IInternalUnknown;
extern const IID IID_IInternalUnknown;
//C       typedef struct IInternalUnknownVtbl {
//C           HRESULT ( *QueryInterface)(IInternalUnknown *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternalUnknown *This);
//C           ULONG ( *Release)(IInternalUnknown *This);
//C           HRESULT ( *QueryInternalInterface)(IInternalUnknown *This,const IID *const riid,void **ppv);
//C       } IInternalUnknownVtbl;
struct IInternalUnknownVtbl
{
    HRESULT  function(IInternalUnknown *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternalUnknown *This)AddRef;
    ULONG  function(IInternalUnknown *This)Release;
    HRESULT  function(IInternalUnknown *This, IID *riid, void **ppv)QueryInternalInterface;
}
//C       struct IInternalUnknown {
//C         struct IInternalUnknownVtbl *lpVtbl;
//C       };
struct IInternalUnknown
{
    IInternalUnknownVtbl *lpVtbl;
}
//C       HRESULT IInternalUnknown_QueryInternalInterface_Proxy(IInternalUnknown *This,const IID *const riid,void **ppv);
HRESULT  IInternalUnknown_QueryInternalInterface_Proxy(IInternalUnknown *This, IID *riid, void **ppv);
//C       void IInternalUnknown_QueryInternalInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternalUnknown_QueryInternalInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IEnumUnknown *LPENUMUNKNOWN;
alias IEnumUnknown *LPENUMUNKNOWN;
//C     extern const GUID IID_IEnumUnknown;
extern const GUID IID_IEnumUnknown;
//C     typedef struct IEnumUnknownVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IEnumUnknown* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IEnumUnknown* This);
//C         ULONG ( *Release)(
//C             IEnumUnknown* This);
//C         HRESULT ( *Next)(
//C             IEnumUnknown* This,
//C             ULONG celt,
//C             IUnknown **rgelt,
//C             ULONG *pceltFetched);
//C         HRESULT ( *Skip)(
//C             IEnumUnknown* This,
//C             ULONG celt);
//C         HRESULT ( *Reset)(
//C             IEnumUnknown* This);
//C         HRESULT ( *Clone)(
//C             IEnumUnknown* This,
//C             IEnumUnknown **ppenum);
//C     } IEnumUnknownVtbl;
struct IEnumUnknownVtbl
{
    HRESULT  function(IEnumUnknown *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumUnknown *This)AddRef;
    ULONG  function(IEnumUnknown *This)Release;
    HRESULT  function(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumUnknown *This, ULONG celt)Skip;
    HRESULT  function(IEnumUnknown *This)Reset;
    HRESULT  function(IEnumUnknown *This, IEnumUnknown **ppenum)Clone;
}
//C     struct IEnumUnknown {
//C         IEnumUnknownVtbl* lpVtbl;
//C     };
struct IEnumUnknown
{
    IEnumUnknownVtbl *lpVtbl;
}
//C     HRESULT IEnumUnknown_RemoteNext_Proxy(
//C         IEnumUnknown* This,
//C         ULONG celt,
//C         IUnknown **rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
//C     void IEnumUnknown_RemoteNext_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumUnknown_Skip_Proxy(
//C         IEnumUnknown* This,
//C         ULONG celt);
HRESULT  IEnumUnknown_Skip_Proxy(IEnumUnknown *This, ULONG celt);
//C     void IEnumUnknown_Skip_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumUnknown_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumUnknown_Reset_Proxy(
//C         IEnumUnknown* This);
HRESULT  IEnumUnknown_Reset_Proxy(IEnumUnknown *This);
//C     void IEnumUnknown_Reset_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumUnknown_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumUnknown_Clone_Proxy(
//C         IEnumUnknown* This,
//C         IEnumUnknown **ppenum);
HRESULT  IEnumUnknown_Clone_Proxy(IEnumUnknown *This, IEnumUnknown **ppenum);
//C     void IEnumUnknown_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumUnknown_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumUnknown_Next_Proxy(
//C         IEnumUnknown* This,
//C         ULONG celt,
//C         IUnknown **rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
//C     HRESULT IEnumUnknown_Next_Stub(
//C         IEnumUnknown* This,
//C         ULONG celt,
//C         IUnknown **rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
//C     typedef IBindCtx *LPBC;
alias IBindCtx *LPBC;
//C     typedef IBindCtx *LPBINDCTX;
alias IBindCtx *LPBINDCTX;
//C     typedef struct tagBIND_OPTS {
//C         DWORD cbStruct;
//C         DWORD grfFlags;
//C         DWORD grfMode;
//C         DWORD dwTickCountDeadline;
//C     } BIND_OPTS;
struct tagBIND_OPTS
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
}
alias tagBIND_OPTS BIND_OPTS;
//C     typedef struct tagBIND_OPTS *LPBIND_OPTS;
alias tagBIND_OPTS *LPBIND_OPTS;
//C     typedef struct tagBIND_OPTS2 {
//C         DWORD cbStruct;
//C         DWORD grfFlags;
//C         DWORD grfMode;
//C         DWORD dwTickCountDeadline;
//C         DWORD dwTrackFlags;
//C         DWORD dwClassContext;
//C         LCID locale;
//C         COSERVERINFO *pServerInfo;
//C     } BIND_OPTS2;
struct tagBIND_OPTS2
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
}
alias tagBIND_OPTS2 BIND_OPTS2;
//C     typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
alias tagBIND_OPTS2 *LPBIND_OPTS2;
//C     typedef struct tagBIND_OPTS3 {
//C         DWORD cbStruct;
//C         DWORD grfFlags;
//C         DWORD grfMode;
//C         DWORD dwTickCountDeadline;
//C         DWORD dwTrackFlags;
//C         DWORD dwClassContext;
//C         LCID locale;
//C         COSERVERINFO *pServerInfo;
//C         HWND hwnd;
//C     } BIND_OPTS3;
struct tagBIND_OPTS3
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
}
alias tagBIND_OPTS3 BIND_OPTS3;
//C     typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;
alias tagBIND_OPTS3 *LPBIND_OPTS3;
//C     typedef enum tagBIND_FLAGS {
//C         BIND_MAYBOTHERUSER = 1,
//C         BIND_JUSTTESTEXISTENCE = 2
//C     } BIND_FLAGS;
enum tagBIND_FLAGS
{
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE,
}
alias tagBIND_FLAGS BIND_FLAGS;
//C     extern const GUID IID_IBindCtx;
extern const GUID IID_IBindCtx;
//C     typedef struct IBindCtxVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IBindCtx* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IBindCtx* This);
//C         ULONG ( *Release)(
//C             IBindCtx* This);
//C         HRESULT ( *RegisterObjectBound)(
//C             IBindCtx* This,
//C             IUnknown *punk);
//C         HRESULT ( *RevokeObjectBound)(
//C             IBindCtx* This,
//C             IUnknown *punk);
//C         HRESULT ( *ReleaseBoundObjects)(
//C             IBindCtx* This);
//C         HRESULT ( *SetBindOptions)(
//C             IBindCtx* This,
//C             BIND_OPTS *pbindopts);
//C         HRESULT ( *GetBindOptions)(
//C             IBindCtx* This,
//C             BIND_OPTS *pbindopts);
//C         HRESULT ( *GetRunningObjectTable)(
//C             IBindCtx* This,
//C             IRunningObjectTable **pprot);
//C         HRESULT ( *RegisterObjectParam)(
//C             IBindCtx* This,
//C             LPOLESTR pszKey,
//C             IUnknown *punk);
//C         HRESULT ( *GetObjectParam)(
//C             IBindCtx* This,
//C             LPOLESTR pszKey,
//C             IUnknown **ppunk);
//C         HRESULT ( *EnumObjectParam)(
//C             IBindCtx* This,
//C             IEnumString **ppenum);
//C         HRESULT ( *RevokeObjectParam)(
//C             IBindCtx* This,
//C             LPOLESTR pszKey);
//C     } IBindCtxVtbl;
struct IBindCtxVtbl
{
    HRESULT  function(IBindCtx *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IBindCtx *This)AddRef;
    ULONG  function(IBindCtx *This)Release;
    HRESULT  function(IBindCtx *This, IUnknown *punk)RegisterObjectBound;
    HRESULT  function(IBindCtx *This, IUnknown *punk)RevokeObjectBound;
    HRESULT  function(IBindCtx *This)ReleaseBoundObjects;
    HRESULT  function(IBindCtx *This, BIND_OPTS *pbindopts)SetBindOptions;
    HRESULT  function(IBindCtx *This, BIND_OPTS *pbindopts)GetBindOptions;
    HRESULT  function(IBindCtx *This, IRunningObjectTable **pprot)GetRunningObjectTable;
    HRESULT  function(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk)RegisterObjectParam;
    HRESULT  function(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk)GetObjectParam;
    HRESULT  function(IBindCtx *This, IEnumString **ppenum)EnumObjectParam;
    HRESULT  function(IBindCtx *This, LPOLESTR pszKey)RevokeObjectParam;
}
//C     struct IBindCtx {
//C         IBindCtxVtbl* lpVtbl;
//C     };
struct IBindCtx
{
    IBindCtxVtbl *lpVtbl;
}
//C     HRESULT IBindCtx_RegisterObjectBound_Proxy(
//C         IBindCtx* This,
//C         IUnknown *punk);
HRESULT  IBindCtx_RegisterObjectBound_Proxy(IBindCtx *This, IUnknown *punk);
//C     void IBindCtx_RegisterObjectBound_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_RegisterObjectBound_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_RevokeObjectBound_Proxy(
//C         IBindCtx* This,
//C         IUnknown *punk);
HRESULT  IBindCtx_RevokeObjectBound_Proxy(IBindCtx *This, IUnknown *punk);
//C     void IBindCtx_RevokeObjectBound_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_RevokeObjectBound_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_ReleaseBoundObjects_Proxy(
//C         IBindCtx* This);
HRESULT  IBindCtx_ReleaseBoundObjects_Proxy(IBindCtx *This);
//C     void IBindCtx_ReleaseBoundObjects_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_ReleaseBoundObjects_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_RemoteSetBindOptions_Proxy(
//C         IBindCtx* This,
//C         BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts);
//C     void IBindCtx_RemoteSetBindOptions_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_RemoteGetBindOptions_Proxy(
//C         IBindCtx* This,
//C         BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts);
//C     void IBindCtx_RemoteGetBindOptions_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_GetRunningObjectTable_Proxy(
//C         IBindCtx* This,
//C         IRunningObjectTable **pprot);
HRESULT  IBindCtx_GetRunningObjectTable_Proxy(IBindCtx *This, IRunningObjectTable **pprot);
//C     void IBindCtx_GetRunningObjectTable_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_GetRunningObjectTable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_RegisterObjectParam_Proxy(
//C         IBindCtx* This,
//C         LPOLESTR pszKey,
//C         IUnknown *punk);
HRESULT  IBindCtx_RegisterObjectParam_Proxy(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk);
//C     void IBindCtx_RegisterObjectParam_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_RegisterObjectParam_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_GetObjectParam_Proxy(
//C         IBindCtx* This,
//C         LPOLESTR pszKey,
//C         IUnknown **ppunk);
HRESULT  IBindCtx_GetObjectParam_Proxy(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk);
//C     void IBindCtx_GetObjectParam_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_GetObjectParam_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_EnumObjectParam_Proxy(
//C         IBindCtx* This,
//C         IEnumString **ppenum);
HRESULT  IBindCtx_EnumObjectParam_Proxy(IBindCtx *This, IEnumString **ppenum);
//C     void IBindCtx_EnumObjectParam_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_EnumObjectParam_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_RevokeObjectParam_Proxy(
//C         IBindCtx* This,
//C         LPOLESTR pszKey);
HRESULT  IBindCtx_RevokeObjectParam_Proxy(IBindCtx *This, LPOLESTR pszKey);
//C     void IBindCtx_RevokeObjectParam_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindCtx_RevokeObjectParam_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindCtx_SetBindOptions_Proxy(
//C         IBindCtx* This,
//C         BIND_OPTS *pbindopts);
HRESULT  IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts);
//C     HRESULT IBindCtx_SetBindOptions_Stub(
//C         IBindCtx* This,
//C         BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts);
//C     HRESULT IBindCtx_GetBindOptions_Proxy(
//C         IBindCtx* This,
//C         BIND_OPTS *pbindopts);
HRESULT  IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts);
//C     HRESULT IBindCtx_GetBindOptions_Stub(
//C         IBindCtx* This,
//C         BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts);
//C     typedef IEnumMoniker *LPENUMMONIKER;
alias IEnumMoniker *LPENUMMONIKER;
//C     extern const GUID IID_IEnumMoniker;
extern const GUID IID_IEnumMoniker;
//C     typedef struct IEnumMonikerVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IEnumMoniker* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IEnumMoniker* This);
//C         ULONG ( *Release)(
//C             IEnumMoniker* This);
//C         HRESULT ( *Next)(
//C             IEnumMoniker* This,
//C             ULONG celt,
//C             IMoniker **rgelt,
//C             ULONG *pceltFetched);
//C         HRESULT ( *Skip)(
//C             IEnumMoniker* This,
//C             ULONG celt);
//C         HRESULT ( *Reset)(
//C             IEnumMoniker* This);
//C         HRESULT ( *Clone)(
//C             IEnumMoniker* This,
//C             IEnumMoniker **ppenum);
//C     } IEnumMonikerVtbl;
struct IEnumMonikerVtbl
{
    HRESULT  function(IEnumMoniker *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumMoniker *This)AddRef;
    ULONG  function(IEnumMoniker *This)Release;
    HRESULT  function(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumMoniker *This, ULONG celt)Skip;
    HRESULT  function(IEnumMoniker *This)Reset;
    HRESULT  function(IEnumMoniker *This, IEnumMoniker **ppenum)Clone;
}
//C     struct IEnumMoniker {
//C         IEnumMonikerVtbl* lpVtbl;
//C     };
struct IEnumMoniker
{
    IEnumMonikerVtbl *lpVtbl;
}
//C     HRESULT IEnumMoniker_RemoteNext_Proxy(
//C         IEnumMoniker* This,
//C         ULONG celt,
//C         IMoniker **rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
//C     void IEnumMoniker_RemoteNext_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumMoniker_Skip_Proxy(
//C         IEnumMoniker* This,
//C         ULONG celt);
HRESULT  IEnumMoniker_Skip_Proxy(IEnumMoniker *This, ULONG celt);
//C     void IEnumMoniker_Skip_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumMoniker_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumMoniker_Reset_Proxy(
//C         IEnumMoniker* This);
HRESULT  IEnumMoniker_Reset_Proxy(IEnumMoniker *This);
//C     void IEnumMoniker_Reset_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumMoniker_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumMoniker_Clone_Proxy(
//C         IEnumMoniker* This,
//C         IEnumMoniker **ppenum);
HRESULT  IEnumMoniker_Clone_Proxy(IEnumMoniker *This, IEnumMoniker **ppenum);
//C     void IEnumMoniker_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumMoniker_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumMoniker_Next_Proxy(
//C         IEnumMoniker* This,
//C         ULONG celt,
//C         IMoniker **rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
//C     HRESULT IEnumMoniker_Next_Stub(
//C         IEnumMoniker* This,
//C         ULONG celt,
//C         IMoniker **rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
//C       typedef IRunnableObject *LPRUNNABLEOBJECT;
alias IRunnableObject *LPRUNNABLEOBJECT;
//C       extern const IID IID_IRunnableObject;
extern const IID IID_IRunnableObject;
//C       typedef struct IRunnableObjectVtbl {
//C           HRESULT ( *QueryInterface)(IRunnableObject *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRunnableObject *This);
//C           ULONG ( *Release)(IRunnableObject *This);
//C           HRESULT ( *GetRunningClass)(IRunnableObject *This,LPCLSID lpClsid);
//C           HRESULT ( *Run)(IRunnableObject *This,LPBINDCTX pbc);
//C           WINBOOL ( *IsRunning)(IRunnableObject *This);
//C           HRESULT ( *LockRunning)(IRunnableObject *This,WINBOOL fLock,WINBOOL fLastUnlockCloses);
//C           HRESULT ( *SetContainedObject)(IRunnableObject *This,WINBOOL fContained);
//C       } IRunnableObjectVtbl;
struct IRunnableObjectVtbl
{
    HRESULT  function(IRunnableObject *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRunnableObject *This)AddRef;
    ULONG  function(IRunnableObject *This)Release;
    HRESULT  function(IRunnableObject *This, LPCLSID lpClsid)GetRunningClass;
    HRESULT  function(IRunnableObject *This, LPBINDCTX pbc)Run;
    WINBOOL  function(IRunnableObject *This)IsRunning;
    HRESULT  function(IRunnableObject *This, WINBOOL fLock, WINBOOL fLastUnlockCloses)LockRunning;
    HRESULT  function(IRunnableObject *This, WINBOOL fContained)SetContainedObject;
}
//C       struct IRunnableObject {
//C         struct IRunnableObjectVtbl *lpVtbl;
//C       };
struct IRunnableObject
{
    IRunnableObjectVtbl *lpVtbl;
}
//C       HRESULT IRunnableObject_GetRunningClass_Proxy(IRunnableObject *This,LPCLSID lpClsid);
HRESULT  IRunnableObject_GetRunningClass_Proxy(IRunnableObject *This, LPCLSID lpClsid);
//C       void IRunnableObject_GetRunningClass_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRunnableObject_GetRunningClass_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRunnableObject_Run_Proxy(IRunnableObject *This,LPBINDCTX pbc);
HRESULT  IRunnableObject_Run_Proxy(IRunnableObject *This, LPBINDCTX pbc);
//C       void IRunnableObject_Run_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRunnableObject_Run_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This);
HRESULT  IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This);
//C       void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRunnableObject_LockRunning_Proxy(IRunnableObject *This,WINBOOL fLock,WINBOOL fLastUnlockCloses);
HRESULT  IRunnableObject_LockRunning_Proxy(IRunnableObject *This, WINBOOL fLock, WINBOOL fLastUnlockCloses);
//C       void IRunnableObject_LockRunning_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRunnableObject_LockRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRunnableObject_SetContainedObject_Proxy(IRunnableObject *This,WINBOOL fContained);
HRESULT  IRunnableObject_SetContainedObject_Proxy(IRunnableObject *This, WINBOOL fContained);
//C       void IRunnableObject_SetContainedObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRunnableObject_SetContainedObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
alias IRunningObjectTable *LPRUNNINGOBJECTTABLE;
//C     extern const GUID IID_IRunningObjectTable;
extern const GUID IID_IRunningObjectTable;
//C     typedef struct IRunningObjectTableVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IRunningObjectTable* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IRunningObjectTable* This);
//C         ULONG ( *Release)(
//C             IRunningObjectTable* This);
//C         HRESULT ( *Register)(
//C             IRunningObjectTable* This,
//C             DWORD grfFlags,
//C             IUnknown *punkObject,
//C             IMoniker *pmkObjectName,
//C             DWORD *pdwRegister);
//C         HRESULT ( *Revoke)(
//C             IRunningObjectTable* This,
//C             DWORD dwRegister);
//C         HRESULT ( *IsRunning)(
//C             IRunningObjectTable* This,
//C             IMoniker *pmkObjectName);
//C         HRESULT ( *GetObjectA)(
//C             IRunningObjectTable* This,
//C             IMoniker *pmkObjectName,
//C             IUnknown **ppunkObject);
//C         HRESULT ( *NoteChangeTime)(
//C             IRunningObjectTable* This,
//C             DWORD dwRegister,
//C             FILETIME *pfiletime);
//C         HRESULT ( *GetTimeOfLastChange)(
//C             IRunningObjectTable* This,
//C             IMoniker *pmkObjectName,
//C             FILETIME *pfiletime);
//C         HRESULT ( *EnumRunning)(
//C             IRunningObjectTable* This,
//C             IEnumMoniker **ppenumMoniker);
//C     } IRunningObjectTableVtbl;
struct IRunningObjectTableVtbl
{
    HRESULT  function(IRunningObjectTable *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRunningObjectTable *This)AddRef;
    ULONG  function(IRunningObjectTable *This)Release;
    HRESULT  function(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister)Register;
    HRESULT  function(IRunningObjectTable *This, DWORD dwRegister)Revoke;
    HRESULT  function(IRunningObjectTable *This, IMoniker *pmkObjectName)IsRunning;
    HRESULT  function(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject)GetObjectA;
    HRESULT  function(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime)NoteChangeTime;
    HRESULT  function(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime)GetTimeOfLastChange;
    HRESULT  function(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker)EnumRunning;
}
//C     struct IRunningObjectTable {
//C         IRunningObjectTableVtbl* lpVtbl;
//C     };
struct IRunningObjectTable
{
    IRunningObjectTableVtbl *lpVtbl;
}
//C     HRESULT IRunningObjectTable_Register_Proxy(
//C         IRunningObjectTable* This,
//C         DWORD grfFlags,
//C         IUnknown *punkObject,
//C         IMoniker *pmkObjectName,
//C         DWORD *pdwRegister);
HRESULT  IRunningObjectTable_Register_Proxy(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);
//C     void IRunningObjectTable_Register_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_Register_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRunningObjectTable_Revoke_Proxy(
//C         IRunningObjectTable* This,
//C         DWORD dwRegister);
HRESULT  IRunningObjectTable_Revoke_Proxy(IRunningObjectTable *This, DWORD dwRegister);
//C     void IRunningObjectTable_Revoke_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_Revoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRunningObjectTable_IsRunning_Proxy(
//C         IRunningObjectTable* This,
//C         IMoniker *pmkObjectName);
HRESULT  IRunningObjectTable_IsRunning_Proxy(IRunningObjectTable *This, IMoniker *pmkObjectName);
//C     void IRunningObjectTable_IsRunning_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_IsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRunningObjectTable_GetObject_Proxy(
//C         IRunningObjectTable* This,
//C         IMoniker *pmkObjectName,
//C         IUnknown **ppunkObject);
HRESULT  IRunningObjectTable_GetObject_Proxy(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject);
//C     void IRunningObjectTable_GetObject_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_GetObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRunningObjectTable_NoteChangeTime_Proxy(
//C         IRunningObjectTable* This,
//C         DWORD dwRegister,
//C         FILETIME *pfiletime);
HRESULT  IRunningObjectTable_NoteChangeTime_Proxy(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);
//C     void IRunningObjectTable_NoteChangeTime_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_NoteChangeTime_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRunningObjectTable_GetTimeOfLastChange_Proxy(
//C         IRunningObjectTable* This,
//C         IMoniker *pmkObjectName,
//C         FILETIME *pfiletime);
HRESULT  IRunningObjectTable_GetTimeOfLastChange_Proxy(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime);
//C     void IRunningObjectTable_GetTimeOfLastChange_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_GetTimeOfLastChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRunningObjectTable_EnumRunning_Proxy(
//C         IRunningObjectTable* This,
//C         IEnumMoniker **ppenumMoniker);
HRESULT  IRunningObjectTable_EnumRunning_Proxy(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker);
//C     void IRunningObjectTable_EnumRunning_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRunningObjectTable_EnumRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     typedef IPersist *LPPERSIST;
alias IPersist *LPPERSIST;
//C     extern const GUID IID_IPersist;
extern const GUID IID_IPersist;
//C     typedef struct IPersistVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IPersist* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IPersist* This);
//C         ULONG ( *Release)(
//C             IPersist* This);
//C         HRESULT ( *GetClassID)(
//C             IPersist* This,
//C             CLSID *pClassID);
//C     } IPersistVtbl;
struct IPersistVtbl
{
    HRESULT  function(IPersist *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPersist *This)AddRef;
    ULONG  function(IPersist *This)Release;
    HRESULT  function(IPersist *This, CLSID *pClassID)GetClassID;
}
//C     struct IPersist {
//C         IPersistVtbl* lpVtbl;
//C     };
struct IPersist
{
    IPersistVtbl *lpVtbl;
}
//C     HRESULT IPersist_GetClassID_Proxy(
//C         IPersist* This,
//C         CLSID *pClassID);
HRESULT  IPersist_GetClassID_Proxy(IPersist *This, CLSID *pClassID);
//C     void IPersist_GetClassID_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IPersist_GetClassID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     typedef IPersistStream *LPPERSISTSTREAM;
alias IPersistStream *LPPERSISTSTREAM;
//C     extern const GUID IID_IPersistStream;
extern const GUID IID_IPersistStream;
//C     typedef struct IPersistStreamVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IPersistStream* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IPersistStream* This);
//C         ULONG ( *Release)(
//C             IPersistStream* This);
//C         HRESULT ( *GetClassID)(
//C             IPersistStream* This,
//C             CLSID *pClassID);
//C         HRESULT ( *IsDirty)(
//C             IPersistStream* This);
//C         HRESULT ( *Load)(
//C             IPersistStream* This,
//C             IStream *pStm);
//C         HRESULT ( *Save)(
//C             IPersistStream* This,
//C             IStream *pStm,
//C             WINBOOL fClearDirty);
//C         HRESULT ( *GetSizeMax)(
//C             IPersistStream* This,
//C             ULARGE_INTEGER *pcbSize);
//C     } IPersistStreamVtbl;
struct IPersistStreamVtbl
{
    HRESULT  function(IPersistStream *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPersistStream *This)AddRef;
    ULONG  function(IPersistStream *This)Release;
    HRESULT  function(IPersistStream *This, CLSID *pClassID)GetClassID;
    HRESULT  function(IPersistStream *This)IsDirty;
    HRESULT  function(IPersistStream *This, IStream *pStm)Load;
    HRESULT  function(IPersistStream *This, IStream *pStm, WINBOOL fClearDirty)Save;
    HRESULT  function(IPersistStream *This, ULARGE_INTEGER *pcbSize)GetSizeMax;
}
//C     struct IPersistStream {
//C         IPersistStreamVtbl* lpVtbl;
//C     };
struct IPersistStream
{
    IPersistStreamVtbl *lpVtbl;
}
//C     HRESULT IPersistStream_IsDirty_Proxy(
//C         IPersistStream* This);
HRESULT  IPersistStream_IsDirty_Proxy(IPersistStream *This);
//C     void IPersistStream_IsDirty_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IPersistStream_IsDirty_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IPersistStream_Load_Proxy(
//C         IPersistStream* This,
//C         IStream *pStm);
HRESULT  IPersistStream_Load_Proxy(IPersistStream *This, IStream *pStm);
//C     void IPersistStream_Load_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IPersistStream_Load_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IPersistStream_Save_Proxy(
//C         IPersistStream* This,
//C         IStream *pStm,
//C         WINBOOL fClearDirty);
HRESULT  IPersistStream_Save_Proxy(IPersistStream *This, IStream *pStm, WINBOOL fClearDirty);
//C     void IPersistStream_Save_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IPersistStream_Save_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IPersistStream_GetSizeMax_Proxy(
//C         IPersistStream* This,
//C         ULARGE_INTEGER *pcbSize);
HRESULT  IPersistStream_GetSizeMax_Proxy(IPersistStream *This, ULARGE_INTEGER *pcbSize);
//C     void IPersistStream_GetSizeMax_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IPersistStream_GetSizeMax_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     typedef IMoniker *LPMONIKER;
alias IMoniker *LPMONIKER;
//C     typedef enum tagMKSYS {
//C         MKSYS_NONE = 0,
//C         MKSYS_GENERICCOMPOSITE = 1,
//C         MKSYS_FILEMONIKER = 2,
//C         MKSYS_ANTIMONIKER = 3,
//C         MKSYS_ITEMMONIKER = 4,
//C         MKSYS_POINTERMONIKER = 5,
//C         MKSYS_CLASSMONIKER = 7,
//C         MKSYS_OBJREFMONIKER = 8,
//C         MKSYS_SESSIONMONIKER = 9,
//C         MKSYS_LUAMONIKER = 10
//C     } MKSYS;
enum tagMKSYS
{
    MKSYS_NONE,
    MKSYS_GENERICCOMPOSITE,
    MKSYS_FILEMONIKER,
    MKSYS_ANTIMONIKER,
    MKSYS_ITEMMONIKER,
    MKSYS_POINTERMONIKER,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER,
    MKSYS_SESSIONMONIKER,
    MKSYS_LUAMONIKER,
}
alias tagMKSYS MKSYS;
//C     typedef enum tagMKREDUCE {
//C         MKRREDUCE_ONE = 3 << 16,
//C         MKRREDUCE_TOUSER = 2 << 16,
//C         MKRREDUCE_THROUGHUSER = 1 << 16,
//C         MKRREDUCE_ALL = 0
//C     } MKRREDUCE;
enum tagMKREDUCE
{
    MKRREDUCE_ONE = 196608,
    MKRREDUCE_TOUSER = 131072,
    MKRREDUCE_THROUGHUSER = 65536,
    MKRREDUCE_ALL = 0,
}
alias tagMKREDUCE MKRREDUCE;
//C     extern const GUID IID_IMoniker;
extern const GUID IID_IMoniker;
//C     typedef struct IMonikerVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IMoniker* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IMoniker* This);
//C         ULONG ( *Release)(
//C             IMoniker* This);
//C         HRESULT ( *GetClassID)(
//C             IMoniker* This,
//C             CLSID *pClassID);
//C         HRESULT ( *IsDirty)(
//C             IMoniker* This);
//C         HRESULT ( *Load)(
//C             IMoniker* This,
//C             IStream *pStm);
//C         HRESULT ( *Save)(
//C             IMoniker* This,
//C             IStream *pStm,
//C             WINBOOL fClearDirty);
//C         HRESULT ( *GetSizeMax)(
//C             IMoniker* This,
//C             ULARGE_INTEGER *pcbSize);
//C         HRESULT ( *BindToObject)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             IMoniker *pmkToLeft,
//C             const IID *const riidResult,
//C             void **ppvResult);
//C         HRESULT ( *BindToStorage)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             IMoniker *pmkToLeft,
//C             const IID *const riid,
//C             void **ppvObj);
//C         HRESULT ( *Reduce)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             DWORD dwReduceHowFar,
//C             IMoniker **ppmkToLeft,
//C             IMoniker **ppmkReduced);
//C         HRESULT ( *ComposeWith)(
//C             IMoniker* This,
//C             IMoniker *pmkRight,
//C             WINBOOL fOnlyIfNotGeneric,
//C             IMoniker **ppmkComposite);
//C         HRESULT ( *Enum)(
//C             IMoniker* This,
//C             WINBOOL fForward,
//C             IEnumMoniker **ppenumMoniker);
//C         HRESULT ( *IsEqual)(
//C             IMoniker* This,
//C             IMoniker *pmkOtherMoniker);
//C         HRESULT ( *Hash)(
//C             IMoniker* This,
//C             DWORD *pdwHash);
//C         HRESULT ( *IsRunning)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             IMoniker *pmkToLeft,
//C             IMoniker *pmkNewlyRunning);
//C         HRESULT ( *GetTimeOfLastChange)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             IMoniker *pmkToLeft,
//C             FILETIME *pFileTime);
//C         HRESULT ( *Inverse)(
//C             IMoniker* This,
//C             IMoniker **ppmk);
//C         HRESULT ( *CommonPrefixWith)(
//C             IMoniker* This,
//C             IMoniker *pmkOther,
//C             IMoniker **ppmkPrefix);
//C         HRESULT ( *RelativePathTo)(
//C             IMoniker* This,
//C             IMoniker *pmkOther,
//C             IMoniker **ppmkRelPath);
//C         HRESULT ( *GetDisplayName)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             IMoniker *pmkToLeft,
//C             LPOLESTR *ppszDisplayName);
//C         HRESULT ( *ParseDisplayName)(
//C             IMoniker* This,
//C             IBindCtx *pbc,
//C             IMoniker *pmkToLeft,
//C             LPOLESTR pszDisplayName,
//C             ULONG *pchEaten,
//C             IMoniker **ppmkOut);
//C         HRESULT ( *IsSystemMoniker)(
//C             IMoniker* This,
//C             DWORD *pdwMksys);
//C     } IMonikerVtbl;
struct IMonikerVtbl
{
    HRESULT  function(IMoniker *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMoniker *This)AddRef;
    ULONG  function(IMoniker *This)Release;
    HRESULT  function(IMoniker *This, CLSID *pClassID)GetClassID;
    HRESULT  function(IMoniker *This)IsDirty;
    HRESULT  function(IMoniker *This, IStream *pStm)Load;
    HRESULT  function(IMoniker *This, IStream *pStm, WINBOOL fClearDirty)Save;
    HRESULT  function(IMoniker *This, ULARGE_INTEGER *pcbSize)GetSizeMax;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riidResult, void **ppvResult)BindToObject;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riid, void **ppvObj)BindToStorage;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced)Reduce;
    HRESULT  function(IMoniker *This, IMoniker *pmkRight, WINBOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite)ComposeWith;
    HRESULT  function(IMoniker *This, WINBOOL fForward, IEnumMoniker **ppenumMoniker)Enum;
    HRESULT  function(IMoniker *This, IMoniker *pmkOtherMoniker)IsEqual;
    HRESULT  function(IMoniker *This, DWORD *pdwHash)Hash;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning)IsRunning;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime)GetTimeOfLastChange;
    HRESULT  function(IMoniker *This, IMoniker **ppmk)Inverse;
    HRESULT  function(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix)CommonPrefixWith;
    HRESULT  function(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath)RelativePathTo;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName)GetDisplayName;
    HRESULT  function(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut)ParseDisplayName;
    HRESULT  function(IMoniker *This, DWORD *pdwMksys)IsSystemMoniker;
}
//C     struct IMoniker {
//C         IMonikerVtbl* lpVtbl;
//C     };
struct IMoniker
{
    IMonikerVtbl *lpVtbl;
}
//C     HRESULT IMoniker_RemoteBindToObject_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         const IID *const riidResult,
//C         IUnknown **ppvResult);
HRESULT  IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riidResult, IUnknown **ppvResult);
//C     void IMoniker_RemoteBindToObject_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_RemoteBindToStorage_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         const IID *const riid,
//C         IUnknown **ppvObj);
HRESULT  IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riid, IUnknown **ppvObj);
//C     void IMoniker_RemoteBindToStorage_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_Reduce_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         DWORD dwReduceHowFar,
//C         IMoniker **ppmkToLeft,
//C         IMoniker **ppmkReduced);
HRESULT  IMoniker_Reduce_Proxy(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);
//C     void IMoniker_Reduce_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_Reduce_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_ComposeWith_Proxy(
//C         IMoniker* This,
//C         IMoniker *pmkRight,
//C         WINBOOL fOnlyIfNotGeneric,
//C         IMoniker **ppmkComposite);
HRESULT  IMoniker_ComposeWith_Proxy(IMoniker *This, IMoniker *pmkRight, WINBOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);
//C     void IMoniker_ComposeWith_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_ComposeWith_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_Enum_Proxy(
//C         IMoniker* This,
//C         WINBOOL fForward,
//C         IEnumMoniker **ppenumMoniker);
HRESULT  IMoniker_Enum_Proxy(IMoniker *This, WINBOOL fForward, IEnumMoniker **ppenumMoniker);
//C     void IMoniker_Enum_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_Enum_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_IsEqual_Proxy(
//C         IMoniker* This,
//C         IMoniker *pmkOtherMoniker);
HRESULT  IMoniker_IsEqual_Proxy(IMoniker *This, IMoniker *pmkOtherMoniker);
//C     void IMoniker_IsEqual_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_IsEqual_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_Hash_Proxy(
//C         IMoniker* This,
//C         DWORD *pdwHash);
HRESULT  IMoniker_Hash_Proxy(IMoniker *This, DWORD *pdwHash);
//C     void IMoniker_Hash_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_Hash_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_IsRunning_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         IMoniker *pmkNewlyRunning);
HRESULT  IMoniker_IsRunning_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);
//C     void IMoniker_IsRunning_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_IsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_GetTimeOfLastChange_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         FILETIME *pFileTime);
HRESULT  IMoniker_GetTimeOfLastChange_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);
//C     void IMoniker_GetTimeOfLastChange_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_GetTimeOfLastChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_Inverse_Proxy(
//C         IMoniker* This,
//C         IMoniker **ppmk);
HRESULT  IMoniker_Inverse_Proxy(IMoniker *This, IMoniker **ppmk);
//C     void IMoniker_Inverse_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_Inverse_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_CommonPrefixWith_Proxy(
//C         IMoniker* This,
//C         IMoniker *pmkOther,
//C         IMoniker **ppmkPrefix);
HRESULT  IMoniker_CommonPrefixWith_Proxy(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix);
//C     void IMoniker_CommonPrefixWith_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_CommonPrefixWith_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_RelativePathTo_Proxy(
//C         IMoniker* This,
//C         IMoniker *pmkOther,
//C         IMoniker **ppmkRelPath);
HRESULT  IMoniker_RelativePathTo_Proxy(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath);
//C     void IMoniker_RelativePathTo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_RelativePathTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_GetDisplayName_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         LPOLESTR *ppszDisplayName);
HRESULT  IMoniker_GetDisplayName_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);
//C     void IMoniker_GetDisplayName_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_GetDisplayName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_ParseDisplayName_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         LPOLESTR pszDisplayName,
//C         ULONG *pchEaten,
//C         IMoniker **ppmkOut);
HRESULT  IMoniker_ParseDisplayName_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
//C     void IMoniker_ParseDisplayName_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_ParseDisplayName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_IsSystemMoniker_Proxy(
//C         IMoniker* This,
//C         DWORD *pdwMksys);
HRESULT  IMoniker_IsSystemMoniker_Proxy(IMoniker *This, DWORD *pdwMksys);
//C     void IMoniker_IsSystemMoniker_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IMoniker_IsSystemMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IMoniker_BindToObject_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         const IID *const riidResult,
//C         void **ppvResult);
HRESULT  IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riidResult, void **ppvResult);
//C     HRESULT IMoniker_BindToObject_Stub(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         const IID *const riidResult,
//C         IUnknown **ppvResult);
HRESULT  IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riidResult, IUnknown **ppvResult);
//C     HRESULT IMoniker_BindToStorage_Proxy(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         const IID *const riid,
//C         void **ppvObj);
HRESULT  IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riid, void **ppvObj);
//C     HRESULT IMoniker_BindToStorage_Stub(
//C         IMoniker* This,
//C         IBindCtx *pbc,
//C         IMoniker *pmkToLeft,
//C         const IID *const riid,
//C         IUnknown **ppvObj);
HRESULT  IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IID *riid, IUnknown **ppvObj);
//C       extern const IID IID_IROTData;
extern const IID IID_IROTData;
//C       typedef struct IROTDataVtbl {
//C           HRESULT ( *QueryInterface)(IROTData *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IROTData *This);
//C           ULONG ( *Release)(IROTData *This);
//C           HRESULT ( *GetComparisonData)(IROTData *This,byte *pbData,ULONG cbMax,ULONG *pcbData);
//C       } IROTDataVtbl;
struct IROTDataVtbl
{
    HRESULT  function(IROTData *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IROTData *This)AddRef;
    ULONG  function(IROTData *This)Release;
    HRESULT  function(IROTData *This, byte *pbData, ULONG cbMax, ULONG *pcbData)GetComparisonData;
}
//C       struct IROTData {
//C         struct IROTDataVtbl *lpVtbl;
//C       };
struct IROTData
{
    IROTDataVtbl *lpVtbl;
}
//C       HRESULT IROTData_GetComparisonData_Proxy(IROTData *This,byte *pbData,ULONG cbMax,ULONG *pcbData);
HRESULT  IROTData_GetComparisonData_Proxy(IROTData *This, byte *pbData, ULONG cbMax, ULONG *pcbData);
//C       void IROTData_GetComparisonData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IROTData_GetComparisonData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IEnumString *LPENUMSTRING;
alias IEnumString *LPENUMSTRING;
//C     extern const GUID IID_IEnumString;
extern const GUID IID_IEnumString;
//C     typedef struct IEnumStringVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IEnumString* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IEnumString* This);
//C         ULONG ( *Release)(
//C             IEnumString* This);
//C         HRESULT ( *Next)(
//C             IEnumString* This,
//C             ULONG celt,
//C             LPOLESTR *rgelt,
//C             ULONG *pceltFetched);
//C         HRESULT ( *Skip)(
//C             IEnumString* This,
//C             ULONG celt);
//C         HRESULT ( *Reset)(
//C             IEnumString* This);
//C         HRESULT ( *Clone)(
//C             IEnumString* This,
//C             IEnumString **ppenum);
//C     } IEnumStringVtbl;
struct IEnumStringVtbl
{
    HRESULT  function(IEnumString *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumString *This)AddRef;
    ULONG  function(IEnumString *This)Release;
    HRESULT  function(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumString *This, ULONG celt)Skip;
    HRESULT  function(IEnumString *This)Reset;
    HRESULT  function(IEnumString *This, IEnumString **ppenum)Clone;
}
//C     struct IEnumString {
//C         IEnumStringVtbl* lpVtbl;
//C     };
struct IEnumString
{
    IEnumStringVtbl *lpVtbl;
}
//C     HRESULT IEnumString_RemoteNext_Proxy(
//C         IEnumString* This,
//C         ULONG celt,
//C         LPOLESTR *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
//C     void IEnumString_RemoteNext_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumString_Skip_Proxy(
//C         IEnumString* This,
//C         ULONG celt);
HRESULT  IEnumString_Skip_Proxy(IEnumString *This, ULONG celt);
//C     void IEnumString_Skip_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumString_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumString_Reset_Proxy(
//C         IEnumString* This);
HRESULT  IEnumString_Reset_Proxy(IEnumString *This);
//C     void IEnumString_Reset_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumString_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumString_Clone_Proxy(
//C         IEnumString* This,
//C         IEnumString **ppenum);
HRESULT  IEnumString_Clone_Proxy(IEnumString *This, IEnumString **ppenum);
//C     void IEnumString_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumString_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumString_Next_Proxy(
//C         IEnumString* This,
//C         ULONG celt,
//C         LPOLESTR *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
//C     HRESULT IEnumString_Next_Stub(
//C         IEnumString* This,
//C         ULONG celt,
//C         LPOLESTR *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
//C     extern const GUID IID_ISequentialStream;
extern const GUID IID_ISequentialStream;
//C     typedef struct ISequentialStreamVtbl {
//C         HRESULT ( *QueryInterface)(
//C             ISequentialStream* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             ISequentialStream* This);
//C         ULONG ( *Release)(
//C             ISequentialStream* This);
//C         HRESULT ( *Read)(
//C             ISequentialStream* This,
//C             void *pv,
//C             ULONG cb,
//C             ULONG *pcbRead);
//C         HRESULT ( *Write)(
//C             ISequentialStream* This,
//C             const void *pv,
//C             ULONG cb,
//C             ULONG *pcbWritten);
//C     } ISequentialStreamVtbl;
struct ISequentialStreamVtbl
{
    HRESULT  function(ISequentialStream *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISequentialStream *This)AddRef;
    ULONG  function(ISequentialStream *This)Release;
    HRESULT  function(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)Read;
    HRESULT  function(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbWritten)Write;
}
//C     struct ISequentialStream {
//C         ISequentialStreamVtbl* lpVtbl;
//C     };
struct ISequentialStream
{
    ISequentialStreamVtbl *lpVtbl;
}
//C     HRESULT ISequentialStream_RemoteRead_Proxy(
//C         ISequentialStream* This,
//C         byte *pv,
//C         ULONG cb,
//C         ULONG *pcbRead);
HRESULT  ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead);
//C     void ISequentialStream_RemoteRead_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ISequentialStream_RemoteWrite_Proxy(
//C         ISequentialStream* This,
//C         const byte *pv,
//C         ULONG cb,
//C         ULONG *pcbWritten);
HRESULT  ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbWritten);
//C     void ISequentialStream_RemoteWrite_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ISequentialStream_Read_Proxy(
//C         ISequentialStream* This,
//C         void *pv,
//C         ULONG cb,
//C         ULONG *pcbRead);
HRESULT  ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead);
//C     HRESULT ISequentialStream_Read_Stub(
//C         ISequentialStream* This,
//C         byte *pv,
//C         ULONG cb,
//C         ULONG *pcbRead);
HRESULT  ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead);
//C     HRESULT ISequentialStream_Write_Proxy(
//C         ISequentialStream* This,
//C         const void *pv,
//C         ULONG cb,
//C         ULONG *pcbWritten);
HRESULT  ISequentialStream_Write_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbWritten);
//C     HRESULT ISequentialStream_Write_Stub(
//C         ISequentialStream* This,
//C         const byte *pv,
//C         ULONG cb,
//C         ULONG *pcbWritten);
HRESULT  ISequentialStream_Write_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbWritten);
//C     typedef IStream *LPSTREAM;
alias IStream *LPSTREAM;
//C     typedef struct tagSTATSTG {
//C         LPOLESTR pwcsName;
//C         DWORD type;
//C         ULARGE_INTEGER cbSize;
//C         FILETIME mtime;
//C         FILETIME ctime;
//C         FILETIME atime;
//C         DWORD grfMode;
//C         DWORD grfLocksSupported;
//C         CLSID clsid;
//C         DWORD grfStateBits;
//C         DWORD reserved;
//C     } STATSTG;
struct tagSTATSTG
{
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
}
alias tagSTATSTG STATSTG;
//C     typedef enum tagSTGTY {
//C         STGTY_STORAGE = 1,
//C         STGTY_STREAM = 2,
//C         STGTY_LOCKBYTES = 3,
//C         STGTY_PROPERTY = 4
//C     } STGTY;
enum tagSTGTY
{
    STGTY_STORAGE = 1,
    STGTY_STREAM,
    STGTY_LOCKBYTES,
    STGTY_PROPERTY,
}
alias tagSTGTY STGTY;
//C     typedef enum tagSTREAM_SEEK {
//C         STREAM_SEEK_SET = 0,
//C         STREAM_SEEK_CUR = 1,
//C         STREAM_SEEK_END = 2
//C     } STREAM_SEEK;
enum tagSTREAM_SEEK
{
    STREAM_SEEK_SET,
    STREAM_SEEK_CUR,
    STREAM_SEEK_END,
}
alias tagSTREAM_SEEK STREAM_SEEK;
//C     typedef enum tagLOCKTYPE {
//C         LOCK_WRITE = 1,
//C         LOCK_EXCLUSIVE = 2,
//C         LOCK_ONLYONCE = 4
//C     } LOCKTYPE;
enum tagLOCKTYPE
{
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE,
    LOCK_ONLYONCE = 4,
}
alias tagLOCKTYPE LOCKTYPE;
//C     extern const GUID IID_IStream;
extern const GUID IID_IStream;
//C     typedef struct IStreamVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IStream* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IStream* This);
//C         ULONG ( *Release)(
//C             IStream* This);
//C         HRESULT ( *Read)(
//C             IStream* This,
//C             void *pv,
//C             ULONG cb,
//C             ULONG *pcbRead);
//C         HRESULT ( *Write)(
//C             IStream* This,
//C             const void *pv,
//C             ULONG cb,
//C             ULONG *pcbWritten);
//C         HRESULT ( *Seek)(
//C             IStream* This,
//C             LARGE_INTEGER dlibMove,
//C             DWORD dwOrigin,
//C             ULARGE_INTEGER *plibNewPosition);
//C         HRESULT ( *SetSize)(
//C             IStream* This,
//C             ULARGE_INTEGER libNewSize);
//C         HRESULT ( *CopyTo)(
//C             IStream* This,
//C             IStream *pstm,
//C             ULARGE_INTEGER cb,
//C             ULARGE_INTEGER *pcbRead,
//C             ULARGE_INTEGER *pcbWritten);
//C         HRESULT ( *Commit)(
//C             IStream* This,
//C             DWORD grfCommitFlags);
//C         HRESULT ( *Revert)(
//C             IStream* This);
//C         HRESULT ( *LockRegion)(
//C             IStream* This,
//C             ULARGE_INTEGER libOffset,
//C             ULARGE_INTEGER cb,
//C             DWORD dwLockType);
//C         HRESULT ( *UnlockRegion)(
//C             IStream* This,
//C             ULARGE_INTEGER libOffset,
//C             ULARGE_INTEGER cb,
//C             DWORD dwLockType);
//C         HRESULT ( *Stat)(
//C             IStream* This,
//C             STATSTG *pstatstg,
//C             DWORD grfStatFlag);
//C         HRESULT ( *Clone)(
//C             IStream* This,
//C             IStream **ppstm);
//C     } IStreamVtbl;
struct IStreamVtbl
{
    HRESULT  function(IStream *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IStream *This)AddRef;
    ULONG  function(IStream *This)Release;
    HRESULT  function(IStream *This, void *pv, ULONG cb, ULONG *pcbRead)Read;
    HRESULT  function(IStream *This, void *pv, ULONG cb, ULONG *pcbWritten)Write;
    HRESULT  function(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)Seek;
    HRESULT  function(IStream *This, ULARGE_INTEGER libNewSize)SetSize;
    HRESULT  function(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)CopyTo;
    HRESULT  function(IStream *This, DWORD grfCommitFlags)Commit;
    HRESULT  function(IStream *This)Revert;
    HRESULT  function(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType)LockRegion;
    HRESULT  function(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType)UnlockRegion;
    HRESULT  function(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag)Stat;
    HRESULT  function(IStream *This, IStream **ppstm)Clone;
}
//C     struct IStream {
//C         IStreamVtbl* lpVtbl;
//C     };
struct IStream
{
    IStreamVtbl *lpVtbl;
}
//C     HRESULT IStream_RemoteSeek_Proxy(
//C         IStream* This,
//C         LARGE_INTEGER dlibMove,
//C         DWORD dwOrigin,
//C         ULARGE_INTEGER *plibNewPosition);
HRESULT  IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
//C     void IStream_RemoteSeek_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_SetSize_Proxy(
//C         IStream* This,
//C         ULARGE_INTEGER libNewSize);
HRESULT  IStream_SetSize_Proxy(IStream *This, ULARGE_INTEGER libNewSize);
//C     void IStream_SetSize_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_SetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_RemoteCopyTo_Proxy(
//C         IStream* This,
//C         IStream *pstm,
//C         ULARGE_INTEGER cb,
//C         ULARGE_INTEGER *pcbRead,
//C         ULARGE_INTEGER *pcbWritten);
HRESULT  IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
//C     void IStream_RemoteCopyTo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_Commit_Proxy(
//C         IStream* This,
//C         DWORD grfCommitFlags);
HRESULT  IStream_Commit_Proxy(IStream *This, DWORD grfCommitFlags);
//C     void IStream_Commit_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_Commit_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_Revert_Proxy(
//C         IStream* This);
HRESULT  IStream_Revert_Proxy(IStream *This);
//C     void IStream_Revert_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_Revert_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_LockRegion_Proxy(
//C         IStream* This,
//C         ULARGE_INTEGER libOffset,
//C         ULARGE_INTEGER cb,
//C         DWORD dwLockType);
HRESULT  IStream_LockRegion_Proxy(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
//C     void IStream_LockRegion_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_LockRegion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_UnlockRegion_Proxy(
//C         IStream* This,
//C         ULARGE_INTEGER libOffset,
//C         ULARGE_INTEGER cb,
//C         DWORD dwLockType);
HRESULT  IStream_UnlockRegion_Proxy(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
//C     void IStream_UnlockRegion_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_UnlockRegion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_Stat_Proxy(
//C         IStream* This,
//C         STATSTG *pstatstg,
//C         DWORD grfStatFlag);
HRESULT  IStream_Stat_Proxy(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);
//C     void IStream_Stat_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_Stat_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_Clone_Proxy(
//C         IStream* This,
//C         IStream **ppstm);
HRESULT  IStream_Clone_Proxy(IStream *This, IStream **ppstm);
//C     void IStream_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStream_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStream_Seek_Proxy(
//C         IStream* This,
//C         LARGE_INTEGER dlibMove,
//C         DWORD dwOrigin,
//C         ULARGE_INTEGER *plibNewPosition);
HRESULT  IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
//C     HRESULT IStream_Seek_Stub(
//C         IStream* This,
//C         LARGE_INTEGER dlibMove,
//C         DWORD dwOrigin,
//C         ULARGE_INTEGER *plibNewPosition);
HRESULT  IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
//C     HRESULT IStream_CopyTo_Proxy(
//C         IStream* This,
//C         IStream *pstm,
//C         ULARGE_INTEGER cb,
//C         ULARGE_INTEGER *pcbRead,
//C         ULARGE_INTEGER *pcbWritten);
HRESULT  IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
//C     HRESULT IStream_CopyTo_Stub(
//C         IStream* This,
//C         IStream *pstm,
//C         ULARGE_INTEGER cb,
//C         ULARGE_INTEGER *pcbRead,
//C         ULARGE_INTEGER *pcbWritten);
HRESULT  IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
//C     typedef IEnumSTATSTG *LPENUMSTATSTG;
alias IEnumSTATSTG *LPENUMSTATSTG;
//C     extern const GUID IID_IEnumSTATSTG;
extern const GUID IID_IEnumSTATSTG;
//C     typedef struct IEnumSTATSTGVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IEnumSTATSTG* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IEnumSTATSTG* This);
//C         ULONG ( *Release)(
//C             IEnumSTATSTG* This);
//C         HRESULT ( *Next)(
//C             IEnumSTATSTG* This,
//C             ULONG celt,
//C             STATSTG *rgelt,
//C             ULONG *pceltFetched);
//C         HRESULT ( *Skip)(
//C             IEnumSTATSTG* This,
//C             ULONG celt);
//C         HRESULT ( *Reset)(
//C             IEnumSTATSTG* This);
//C         HRESULT ( *Clone)(
//C             IEnumSTATSTG* This,
//C             IEnumSTATSTG **ppenum);
//C     } IEnumSTATSTGVtbl;
struct IEnumSTATSTGVtbl
{
    HRESULT  function(IEnumSTATSTG *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumSTATSTG *This)AddRef;
    ULONG  function(IEnumSTATSTG *This)Release;
    HRESULT  function(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumSTATSTG *This, ULONG celt)Skip;
    HRESULT  function(IEnumSTATSTG *This)Reset;
    HRESULT  function(IEnumSTATSTG *This, IEnumSTATSTG **ppenum)Clone;
}
//C     struct IEnumSTATSTG {
//C         IEnumSTATSTGVtbl* lpVtbl;
//C     };
struct IEnumSTATSTG
{
    IEnumSTATSTGVtbl *lpVtbl;
}
//C     HRESULT IEnumSTATSTG_RemoteNext_Proxy(
//C         IEnumSTATSTG* This,
//C         ULONG celt,
//C         STATSTG *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
//C     void IEnumSTATSTG_RemoteNext_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATSTG_Skip_Proxy(
//C         IEnumSTATSTG* This,
//C         ULONG celt);
HRESULT  IEnumSTATSTG_Skip_Proxy(IEnumSTATSTG *This, ULONG celt);
//C     void IEnumSTATSTG_Skip_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATSTG_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATSTG_Reset_Proxy(
//C         IEnumSTATSTG* This);
HRESULT  IEnumSTATSTG_Reset_Proxy(IEnumSTATSTG *This);
//C     void IEnumSTATSTG_Reset_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATSTG_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATSTG_Clone_Proxy(
//C         IEnumSTATSTG* This,
//C         IEnumSTATSTG **ppenum);
HRESULT  IEnumSTATSTG_Clone_Proxy(IEnumSTATSTG *This, IEnumSTATSTG **ppenum);
//C     void IEnumSTATSTG_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATSTG_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATSTG_Next_Proxy(
//C         IEnumSTATSTG* This,
//C         ULONG celt,
//C         STATSTG *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
//C     HRESULT IEnumSTATSTG_Next_Stub(
//C         IEnumSTATSTG* This,
//C         ULONG celt,
//C         STATSTG *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
//C     typedef IStorage *LPSTORAGE;
alias IStorage *LPSTORAGE;
//C     typedef struct tagRemSNB {
//C         ULONG ulCntStr;
//C         ULONG ulCntChar;
//C         OLECHAR rgString[1];
//C     } RemSNB;
struct tagRemSNB
{
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR [1]rgString;
}
alias tagRemSNB RemSNB;
//C     typedef RemSNB *wireSNB;
alias RemSNB *wireSNB;
//C     typedef OLECHAR **SNB;
alias OLECHAR **SNB;
//C     extern const GUID IID_IStorage;
extern const GUID IID_IStorage;
//C     typedef struct IStorageVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IStorage* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IStorage* This);
//C         ULONG ( *Release)(
//C             IStorage* This);
//C         HRESULT ( *CreateStream)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName,
//C             DWORD grfMode,
//C             DWORD reserved1,
//C             DWORD reserved2,
//C             IStream **ppstm);
//C         HRESULT ( *OpenStream)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName,
//C             void *reserved1,
//C             DWORD grfMode,
//C             DWORD reserved2,
//C             IStream **ppstm);
//C         HRESULT ( *CreateStorage)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName,
//C             DWORD grfMode,
//C             DWORD dwStgFmt,
//C             DWORD reserved2,
//C             IStorage **ppstg);
//C         HRESULT ( *OpenStorage)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName,
//C             IStorage *pstgPriority,
//C             DWORD grfMode,
//C             SNB snbExclude,
//C             DWORD reserved,
//C             IStorage **ppstg);
//C         HRESULT ( *CopyTo)(
//C             IStorage* This,
//C             DWORD ciidExclude,
//C             const IID *rgiidExclude,
//C             SNB snbExclude,
//C             IStorage *pstgDest);
//C         HRESULT ( *MoveElementTo)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName,
//C             IStorage *pstgDest,
//C             LPCOLESTR pwcsNewName,
//C             DWORD grfFlags);
//C         HRESULT ( *Commit)(
//C             IStorage* This,
//C             DWORD grfCommitFlags);
//C         HRESULT ( *Revert)(
//C             IStorage* This);
//C         HRESULT ( *EnumElements)(
//C             IStorage* This,
//C             DWORD reserved1,
//C             void *reserved2,
//C             DWORD reserved3,
//C             IEnumSTATSTG **ppenum);
//C         HRESULT ( *DestroyElement)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName);
//C         HRESULT ( *RenameElement)(
//C             IStorage* This,
//C             LPCOLESTR pwcsOldName,
//C             LPCOLESTR pwcsNewName);
//C         HRESULT ( *SetElementTimes)(
//C             IStorage* This,
//C             LPCOLESTR pwcsName,
//C             const FILETIME *pctime,
//C             const FILETIME *patime,
//C             const FILETIME *pmtime);
//C         HRESULT ( *SetClass)(
//C             IStorage* This,
//C             const IID *const clsid);
//C         HRESULT ( *SetStateBits)(
//C             IStorage* This,
//C             DWORD grfStateBits,
//C             DWORD grfMask);
//C         HRESULT ( *Stat)(
//C             IStorage* This,
//C             STATSTG *pstatstg,
//C             DWORD grfStatFlag);
//C     } IStorageVtbl;
struct IStorageVtbl
{
    HRESULT  function(IStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IStorage *This)AddRef;
    ULONG  function(IStorage *This)Release;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm)CreateStream;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)OpenStream;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName, DWORD grfMode, DWORD dwStgFmt, DWORD reserved2, IStorage **ppstg)CreateStorage;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg)OpenStorage;
    HRESULT  function(IStorage *This, DWORD ciidExclude, IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)CopyTo;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName, IStorage *pstgDest, LPCOLESTR pwcsNewName, DWORD grfFlags)MoveElementTo;
    HRESULT  function(IStorage *This, DWORD grfCommitFlags)Commit;
    HRESULT  function(IStorage *This)Revert;
    HRESULT  function(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)EnumElements;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName)DestroyElement;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsOldName, LPCOLESTR pwcsNewName)RenameElement;
    HRESULT  function(IStorage *This, LPCOLESTR pwcsName, FILETIME *pctime, FILETIME *patime, FILETIME *pmtime)SetElementTimes;
    HRESULT  function(IStorage *This, IID *clsid)SetClass;
    HRESULT  function(IStorage *This, DWORD grfStateBits, DWORD grfMask)SetStateBits;
    HRESULT  function(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag)Stat;
}
//C     struct IStorage {
//C         IStorageVtbl* lpVtbl;
//C     };
struct IStorage
{
    IStorageVtbl *lpVtbl;
}
//C     HRESULT IStorage_CreateStream_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         DWORD grfMode,
//C         DWORD reserved1,
//C         DWORD reserved2,
//C         IStream **ppstm);
HRESULT  IStorage_CreateStream_Proxy(IStorage *This, LPCOLESTR pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);
//C     void IStorage_CreateStream_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_CreateStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_RemoteOpenStream_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         ULONG cbReserved1,
//C         byte *reserved1,
//C         DWORD grfMode,
//C         DWORD reserved2,
//C         IStream **ppstm);
HRESULT  IStorage_RemoteOpenStream_Proxy(IStorage *This, LPCOLESTR pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
//C     void IStorage_RemoteOpenStream_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_CreateStorage_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         DWORD grfMode,
//C         DWORD dwStgFmt,
//C         DWORD reserved2,
//C         IStorage **ppstg);
HRESULT  IStorage_CreateStorage_Proxy(IStorage *This, LPCOLESTR pwcsName, DWORD grfMode, DWORD dwStgFmt, DWORD reserved2, IStorage **ppstg);
//C     void IStorage_CreateStorage_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_CreateStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_OpenStorage_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         IStorage *pstgPriority,
//C         DWORD grfMode,
//C         SNB snbExclude,
//C         DWORD reserved,
//C         IStorage **ppstg);
HRESULT  IStorage_OpenStorage_Proxy(IStorage *This, LPCOLESTR pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);
//C     void IStorage_OpenStorage_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_OpenStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_CopyTo_Proxy(
//C         IStorage* This,
//C         DWORD ciidExclude,
//C         const IID *rgiidExclude,
//C         SNB snbExclude,
//C         IStorage *pstgDest);
HRESULT  IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);
//C     void IStorage_CopyTo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_CopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_MoveElementTo_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         IStorage *pstgDest,
//C         LPCOLESTR pwcsNewName,
//C         DWORD grfFlags);
HRESULT  IStorage_MoveElementTo_Proxy(IStorage *This, LPCOLESTR pwcsName, IStorage *pstgDest, LPCOLESTR pwcsNewName, DWORD grfFlags);
//C     void IStorage_MoveElementTo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_MoveElementTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_Commit_Proxy(
//C         IStorage* This,
//C         DWORD grfCommitFlags);
HRESULT  IStorage_Commit_Proxy(IStorage *This, DWORD grfCommitFlags);
//C     void IStorage_Commit_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_Commit_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_Revert_Proxy(
//C         IStorage* This);
HRESULT  IStorage_Revert_Proxy(IStorage *This);
//C     void IStorage_Revert_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_Revert_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_RemoteEnumElements_Proxy(
//C         IStorage* This,
//C         DWORD reserved1,
//C         ULONG cbReserved2,
//C         byte *reserved2,
//C         DWORD reserved3,
//C         IEnumSTATSTG **ppenum);
HRESULT  IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
//C     void IStorage_RemoteEnumElements_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_DestroyElement_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName);
HRESULT  IStorage_DestroyElement_Proxy(IStorage *This, LPCOLESTR pwcsName);
//C     void IStorage_DestroyElement_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_DestroyElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_RenameElement_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsOldName,
//C         LPCOLESTR pwcsNewName);
HRESULT  IStorage_RenameElement_Proxy(IStorage *This, LPCOLESTR pwcsOldName, LPCOLESTR pwcsNewName);
//C     void IStorage_RenameElement_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_RenameElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_SetElementTimes_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         const FILETIME *pctime,
//C         const FILETIME *patime,
//C         const FILETIME *pmtime);
HRESULT  IStorage_SetElementTimes_Proxy(IStorage *This, LPCOLESTR pwcsName, FILETIME *pctime, FILETIME *patime, FILETIME *pmtime);
//C     void IStorage_SetElementTimes_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_SetElementTimes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_SetClass_Proxy(
//C         IStorage* This,
//C         const IID *const clsid);
HRESULT  IStorage_SetClass_Proxy(IStorage *This, IID *clsid);
//C     void IStorage_SetClass_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_SetClass_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_SetStateBits_Proxy(
//C         IStorage* This,
//C         DWORD grfStateBits,
//C         DWORD grfMask);
HRESULT  IStorage_SetStateBits_Proxy(IStorage *This, DWORD grfStateBits, DWORD grfMask);
//C     void IStorage_SetStateBits_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_SetStateBits_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_Stat_Proxy(
//C         IStorage* This,
//C         STATSTG *pstatstg,
//C         DWORD grfStatFlag);
HRESULT  IStorage_Stat_Proxy(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);
//C     void IStorage_Stat_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IStorage_Stat_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IStorage_OpenStream_Proxy(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         void *reserved1,
//C         DWORD grfMode,
//C         DWORD reserved2,
//C         IStream **ppstm);
HRESULT  IStorage_OpenStream_Proxy(IStorage *This, LPCOLESTR pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
//C     HRESULT IStorage_OpenStream_Stub(
//C         IStorage* This,
//C         LPCOLESTR pwcsName,
//C         ULONG cbReserved1,
//C         byte *reserved1,
//C         DWORD grfMode,
//C         DWORD reserved2,
//C         IStream **ppstm);
HRESULT  IStorage_OpenStream_Stub(IStorage *This, LPCOLESTR pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
//C     HRESULT IStorage_EnumElements_Proxy(
//C         IStorage* This,
//C         DWORD reserved1,
//C         void *reserved2,
//C         DWORD reserved3,
//C         IEnumSTATSTG **ppenum);
HRESULT  IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
//C     HRESULT IStorage_EnumElements_Stub(
//C         IStorage* This,
//C         DWORD reserved1,
//C         ULONG cbReserved2,
//C         byte *reserved2,
//C         DWORD reserved3,
//C         IEnumSTATSTG **ppenum);
HRESULT  IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
//C       typedef IPersistFile *LPPERSISTFILE;
alias IPersistFile *LPPERSISTFILE;
//C       extern const IID IID_IPersistFile;
extern const IID IID_IPersistFile;
//C       typedef struct IPersistFileVtbl {
//C           HRESULT ( *QueryInterface)(IPersistFile *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPersistFile *This);
//C           ULONG ( *Release)(IPersistFile *This);
//C           HRESULT ( *GetClassID)(IPersistFile *This,CLSID *pClassID);
//C           HRESULT ( *IsDirty)(IPersistFile *This);
//C           HRESULT ( *Load)(IPersistFile *This,LPCOLESTR pszFileName,DWORD dwMode);
//C           HRESULT ( *Save)(IPersistFile *This,LPCOLESTR pszFileName,WINBOOL fRemember);
//C           HRESULT ( *SaveCompleted)(IPersistFile *This,LPCOLESTR pszFileName);
//C           HRESULT ( *GetCurFile)(IPersistFile *This,LPOLESTR *ppszFileName);
//C       } IPersistFileVtbl;
struct IPersistFileVtbl
{
    HRESULT  function(IPersistFile *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPersistFile *This)AddRef;
    ULONG  function(IPersistFile *This)Release;
    HRESULT  function(IPersistFile *This, CLSID *pClassID)GetClassID;
    HRESULT  function(IPersistFile *This)IsDirty;
    HRESULT  function(IPersistFile *This, LPCOLESTR pszFileName, DWORD dwMode)Load;
    HRESULT  function(IPersistFile *This, LPCOLESTR pszFileName, WINBOOL fRemember)Save;
    HRESULT  function(IPersistFile *This, LPCOLESTR pszFileName)SaveCompleted;
    HRESULT  function(IPersistFile *This, LPOLESTR *ppszFileName)GetCurFile;
}
//C       struct IPersistFile {
//C         struct IPersistFileVtbl *lpVtbl;
//C       };
struct IPersistFile
{
    IPersistFileVtbl *lpVtbl;
}
//C       HRESULT IPersistFile_IsDirty_Proxy(IPersistFile *This);
HRESULT  IPersistFile_IsDirty_Proxy(IPersistFile *This);
//C       void IPersistFile_IsDirty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistFile_IsDirty_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistFile_Load_Proxy(IPersistFile *This,LPCOLESTR pszFileName,DWORD dwMode);
HRESULT  IPersistFile_Load_Proxy(IPersistFile *This, LPCOLESTR pszFileName, DWORD dwMode);
//C       void IPersistFile_Load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistFile_Load_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistFile_Save_Proxy(IPersistFile *This,LPCOLESTR pszFileName,WINBOOL fRemember);
HRESULT  IPersistFile_Save_Proxy(IPersistFile *This, LPCOLESTR pszFileName, WINBOOL fRemember);
//C       void IPersistFile_Save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistFile_Save_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistFile_SaveCompleted_Proxy(IPersistFile *This,LPCOLESTR pszFileName);
HRESULT  IPersistFile_SaveCompleted_Proxy(IPersistFile *This, LPCOLESTR pszFileName);
//C       void IPersistFile_SaveCompleted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistFile_SaveCompleted_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistFile_GetCurFile_Proxy(IPersistFile *This,LPOLESTR *ppszFileName);
HRESULT  IPersistFile_GetCurFile_Proxy(IPersistFile *This, LPOLESTR *ppszFileName);
//C       void IPersistFile_GetCurFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistFile_GetCurFile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IPersistStorage *LPPERSISTSTORAGE;
alias IPersistStorage *LPPERSISTSTORAGE;
//C       extern const IID IID_IPersistStorage;
extern const IID IID_IPersistStorage;
//C       typedef struct IPersistStorageVtbl {
//C           HRESULT ( *QueryInterface)(IPersistStorage *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPersistStorage *This);
//C           ULONG ( *Release)(IPersistStorage *This);
//C           HRESULT ( *GetClassID)(IPersistStorage *This,CLSID *pClassID);
//C           HRESULT ( *IsDirty)(IPersistStorage *This);
//C           HRESULT ( *InitNew)(IPersistStorage *This,IStorage *pStg);
//C           HRESULT ( *Load)(IPersistStorage *This,IStorage *pStg);
//C           HRESULT ( *Save)(IPersistStorage *This,IStorage *pStgSave,WINBOOL fSameAsLoad);
//C           HRESULT ( *SaveCompleted)(IPersistStorage *This,IStorage *pStgNew);
//C           HRESULT ( *HandsOffStorage)(IPersistStorage *This);
//C       } IPersistStorageVtbl;
struct IPersistStorageVtbl
{
    HRESULT  function(IPersistStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPersistStorage *This)AddRef;
    ULONG  function(IPersistStorage *This)Release;
    HRESULT  function(IPersistStorage *This, CLSID *pClassID)GetClassID;
    HRESULT  function(IPersistStorage *This)IsDirty;
    HRESULT  function(IPersistStorage *This, IStorage *pStg)InitNew;
    HRESULT  function(IPersistStorage *This, IStorage *pStg)Load;
    HRESULT  function(IPersistStorage *This, IStorage *pStgSave, WINBOOL fSameAsLoad)Save;
    HRESULT  function(IPersistStorage *This, IStorage *pStgNew)SaveCompleted;
    HRESULT  function(IPersistStorage *This)HandsOffStorage;
}
//C       struct IPersistStorage {
//C         struct IPersistStorageVtbl *lpVtbl;
//C       };
struct IPersistStorage
{
    IPersistStorageVtbl *lpVtbl;
}
//C       HRESULT IPersistStorage_IsDirty_Proxy(IPersistStorage *This);
HRESULT  IPersistStorage_IsDirty_Proxy(IPersistStorage *This);
//C       void IPersistStorage_IsDirty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistStorage_IsDirty_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistStorage_InitNew_Proxy(IPersistStorage *This,IStorage *pStg);
HRESULT  IPersistStorage_InitNew_Proxy(IPersistStorage *This, IStorage *pStg);
//C       void IPersistStorage_InitNew_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistStorage_InitNew_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistStorage_Load_Proxy(IPersistStorage *This,IStorage *pStg);
HRESULT  IPersistStorage_Load_Proxy(IPersistStorage *This, IStorage *pStg);
//C       void IPersistStorage_Load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistStorage_Load_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistStorage_Save_Proxy(IPersistStorage *This,IStorage *pStgSave,WINBOOL fSameAsLoad);
HRESULT  IPersistStorage_Save_Proxy(IPersistStorage *This, IStorage *pStgSave, WINBOOL fSameAsLoad);
//C       void IPersistStorage_Save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistStorage_Save_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistStorage_SaveCompleted_Proxy(IPersistStorage *This,IStorage *pStgNew);
HRESULT  IPersistStorage_SaveCompleted_Proxy(IPersistStorage *This, IStorage *pStgNew);
//C       void IPersistStorage_SaveCompleted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistStorage_SaveCompleted_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistStorage_HandsOffStorage_Proxy(IPersistStorage *This);
HRESULT  IPersistStorage_HandsOffStorage_Proxy(IPersistStorage *This);
//C       void IPersistStorage_HandsOffStorage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistStorage_HandsOffStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ILockBytes *LPLOCKBYTES;
alias ILockBytes *LPLOCKBYTES;
//C       extern const IID IID_ILockBytes;
extern const IID IID_ILockBytes;
//C       typedef struct ILockBytesVtbl {
//C           HRESULT ( *QueryInterface)(ILockBytes *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ILockBytes *This);
//C           ULONG ( *Release)(ILockBytes *This);
//C           HRESULT ( *ReadAt)(ILockBytes *This,ULARGE_INTEGER ulOffset,void *pv,ULONG cb,ULONG *pcbRead);
//C           HRESULT ( *WriteAt)(ILockBytes *This,ULARGE_INTEGER ulOffset,const void *pv,ULONG cb,ULONG *pcbWritten);
//C           HRESULT ( *Flush)(ILockBytes *This);
//C           HRESULT ( *SetSize)(ILockBytes *This,ULARGE_INTEGER cb);
//C           HRESULT ( *LockRegion)(ILockBytes *This,ULARGE_INTEGER libOffset,ULARGE_INTEGER cb,DWORD dwLockType);
//C           HRESULT ( *UnlockRegion)(ILockBytes *This,ULARGE_INTEGER libOffset,ULARGE_INTEGER cb,DWORD dwLockType);
//C           HRESULT ( *Stat)(ILockBytes *This,STATSTG *pstatstg,DWORD grfStatFlag);
//C       } ILockBytesVtbl;
struct ILockBytesVtbl
{
    HRESULT  function(ILockBytes *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ILockBytes *This)AddRef;
    ULONG  function(ILockBytes *This)Release;
    HRESULT  function(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)ReadAt;
    HRESULT  function(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbWritten)WriteAt;
    HRESULT  function(ILockBytes *This)Flush;
    HRESULT  function(ILockBytes *This, ULARGE_INTEGER cb)SetSize;
    HRESULT  function(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType)LockRegion;
    HRESULT  function(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType)UnlockRegion;
    HRESULT  function(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag)Stat;
}
//C       struct ILockBytes {
//C         struct ILockBytesVtbl *lpVtbl;
//C       };
struct ILockBytes
{
    ILockBytesVtbl *lpVtbl;
}
//C       HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This,ULARGE_INTEGER ulOffset,byte *pv,ULONG cb,ULONG *pcbRead);
HRESULT  ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead);
//C       void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This,ULARGE_INTEGER ulOffset,const byte *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbWritten);
//C       void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILockBytes_Flush_Proxy(ILockBytes *This);
HRESULT  ILockBytes_Flush_Proxy(ILockBytes *This);
//C       void ILockBytes_Flush_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_Flush_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILockBytes_SetSize_Proxy(ILockBytes *This,ULARGE_INTEGER cb);
HRESULT  ILockBytes_SetSize_Proxy(ILockBytes *This, ULARGE_INTEGER cb);
//C       void ILockBytes_SetSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_SetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILockBytes_LockRegion_Proxy(ILockBytes *This,ULARGE_INTEGER libOffset,ULARGE_INTEGER cb,DWORD dwLockType);
HRESULT  ILockBytes_LockRegion_Proxy(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
//C       void ILockBytes_LockRegion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_LockRegion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILockBytes_UnlockRegion_Proxy(ILockBytes *This,ULARGE_INTEGER libOffset,ULARGE_INTEGER cb,DWORD dwLockType);
HRESULT  ILockBytes_UnlockRegion_Proxy(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
//C       void ILockBytes_UnlockRegion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_UnlockRegion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILockBytes_Stat_Proxy(ILockBytes *This,STATSTG *pstatstg,DWORD grfStatFlag);
HRESULT  ILockBytes_Stat_Proxy(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);
//C       void ILockBytes_Stat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILockBytes_Stat_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IEnumFORMATETC *LPENUMFORMATETC;
alias IEnumFORMATETC *LPENUMFORMATETC;
//C     typedef struct tagDVTARGETDEVICE {
//C         DWORD tdSize;
//C         WORD tdDriverNameOffset;
//C         WORD tdDeviceNameOffset;
//C         WORD tdPortNameOffset;
//C         WORD tdExtDevmodeOffset;
//C         BYTE tdData[1];
//C     } DVTARGETDEVICE;
struct tagDVTARGETDEVICE
{
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE [1]tdData;
}
alias tagDVTARGETDEVICE DVTARGETDEVICE;
//C     typedef CLIPFORMAT *LPCLIPFORMAT;
alias CLIPFORMAT *LPCLIPFORMAT;
//C     typedef struct tagFORMATETC {
//C         CLIPFORMAT cfFormat;
//C         DVTARGETDEVICE *ptd;
//C         DWORD dwAspect;
//C         LONG lindex;
//C         DWORD tymed;
//C     } FORMATETC;
struct tagFORMATETC
{
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
}
alias tagFORMATETC FORMATETC;
//C     typedef struct tagFORMATETC *LPFORMATETC;
alias tagFORMATETC *LPFORMATETC;
//C     extern const GUID IID_IEnumFORMATETC;
extern const GUID IID_IEnumFORMATETC;
//C     typedef struct IEnumFORMATETCVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IEnumFORMATETC* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IEnumFORMATETC* This);
//C         ULONG ( *Release)(
//C             IEnumFORMATETC* This);
//C         HRESULT ( *Next)(
//C             IEnumFORMATETC* This,
//C             ULONG celt,
//C             FORMATETC *rgelt,
//C             ULONG *pceltFetched);
//C         HRESULT ( *Skip)(
//C             IEnumFORMATETC* This,
//C             ULONG celt);
//C         HRESULT ( *Reset)(
//C             IEnumFORMATETC* This);
//C         HRESULT ( *Clone)(
//C             IEnumFORMATETC* This,
//C             IEnumFORMATETC **ppenum);
//C     } IEnumFORMATETCVtbl;
struct IEnumFORMATETCVtbl
{
    HRESULT  function(IEnumFORMATETC *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumFORMATETC *This)AddRef;
    ULONG  function(IEnumFORMATETC *This)Release;
    HRESULT  function(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumFORMATETC *This, ULONG celt)Skip;
    HRESULT  function(IEnumFORMATETC *This)Reset;
    HRESULT  function(IEnumFORMATETC *This, IEnumFORMATETC **ppenum)Clone;
}
//C     struct IEnumFORMATETC {
//C         IEnumFORMATETCVtbl* lpVtbl;
//C     };
struct IEnumFORMATETC
{
    IEnumFORMATETCVtbl *lpVtbl;
}
//C     HRESULT IEnumFORMATETC_RemoteNext_Proxy(
//C         IEnumFORMATETC* This,
//C         ULONG celt,
//C         FORMATETC *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
//C     void IEnumFORMATETC_RemoteNext_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumFORMATETC_Skip_Proxy(
//C         IEnumFORMATETC* This,
//C         ULONG celt);
HRESULT  IEnumFORMATETC_Skip_Proxy(IEnumFORMATETC *This, ULONG celt);
//C     void IEnumFORMATETC_Skip_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumFORMATETC_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumFORMATETC_Reset_Proxy(
//C         IEnumFORMATETC* This);
HRESULT  IEnumFORMATETC_Reset_Proxy(IEnumFORMATETC *This);
//C     void IEnumFORMATETC_Reset_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumFORMATETC_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumFORMATETC_Clone_Proxy(
//C         IEnumFORMATETC* This,
//C         IEnumFORMATETC **ppenum);
HRESULT  IEnumFORMATETC_Clone_Proxy(IEnumFORMATETC *This, IEnumFORMATETC **ppenum);
//C     void IEnumFORMATETC_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumFORMATETC_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumFORMATETC_Next_Proxy(
//C         IEnumFORMATETC* This,
//C         ULONG celt,
//C         FORMATETC *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
//C     HRESULT IEnumFORMATETC_Next_Stub(
//C         IEnumFORMATETC* This,
//C         ULONG celt,
//C         FORMATETC *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
//C     typedef IEnumSTATDATA *LPENUMSTATDATA;
alias IEnumSTATDATA *LPENUMSTATDATA;
//C     typedef enum tagADVF {
//C         ADVF_NODATA = 1,
//C         ADVF_PRIMEFIRST = 2,
//C         ADVF_ONLYONCE = 4,
//C         ADVF_DATAONSTOP = 64,
//C         ADVFCACHE_NOHANDLER = 8,
//C         ADVFCACHE_FORCEBUILTIN = 16,
//C         ADVFCACHE_ONSAVE = 32
//C     } ADVF;
enum tagADVF
{
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32,
}
alias tagADVF ADVF;
//C     typedef struct tagSTATDATA {
//C         FORMATETC formatetc;
//C         DWORD advf;
//C         IAdviseSink *pAdvSink;
//C         DWORD dwConnection;
//C     } STATDATA;
struct tagSTATDATA
{
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
}
alias tagSTATDATA STATDATA;
//C     typedef STATDATA *LPSTATDATA;
alias STATDATA *LPSTATDATA;
//C     extern const GUID IID_IEnumSTATDATA;
extern const GUID IID_IEnumSTATDATA;
//C     typedef struct IEnumSTATDATAVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IEnumSTATDATA* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IEnumSTATDATA* This);
//C         ULONG ( *Release)(
//C             IEnumSTATDATA* This);
//C         HRESULT ( *Next)(
//C             IEnumSTATDATA* This,
//C             ULONG celt,
//C             STATDATA *rgelt,
//C             ULONG *pceltFetched);
//C         HRESULT ( *Skip)(
//C             IEnumSTATDATA* This,
//C             ULONG celt);
//C         HRESULT ( *Reset)(
//C             IEnumSTATDATA* This);
//C         HRESULT ( *Clone)(
//C             IEnumSTATDATA* This,
//C             IEnumSTATDATA **ppenum);
//C     } IEnumSTATDATAVtbl;
struct IEnumSTATDATAVtbl
{
    HRESULT  function(IEnumSTATDATA *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumSTATDATA *This)AddRef;
    ULONG  function(IEnumSTATDATA *This)Release;
    HRESULT  function(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumSTATDATA *This, ULONG celt)Skip;
    HRESULT  function(IEnumSTATDATA *This)Reset;
    HRESULT  function(IEnumSTATDATA *This, IEnumSTATDATA **ppenum)Clone;
}
//C     struct IEnumSTATDATA {
//C         IEnumSTATDATAVtbl* lpVtbl;
//C     };
struct IEnumSTATDATA
{
    IEnumSTATDATAVtbl *lpVtbl;
}
//C     HRESULT IEnumSTATDATA_RemoteNext_Proxy(
//C         IEnumSTATDATA* This,
//C         ULONG celt,
//C         STATDATA *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
//C     void IEnumSTATDATA_RemoteNext_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATDATA_Skip_Proxy(
//C         IEnumSTATDATA* This,
//C         ULONG celt);
HRESULT  IEnumSTATDATA_Skip_Proxy(IEnumSTATDATA *This, ULONG celt);
//C     void IEnumSTATDATA_Skip_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATDATA_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATDATA_Reset_Proxy(
//C         IEnumSTATDATA* This);
HRESULT  IEnumSTATDATA_Reset_Proxy(IEnumSTATDATA *This);
//C     void IEnumSTATDATA_Reset_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATDATA_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATDATA_Clone_Proxy(
//C         IEnumSTATDATA* This,
//C         IEnumSTATDATA **ppenum);
HRESULT  IEnumSTATDATA_Clone_Proxy(IEnumSTATDATA *This, IEnumSTATDATA **ppenum);
//C     void IEnumSTATDATA_Clone_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IEnumSTATDATA_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IEnumSTATDATA_Next_Proxy(
//C         IEnumSTATDATA* This,
//C         ULONG celt,
//C         STATDATA *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
//C     HRESULT IEnumSTATDATA_Next_Stub(
//C         IEnumSTATDATA* This,
//C         ULONG celt,
//C         STATDATA *rgelt,
//C         ULONG *pceltFetched);
HRESULT  IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
//C       typedef IRootStorage *LPROOTSTORAGE;
alias IRootStorage *LPROOTSTORAGE;
//C       extern const IID IID_IRootStorage;
extern const IID IID_IRootStorage;
//C       typedef struct IRootStorageVtbl {
//C           HRESULT ( *QueryInterface)(IRootStorage *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRootStorage *This);
//C           ULONG ( *Release)(IRootStorage *This);
//C           HRESULT ( *SwitchToFile)(IRootStorage *This,LPOLESTR pszFile);
//C       } IRootStorageVtbl;
struct IRootStorageVtbl
{
    HRESULT  function(IRootStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRootStorage *This)AddRef;
    ULONG  function(IRootStorage *This)Release;
    HRESULT  function(IRootStorage *This, LPOLESTR pszFile)SwitchToFile;
}
//C       struct IRootStorage {
//C         struct IRootStorageVtbl *lpVtbl;
//C       };
struct IRootStorage
{
    IRootStorageVtbl *lpVtbl;
}
//C       HRESULT IRootStorage_SwitchToFile_Proxy(IRootStorage *This,LPOLESTR pszFile);
HRESULT  IRootStorage_SwitchToFile_Proxy(IRootStorage *This, LPOLESTR pszFile);
//C       void IRootStorage_SwitchToFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRootStorage_SwitchToFile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IAdviseSink *LPADVISESINK;
alias IAdviseSink *LPADVISESINK;
//C     typedef enum tagTYMED {
//C         TYMED_HGLOBAL = 1,
//C         TYMED_FILE = 2,
//C         TYMED_ISTREAM = 4,
//C         TYMED_ISTORAGE = 8,
//C         TYMED_GDI = 16,
//C         TYMED_MFPICT = 32,
//C         TYMED_ENHMF = 64,
//C         TYMED_NULL = 0
//C     } TYMED;
enum tagTYMED
{
    TYMED_HGLOBAL = 1,
    TYMED_FILE,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0,
}
alias tagTYMED TYMED;
//C     typedef struct tagRemSTGMEDIUM {
//C         DWORD tymed;
//C         DWORD dwHandleType;
//C         ULONG pData;
//C         ULONG pUnkForRelease;
//C         ULONG cbData;
//C         byte data[1];
//C     } RemSTGMEDIUM;
struct tagRemSTGMEDIUM
{
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte [1]data;
}
alias tagRemSTGMEDIUM RemSTGMEDIUM;
//C       typedef struct tagSTGMEDIUM {
//C         DWORD tymed;
//C          union {
//C           HBITMAP hBitmap;
//C           HMETAFILEPICT hMetaFilePict;
//C           HENHMETAFILE hEnhMetaFile;
//C           HGLOBAL hGlobal;
//C           LPOLESTR lpszFileName;
//C           IStream *pstm;
//C           IStorage *pstg;
//C         } ;
union _N183
{
    HBITMAP hBitmap;
    HMETAFILEPICT hMetaFilePict;
    HENHMETAFILE hEnhMetaFile;
    HGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    IStream *pstm;
    IStorage *pstg;
}
//C         IUnknown *pUnkForRelease;
//C       } uSTGMEDIUM;
struct tagSTGMEDIUM
{
    DWORD tymed;
    HBITMAP hBitmap;
    HMETAFILEPICT hMetaFilePict;
    HENHMETAFILE hEnhMetaFile;
    HGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    IStream *pstm;
    IStorage *pstg;
    IUnknown *pUnkForRelease;
}
alias tagSTGMEDIUM uSTGMEDIUM;
//C     typedef struct _GDI_OBJECT {
//C         DWORD ObjectType;
//C         union {
//C             wireHBITMAP hBitmap;
//C             wireHPALETTE hPalette;
//C             wireHGLOBAL hGeneric;
//C         } u;
union _N184
{
    wireHBITMAP hBitmap;
    wireHPALETTE hPalette;
    wireHGLOBAL hGeneric;
}
//C     } GDI_OBJECT;
struct _GDI_OBJECT
{
    DWORD ObjectType;
    _N184 u;
}
alias _GDI_OBJECT GDI_OBJECT;
//C     typedef struct _userSTGMEDIUM {
//C          struct _STGMEDIUM_UNION {
//C             DWORD tymed;
//C             union {
//C                 wireHMETAFILEPICT hMetaFilePict;
//C                 wireHENHMETAFILE hHEnhMetaFile;
//C                 GDI_OBJECT *hGdiHandle;
//C                 wireHGLOBAL hGlobal;
//C                 LPOLESTR lpszFileName;
//C                 BYTE_BLOB *pstm;
//C                 BYTE_BLOB *pstg;
//C             } u;
union _N185
{
    wireHMETAFILEPICT hMetaFilePict;
    wireHENHMETAFILE hHEnhMetaFile;
    GDI_OBJECT *hGdiHandle;
    wireHGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    BYTE_BLOB *pstm;
    BYTE_BLOB *pstg;
}
//C         } ;
struct _STGMEDIUM_UNION
{
    DWORD tymed;
    _N185 u;
}
//C         IUnknown *pUnkForRelease;
//C     } userSTGMEDIUM;
struct _userSTGMEDIUM
{
    IUnknown *pUnkForRelease;
}
alias _userSTGMEDIUM userSTGMEDIUM;
//C     typedef userSTGMEDIUM *wireSTGMEDIUM;
alias userSTGMEDIUM *wireSTGMEDIUM;
//C     typedef uSTGMEDIUM STGMEDIUM;
alias uSTGMEDIUM STGMEDIUM;
//C     typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
alias userSTGMEDIUM *wireASYNC_STGMEDIUM;
//C     typedef STGMEDIUM ASYNC_STGMEDIUM;
alias STGMEDIUM ASYNC_STGMEDIUM;
//C     typedef STGMEDIUM *LPSTGMEDIUM;
alias STGMEDIUM *LPSTGMEDIUM;
//C     typedef struct _userFLAG_STGMEDIUM {
//C         LONG ContextFlags;
//C         LONG fPassOwnership;
//C         userSTGMEDIUM Stgmed;
//C     } userFLAG_STGMEDIUM;
struct _userFLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
}
alias _userFLAG_STGMEDIUM userFLAG_STGMEDIUM;
//C     typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
alias userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
//C     typedef struct _FLAG_STGMEDIUM {
//C         LONG ContextFlags;
//C         LONG fPassOwnership;
//C         STGMEDIUM Stgmed;
//C     } FLAG_STGMEDIUM;
struct _FLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
}
alias _FLAG_STGMEDIUM FLAG_STGMEDIUM;
//C     extern const GUID IID_IAdviseSink;
extern const GUID IID_IAdviseSink;
//C     typedef struct IAdviseSinkVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IAdviseSink* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IAdviseSink* This);
//C         ULONG ( *Release)(
//C             IAdviseSink* This);
//C         void ( *OnDataChange)(
//C             IAdviseSink* This,
//C             FORMATETC *pFormatetc,
//C             STGMEDIUM *pStgmed);
//C         void ( *OnViewChange)(
//C             IAdviseSink* This,
//C             DWORD dwAspect,
//C             LONG lindex);
//C         void ( *OnRename)(
//C             IAdviseSink* This,
//C             IMoniker *pmk);
//C         void ( *OnSave)(
//C             IAdviseSink* This);
//C         void ( *OnClose)(
//C             IAdviseSink* This);
//C     } IAdviseSinkVtbl;
struct IAdviseSinkVtbl
{
    HRESULT  function(IAdviseSink *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAdviseSink *This)AddRef;
    ULONG  function(IAdviseSink *This)Release;
    void  function(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)OnDataChange;
    void  function(IAdviseSink *This, DWORD dwAspect, LONG lindex)OnViewChange;
    void  function(IAdviseSink *This, IMoniker *pmk)OnRename;
    void  function(IAdviseSink *This)OnSave;
    void  function(IAdviseSink *This)OnClose;
}
//C     struct IAdviseSink {
//C         IAdviseSinkVtbl* lpVtbl;
//C     };
struct IAdviseSink
{
    IAdviseSinkVtbl *lpVtbl;
}
//C     HRESULT IAdviseSink_RemoteOnDataChange_Proxy(
//C         IAdviseSink* This,
//C         FORMATETC *pFormatetc,
//C         ASYNC_STGMEDIUM *pStgmed);
HRESULT  IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
//C     void IAdviseSink_RemoteOnDataChange_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IAdviseSink_RemoteOnViewChange_Proxy(
//C         IAdviseSink* This,
//C         DWORD dwAspect,
//C         LONG lindex);
HRESULT  IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex);
//C     void IAdviseSink_RemoteOnViewChange_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IAdviseSink_RemoteOnRename_Proxy(
//C         IAdviseSink* This,
//C         IMoniker *pmk);
HRESULT  IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk);
//C     void IAdviseSink_RemoteOnRename_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IAdviseSink_RemoteOnSave_Proxy(
//C         IAdviseSink* This);
HRESULT  IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This);
//C     void IAdviseSink_RemoteOnSave_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IAdviseSink_RemoteOnClose_Proxy(
//C         IAdviseSink* This);
HRESULT  IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This);
//C     void IAdviseSink_RemoteOnClose_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     void IAdviseSink_OnDataChange_Proxy(
//C         IAdviseSink* This,
//C         FORMATETC *pFormatetc,
//C         STGMEDIUM *pStgmed);
void  IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
//C     HRESULT IAdviseSink_OnDataChange_Stub(
//C         IAdviseSink* This,
//C         FORMATETC *pFormatetc,
//C         ASYNC_STGMEDIUM *pStgmed);
HRESULT  IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
//C     void IAdviseSink_OnViewChange_Proxy(
//C         IAdviseSink* This,
//C         DWORD dwAspect,
//C         LONG lindex);
void  IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex);
//C     HRESULT IAdviseSink_OnViewChange_Stub(
//C         IAdviseSink* This,
//C         DWORD dwAspect,
//C         LONG lindex);
HRESULT  IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex);
//C     void IAdviseSink_OnRename_Proxy(
//C         IAdviseSink* This,
//C         IMoniker *pmk);
void  IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk);
//C     HRESULT IAdviseSink_OnRename_Stub(
//C         IAdviseSink* This,
//C         IMoniker *pmk);
HRESULT  IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk);
//C     void IAdviseSink_OnSave_Proxy(
//C         IAdviseSink* This);
void  IAdviseSink_OnSave_Proxy(IAdviseSink *This);
//C     HRESULT IAdviseSink_OnSave_Stub(
//C         IAdviseSink* This);
HRESULT  IAdviseSink_OnSave_Stub(IAdviseSink *This);
//C     void IAdviseSink_OnClose_Proxy(
//C         IAdviseSink* This);
void  IAdviseSink_OnClose_Proxy(IAdviseSink *This);
//C     HRESULT IAdviseSink_OnClose_Stub(
//C         IAdviseSink* This);
HRESULT  IAdviseSink_OnClose_Stub(IAdviseSink *This);
//C       extern const IID IID_AsyncIAdviseSink;
extern const IID IID_AsyncIAdviseSink;
//C       typedef struct AsyncIAdviseSinkVtbl {
//C           HRESULT ( *QueryInterface)(AsyncIAdviseSink *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(AsyncIAdviseSink *This);
//C           ULONG ( *Release)(AsyncIAdviseSink *This);
//C           void ( *Begin_OnDataChange)(AsyncIAdviseSink *This,FORMATETC *pFormatetc,STGMEDIUM *pStgmed);
//C           void ( *Finish_OnDataChange)(AsyncIAdviseSink *This);
//C           void ( *Begin_OnViewChange)(AsyncIAdviseSink *This,DWORD dwAspect,LONG lindex);
//C           void ( *Finish_OnViewChange)(AsyncIAdviseSink *This);
//C           void ( *Begin_OnRename)(AsyncIAdviseSink *This,IMoniker *pmk);
//C           void ( *Finish_OnRename)(AsyncIAdviseSink *This);
//C           void ( *Begin_OnSave)(AsyncIAdviseSink *This);
//C           void ( *Finish_OnSave)(AsyncIAdviseSink *This);
//C           void ( *Begin_OnClose)(AsyncIAdviseSink *This);
//C           void ( *Finish_OnClose)(AsyncIAdviseSink *This);
//C       } AsyncIAdviseSinkVtbl;
struct AsyncIAdviseSinkVtbl
{
    HRESULT  function(AsyncIAdviseSink *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIAdviseSink *This)AddRef;
    ULONG  function(AsyncIAdviseSink *This)Release;
    void  function(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)Begin_OnDataChange;
    void  function(AsyncIAdviseSink *This)Finish_OnDataChange;
    void  function(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)Begin_OnViewChange;
    void  function(AsyncIAdviseSink *This)Finish_OnViewChange;
    void  function(AsyncIAdviseSink *This, IMoniker *pmk)Begin_OnRename;
    void  function(AsyncIAdviseSink *This)Finish_OnRename;
    void  function(AsyncIAdviseSink *This)Begin_OnSave;
    void  function(AsyncIAdviseSink *This)Finish_OnSave;
    void  function(AsyncIAdviseSink *This)Begin_OnClose;
    void  function(AsyncIAdviseSink *This)Finish_OnClose;
}
//C       struct AsyncIAdviseSink {
//C         struct AsyncIAdviseSinkVtbl *lpVtbl;
//C       };
struct AsyncIAdviseSink
{
    AsyncIAdviseSinkVtbl *lpVtbl;
}
//C       HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This,FORMATETC *pFormatetc,ASYNC_STGMEDIUM *pStgmed);
HRESULT  AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
//C       void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This,DWORD dwAspect,LONG lindex);
HRESULT  AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex);
//C       void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This,IMoniker *pmk);
HRESULT  AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk);
//C       void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IAdviseSink2 *LPADVISESINK2;
alias IAdviseSink2 *LPADVISESINK2;
//C       extern const IID IID_IAdviseSink2;
extern const IID IID_IAdviseSink2;
//C       typedef struct IAdviseSink2Vtbl {
//C           HRESULT ( *QueryInterface)(IAdviseSink2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IAdviseSink2 *This);
//C           ULONG ( *Release)(IAdviseSink2 *This);
//C           void ( *OnDataChange)(IAdviseSink2 *This,FORMATETC *pFormatetc,STGMEDIUM *pStgmed);
//C           void ( *OnViewChange)(IAdviseSink2 *This,DWORD dwAspect,LONG lindex);
//C           void ( *OnRename)(IAdviseSink2 *This,IMoniker *pmk);
//C           void ( *OnSave)(IAdviseSink2 *This);
//C           void ( *OnClose)(IAdviseSink2 *This);
//C           void ( *OnLinkSrcChange)(IAdviseSink2 *This,IMoniker *pmk);
//C       } IAdviseSink2Vtbl;
struct IAdviseSink2Vtbl
{
    HRESULT  function(IAdviseSink2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAdviseSink2 *This)AddRef;
    ULONG  function(IAdviseSink2 *This)Release;
    void  function(IAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)OnDataChange;
    void  function(IAdviseSink2 *This, DWORD dwAspect, LONG lindex)OnViewChange;
    void  function(IAdviseSink2 *This, IMoniker *pmk)OnRename;
    void  function(IAdviseSink2 *This)OnSave;
    void  function(IAdviseSink2 *This)OnClose;
    void  function(IAdviseSink2 *This, IMoniker *pmk)OnLinkSrcChange;
}
//C       struct IAdviseSink2 {
//C         struct IAdviseSink2Vtbl *lpVtbl;
//C       };
struct IAdviseSink2
{
    IAdviseSink2Vtbl *lpVtbl;
}
//C       HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This,IMoniker *pmk);
HRESULT  IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk);
//C       void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_AsyncIAdviseSink2;
extern const IID IID_AsyncIAdviseSink2;
//C       typedef struct AsyncIAdviseSink2Vtbl {
//C           HRESULT ( *QueryInterface)(AsyncIAdviseSink2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(AsyncIAdviseSink2 *This);
//C           ULONG ( *Release)(AsyncIAdviseSink2 *This);
//C           void ( *Begin_OnDataChange)(AsyncIAdviseSink2 *This,FORMATETC *pFormatetc,STGMEDIUM *pStgmed);
//C           void ( *Finish_OnDataChange)(AsyncIAdviseSink2 *This);
//C           void ( *Begin_OnViewChange)(AsyncIAdviseSink2 *This,DWORD dwAspect,LONG lindex);
//C           void ( *Finish_OnViewChange)(AsyncIAdviseSink2 *This);
//C           void ( *Begin_OnRename)(AsyncIAdviseSink2 *This,IMoniker *pmk);
//C           void ( *Finish_OnRename)(AsyncIAdviseSink2 *This);
//C           void ( *Begin_OnSave)(AsyncIAdviseSink2 *This);
//C           void ( *Finish_OnSave)(AsyncIAdviseSink2 *This);
//C           void ( *Begin_OnClose)(AsyncIAdviseSink2 *This);
//C           void ( *Finish_OnClose)(AsyncIAdviseSink2 *This);
//C           void ( *Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *This,IMoniker *pmk);
//C           void ( *Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *This);
//C       } AsyncIAdviseSink2Vtbl;
struct AsyncIAdviseSink2Vtbl
{
    HRESULT  function(AsyncIAdviseSink2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIAdviseSink2 *This)AddRef;
    ULONG  function(AsyncIAdviseSink2 *This)Release;
    void  function(AsyncIAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)Begin_OnDataChange;
    void  function(AsyncIAdviseSink2 *This)Finish_OnDataChange;
    void  function(AsyncIAdviseSink2 *This, DWORD dwAspect, LONG lindex)Begin_OnViewChange;
    void  function(AsyncIAdviseSink2 *This)Finish_OnViewChange;
    void  function(AsyncIAdviseSink2 *This, IMoniker *pmk)Begin_OnRename;
    void  function(AsyncIAdviseSink2 *This)Finish_OnRename;
    void  function(AsyncIAdviseSink2 *This)Begin_OnSave;
    void  function(AsyncIAdviseSink2 *This)Finish_OnSave;
    void  function(AsyncIAdviseSink2 *This)Begin_OnClose;
    void  function(AsyncIAdviseSink2 *This)Finish_OnClose;
    void  function(AsyncIAdviseSink2 *This, IMoniker *pmk)Begin_OnLinkSrcChange;
    void  function(AsyncIAdviseSink2 *This)Finish_OnLinkSrcChange;
}
//C       struct AsyncIAdviseSink2 {
//C         struct AsyncIAdviseSink2Vtbl *lpVtbl;
//C       };
struct AsyncIAdviseSink2
{
    AsyncIAdviseSink2Vtbl *lpVtbl;
}
//C       HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This,IMoniker *pmk);
HRESULT  AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk);
//C       void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This);
HRESULT  AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This);
//C       void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IDataObject *LPDATAOBJECT;
alias IDataObject *LPDATAOBJECT;
//C     typedef enum tagDATADIR {
//C         DATADIR_GET = 1,
//C         DATADIR_SET = 2
//C     } DATADIR;
enum tagDATADIR
{
    DATADIR_GET = 1,
    DATADIR_SET,
}
alias tagDATADIR DATADIR;
//C     extern const GUID IID_IDataObject;
extern const GUID IID_IDataObject;
//C     typedef struct IDataObjectVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IDataObject* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IDataObject* This);
//C         ULONG ( *Release)(
//C             IDataObject* This);
//C         HRESULT ( *GetData)(
//C             IDataObject* This,
//C             FORMATETC *pformatetcIn,
//C             STGMEDIUM *pmedium);
//C         HRESULT ( *GetDataHere)(
//C             IDataObject* This,
//C             FORMATETC *pformatetc,
//C             STGMEDIUM *pmedium);
//C         HRESULT ( *QueryGetData)(
//C             IDataObject* This,
//C             FORMATETC *pformatetc);
//C         HRESULT ( *GetCanonicalFormatEtc)(
//C             IDataObject* This,
//C             FORMATETC *pformatectIn,
//C             FORMATETC *pformatetcOut);
//C         HRESULT ( *SetData)(
//C             IDataObject* This,
//C             FORMATETC *pformatetc,
//C             STGMEDIUM *pmedium,
//C             WINBOOL fRelease);
//C         HRESULT ( *EnumFormatEtc)(
//C             IDataObject* This,
//C             DWORD dwDirection,
//C             IEnumFORMATETC **ppenumFormatEtc);
//C         HRESULT ( *DAdvise)(
//C             IDataObject* This,
//C             FORMATETC *pformatetc,
//C             DWORD advf,
//C             IAdviseSink *pAdvSink,
//C             DWORD *pdwConnection);
//C         HRESULT ( *DUnadvise)(
//C             IDataObject* This,
//C             DWORD dwConnection);
//C         HRESULT ( *EnumDAdvise)(
//C             IDataObject* This,
//C             IEnumSTATDATA **ppenumAdvise);
//C     } IDataObjectVtbl;
struct IDataObjectVtbl
{
    HRESULT  function(IDataObject *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDataObject *This)AddRef;
    ULONG  function(IDataObject *This)Release;
    HRESULT  function(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)GetData;
    HRESULT  function(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)GetDataHere;
    HRESULT  function(IDataObject *This, FORMATETC *pformatetc)QueryGetData;
    HRESULT  function(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut)GetCanonicalFormatEtc;
    HRESULT  function(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, WINBOOL fRelease)SetData;
    HRESULT  function(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc)EnumFormatEtc;
    HRESULT  function(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection)DAdvise;
    HRESULT  function(IDataObject *This, DWORD dwConnection)DUnadvise;
    HRESULT  function(IDataObject *This, IEnumSTATDATA **ppenumAdvise)EnumDAdvise;
}
//C     struct IDataObject {
//C         IDataObjectVtbl* lpVtbl;
//C     };
struct IDataObject
{
    IDataObjectVtbl *lpVtbl;
}
//C     HRESULT IDataObject_RemoteGetData_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetcIn,
//C         STGMEDIUM *pRemoteMedium);
HRESULT  IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium);
//C     void IDataObject_RemoteGetData_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_RemoteGetDataHere_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         STGMEDIUM *pRemoteMedium);
HRESULT  IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium);
//C     void IDataObject_RemoteGetDataHere_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_QueryGetData_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetc);
HRESULT  IDataObject_QueryGetData_Proxy(IDataObject *This, FORMATETC *pformatetc);
//C     void IDataObject_QueryGetData_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_QueryGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_GetCanonicalFormatEtc_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatectIn,
//C         FORMATETC *pformatetcOut);
HRESULT  IDataObject_GetCanonicalFormatEtc_Proxy(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);
//C     void IDataObject_GetCanonicalFormatEtc_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_GetCanonicalFormatEtc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_RemoteSetData_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         FLAG_STGMEDIUM *pmedium,
//C         WINBOOL fRelease);
HRESULT  IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, WINBOOL fRelease);
//C     void IDataObject_RemoteSetData_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_EnumFormatEtc_Proxy(
//C         IDataObject* This,
//C         DWORD dwDirection,
//C         IEnumFORMATETC **ppenumFormatEtc);
HRESULT  IDataObject_EnumFormatEtc_Proxy(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);
//C     void IDataObject_EnumFormatEtc_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_EnumFormatEtc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_DAdvise_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         DWORD advf,
//C         IAdviseSink *pAdvSink,
//C         DWORD *pdwConnection);
HRESULT  IDataObject_DAdvise_Proxy(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);
//C     void IDataObject_DAdvise_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_DAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_DUnadvise_Proxy(
//C         IDataObject* This,
//C         DWORD dwConnection);
HRESULT  IDataObject_DUnadvise_Proxy(IDataObject *This, DWORD dwConnection);
//C     void IDataObject_DUnadvise_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_DUnadvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_EnumDAdvise_Proxy(
//C         IDataObject* This,
//C         IEnumSTATDATA **ppenumAdvise);
HRESULT  IDataObject_EnumDAdvise_Proxy(IDataObject *This, IEnumSTATDATA **ppenumAdvise);
//C     void IDataObject_EnumDAdvise_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDataObject_EnumDAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDataObject_GetData_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetcIn,
//C         STGMEDIUM *pmedium);
HRESULT  IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);
//C     HRESULT IDataObject_GetData_Stub(
//C         IDataObject* This,
//C         FORMATETC *pformatetcIn,
//C         STGMEDIUM *pRemoteMedium);
HRESULT  IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium);
//C     HRESULT IDataObject_GetDataHere_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         STGMEDIUM *pmedium);
HRESULT  IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium);
//C     HRESULT IDataObject_GetDataHere_Stub(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         STGMEDIUM *pRemoteMedium);
HRESULT  IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium);
//C     HRESULT IDataObject_SetData_Proxy(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         STGMEDIUM *pmedium,
//C         WINBOOL fRelease);
HRESULT  IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, WINBOOL fRelease);
//C     HRESULT IDataObject_SetData_Stub(
//C         IDataObject* This,
//C         FORMATETC *pformatetc,
//C         FLAG_STGMEDIUM *pmedium,
//C         WINBOOL fRelease);
HRESULT  IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, WINBOOL fRelease);
//C       typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
alias IDataAdviseHolder *LPDATAADVISEHOLDER;
//C       extern const IID IID_IDataAdviseHolder;
extern const IID IID_IDataAdviseHolder;
//C       typedef struct IDataAdviseHolderVtbl {
//C           HRESULT ( *QueryInterface)(IDataAdviseHolder *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IDataAdviseHolder *This);
//C           ULONG ( *Release)(IDataAdviseHolder *This);
//C           HRESULT ( *Advise)(IDataAdviseHolder *This,IDataObject *pDataObject,FORMATETC *pFetc,DWORD advf,IAdviseSink *pAdvise,DWORD *pdwConnection);
//C           HRESULT ( *Unadvise)(IDataAdviseHolder *This,DWORD dwConnection);
//C           HRESULT ( *EnumAdvise)(IDataAdviseHolder *This,IEnumSTATDATA **ppenumAdvise);
//C           HRESULT ( *SendOnDataChange)(IDataAdviseHolder *This,IDataObject *pDataObject,DWORD dwReserved,DWORD advf);
//C       } IDataAdviseHolderVtbl;
struct IDataAdviseHolderVtbl
{
    HRESULT  function(IDataAdviseHolder *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDataAdviseHolder *This)AddRef;
    ULONG  function(IDataAdviseHolder *This)Release;
    HRESULT  function(IDataAdviseHolder *This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection)Advise;
    HRESULT  function(IDataAdviseHolder *This, DWORD dwConnection)Unadvise;
    HRESULT  function(IDataAdviseHolder *This, IEnumSTATDATA **ppenumAdvise)EnumAdvise;
    HRESULT  function(IDataAdviseHolder *This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf)SendOnDataChange;
}
//C       struct IDataAdviseHolder {
//C         struct IDataAdviseHolderVtbl *lpVtbl;
//C       };
struct IDataAdviseHolder
{
    IDataAdviseHolderVtbl *lpVtbl;
}
//C       HRESULT IDataAdviseHolder_Advise_Proxy(IDataAdviseHolder *This,IDataObject *pDataObject,FORMATETC *pFetc,DWORD advf,IAdviseSink *pAdvise,DWORD *pdwConnection);
HRESULT  IDataAdviseHolder_Advise_Proxy(IDataAdviseHolder *This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection);
//C       void IDataAdviseHolder_Advise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataAdviseHolder_Advise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDataAdviseHolder_Unadvise_Proxy(IDataAdviseHolder *This,DWORD dwConnection);
HRESULT  IDataAdviseHolder_Unadvise_Proxy(IDataAdviseHolder *This, DWORD dwConnection);
//C       void IDataAdviseHolder_Unadvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataAdviseHolder_Unadvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDataAdviseHolder_EnumAdvise_Proxy(IDataAdviseHolder *This,IEnumSTATDATA **ppenumAdvise);
HRESULT  IDataAdviseHolder_EnumAdvise_Proxy(IDataAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);
//C       void IDataAdviseHolder_EnumAdvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataAdviseHolder_EnumAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDataAdviseHolder_SendOnDataChange_Proxy(IDataAdviseHolder *This,IDataObject *pDataObject,DWORD dwReserved,DWORD advf);
HRESULT  IDataAdviseHolder_SendOnDataChange_Proxy(IDataAdviseHolder *This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf);
//C       void IDataAdviseHolder_SendOnDataChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataAdviseHolder_SendOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IMessageFilter *LPMESSAGEFILTER;
alias IMessageFilter *LPMESSAGEFILTER;
//C       typedef enum tagCALLTYPE {
//C         CALLTYPE_TOPLEVEL = 1,CALLTYPE_NESTED = 2,CALLTYPE_ASYNC = 3,CALLTYPE_TOPLEVEL_CALLPENDING = 4,CALLTYPE_ASYNC_CALLPENDING = 5
//C       } CALLTYPE;
enum tagCALLTYPE
{
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED,
    CALLTYPE_ASYNC,
    CALLTYPE_TOPLEVEL_CALLPENDING,
    CALLTYPE_ASYNC_CALLPENDING,
}
alias tagCALLTYPE CALLTYPE;
//C       typedef enum tagSERVERCALL {
//C         SERVERCALL_ISHANDLED = 0,SERVERCALL_REJECTED = 1,SERVERCALL_RETRYLATER = 2
//C       } SERVERCALL;
enum tagSERVERCALL
{
    SERVERCALL_ISHANDLED,
    SERVERCALL_REJECTED,
    SERVERCALL_RETRYLATER,
}
alias tagSERVERCALL SERVERCALL;
//C       typedef enum tagPENDINGTYPE {
//C         PENDINGTYPE_TOPLEVEL = 1,PENDINGTYPE_NESTED = 2
//C       } PENDINGTYPE;
enum tagPENDINGTYPE
{
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED,
}
alias tagPENDINGTYPE PENDINGTYPE;
//C       typedef enum tagPENDINGMSG {
//C         PENDINGMSG_CANCELCALL = 0,PENDINGMSG_WAITNOPROCESS = 1,PENDINGMSG_WAITDEFPROCESS = 2
//C       } PENDINGMSG;
enum tagPENDINGMSG
{
    PENDINGMSG_CANCELCALL,
    PENDINGMSG_WAITNOPROCESS,
    PENDINGMSG_WAITDEFPROCESS,
}
alias tagPENDINGMSG PENDINGMSG;
//C       typedef struct tagINTERFACEINFO {
//C         IUnknown *pUnk;
//C         IID iid;
//C         WORD wMethod;
//C       } INTERFACEINFO;
struct tagINTERFACEINFO
{
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
}
alias tagINTERFACEINFO INTERFACEINFO;
//C       typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
alias tagINTERFACEINFO *LPINTERFACEINFO;
//C       extern const IID IID_IMessageFilter;
extern const IID IID_IMessageFilter;
//C       typedef struct IMessageFilterVtbl {
//C           HRESULT ( *QueryInterface)(IMessageFilter *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMessageFilter *This);
//C           ULONG ( *Release)(IMessageFilter *This);
//C           DWORD ( *HandleInComingCall)(IMessageFilter *This,DWORD dwCallType,HTASK htaskCaller,DWORD dwTickCount,LPINTERFACEINFO lpInterfaceInfo);
//C           DWORD ( *RetryRejectedCall)(IMessageFilter *This,HTASK htaskCallee,DWORD dwTickCount,DWORD dwRejectType);
//C           DWORD ( *MessagePending)(IMessageFilter *This,HTASK htaskCallee,DWORD dwTickCount,DWORD dwPendingType);
//C       } IMessageFilterVtbl;
struct IMessageFilterVtbl
{
    HRESULT  function(IMessageFilter *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMessageFilter *This)AddRef;
    ULONG  function(IMessageFilter *This)Release;
    DWORD  function(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo)HandleInComingCall;
    DWORD  function(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType)RetryRejectedCall;
    DWORD  function(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType)MessagePending;
}
//C       struct IMessageFilter {
//C         struct IMessageFilterVtbl *lpVtbl;
//C       };
struct IMessageFilter
{
    IMessageFilterVtbl *lpVtbl;
}
//C       DWORD IMessageFilter_HandleInComingCall_Proxy(IMessageFilter *This,DWORD dwCallType,HTASK htaskCaller,DWORD dwTickCount,LPINTERFACEINFO lpInterfaceInfo);
DWORD  IMessageFilter_HandleInComingCall_Proxy(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);
//C       void IMessageFilter_HandleInComingCall_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMessageFilter_HandleInComingCall_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       DWORD IMessageFilter_RetryRejectedCall_Proxy(IMessageFilter *This,HTASK htaskCallee,DWORD dwTickCount,DWORD dwRejectType);
DWORD  IMessageFilter_RetryRejectedCall_Proxy(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);
//C       void IMessageFilter_RetryRejectedCall_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMessageFilter_RetryRejectedCall_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       DWORD IMessageFilter_MessagePending_Proxy(IMessageFilter *This,HTASK htaskCallee,DWORD dwTickCount,DWORD dwPendingType);
DWORD  IMessageFilter_MessagePending_Proxy(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);
//C       void IMessageFilter_MessagePending_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMessageFilter_MessagePending_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ULONG RPCOLEDATAREP;
alias ULONG RPCOLEDATAREP;
//C       typedef struct tagRPCOLEMESSAGE {
//C         void *reserved1;
//C         RPCOLEDATAREP dataRepresentation;
//C         void *Buffer;
//C         ULONG cbBuffer;
//C         ULONG iMethod;
//C         void *reserved2[5 ];
//C         ULONG rpcFlags;
//C       } RPCOLEMESSAGE;
struct tagRPCOLEMESSAGE
{
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *[5]reserved2;
    ULONG rpcFlags;
}
alias tagRPCOLEMESSAGE RPCOLEMESSAGE;
//C       typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
alias RPCOLEMESSAGE *PRPCOLEMESSAGE;
//C       extern const IID IID_IRpcChannelBuffer;
extern const IID IID_IRpcChannelBuffer;
//C       typedef struct IRpcChannelBufferVtbl {
//C           HRESULT ( *QueryInterface)(IRpcChannelBuffer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcChannelBuffer *This);
//C           ULONG ( *Release)(IRpcChannelBuffer *This);
//C           HRESULT ( *GetBuffer)(IRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage,const IID *const riid);
//C           HRESULT ( *SendReceive)(IRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage,ULONG *pStatus);
//C           HRESULT ( *FreeBuffer)(IRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage);
//C           HRESULT ( *GetDestCtx)(IRpcChannelBuffer *This,DWORD *pdwDestContext,void **ppvDestContext);
//C           HRESULT ( *IsConnected)(IRpcChannelBuffer *This);
//C       } IRpcChannelBufferVtbl;
struct IRpcChannelBufferVtbl
{
    HRESULT  function(IRpcChannelBuffer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcChannelBuffer *This)AddRef;
    ULONG  function(IRpcChannelBuffer *This)Release;
    HRESULT  function(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, IID *riid)GetBuffer;
    HRESULT  function(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus)SendReceive;
    HRESULT  function(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage)FreeBuffer;
    HRESULT  function(IRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext)GetDestCtx;
    HRESULT  function(IRpcChannelBuffer *This)IsConnected;
}
//C       struct IRpcChannelBuffer {
//C         struct IRpcChannelBufferVtbl *lpVtbl;
//C       };
struct IRpcChannelBuffer
{
    IRpcChannelBufferVtbl *lpVtbl;
}
//C       HRESULT IRpcChannelBuffer_GetBuffer_Proxy(IRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage,const IID *const riid);
HRESULT  IRpcChannelBuffer_GetBuffer_Proxy(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, IID *riid);
//C       void IRpcChannelBuffer_GetBuffer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer_GetBuffer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer_SendReceive_Proxy(IRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage,ULONG *pStatus);
HRESULT  IRpcChannelBuffer_SendReceive_Proxy(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);
//C       void IRpcChannelBuffer_SendReceive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer_SendReceive_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer_FreeBuffer_Proxy(IRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage);
HRESULT  IRpcChannelBuffer_FreeBuffer_Proxy(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);
//C       void IRpcChannelBuffer_FreeBuffer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer_FreeBuffer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer_GetDestCtx_Proxy(IRpcChannelBuffer *This,DWORD *pdwDestContext,void **ppvDestContext);
HRESULT  IRpcChannelBuffer_GetDestCtx_Proxy(IRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);
//C       void IRpcChannelBuffer_GetDestCtx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer_GetDestCtx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer_IsConnected_Proxy(IRpcChannelBuffer *This);
HRESULT  IRpcChannelBuffer_IsConnected_Proxy(IRpcChannelBuffer *This);
//C       void IRpcChannelBuffer_IsConnected_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer_IsConnected_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcChannelBuffer2;
extern const IID IID_IRpcChannelBuffer2;
//C       typedef struct IRpcChannelBuffer2Vtbl {
//C           HRESULT ( *QueryInterface)(IRpcChannelBuffer2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcChannelBuffer2 *This);
//C           ULONG ( *Release)(IRpcChannelBuffer2 *This);
//C           HRESULT ( *GetBuffer)(IRpcChannelBuffer2 *This,RPCOLEMESSAGE *pMessage,const IID *const riid);
//C           HRESULT ( *SendReceive)(IRpcChannelBuffer2 *This,RPCOLEMESSAGE *pMessage,ULONG *pStatus);
//C           HRESULT ( *FreeBuffer)(IRpcChannelBuffer2 *This,RPCOLEMESSAGE *pMessage);
//C           HRESULT ( *GetDestCtx)(IRpcChannelBuffer2 *This,DWORD *pdwDestContext,void **ppvDestContext);
//C           HRESULT ( *IsConnected)(IRpcChannelBuffer2 *This);
//C           HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer2 *This,DWORD *pdwVersion);
//C       } IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer2Vtbl
{
    HRESULT  function(IRpcChannelBuffer2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcChannelBuffer2 *This)AddRef;
    ULONG  function(IRpcChannelBuffer2 *This)Release;
    HRESULT  function(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, IID *riid)GetBuffer;
    HRESULT  function(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus)SendReceive;
    HRESULT  function(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage)FreeBuffer;
    HRESULT  function(IRpcChannelBuffer2 *This, DWORD *pdwDestContext, void **ppvDestContext)GetDestCtx;
    HRESULT  function(IRpcChannelBuffer2 *This)IsConnected;
    HRESULT  function(IRpcChannelBuffer2 *This, DWORD *pdwVersion)GetProtocolVersion;
}
//C       struct IRpcChannelBuffer2 {
//C         struct IRpcChannelBuffer2Vtbl *lpVtbl;
//C       };
struct IRpcChannelBuffer2
{
    IRpcChannelBuffer2Vtbl *lpVtbl;
}
//C       HRESULT IRpcChannelBuffer2_GetProtocolVersion_Proxy(IRpcChannelBuffer2 *This,DWORD *pdwVersion);
HRESULT  IRpcChannelBuffer2_GetProtocolVersion_Proxy(IRpcChannelBuffer2 *This, DWORD *pdwVersion);
//C       void IRpcChannelBuffer2_GetProtocolVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer2_GetProtocolVersion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IAsyncRpcChannelBuffer;
extern const IID IID_IAsyncRpcChannelBuffer;
//C       typedef struct IAsyncRpcChannelBufferVtbl {
//C           HRESULT ( *QueryInterface)(IAsyncRpcChannelBuffer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IAsyncRpcChannelBuffer *This);
//C           ULONG ( *Release)(IAsyncRpcChannelBuffer *This);
//C           HRESULT ( *GetBuffer)(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage,const IID *const riid);
//C           HRESULT ( *SendReceive)(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage,ULONG *pStatus);
//C           HRESULT ( *FreeBuffer)(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMessage);
//C           HRESULT ( *GetDestCtx)(IAsyncRpcChannelBuffer *This,DWORD *pdwDestContext,void **ppvDestContext);
//C           HRESULT ( *IsConnected)(IAsyncRpcChannelBuffer *This);
//C           HRESULT ( *GetProtocolVersion)(IAsyncRpcChannelBuffer *This,DWORD *pdwVersion);
//C           HRESULT ( *Send)(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMsg,ISynchronize *pSync,ULONG *pulStatus);
//C           HRESULT ( *Receive)(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMsg,ULONG *pulStatus);
//C           HRESULT ( *GetDestCtxEx)(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMsg,DWORD *pdwDestContext,void **ppvDestContext);
//C       } IAsyncRpcChannelBufferVtbl;
struct IAsyncRpcChannelBufferVtbl
{
    HRESULT  function(IAsyncRpcChannelBuffer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAsyncRpcChannelBuffer *This)AddRef;
    ULONG  function(IAsyncRpcChannelBuffer *This)Release;
    HRESULT  function(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, IID *riid)GetBuffer;
    HRESULT  function(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus)SendReceive;
    HRESULT  function(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage)FreeBuffer;
    HRESULT  function(IAsyncRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext)GetDestCtx;
    HRESULT  function(IAsyncRpcChannelBuffer *This)IsConnected;
    HRESULT  function(IAsyncRpcChannelBuffer *This, DWORD *pdwVersion)GetProtocolVersion;
    HRESULT  function(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ISynchronize *pSync, ULONG *pulStatus)Send;
    HRESULT  function(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus)Receive;
    HRESULT  function(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext)GetDestCtxEx;
}
//C       struct IAsyncRpcChannelBuffer {
//C         struct IAsyncRpcChannelBufferVtbl *lpVtbl;
//C       };
struct IAsyncRpcChannelBuffer
{
    IAsyncRpcChannelBufferVtbl *lpVtbl;
}
//C       HRESULT IAsyncRpcChannelBuffer_Send_Proxy(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMsg,ISynchronize *pSync,ULONG *pulStatus);
HRESULT  IAsyncRpcChannelBuffer_Send_Proxy(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ISynchronize *pSync, ULONG *pulStatus);
//C       void IAsyncRpcChannelBuffer_Send_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAsyncRpcChannelBuffer_Send_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IAsyncRpcChannelBuffer_Receive_Proxy(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMsg,ULONG *pulStatus);
HRESULT  IAsyncRpcChannelBuffer_Receive_Proxy(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);
//C       void IAsyncRpcChannelBuffer_Receive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAsyncRpcChannelBuffer_Receive_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(IAsyncRpcChannelBuffer *This,RPCOLEMESSAGE *pMsg,DWORD *pdwDestContext,void **ppvDestContext);
HRESULT  IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);
//C       void IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcChannelBuffer3;
extern const IID IID_IRpcChannelBuffer3;
//C       typedef struct IRpcChannelBuffer3Vtbl {
//C           HRESULT ( *QueryInterface)(IRpcChannelBuffer3 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcChannelBuffer3 *This);
//C           ULONG ( *Release)(IRpcChannelBuffer3 *This);
//C           HRESULT ( *GetBuffer)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMessage,const IID *const riid);
//C           HRESULT ( *SendReceive)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMessage,ULONG *pStatus);
//C           HRESULT ( *FreeBuffer)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMessage);
//C           HRESULT ( *GetDestCtx)(IRpcChannelBuffer3 *This,DWORD *pdwDestContext,void **ppvDestContext);
//C           HRESULT ( *IsConnected)(IRpcChannelBuffer3 *This);
//C           HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer3 *This,DWORD *pdwVersion);
//C           HRESULT ( *Send)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,ULONG *pulStatus);
//C           HRESULT ( *Receive)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,ULONG ulSize,ULONG *pulStatus);
//C           HRESULT ( *Cancel)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg);
//C           HRESULT ( *GetCallContext)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,const IID *const riid,void **pInterface);
//C           HRESULT ( *GetDestCtxEx)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,DWORD *pdwDestContext,void **ppvDestContext);
//C           HRESULT ( *GetState)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,DWORD *pState);
//C           HRESULT ( *RegisterAsync)(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,IAsyncManager *pAsyncMgr);
//C       } IRpcChannelBuffer3Vtbl;
struct IRpcChannelBuffer3Vtbl
{
    HRESULT  function(IRpcChannelBuffer3 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcChannelBuffer3 *This)AddRef;
    ULONG  function(IRpcChannelBuffer3 *This)Release;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage, IID *riid)GetBuffer;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus)SendReceive;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage)FreeBuffer;
    HRESULT  function(IRpcChannelBuffer3 *This, DWORD *pdwDestContext, void **ppvDestContext)GetDestCtx;
    HRESULT  function(IRpcChannelBuffer3 *This)IsConnected;
    HRESULT  function(IRpcChannelBuffer3 *This, DWORD *pdwVersion)GetProtocolVersion;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus)Send;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG ulSize, ULONG *pulStatus)Receive;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg)Cancel;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IID *riid, void **pInterface)GetCallContext;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext)GetDestCtxEx;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pState)GetState;
    HRESULT  function(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IAsyncManager *pAsyncMgr)RegisterAsync;
}
//C       struct IRpcChannelBuffer3 {
//C         struct IRpcChannelBuffer3Vtbl *lpVtbl;
//C       };
struct IRpcChannelBuffer3
{
    IRpcChannelBuffer3Vtbl *lpVtbl;
}
//C       HRESULT IRpcChannelBuffer3_Send_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,ULONG *pulStatus);
HRESULT  IRpcChannelBuffer3_Send_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);
//C       void IRpcChannelBuffer3_Send_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_Send_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer3_Receive_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,ULONG ulSize,ULONG *pulStatus);
HRESULT  IRpcChannelBuffer3_Receive_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG ulSize, ULONG *pulStatus);
//C       void IRpcChannelBuffer3_Receive_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_Receive_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer3_Cancel_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg);
HRESULT  IRpcChannelBuffer3_Cancel_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg);
//C       void IRpcChannelBuffer3_Cancel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_Cancel_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer3_GetCallContext_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,const IID *const riid,void **pInterface);
HRESULT  IRpcChannelBuffer3_GetCallContext_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IID *riid, void **pInterface);
//C       void IRpcChannelBuffer3_GetCallContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_GetCallContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer3_GetDestCtxEx_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,DWORD *pdwDestContext,void **ppvDestContext);
HRESULT  IRpcChannelBuffer3_GetDestCtxEx_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);
//C       void IRpcChannelBuffer3_GetDestCtxEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_GetDestCtxEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer3_GetState_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,DWORD *pState);
HRESULT  IRpcChannelBuffer3_GetState_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pState);
//C       void IRpcChannelBuffer3_GetState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_GetState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcChannelBuffer3_RegisterAsync_Proxy(IRpcChannelBuffer3 *This,RPCOLEMESSAGE *pMsg,IAsyncManager *pAsyncMgr);
HRESULT  IRpcChannelBuffer3_RegisterAsync_Proxy(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IAsyncManager *pAsyncMgr);
//C       void IRpcChannelBuffer3_RegisterAsync_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcChannelBuffer3_RegisterAsync_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcSyntaxNegotiate;
extern const IID IID_IRpcSyntaxNegotiate;
//C       typedef struct IRpcSyntaxNegotiateVtbl {
//C           HRESULT ( *QueryInterface)(IRpcSyntaxNegotiate *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcSyntaxNegotiate *This);
//C           ULONG ( *Release)(IRpcSyntaxNegotiate *This);
//C           HRESULT ( *NegotiateSyntax)(IRpcSyntaxNegotiate *This,RPCOLEMESSAGE *pMsg);
//C       } IRpcSyntaxNegotiateVtbl;
struct IRpcSyntaxNegotiateVtbl
{
    HRESULT  function(IRpcSyntaxNegotiate *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcSyntaxNegotiate *This)AddRef;
    ULONG  function(IRpcSyntaxNegotiate *This)Release;
    HRESULT  function(IRpcSyntaxNegotiate *This, RPCOLEMESSAGE *pMsg)NegotiateSyntax;
}
//C       struct IRpcSyntaxNegotiate {
//C         struct IRpcSyntaxNegotiateVtbl *lpVtbl;
//C       };
struct IRpcSyntaxNegotiate
{
    IRpcSyntaxNegotiateVtbl *lpVtbl;
}
//C       HRESULT IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(IRpcSyntaxNegotiate *This,RPCOLEMESSAGE *pMsg);
HRESULT  IRpcSyntaxNegotiate_NegotiateSyntax_Proxy(IRpcSyntaxNegotiate *This, RPCOLEMESSAGE *pMsg);
//C       void IRpcSyntaxNegotiate_NegotiateSyntax_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcSyntaxNegotiate_NegotiateSyntax_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcProxyBuffer;
extern const IID IID_IRpcProxyBuffer;
//C       typedef struct IRpcProxyBufferVtbl {
//C           HRESULT ( *QueryInterface)(IRpcProxyBuffer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcProxyBuffer *This);
//C           ULONG ( *Release)(IRpcProxyBuffer *This);
//C           HRESULT ( *Connect)(IRpcProxyBuffer *This,IRpcChannelBuffer *pRpcChannelBuffer);
//C           void ( *Disconnect)(IRpcProxyBuffer *This);
//C       } IRpcProxyBufferVtbl;
struct IRpcProxyBufferVtbl
{
    HRESULT  function(IRpcProxyBuffer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcProxyBuffer *This)AddRef;
    ULONG  function(IRpcProxyBuffer *This)Release;
    HRESULT  function(IRpcProxyBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer)Connect;
    void  function(IRpcProxyBuffer *This)Disconnect;
}
//C       struct IRpcProxyBuffer {
//C         struct IRpcProxyBufferVtbl *lpVtbl;
//C       };
struct IRpcProxyBuffer
{
    IRpcProxyBufferVtbl *lpVtbl;
}
//C       HRESULT IRpcProxyBuffer_Connect_Proxy(IRpcProxyBuffer *This,IRpcChannelBuffer *pRpcChannelBuffer);
HRESULT  IRpcProxyBuffer_Connect_Proxy(IRpcProxyBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer);
//C       void IRpcProxyBuffer_Connect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcProxyBuffer_Connect_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IRpcProxyBuffer_Disconnect_Proxy(IRpcProxyBuffer *This);
void  IRpcProxyBuffer_Disconnect_Proxy(IRpcProxyBuffer *This);
//C       void IRpcProxyBuffer_Disconnect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcProxyBuffer_Disconnect_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcStubBuffer;
extern const IID IID_IRpcStubBuffer;
//C       typedef struct IRpcStubBufferVtbl {
//C           HRESULT ( *QueryInterface)(IRpcStubBuffer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcStubBuffer *This);
//C           ULONG ( *Release)(IRpcStubBuffer *This);
//C           HRESULT ( *Connect)(IRpcStubBuffer *This,IUnknown *pUnkServer);
//C           void ( *Disconnect)(IRpcStubBuffer *This);
//C           HRESULT ( *Invoke)(IRpcStubBuffer *This,RPCOLEMESSAGE *_prpcmsg,IRpcChannelBuffer *_pRpcChannelBuffer);
//C           IRpcStubBuffer *( *IsIIDSupported)(IRpcStubBuffer *This,const IID *const riid);
//C           ULONG ( *CountRefs)(IRpcStubBuffer *This);
//C           HRESULT ( *DebugServerQueryInterface)(IRpcStubBuffer *This,void **ppv);
//C           void ( *DebugServerRelease)(IRpcStubBuffer *This,void *pv);
//C       } IRpcStubBufferVtbl;
struct IRpcStubBufferVtbl
{
    HRESULT  function(IRpcStubBuffer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcStubBuffer *This)AddRef;
    ULONG  function(IRpcStubBuffer *This)Release;
    HRESULT  function(IRpcStubBuffer *This, IUnknown *pUnkServer)Connect;
    void  function(IRpcStubBuffer *This)Disconnect;
    HRESULT  function(IRpcStubBuffer *This, RPCOLEMESSAGE *_prpcmsg, IRpcChannelBuffer *_pRpcChannelBuffer)Invoke;
    IRpcStubBuffer * function(IRpcStubBuffer *This, IID *riid)IsIIDSupported;
    ULONG  function(IRpcStubBuffer *This)CountRefs;
    HRESULT  function(IRpcStubBuffer *This, void **ppv)DebugServerQueryInterface;
    void  function(IRpcStubBuffer *This, void *pv)DebugServerRelease;
}
//C       struct IRpcStubBuffer {
//C         struct IRpcStubBufferVtbl *lpVtbl;
//C       };
struct IRpcStubBuffer
{
    IRpcStubBufferVtbl *lpVtbl;
}
//C       HRESULT IRpcStubBuffer_Connect_Proxy(IRpcStubBuffer *This,IUnknown *pUnkServer);
HRESULT  IRpcStubBuffer_Connect_Proxy(IRpcStubBuffer *This, IUnknown *pUnkServer);
//C       void IRpcStubBuffer_Connect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_Connect_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IRpcStubBuffer_Disconnect_Proxy(IRpcStubBuffer *This);
void  IRpcStubBuffer_Disconnect_Proxy(IRpcStubBuffer *This);
//C       void IRpcStubBuffer_Disconnect_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_Disconnect_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcStubBuffer_Invoke_Proxy(IRpcStubBuffer *This,RPCOLEMESSAGE *_prpcmsg,IRpcChannelBuffer *_pRpcChannelBuffer);
HRESULT  IRpcStubBuffer_Invoke_Proxy(IRpcStubBuffer *This, RPCOLEMESSAGE *_prpcmsg, IRpcChannelBuffer *_pRpcChannelBuffer);
//C       void IRpcStubBuffer_Invoke_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_Invoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       IRpcStubBuffer * IRpcStubBuffer_IsIIDSupported_Proxy(IRpcStubBuffer *This,const IID *const riid);
IRpcStubBuffer * IRpcStubBuffer_IsIIDSupported_Proxy(IRpcStubBuffer *This, IID *riid);
//C       void IRpcStubBuffer_IsIIDSupported_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_IsIIDSupported_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       ULONG IRpcStubBuffer_CountRefs_Proxy(IRpcStubBuffer *This);
ULONG  IRpcStubBuffer_CountRefs_Proxy(IRpcStubBuffer *This);
//C       void IRpcStubBuffer_CountRefs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_CountRefs_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcStubBuffer_DebugServerQueryInterface_Proxy(IRpcStubBuffer *This,void **ppv);
HRESULT  IRpcStubBuffer_DebugServerQueryInterface_Proxy(IRpcStubBuffer *This, void **ppv);
//C       void IRpcStubBuffer_DebugServerQueryInterface_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_DebugServerQueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IRpcStubBuffer_DebugServerRelease_Proxy(IRpcStubBuffer *This,void *pv);
void  IRpcStubBuffer_DebugServerRelease_Proxy(IRpcStubBuffer *This, void *pv);
//C       void IRpcStubBuffer_DebugServerRelease_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcStubBuffer_DebugServerRelease_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IPSFactoryBuffer;
extern const IID IID_IPSFactoryBuffer;
//C       typedef struct IPSFactoryBufferVtbl {
//C           HRESULT ( *QueryInterface)(IPSFactoryBuffer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPSFactoryBuffer *This);
//C           ULONG ( *Release)(IPSFactoryBuffer *This);
//C           HRESULT ( *CreateProxy)(IPSFactoryBuffer *This,IUnknown *pUnkOuter,const IID *const riid,IRpcProxyBuffer **ppProxy,void **ppv);
//C           HRESULT ( *CreateStub)(IPSFactoryBuffer *This,const IID *const riid,IUnknown *pUnkServer,IRpcStubBuffer **ppStub);
//C       } IPSFactoryBufferVtbl;
struct IPSFactoryBufferVtbl
{
    HRESULT  function(IPSFactoryBuffer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPSFactoryBuffer *This)AddRef;
    ULONG  function(IPSFactoryBuffer *This)Release;
    HRESULT  function(IPSFactoryBuffer *This, IUnknown *pUnkOuter, IID *riid, IRpcProxyBuffer **ppProxy, void **ppv)CreateProxy;
    HRESULT  function(IPSFactoryBuffer *This, IID *riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub)CreateStub;
}
//C       struct IPSFactoryBuffer {
//C         struct IPSFactoryBufferVtbl *lpVtbl;
//C       };
struct IPSFactoryBuffer
{
    IPSFactoryBufferVtbl *lpVtbl;
}
//C       HRESULT IPSFactoryBuffer_CreateProxy_Proxy(IPSFactoryBuffer *This,IUnknown *pUnkOuter,const IID *const riid,IRpcProxyBuffer **ppProxy,void **ppv);
HRESULT  IPSFactoryBuffer_CreateProxy_Proxy(IPSFactoryBuffer *This, IUnknown *pUnkOuter, IID *riid, IRpcProxyBuffer **ppProxy, void **ppv);
//C       void IPSFactoryBuffer_CreateProxy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPSFactoryBuffer_CreateProxy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPSFactoryBuffer_CreateStub_Proxy(IPSFactoryBuffer *This,const IID *const riid,IUnknown *pUnkServer,IRpcStubBuffer **ppStub);
HRESULT  IPSFactoryBuffer_CreateStub_Proxy(IPSFactoryBuffer *This, IID *riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub);
//C       void IPSFactoryBuffer_CreateStub_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPSFactoryBuffer_CreateStub_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef struct SChannelHookCallInfo {
//C         IID iid;
//C         DWORD cbSize;
//C         GUID uCausality;
//C         DWORD dwServerPid;
//C         DWORD iMethod;
//C         void *pObject;
//C       } SChannelHookCallInfo;
struct SChannelHookCallInfo
{
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
}
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0050_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0050_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0050_v0_0_s_ifspec;
//C       extern const IID IID_IChannelHook;
extern const IID IID_IChannelHook;
//C       typedef struct IChannelHookVtbl {
//C           HRESULT ( *QueryInterface)(IChannelHook *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IChannelHook *This);
//C           ULONG ( *Release)(IChannelHook *This);
//C           void ( *ClientGetSize)(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG *pDataSize);
//C           void ( *ClientFillBuffer)(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG *pDataSize,void *pDataBuffer);
//C           void ( *ClientNotify)(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG cbDataSize,void *pDataBuffer,DWORD lDataRep,HRESULT hrFault);
//C           void ( *ServerNotify)(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG cbDataSize,void *pDataBuffer,DWORD lDataRep);
//C           void ( *ServerGetSize)(IChannelHook *This,const GUID *const uExtent,const IID *const riid,HRESULT hrFault,ULONG *pDataSize);
//C           void ( *ServerFillBuffer)(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG *pDataSize,void *pDataBuffer,HRESULT hrFault);
//C       } IChannelHookVtbl;
struct IChannelHookVtbl
{
    HRESULT  function(IChannelHook *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IChannelHook *This)AddRef;
    ULONG  function(IChannelHook *This)Release;
    void  function(IChannelHook *This, GUID *uExtent, IID *riid, ULONG *pDataSize)ClientGetSize;
    void  function(IChannelHook *This, GUID *uExtent, IID *riid, ULONG *pDataSize, void *pDataBuffer)ClientFillBuffer;
    void  function(IChannelHook *This, GUID *uExtent, IID *riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault)ClientNotify;
    void  function(IChannelHook *This, GUID *uExtent, IID *riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep)ServerNotify;
    void  function(IChannelHook *This, GUID *uExtent, IID *riid, HRESULT hrFault, ULONG *pDataSize)ServerGetSize;
    void  function(IChannelHook *This, GUID *uExtent, IID *riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault)ServerFillBuffer;
}
//C       struct IChannelHook {
//C         struct IChannelHookVtbl *lpVtbl;
//C       };
struct IChannelHook
{
    IChannelHookVtbl *lpVtbl;
}
//C       void IChannelHook_ClientGetSize_Proxy(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG *pDataSize);
void  IChannelHook_ClientGetSize_Proxy(IChannelHook *This, GUID *uExtent, IID *riid, ULONG *pDataSize);
//C       void IChannelHook_ClientGetSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IChannelHook_ClientGetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IChannelHook_ClientFillBuffer_Proxy(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG *pDataSize,void *pDataBuffer);
void  IChannelHook_ClientFillBuffer_Proxy(IChannelHook *This, GUID *uExtent, IID *riid, ULONG *pDataSize, void *pDataBuffer);
//C       void IChannelHook_ClientFillBuffer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IChannelHook_ClientFillBuffer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IChannelHook_ClientNotify_Proxy(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG cbDataSize,void *pDataBuffer,DWORD lDataRep,HRESULT hrFault);
void  IChannelHook_ClientNotify_Proxy(IChannelHook *This, GUID *uExtent, IID *riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault);
//C       void IChannelHook_ClientNotify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IChannelHook_ClientNotify_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IChannelHook_ServerNotify_Proxy(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG cbDataSize,void *pDataBuffer,DWORD lDataRep);
void  IChannelHook_ServerNotify_Proxy(IChannelHook *This, GUID *uExtent, IID *riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep);
//C       void IChannelHook_ServerNotify_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IChannelHook_ServerNotify_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IChannelHook_ServerGetSize_Proxy(IChannelHook *This,const GUID *const uExtent,const IID *const riid,HRESULT hrFault,ULONG *pDataSize);
void  IChannelHook_ServerGetSize_Proxy(IChannelHook *This, GUID *uExtent, IID *riid, HRESULT hrFault, ULONG *pDataSize);
//C       void IChannelHook_ServerGetSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IChannelHook_ServerGetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       void IChannelHook_ServerFillBuffer_Proxy(IChannelHook *This,const GUID *const uExtent,const IID *const riid,ULONG *pDataSize,void *pDataBuffer,HRESULT hrFault);
void  IChannelHook_ServerFillBuffer_Proxy(IChannelHook *This, GUID *uExtent, IID *riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault);
//C       void IChannelHook_ServerFillBuffer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IChannelHook_ServerFillBuffer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const FMTID FMTID_SummaryInformation;
extern const FMTID FMTID_SummaryInformation;
//C       extern const FMTID FMTID_DocSummaryInformation;
extern const FMTID FMTID_DocSummaryInformation;
//C       extern const FMTID FMTID_UserDefinedProperties;
extern const FMTID FMTID_UserDefinedProperties;
//C       extern const FMTID FMTID_DiscardableInformation;
extern const FMTID FMTID_DiscardableInformation;
//C       extern const FMTID FMTID_ImageSummaryInformation;
extern const FMTID FMTID_ImageSummaryInformation;
//C       extern const FMTID FMTID_AudioSummaryInformation;
extern const FMTID FMTID_AudioSummaryInformation;
//C       extern const FMTID FMTID_VideoSummaryInformation;
extern const FMTID FMTID_VideoSummaryInformation;
//C       extern const FMTID FMTID_MediaFileSummaryInformation;
extern const FMTID FMTID_MediaFileSummaryInformation;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_s_ifspec;
//C       typedef struct tagSOLE_AUTHENTICATION_SERVICE {
//C         DWORD dwAuthnSvc;
//C         DWORD dwAuthzSvc;
//C         OLECHAR *pPrincipalName;
//C         HRESULT hr;
//C       } SOLE_AUTHENTICATION_SERVICE;
struct tagSOLE_AUTHENTICATION_SERVICE
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
}
alias tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;
//C       typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
alias SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
//C       typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
//C         EOAC_NONE = 0,EOAC_MUTUAL_AUTH = 0x1,EOAC_STATIC_CLOAKING = 0x20,EOAC_DYNAMIC_CLOAKING = 0x40,EOAC_ANY_AUTHORITY = 0x80,EOAC_MAKE_FULLSIC = 0x100,
//C         EOAC_DEFAULT = 0x800,EOAC_SECURE_REFS = 0x2,EOAC_ACCESS_CONTROL = 0x4,EOAC_APPID = 0x8,EOAC_DYNAMIC = 0x10,EOAC_REQUIRE_FULLSIC = 0x200,
//C         EOAC_AUTO_IMPERSONATE = 0x400,EOAC_NO_CUSTOM_MARSHAL = 0x2000,EOAC_DISABLE_AAA = 0x1000
//C       } EOLE_AUTHENTICATION_CAPABILITIES;
enum tagEOLE_AUTHENTICATION_CAPABILITIES
{
    EOAC_NONE,
    EOAC_MUTUAL_AUTH,
    EOAC_STATIC_CLOAKING = 32,
    EOAC_DYNAMIC_CLOAKING = 64,
    EOAC_ANY_AUTHORITY = 128,
    EOAC_MAKE_FULLSIC = 256,
    EOAC_DEFAULT = 2048,
    EOAC_SECURE_REFS = 2,
    EOAC_ACCESS_CONTROL = 4,
    EOAC_APPID = 8,
    EOAC_DYNAMIC = 16,
    EOAC_REQUIRE_FULLSIC = 512,
    EOAC_AUTO_IMPERSONATE = 1024,
    EOAC_NO_CUSTOM_MARSHAL = 8192,
    EOAC_DISABLE_AAA = 4096,
}
alias tagEOLE_AUTHENTICATION_CAPABILITIES EOLE_AUTHENTICATION_CAPABILITIES;
//C       typedef struct tagSOLE_AUTHENTICATION_INFO {
//C         DWORD dwAuthnSvc;
//C         DWORD dwAuthzSvc;
//C         void *pAuthInfo;
//C       } SOLE_AUTHENTICATION_INFO;
struct tagSOLE_AUTHENTICATION_INFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
}
alias tagSOLE_AUTHENTICATION_INFO SOLE_AUTHENTICATION_INFO;
//C       typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;
alias tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;
//C       typedef struct tagSOLE_AUTHENTICATION_LIST {
//C         DWORD cAuthInfo;
//C         SOLE_AUTHENTICATION_INFO *aAuthInfo;
//C       } SOLE_AUTHENTICATION_LIST;
struct tagSOLE_AUTHENTICATION_LIST
{
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
}
alias tagSOLE_AUTHENTICATION_LIST SOLE_AUTHENTICATION_LIST;
//C       typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;
alias tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;
//C       extern const IID IID_IClientSecurity;
extern const IID IID_IClientSecurity;
//C       typedef struct IClientSecurityVtbl {
//C           HRESULT ( *QueryInterface)(IClientSecurity *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IClientSecurity *This);
//C           ULONG ( *Release)(IClientSecurity *This);
//C           HRESULT ( *QueryBlanket)(IClientSecurity *This,IUnknown *pProxy,DWORD *pAuthnSvc,DWORD *pAuthzSvc,OLECHAR **pServerPrincName,DWORD *pAuthnLevel,DWORD *pImpLevel,void **pAuthInfo,DWORD *pCapabilites);
//C           HRESULT ( *SetBlanket)(IClientSecurity *This,IUnknown *pProxy,DWORD dwAuthnSvc,DWORD dwAuthzSvc,OLECHAR *pServerPrincName,DWORD dwAuthnLevel,DWORD dwImpLevel,void *pAuthInfo,DWORD dwCapabilities);
//C           HRESULT ( *CopyProxy)(IClientSecurity *This,IUnknown *pProxy,IUnknown **ppCopy);
//C       } IClientSecurityVtbl;
struct IClientSecurityVtbl
{
    HRESULT  function(IClientSecurity *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IClientSecurity *This)AddRef;
    ULONG  function(IClientSecurity *This)Release;
    HRESULT  function(IClientSecurity *This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites)QueryBlanket;
    HRESULT  function(IClientSecurity *This, IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthInfo, DWORD dwCapabilities)SetBlanket;
    HRESULT  function(IClientSecurity *This, IUnknown *pProxy, IUnknown **ppCopy)CopyProxy;
}
//C       struct IClientSecurity {
//C         struct IClientSecurityVtbl *lpVtbl;
//C       };
struct IClientSecurity
{
    IClientSecurityVtbl *lpVtbl;
}
//C       HRESULT IClientSecurity_QueryBlanket_Proxy(IClientSecurity *This,IUnknown *pProxy,DWORD *pAuthnSvc,DWORD *pAuthzSvc,OLECHAR **pServerPrincName,DWORD *pAuthnLevel,DWORD *pImpLevel,void **pAuthInfo,DWORD *pCapabilites);
HRESULT  IClientSecurity_QueryBlanket_Proxy(IClientSecurity *This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites);
//C       void IClientSecurity_QueryBlanket_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IClientSecurity_QueryBlanket_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IClientSecurity_SetBlanket_Proxy(IClientSecurity *This,IUnknown *pProxy,DWORD dwAuthnSvc,DWORD dwAuthzSvc,OLECHAR *pServerPrincName,DWORD dwAuthnLevel,DWORD dwImpLevel,void *pAuthInfo,DWORD dwCapabilities);
HRESULT  IClientSecurity_SetBlanket_Proxy(IClientSecurity *This, IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthInfo, DWORD dwCapabilities);
//C       void IClientSecurity_SetBlanket_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IClientSecurity_SetBlanket_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IClientSecurity_CopyProxy_Proxy(IClientSecurity *This,IUnknown *pProxy,IUnknown **ppCopy);
HRESULT  IClientSecurity_CopyProxy_Proxy(IClientSecurity *This, IUnknown *pProxy, IUnknown **ppCopy);
//C       void IClientSecurity_CopyProxy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IClientSecurity_CopyProxy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IServerSecurity;
extern const IID IID_IServerSecurity;
//C       typedef struct IServerSecurityVtbl {
//C           HRESULT ( *QueryInterface)(IServerSecurity *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IServerSecurity *This);
//C           ULONG ( *Release)(IServerSecurity *This);
//C           HRESULT ( *QueryBlanket)(IServerSecurity *This,DWORD *pAuthnSvc,DWORD *pAuthzSvc,OLECHAR **pServerPrincName,DWORD *pAuthnLevel,DWORD *pImpLevel,void **pPrivs,DWORD *pCapabilities);
//C           HRESULT ( *ImpersonateClient)(IServerSecurity *This);
//C           HRESULT ( *RevertToSelf)(IServerSecurity *This);
//C           WINBOOL ( *IsImpersonating)(IServerSecurity *This);
//C       } IServerSecurityVtbl;
struct IServerSecurityVtbl
{
    HRESULT  function(IServerSecurity *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IServerSecurity *This)AddRef;
    ULONG  function(IServerSecurity *This)Release;
    HRESULT  function(IServerSecurity *This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities)QueryBlanket;
    HRESULT  function(IServerSecurity *This)ImpersonateClient;
    HRESULT  function(IServerSecurity *This)RevertToSelf;
    WINBOOL  function(IServerSecurity *This)IsImpersonating;
}
//C       struct IServerSecurity {
//C         struct IServerSecurityVtbl *lpVtbl;
//C       };
struct IServerSecurity
{
    IServerSecurityVtbl *lpVtbl;
}
//C       HRESULT IServerSecurity_QueryBlanket_Proxy(IServerSecurity *This,DWORD *pAuthnSvc,DWORD *pAuthzSvc,OLECHAR **pServerPrincName,DWORD *pAuthnLevel,DWORD *pImpLevel,void **pPrivs,DWORD *pCapabilities);
HRESULT  IServerSecurity_QueryBlanket_Proxy(IServerSecurity *This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities);
//C       void IServerSecurity_QueryBlanket_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IServerSecurity_QueryBlanket_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IServerSecurity_ImpersonateClient_Proxy(IServerSecurity *This);
HRESULT  IServerSecurity_ImpersonateClient_Proxy(IServerSecurity *This);
//C       void IServerSecurity_ImpersonateClient_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IServerSecurity_ImpersonateClient_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IServerSecurity_RevertToSelf_Proxy(IServerSecurity *This);
HRESULT  IServerSecurity_RevertToSelf_Proxy(IServerSecurity *This);
//C       void IServerSecurity_RevertToSelf_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IServerSecurity_RevertToSelf_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       WINBOOL IServerSecurity_IsImpersonating_Proxy(IServerSecurity *This);
WINBOOL  IServerSecurity_IsImpersonating_Proxy(IServerSecurity *This);
//C       void IServerSecurity_IsImpersonating_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IServerSecurity_IsImpersonating_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IClassActivator;
extern const IID IID_IClassActivator;
//C       typedef struct IClassActivatorVtbl {
//C           HRESULT ( *QueryInterface)(IClassActivator *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IClassActivator *This);
//C           ULONG ( *Release)(IClassActivator *This);
//C           HRESULT ( *GetClassObject)(IClassActivator *This,const IID *const rclsid,DWORD dwClassContext,LCID locale,const IID *const riid,void **ppv);
//C       } IClassActivatorVtbl;
struct IClassActivatorVtbl
{
    HRESULT  function(IClassActivator *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IClassActivator *This)AddRef;
    ULONG  function(IClassActivator *This)Release;
    HRESULT  function(IClassActivator *This, IID *rclsid, DWORD dwClassContext, LCID locale, IID *riid, void **ppv)GetClassObject;
}
//C       struct IClassActivator {
//C         struct IClassActivatorVtbl *lpVtbl;
//C       };
struct IClassActivator
{
    IClassActivatorVtbl *lpVtbl;
}
//C       HRESULT IClassActivator_GetClassObject_Proxy(IClassActivator *This,const IID *const rclsid,DWORD dwClassContext,LCID locale,const IID *const riid,void **ppv);
HRESULT  IClassActivator_GetClassObject_Proxy(IClassActivator *This, IID *rclsid, DWORD dwClassContext, LCID locale, IID *riid, void **ppv);
//C       void IClassActivator_GetClassObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IClassActivator_GetClassObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcOptions;
extern const IID IID_IRpcOptions;
//C       typedef struct IRpcOptionsVtbl {
//C           HRESULT ( *QueryInterface)(IRpcOptions *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcOptions *This);
//C           ULONG ( *Release)(IRpcOptions *This);
//C           HRESULT ( *Set)(IRpcOptions *This,IUnknown *pPrx,DWORD dwProperty,ULONG_PTR dwValue);
//C           HRESULT ( *Query)(IRpcOptions *This,IUnknown *pPrx,DWORD dwProperty,ULONG_PTR *pdwValue);
//C       } IRpcOptionsVtbl;
struct IRpcOptionsVtbl
{
    HRESULT  function(IRpcOptions *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcOptions *This)AddRef;
    ULONG  function(IRpcOptions *This)Release;
    HRESULT  function(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR dwValue)Set;
    HRESULT  function(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR *pdwValue)Query;
}
//C       struct IRpcOptions {
//C         struct IRpcOptionsVtbl *lpVtbl;
//C       };
struct IRpcOptions
{
    IRpcOptionsVtbl *lpVtbl;
}
//C       HRESULT IRpcOptions_Set_Proxy(IRpcOptions *This,IUnknown *pPrx,DWORD dwProperty,ULONG_PTR dwValue);
HRESULT  IRpcOptions_Set_Proxy(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR dwValue);
//C       void IRpcOptions_Set_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcOptions_Set_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcOptions_Query_Proxy(IRpcOptions *This,IUnknown *pPrx,DWORD dwProperty,ULONG_PTR *pdwValue);
HRESULT  IRpcOptions_Query_Proxy(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR *pdwValue);
//C       void IRpcOptions_Query_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcOptions_Query_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       enum __MIDL___MIDL_itf_objidl_0055_0001 {
//C         COMBND_RPCTIMEOUT = 0x1,COMBND_SERVER_LOCALITY = 0x2
//C       };
enum __MIDL___MIDL_itf_objidl_0055_0001
{
    COMBND_RPCTIMEOUT = 1,
    COMBND_SERVER_LOCALITY,
}
//C       enum __MIDL___MIDL_itf_objidl_0055_0002 {
//C         SERVER_LOCALITY_PROCESS_LOCAL = 0,SERVER_LOCALITY_MACHINE_LOCAL = 1,SERVER_LOCALITY_REMOTE = 2
//C       };
enum __MIDL___MIDL_itf_objidl_0055_0002
{
    SERVER_LOCALITY_PROCESS_LOCAL,
    SERVER_LOCALITY_MACHINE_LOCAL,
    SERVER_LOCALITY_REMOTE,
}
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_s_ifspec;
//C       extern const IID IID_IFillLockBytes;
extern const IID IID_IFillLockBytes;
//C       typedef struct IFillLockBytesVtbl {
//C           HRESULT ( *QueryInterface)(IFillLockBytes *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IFillLockBytes *This);
//C           ULONG ( *Release)(IFillLockBytes *This);
//C           HRESULT ( *FillAppend)(IFillLockBytes *This,const void *pv,ULONG cb,ULONG *pcbWritten);
//C           HRESULT ( *FillAt)(IFillLockBytes *This,ULARGE_INTEGER ulOffset,const void *pv,ULONG cb,ULONG *pcbWritten);
//C           HRESULT ( *SetFillSize)(IFillLockBytes *This,ULARGE_INTEGER ulSize);
//C           HRESULT ( *Terminate)(IFillLockBytes *This,WINBOOL bCanceled);
//C       } IFillLockBytesVtbl;
struct IFillLockBytesVtbl
{
    HRESULT  function(IFillLockBytes *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IFillLockBytes *This)AddRef;
    ULONG  function(IFillLockBytes *This)Release;
    HRESULT  function(IFillLockBytes *This, void *pv, ULONG cb, ULONG *pcbWritten)FillAppend;
    HRESULT  function(IFillLockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbWritten)FillAt;
    HRESULT  function(IFillLockBytes *This, ULARGE_INTEGER ulSize)SetFillSize;
    HRESULT  function(IFillLockBytes *This, WINBOOL bCanceled)Terminate;
}
//C       struct IFillLockBytes {
//C         struct IFillLockBytesVtbl *lpVtbl;
//C       };
struct IFillLockBytes
{
    IFillLockBytesVtbl *lpVtbl;
}
//C       HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This,const byte *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, byte *pv, ULONG cb, ULONG *pcbWritten);
//C       void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This,ULARGE_INTEGER ulOffset,const byte *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbWritten);
//C       void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IFillLockBytes_SetFillSize_Proxy(IFillLockBytes *This,ULARGE_INTEGER ulSize);
HRESULT  IFillLockBytes_SetFillSize_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulSize);
//C       void IFillLockBytes_SetFillSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IFillLockBytes_SetFillSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IFillLockBytes_Terminate_Proxy(IFillLockBytes *This,WINBOOL bCanceled);
HRESULT  IFillLockBytes_Terminate_Proxy(IFillLockBytes *This, WINBOOL bCanceled);
//C       void IFillLockBytes_Terminate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IFillLockBytes_Terminate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IProgressNotify;
extern const IID IID_IProgressNotify;
//C       typedef struct IProgressNotifyVtbl {
//C           HRESULT ( *QueryInterface)(IProgressNotify *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IProgressNotify *This);
//C           ULONG ( *Release)(IProgressNotify *This);
//C           HRESULT ( *OnProgress)(IProgressNotify *This,DWORD dwProgressCurrent,DWORD dwProgressMaximum,WINBOOL fAccurate,WINBOOL fOwner);
//C       } IProgressNotifyVtbl;
struct IProgressNotifyVtbl
{
    HRESULT  function(IProgressNotify *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IProgressNotify *This)AddRef;
    ULONG  function(IProgressNotify *This)Release;
    HRESULT  function(IProgressNotify *This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, WINBOOL fAccurate, WINBOOL fOwner)OnProgress;
}
//C       struct IProgressNotify {
//C         struct IProgressNotifyVtbl *lpVtbl;
//C       };
struct IProgressNotify
{
    IProgressNotifyVtbl *lpVtbl;
}
//C       HRESULT IProgressNotify_OnProgress_Proxy(IProgressNotify *This,DWORD dwProgressCurrent,DWORD dwProgressMaximum,WINBOOL fAccurate,WINBOOL fOwner);
HRESULT  IProgressNotify_OnProgress_Proxy(IProgressNotify *This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, WINBOOL fAccurate, WINBOOL fOwner);
//C       void IProgressNotify_OnProgress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IProgressNotify_OnProgress_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef struct tagStorageLayout {
//C         DWORD LayoutType;
//C         OLECHAR *pwcsElementName;
//C         LARGE_INTEGER cOffset;
//C         LARGE_INTEGER cBytes;
//C       } StorageLayout;
struct tagStorageLayout
{
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
}
alias tagStorageLayout StorageLayout;
//C       extern const IID IID_ILayoutStorage;
extern const IID IID_ILayoutStorage;
//C       typedef struct ILayoutStorageVtbl {
//C           HRESULT ( *QueryInterface)(ILayoutStorage *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ILayoutStorage *This);
//C           ULONG ( *Release)(ILayoutStorage *This);
//C           HRESULT ( *LayoutScript)(ILayoutStorage *This,StorageLayout *pStorageLayout,DWORD nEntries,DWORD glfInterleavedFlag);
//C           HRESULT ( *BeginMonitor)(ILayoutStorage *This);
//C           HRESULT ( *EndMonitor)(ILayoutStorage *This);
//C           HRESULT ( *ReLayoutDocfile)(ILayoutStorage *This,OLECHAR *pwcsNewDfName);
//C           HRESULT ( *ReLayoutDocfileOnILockBytes)(ILayoutStorage *This,ILockBytes *pILockBytes);
//C       } ILayoutStorageVtbl;
struct ILayoutStorageVtbl
{
    HRESULT  function(ILayoutStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ILayoutStorage *This)AddRef;
    ULONG  function(ILayoutStorage *This)Release;
    HRESULT  function(ILayoutStorage *This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag)LayoutScript;
    HRESULT  function(ILayoutStorage *This)BeginMonitor;
    HRESULT  function(ILayoutStorage *This)EndMonitor;
    HRESULT  function(ILayoutStorage *This, OLECHAR *pwcsNewDfName)ReLayoutDocfile;
    HRESULT  function(ILayoutStorage *This, ILockBytes *pILockBytes)ReLayoutDocfileOnILockBytes;
}
//C       struct ILayoutStorage {
//C         struct ILayoutStorageVtbl *lpVtbl;
//C       };
struct ILayoutStorage
{
    ILayoutStorageVtbl *lpVtbl;
}
//C       HRESULT ILayoutStorage_LayoutScript_Proxy(ILayoutStorage *This,StorageLayout *pStorageLayout,DWORD nEntries,DWORD glfInterleavedFlag);
HRESULT  ILayoutStorage_LayoutScript_Proxy(ILayoutStorage *This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);
//C       void ILayoutStorage_LayoutScript_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILayoutStorage_LayoutScript_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILayoutStorage_BeginMonitor_Proxy(ILayoutStorage *This);
HRESULT  ILayoutStorage_BeginMonitor_Proxy(ILayoutStorage *This);
//C       void ILayoutStorage_BeginMonitor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILayoutStorage_BeginMonitor_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILayoutStorage_EndMonitor_Proxy(ILayoutStorage *This);
HRESULT  ILayoutStorage_EndMonitor_Proxy(ILayoutStorage *This);
//C       void ILayoutStorage_EndMonitor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILayoutStorage_EndMonitor_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILayoutStorage_ReLayoutDocfile_Proxy(ILayoutStorage *This,OLECHAR *pwcsNewDfName);
HRESULT  ILayoutStorage_ReLayoutDocfile_Proxy(ILayoutStorage *This, OLECHAR *pwcsNewDfName);
//C       void ILayoutStorage_ReLayoutDocfile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILayoutStorage_ReLayoutDocfile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(ILayoutStorage *This,ILockBytes *pILockBytes);
HRESULT  ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(ILayoutStorage *This, ILockBytes *pILockBytes);
//C       void ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IBlockingLock;
extern const IID IID_IBlockingLock;
//C       typedef struct IBlockingLockVtbl {
//C           HRESULT ( *QueryInterface)(IBlockingLock *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IBlockingLock *This);
//C           ULONG ( *Release)(IBlockingLock *This);
//C           HRESULT ( *Lock)(IBlockingLock *This,DWORD dwTimeout);
//C           HRESULT ( *Unlock)(IBlockingLock *This);
//C       } IBlockingLockVtbl;
struct IBlockingLockVtbl
{
    HRESULT  function(IBlockingLock *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IBlockingLock *This)AddRef;
    ULONG  function(IBlockingLock *This)Release;
    HRESULT  function(IBlockingLock *This, DWORD dwTimeout)Lock;
    HRESULT  function(IBlockingLock *This)Unlock;
}
//C       struct IBlockingLock {
//C         struct IBlockingLockVtbl *lpVtbl;
//C       };
struct IBlockingLock
{
    IBlockingLockVtbl *lpVtbl;
}
//C       HRESULT IBlockingLock_Lock_Proxy(IBlockingLock *This,DWORD dwTimeout);
HRESULT  IBlockingLock_Lock_Proxy(IBlockingLock *This, DWORD dwTimeout);
//C       void IBlockingLock_Lock_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IBlockingLock_Lock_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IBlockingLock_Unlock_Proxy(IBlockingLock *This);
HRESULT  IBlockingLock_Unlock_Proxy(IBlockingLock *This);
//C       void IBlockingLock_Unlock_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IBlockingLock_Unlock_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ITimeAndNoticeControl;
extern const IID IID_ITimeAndNoticeControl;
//C       typedef struct ITimeAndNoticeControlVtbl {
//C           HRESULT ( *QueryInterface)(ITimeAndNoticeControl *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ITimeAndNoticeControl *This);
//C           ULONG ( *Release)(ITimeAndNoticeControl *This);
//C           HRESULT ( *SuppressChanges)(ITimeAndNoticeControl *This,DWORD res1,DWORD res2);
//C       } ITimeAndNoticeControlVtbl;
struct ITimeAndNoticeControlVtbl
{
    HRESULT  function(ITimeAndNoticeControl *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITimeAndNoticeControl *This)AddRef;
    ULONG  function(ITimeAndNoticeControl *This)Release;
    HRESULT  function(ITimeAndNoticeControl *This, DWORD res1, DWORD res2)SuppressChanges;
}
//C       struct ITimeAndNoticeControl {
//C         struct ITimeAndNoticeControlVtbl *lpVtbl;
//C       };
struct ITimeAndNoticeControl
{
    ITimeAndNoticeControlVtbl *lpVtbl;
}
//C       HRESULT ITimeAndNoticeControl_SuppressChanges_Proxy(ITimeAndNoticeControl *This,DWORD res1,DWORD res2);
HRESULT  ITimeAndNoticeControl_SuppressChanges_Proxy(ITimeAndNoticeControl *This, DWORD res1, DWORD res2);
//C       void ITimeAndNoticeControl_SuppressChanges_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITimeAndNoticeControl_SuppressChanges_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IOplockStorage;
extern const IID IID_IOplockStorage;
//C       typedef struct IOplockStorageVtbl {
//C           HRESULT ( *QueryInterface)(IOplockStorage *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOplockStorage *This);
//C           ULONG ( *Release)(IOplockStorage *This);
//C           HRESULT ( *CreateStorageEx)(IOplockStorage *This,LPCWSTR pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,const IID *const riid,void **ppstgOpen);
//C           HRESULT ( *OpenStorageEx)(IOplockStorage *This,LPCWSTR pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,const IID *const riid,void **ppstgOpen);
//C       } IOplockStorageVtbl;
struct IOplockStorageVtbl
{
    HRESULT  function(IOplockStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOplockStorage *This)AddRef;
    ULONG  function(IOplockStorage *This)Release;
    HRESULT  function(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, IID *riid, void **ppstgOpen)CreateStorageEx;
    HRESULT  function(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, IID *riid, void **ppstgOpen)OpenStorageEx;
}
//C       struct IOplockStorage {
//C         struct IOplockStorageVtbl *lpVtbl;
//C       };
struct IOplockStorage
{
    IOplockStorageVtbl *lpVtbl;
}
//C       HRESULT IOplockStorage_CreateStorageEx_Proxy(IOplockStorage *This,LPCWSTR pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,const IID *const riid,void **ppstgOpen);
HRESULT  IOplockStorage_CreateStorageEx_Proxy(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, IID *riid, void **ppstgOpen);
//C       void IOplockStorage_CreateStorageEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOplockStorage_CreateStorageEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOplockStorage_OpenStorageEx_Proxy(IOplockStorage *This,LPCWSTR pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,const IID *const riid,void **ppstgOpen);
HRESULT  IOplockStorage_OpenStorageEx_Proxy(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, IID *riid, void **ppstgOpen);
//C       void IOplockStorage_OpenStorageEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOplockStorage_OpenStorageEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ISurrogate *LPSURROGATE;
alias ISurrogate *LPSURROGATE;
//C       extern const IID IID_ISurrogate;
extern const IID IID_ISurrogate;
//C       typedef struct ISurrogateVtbl {
//C           HRESULT ( *QueryInterface)(ISurrogate *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISurrogate *This);
//C           ULONG ( *Release)(ISurrogate *This);
//C           HRESULT ( *LoadDllServer)(ISurrogate *This,const IID *const Clsid);
//C           HRESULT ( *FreeSurrogate)(ISurrogate *This);
//C       } ISurrogateVtbl;
struct ISurrogateVtbl
{
    HRESULT  function(ISurrogate *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISurrogate *This)AddRef;
    ULONG  function(ISurrogate *This)Release;
    HRESULT  function(ISurrogate *This, IID *Clsid)LoadDllServer;
    HRESULT  function(ISurrogate *This)FreeSurrogate;
}
//C       struct ISurrogate {
//C         struct ISurrogateVtbl *lpVtbl;
//C       };
struct ISurrogate
{
    ISurrogateVtbl *lpVtbl;
}
//C       HRESULT ISurrogate_LoadDllServer_Proxy(ISurrogate *This,const IID *const Clsid);
HRESULT  ISurrogate_LoadDllServer_Proxy(ISurrogate *This, IID *Clsid);
//C       void ISurrogate_LoadDllServer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogate_LoadDllServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISurrogate_FreeSurrogate_Proxy(ISurrogate *This);
HRESULT  ISurrogate_FreeSurrogate_Proxy(ISurrogate *This);
//C       void ISurrogate_FreeSurrogate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogate_FreeSurrogate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
alias IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
//C       extern const IID IID_IGlobalInterfaceTable;
extern const IID IID_IGlobalInterfaceTable;
//C       typedef struct IGlobalInterfaceTableVtbl {
//C           HRESULT ( *QueryInterface)(IGlobalInterfaceTable *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IGlobalInterfaceTable *This);
//C           ULONG ( *Release)(IGlobalInterfaceTable *This);
//C           HRESULT ( *RegisterInterfaceInGlobal)(IGlobalInterfaceTable *This,IUnknown *pUnk,const IID *const riid,DWORD *pdwCookie);
//C           HRESULT ( *RevokeInterfaceFromGlobal)(IGlobalInterfaceTable *This,DWORD dwCookie);
//C           HRESULT ( *GetInterfaceFromGlobal)(IGlobalInterfaceTable *This,DWORD dwCookie,const IID *const riid,void **ppv);
//C       } IGlobalInterfaceTableVtbl;
struct IGlobalInterfaceTableVtbl
{
    HRESULT  function(IGlobalInterfaceTable *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IGlobalInterfaceTable *This)AddRef;
    ULONG  function(IGlobalInterfaceTable *This)Release;
    HRESULT  function(IGlobalInterfaceTable *This, IUnknown *pUnk, IID *riid, DWORD *pdwCookie)RegisterInterfaceInGlobal;
    HRESULT  function(IGlobalInterfaceTable *This, DWORD dwCookie)RevokeInterfaceFromGlobal;
    HRESULT  function(IGlobalInterfaceTable *This, DWORD dwCookie, IID *riid, void **ppv)GetInterfaceFromGlobal;
}
//C       struct IGlobalInterfaceTable {
//C         struct IGlobalInterfaceTableVtbl *lpVtbl;
//C       };
struct IGlobalInterfaceTable
{
    IGlobalInterfaceTableVtbl *lpVtbl;
}
//C       HRESULT IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(IGlobalInterfaceTable *This,IUnknown *pUnk,const IID *const riid,DWORD *pdwCookie);
HRESULT  IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(IGlobalInterfaceTable *This, IUnknown *pUnk, IID *riid, DWORD *pdwCookie);
//C       void IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(IGlobalInterfaceTable *This,DWORD dwCookie);
HRESULT  IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(IGlobalInterfaceTable *This, DWORD dwCookie);
//C       void IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(IGlobalInterfaceTable *This,DWORD dwCookie,const IID *const riid,void **ppv);
HRESULT  IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(IGlobalInterfaceTable *This, DWORD dwCookie, IID *riid, void **ppv);
//C       void IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IDirectWriterLock;
extern const IID IID_IDirectWriterLock;
//C       typedef struct IDirectWriterLockVtbl {
//C           HRESULT ( *QueryInterface)(IDirectWriterLock *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IDirectWriterLock *This);
//C           ULONG ( *Release)(IDirectWriterLock *This);
//C           HRESULT ( *WaitForWriteAccess)(IDirectWriterLock *This,DWORD dwTimeout);
//C           HRESULT ( *ReleaseWriteAccess)(IDirectWriterLock *This);
//C           HRESULT ( *HaveWriteAccess)(IDirectWriterLock *This);
//C       } IDirectWriterLockVtbl;
struct IDirectWriterLockVtbl
{
    HRESULT  function(IDirectWriterLock *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDirectWriterLock *This)AddRef;
    ULONG  function(IDirectWriterLock *This)Release;
    HRESULT  function(IDirectWriterLock *This, DWORD dwTimeout)WaitForWriteAccess;
    HRESULT  function(IDirectWriterLock *This)ReleaseWriteAccess;
    HRESULT  function(IDirectWriterLock *This)HaveWriteAccess;
}
//C       struct IDirectWriterLock {
//C         struct IDirectWriterLockVtbl *lpVtbl;
//C       };
struct IDirectWriterLock
{
    IDirectWriterLockVtbl *lpVtbl;
}
//C       HRESULT IDirectWriterLock_WaitForWriteAccess_Proxy(IDirectWriterLock *This,DWORD dwTimeout);
HRESULT  IDirectWriterLock_WaitForWriteAccess_Proxy(IDirectWriterLock *This, DWORD dwTimeout);
//C       void IDirectWriterLock_WaitForWriteAccess_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDirectWriterLock_WaitForWriteAccess_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDirectWriterLock_ReleaseWriteAccess_Proxy(IDirectWriterLock *This);
HRESULT  IDirectWriterLock_ReleaseWriteAccess_Proxy(IDirectWriterLock *This);
//C       void IDirectWriterLock_ReleaseWriteAccess_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDirectWriterLock_ReleaseWriteAccess_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDirectWriterLock_HaveWriteAccess_Proxy(IDirectWriterLock *This);
HRESULT  IDirectWriterLock_HaveWriteAccess_Proxy(IDirectWriterLock *This);
//C       void IDirectWriterLock_HaveWriteAccess_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDirectWriterLock_HaveWriteAccess_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ISynchronize;
extern const IID IID_ISynchronize;
//C       typedef struct ISynchronizeVtbl {
//C           HRESULT ( *QueryInterface)(ISynchronize *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISynchronize *This);
//C           ULONG ( *Release)(ISynchronize *This);
//C           HRESULT ( *Wait)(ISynchronize *This,DWORD dwFlags,DWORD dwMilliseconds);
//C           HRESULT ( *Signal)(ISynchronize *This);
//C           HRESULT ( *Reset)(ISynchronize *This);
//C       } ISynchronizeVtbl;
struct ISynchronizeVtbl
{
    HRESULT  function(ISynchronize *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISynchronize *This)AddRef;
    ULONG  function(ISynchronize *This)Release;
    HRESULT  function(ISynchronize *This, DWORD dwFlags, DWORD dwMilliseconds)Wait;
    HRESULT  function(ISynchronize *This)Signal;
    HRESULT  function(ISynchronize *This)Reset;
}
//C       struct ISynchronize {
//C         struct ISynchronizeVtbl *lpVtbl;
//C       };
struct ISynchronize
{
    ISynchronizeVtbl *lpVtbl;
}
//C       HRESULT ISynchronize_Wait_Proxy(ISynchronize *This,DWORD dwFlags,DWORD dwMilliseconds);
HRESULT  ISynchronize_Wait_Proxy(ISynchronize *This, DWORD dwFlags, DWORD dwMilliseconds);
//C       void ISynchronize_Wait_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronize_Wait_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISynchronize_Signal_Proxy(ISynchronize *This);
HRESULT  ISynchronize_Signal_Proxy(ISynchronize *This);
//C       void ISynchronize_Signal_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronize_Signal_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISynchronize_Reset_Proxy(ISynchronize *This);
HRESULT  ISynchronize_Reset_Proxy(ISynchronize *This);
//C       void ISynchronize_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronize_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ISynchronizeHandle;
extern const IID IID_ISynchronizeHandle;
//C       typedef struct ISynchronizeHandleVtbl {
//C           HRESULT ( *QueryInterface)(ISynchronizeHandle *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISynchronizeHandle *This);
//C           ULONG ( *Release)(ISynchronizeHandle *This);
//C           HRESULT ( *GetHandle)(ISynchronizeHandle *This,HANDLE *ph);
//C       } ISynchronizeHandleVtbl;
struct ISynchronizeHandleVtbl
{
    HRESULT  function(ISynchronizeHandle *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISynchronizeHandle *This)AddRef;
    ULONG  function(ISynchronizeHandle *This)Release;
    HRESULT  function(ISynchronizeHandle *This, HANDLE *ph)GetHandle;
}
//C       struct ISynchronizeHandle {
//C         struct ISynchronizeHandleVtbl *lpVtbl;
//C       };
struct ISynchronizeHandle
{
    ISynchronizeHandleVtbl *lpVtbl;
}
//C       HRESULT ISynchronizeHandle_GetHandle_Proxy(ISynchronizeHandle *This,HANDLE *ph);
HRESULT  ISynchronizeHandle_GetHandle_Proxy(ISynchronizeHandle *This, HANDLE *ph);
//C       void ISynchronizeHandle_GetHandle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronizeHandle_GetHandle_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ISynchronizeEvent;
extern const IID IID_ISynchronizeEvent;
//C       typedef struct ISynchronizeEventVtbl {
//C           HRESULT ( *QueryInterface)(ISynchronizeEvent *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISynchronizeEvent *This);
//C           ULONG ( *Release)(ISynchronizeEvent *This);
//C           HRESULT ( *GetHandle)(ISynchronizeEvent *This,HANDLE *ph);
//C           HRESULT ( *SetEventHandle)(ISynchronizeEvent *This,HANDLE *ph);
//C       } ISynchronizeEventVtbl;
struct ISynchronizeEventVtbl
{
    HRESULT  function(ISynchronizeEvent *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISynchronizeEvent *This)AddRef;
    ULONG  function(ISynchronizeEvent *This)Release;
    HRESULT  function(ISynchronizeEvent *This, HANDLE *ph)GetHandle;
    HRESULT  function(ISynchronizeEvent *This, HANDLE *ph)SetEventHandle;
}
//C       struct ISynchronizeEvent {
//C         struct ISynchronizeEventVtbl *lpVtbl;
//C       };
struct ISynchronizeEvent
{
    ISynchronizeEventVtbl *lpVtbl;
}
//C       HRESULT ISynchronizeEvent_SetEventHandle_Proxy(ISynchronizeEvent *This,HANDLE *ph);
HRESULT  ISynchronizeEvent_SetEventHandle_Proxy(ISynchronizeEvent *This, HANDLE *ph);
//C       void ISynchronizeEvent_SetEventHandle_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronizeEvent_SetEventHandle_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ISynchronizeContainer;
extern const IID IID_ISynchronizeContainer;
//C       typedef struct ISynchronizeContainerVtbl {
//C           HRESULT ( *QueryInterface)(ISynchronizeContainer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISynchronizeContainer *This);
//C           ULONG ( *Release)(ISynchronizeContainer *This);
//C           HRESULT ( *AddSynchronize)(ISynchronizeContainer *This,ISynchronize *pSync);
//C           HRESULT ( *WaitMultiple)(ISynchronizeContainer *This,DWORD dwFlags,DWORD dwTimeOut,ISynchronize **ppSync);
//C       } ISynchronizeContainerVtbl;
struct ISynchronizeContainerVtbl
{
    HRESULT  function(ISynchronizeContainer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISynchronizeContainer *This)AddRef;
    ULONG  function(ISynchronizeContainer *This)Release;
    HRESULT  function(ISynchronizeContainer *This, ISynchronize *pSync)AddSynchronize;
    HRESULT  function(ISynchronizeContainer *This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize **ppSync)WaitMultiple;
}
//C       struct ISynchronizeContainer {
//C         struct ISynchronizeContainerVtbl *lpVtbl;
//C       };
struct ISynchronizeContainer
{
    ISynchronizeContainerVtbl *lpVtbl;
}
//C       HRESULT ISynchronizeContainer_AddSynchronize_Proxy(ISynchronizeContainer *This,ISynchronize *pSync);
HRESULT  ISynchronizeContainer_AddSynchronize_Proxy(ISynchronizeContainer *This, ISynchronize *pSync);
//C       void ISynchronizeContainer_AddSynchronize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronizeContainer_AddSynchronize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISynchronizeContainer_WaitMultiple_Proxy(ISynchronizeContainer *This,DWORD dwFlags,DWORD dwTimeOut,ISynchronize **ppSync);
HRESULT  ISynchronizeContainer_WaitMultiple_Proxy(ISynchronizeContainer *This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize **ppSync);
//C       void ISynchronizeContainer_WaitMultiple_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronizeContainer_WaitMultiple_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ISynchronizeMutex;
extern const IID IID_ISynchronizeMutex;
//C       typedef struct ISynchronizeMutexVtbl {
//C           HRESULT ( *QueryInterface)(ISynchronizeMutex *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISynchronizeMutex *This);
//C           ULONG ( *Release)(ISynchronizeMutex *This);
//C           HRESULT ( *Wait)(ISynchronizeMutex *This,DWORD dwFlags,DWORD dwMilliseconds);
//C           HRESULT ( *Signal)(ISynchronizeMutex *This);
//C           HRESULT ( *Reset)(ISynchronizeMutex *This);
//C           HRESULT ( *ReleaseMutex)(ISynchronizeMutex *This);
//C       } ISynchronizeMutexVtbl;
struct ISynchronizeMutexVtbl
{
    HRESULT  function(ISynchronizeMutex *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISynchronizeMutex *This)AddRef;
    ULONG  function(ISynchronizeMutex *This)Release;
    HRESULT  function(ISynchronizeMutex *This, DWORD dwFlags, DWORD dwMilliseconds)Wait;
    HRESULT  function(ISynchronizeMutex *This)Signal;
    HRESULT  function(ISynchronizeMutex *This)Reset;
    HRESULT  function(ISynchronizeMutex *This)ReleaseMutex;
}
//C       struct ISynchronizeMutex {
//C         struct ISynchronizeMutexVtbl *lpVtbl;
//C       };
struct ISynchronizeMutex
{
    ISynchronizeMutexVtbl *lpVtbl;
}
//C       HRESULT ISynchronizeMutex_ReleaseMutex_Proxy(ISynchronizeMutex *This);
HRESULT  ISynchronizeMutex_ReleaseMutex_Proxy(ISynchronizeMutex *This);
//C       void ISynchronizeMutex_ReleaseMutex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISynchronizeMutex_ReleaseMutex_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ICancelMethodCalls *LPCANCELMETHODCALLS;
alias ICancelMethodCalls *LPCANCELMETHODCALLS;
//C       extern const IID IID_ICancelMethodCalls;
extern const IID IID_ICancelMethodCalls;
//C       typedef struct ICancelMethodCallsVtbl {
//C           HRESULT ( *QueryInterface)(ICancelMethodCalls *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICancelMethodCalls *This);
//C           ULONG ( *Release)(ICancelMethodCalls *This);
//C           HRESULT ( *Cancel)(ICancelMethodCalls *This,ULONG ulSeconds);
//C           HRESULT ( *TestCancel)(ICancelMethodCalls *This);
//C       } ICancelMethodCallsVtbl;
struct ICancelMethodCallsVtbl
{
    HRESULT  function(ICancelMethodCalls *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICancelMethodCalls *This)AddRef;
    ULONG  function(ICancelMethodCalls *This)Release;
    HRESULT  function(ICancelMethodCalls *This, ULONG ulSeconds)Cancel;
    HRESULT  function(ICancelMethodCalls *This)TestCancel;
}
//C       struct ICancelMethodCalls {
//C         struct ICancelMethodCallsVtbl *lpVtbl;
//C       };
struct ICancelMethodCalls
{
    ICancelMethodCallsVtbl *lpVtbl;
}
//C       HRESULT ICancelMethodCalls_Cancel_Proxy(ICancelMethodCalls *This,ULONG ulSeconds);
HRESULT  ICancelMethodCalls_Cancel_Proxy(ICancelMethodCalls *This, ULONG ulSeconds);
//C       void ICancelMethodCalls_Cancel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICancelMethodCalls_Cancel_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICancelMethodCalls_TestCancel_Proxy(ICancelMethodCalls *This);
HRESULT  ICancelMethodCalls_TestCancel_Proxy(ICancelMethodCalls *This);
//C       void ICancelMethodCalls_TestCancel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICancelMethodCalls_TestCancel_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef enum tagDCOM_CALL_STATE {
//C         DCOM_NONE = 0,DCOM_CALL_COMPLETE = 0x1,DCOM_CALL_CANCELED = 0x2
//C       } DCOM_CALL_STATE;
enum tagDCOM_CALL_STATE
{
    DCOM_NONE,
    DCOM_CALL_COMPLETE,
    DCOM_CALL_CANCELED,
}
alias tagDCOM_CALL_STATE DCOM_CALL_STATE;
//C       extern const IID IID_IAsyncManager;
extern const IID IID_IAsyncManager;
//C       typedef struct IAsyncManagerVtbl {
//C           HRESULT ( *QueryInterface)(IAsyncManager *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IAsyncManager *This);
//C           ULONG ( *Release)(IAsyncManager *This);
//C           HRESULT ( *CompleteCall)(IAsyncManager *This,HRESULT Result);
//C           HRESULT ( *GetCallContext)(IAsyncManager *This,const IID *const riid,void **pInterface);
//C           HRESULT ( *GetState)(IAsyncManager *This,ULONG *pulStateFlags);
//C       } IAsyncManagerVtbl;
struct IAsyncManagerVtbl
{
    HRESULT  function(IAsyncManager *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAsyncManager *This)AddRef;
    ULONG  function(IAsyncManager *This)Release;
    HRESULT  function(IAsyncManager *This, HRESULT Result)CompleteCall;
    HRESULT  function(IAsyncManager *This, IID *riid, void **pInterface)GetCallContext;
    HRESULT  function(IAsyncManager *This, ULONG *pulStateFlags)GetState;
}
//C       struct IAsyncManager {
//C         struct IAsyncManagerVtbl *lpVtbl;
//C       };
struct IAsyncManager
{
    IAsyncManagerVtbl *lpVtbl;
}
//C       HRESULT IAsyncManager_CompleteCall_Proxy(IAsyncManager *This,HRESULT Result);
HRESULT  IAsyncManager_CompleteCall_Proxy(IAsyncManager *This, HRESULT Result);
//C       void IAsyncManager_CompleteCall_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAsyncManager_CompleteCall_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IAsyncManager_GetCallContext_Proxy(IAsyncManager *This,const IID *const riid,void **pInterface);
HRESULT  IAsyncManager_GetCallContext_Proxy(IAsyncManager *This, IID *riid, void **pInterface);
//C       void IAsyncManager_GetCallContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAsyncManager_GetCallContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IAsyncManager_GetState_Proxy(IAsyncManager *This,ULONG *pulStateFlags);
HRESULT  IAsyncManager_GetState_Proxy(IAsyncManager *This, ULONG *pulStateFlags);
//C       void IAsyncManager_GetState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAsyncManager_GetState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ICallFactory;
extern const IID IID_ICallFactory;
//C       typedef struct ICallFactoryVtbl {
//C           HRESULT ( *QueryInterface)(ICallFactory *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICallFactory *This);
//C           ULONG ( *Release)(ICallFactory *This);
//C           HRESULT ( *CreateCall)(ICallFactory *This,const IID *const riid,IUnknown *pCtrlUnk,const IID *const riid2,IUnknown **ppv);
//C       } ICallFactoryVtbl;
struct ICallFactoryVtbl
{
    HRESULT  function(ICallFactory *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICallFactory *This)AddRef;
    ULONG  function(ICallFactory *This)Release;
    HRESULT  function(ICallFactory *This, IID *riid, IUnknown *pCtrlUnk, IID *riid2, IUnknown **ppv)CreateCall;
}
//C       struct ICallFactory {
//C         struct ICallFactoryVtbl *lpVtbl;
//C       };
struct ICallFactory
{
    ICallFactoryVtbl *lpVtbl;
}
//C       HRESULT ICallFactory_CreateCall_Proxy(ICallFactory *This,const IID *const riid,IUnknown *pCtrlUnk,const IID *const riid2,IUnknown **ppv);
HRESULT  ICallFactory_CreateCall_Proxy(ICallFactory *This, IID *riid, IUnknown *pCtrlUnk, IID *riid2, IUnknown **ppv);
//C       void ICallFactory_CreateCall_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICallFactory_CreateCall_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IRpcHelper;
extern const IID IID_IRpcHelper;
//C       typedef struct IRpcHelperVtbl {
//C           HRESULT ( *QueryInterface)(IRpcHelper *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IRpcHelper *This);
//C           ULONG ( *Release)(IRpcHelper *This);
//C           HRESULT ( *GetDCOMProtocolVersion)(IRpcHelper *This,DWORD *pComVersion);
//C           HRESULT ( *GetIIDFromOBJREF)(IRpcHelper *This,void *pObjRef,IID **piid);
//C       } IRpcHelperVtbl;
struct IRpcHelperVtbl
{
    HRESULT  function(IRpcHelper *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRpcHelper *This)AddRef;
    ULONG  function(IRpcHelper *This)Release;
    HRESULT  function(IRpcHelper *This, DWORD *pComVersion)GetDCOMProtocolVersion;
    HRESULT  function(IRpcHelper *This, void *pObjRef, IID **piid)GetIIDFromOBJREF;
}
//C       struct IRpcHelper {
//C         struct IRpcHelperVtbl *lpVtbl;
//C       };
struct IRpcHelper
{
    IRpcHelperVtbl *lpVtbl;
}
//C       HRESULT IRpcHelper_GetDCOMProtocolVersion_Proxy(IRpcHelper *This,DWORD *pComVersion);
HRESULT  IRpcHelper_GetDCOMProtocolVersion_Proxy(IRpcHelper *This, DWORD *pComVersion);
//C       void IRpcHelper_GetDCOMProtocolVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcHelper_GetDCOMProtocolVersion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IRpcHelper_GetIIDFromOBJREF_Proxy(IRpcHelper *This,void *pObjRef,IID **piid);
HRESULT  IRpcHelper_GetIIDFromOBJREF_Proxy(IRpcHelper *This, void *pObjRef, IID **piid);
//C       void IRpcHelper_GetIIDFromOBJREF_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IRpcHelper_GetIIDFromOBJREF_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IReleaseMarshalBuffers;
extern const IID IID_IReleaseMarshalBuffers;
//C       typedef struct IReleaseMarshalBuffersVtbl {
//C           HRESULT ( *QueryInterface)(IReleaseMarshalBuffers *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IReleaseMarshalBuffers *This);
//C           ULONG ( *Release)(IReleaseMarshalBuffers *This);
//C           HRESULT ( *ReleaseMarshalBuffer)(IReleaseMarshalBuffers *This,RPCOLEMESSAGE *pMsg,DWORD dwFlags,IUnknown *pChnl);
//C       } IReleaseMarshalBuffersVtbl;
struct IReleaseMarshalBuffersVtbl
{
    HRESULT  function(IReleaseMarshalBuffers *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IReleaseMarshalBuffers *This)AddRef;
    ULONG  function(IReleaseMarshalBuffers *This)Release;
    HRESULT  function(IReleaseMarshalBuffers *This, RPCOLEMESSAGE *pMsg, DWORD dwFlags, IUnknown *pChnl)ReleaseMarshalBuffer;
}
//C       struct IReleaseMarshalBuffers {
//C         struct IReleaseMarshalBuffersVtbl *lpVtbl;
//C       };
struct IReleaseMarshalBuffers
{
    IReleaseMarshalBuffersVtbl *lpVtbl;
}
//C       HRESULT IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(IReleaseMarshalBuffers *This,RPCOLEMESSAGE *pMsg,DWORD dwFlags,IUnknown *pChnl);
HRESULT  IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy(IReleaseMarshalBuffers *This, RPCOLEMESSAGE *pMsg, DWORD dwFlags, IUnknown *pChnl);
//C       void IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IWaitMultiple;
extern const IID IID_IWaitMultiple;
//C       typedef struct IWaitMultipleVtbl {
//C           HRESULT ( *QueryInterface)(IWaitMultiple *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWaitMultiple *This);
//C           ULONG ( *Release)(IWaitMultiple *This);
//C           HRESULT ( *WaitMultiple)(IWaitMultiple *This,DWORD timeout,ISynchronize **pSync);
//C           HRESULT ( *AddSynchronize)(IWaitMultiple *This,ISynchronize *pSync);
//C       } IWaitMultipleVtbl;
struct IWaitMultipleVtbl
{
    HRESULT  function(IWaitMultiple *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWaitMultiple *This)AddRef;
    ULONG  function(IWaitMultiple *This)Release;
    HRESULT  function(IWaitMultiple *This, DWORD timeout, ISynchronize **pSync)WaitMultiple;
    HRESULT  function(IWaitMultiple *This, ISynchronize *pSync)AddSynchronize;
}
//C       struct IWaitMultiple {
//C         struct IWaitMultipleVtbl *lpVtbl;
//C       };
struct IWaitMultiple
{
    IWaitMultipleVtbl *lpVtbl;
}
//C       HRESULT IWaitMultiple_WaitMultiple_Proxy(IWaitMultiple *This,DWORD timeout,ISynchronize **pSync);
HRESULT  IWaitMultiple_WaitMultiple_Proxy(IWaitMultiple *This, DWORD timeout, ISynchronize **pSync);
//C       void IWaitMultiple_WaitMultiple_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWaitMultiple_WaitMultiple_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IWaitMultiple_AddSynchronize_Proxy(IWaitMultiple *This,ISynchronize *pSync);
HRESULT  IWaitMultiple_AddSynchronize_Proxy(IWaitMultiple *This, ISynchronize *pSync);
//C       void IWaitMultiple_AddSynchronize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWaitMultiple_AddSynchronize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IUrlMon;
extern const IID IID_IUrlMon;
//C       typedef struct IUrlMonVtbl {
//C           HRESULT ( *QueryInterface)(IUrlMon *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IUrlMon *This);
//C           ULONG ( *Release)(IUrlMon *This);
//C           HRESULT ( *AsyncGetClassBits)(IUrlMon *This,const IID *const rclsid,LPCWSTR pszTYPE,LPCWSTR pszExt,DWORD dwFileVersionMS,DWORD dwFileVersionLS,LPCWSTR pszCodeBase,IBindCtx *pbc,DWORD dwClassContext,const IID *const riid,DWORD flags);
//C       } IUrlMonVtbl;
struct IUrlMonVtbl
{
    HRESULT  function(IUrlMon *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IUrlMon *This)AddRef;
    ULONG  function(IUrlMon *This)Release;
    HRESULT  function(IUrlMon *This, IID *rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx *pbc, DWORD dwClassContext, IID *riid, DWORD flags)AsyncGetClassBits;
}
//C       struct IUrlMon {
//C         struct IUrlMonVtbl *lpVtbl;
//C       };
struct IUrlMon
{
    IUrlMonVtbl *lpVtbl;
}
//C       HRESULT IUrlMon_AsyncGetClassBits_Proxy(IUrlMon *This,const IID *const rclsid,LPCWSTR pszTYPE,LPCWSTR pszExt,DWORD dwFileVersionMS,DWORD dwFileVersionLS,LPCWSTR pszCodeBase,IBindCtx *pbc,DWORD dwClassContext,const IID *const riid,DWORD flags);
HRESULT  IUrlMon_AsyncGetClassBits_Proxy(IUrlMon *This, IID *rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx *pbc, DWORD dwClassContext, IID *riid, DWORD flags);
//C       void IUrlMon_AsyncGetClassBits_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IUrlMon_AsyncGetClassBits_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IForegroundTransfer;
extern const IID IID_IForegroundTransfer;
//C       typedef struct IForegroundTransferVtbl {
//C           HRESULT ( *QueryInterface)(IForegroundTransfer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IForegroundTransfer *This);
//C           ULONG ( *Release)(IForegroundTransfer *This);
//C           HRESULT ( *AllowForegroundTransfer)(IForegroundTransfer *This,void *lpvReserved);
//C       } IForegroundTransferVtbl;
struct IForegroundTransferVtbl
{
    HRESULT  function(IForegroundTransfer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IForegroundTransfer *This)AddRef;
    ULONG  function(IForegroundTransfer *This)Release;
    HRESULT  function(IForegroundTransfer *This, void *lpvReserved)AllowForegroundTransfer;
}
//C       struct IForegroundTransfer {
//C         struct IForegroundTransferVtbl *lpVtbl;
//C       };
struct IForegroundTransfer
{
    IForegroundTransferVtbl *lpVtbl;
}
//C       HRESULT IForegroundTransfer_AllowForegroundTransfer_Proxy(IForegroundTransfer *This,void *lpvReserved);
HRESULT  IForegroundTransfer_AllowForegroundTransfer_Proxy(IForegroundTransfer *This, void *lpvReserved);
//C       void IForegroundTransfer_AllowForegroundTransfer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IForegroundTransfer_AllowForegroundTransfer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;
alias IAddrTrackingControl *LPADDRTRACKINGCONTROL;
//C       extern const IID IID_IAddrTrackingControl;
extern const IID IID_IAddrTrackingControl;
//C       typedef struct IAddrTrackingControlVtbl {
//C           HRESULT ( *QueryInterface)(IAddrTrackingControl *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IAddrTrackingControl *This);
//C           ULONG ( *Release)(IAddrTrackingControl *This);
//C           HRESULT ( *EnableCOMDynamicAddrTracking)(IAddrTrackingControl *This);
//C           HRESULT ( *DisableCOMDynamicAddrTracking)(IAddrTrackingControl *This);
//C       } IAddrTrackingControlVtbl;
struct IAddrTrackingControlVtbl
{
    HRESULT  function(IAddrTrackingControl *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAddrTrackingControl *This)AddRef;
    ULONG  function(IAddrTrackingControl *This)Release;
    HRESULT  function(IAddrTrackingControl *This)EnableCOMDynamicAddrTracking;
    HRESULT  function(IAddrTrackingControl *This)DisableCOMDynamicAddrTracking;
}
//C       struct IAddrTrackingControl {
//C         struct IAddrTrackingControlVtbl *lpVtbl;
//C       };
struct IAddrTrackingControl
{
    IAddrTrackingControlVtbl *lpVtbl;
}
//C       HRESULT IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(IAddrTrackingControl *This);
HRESULT  IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy(IAddrTrackingControl *This);
//C       void IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(IAddrTrackingControl *This);
HRESULT  IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy(IAddrTrackingControl *This);
//C       void IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
alias IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
//C       extern const IID IID_IAddrExclusionControl;
extern const IID IID_IAddrExclusionControl;
//C       typedef struct IAddrExclusionControlVtbl {
//C           HRESULT ( *QueryInterface)(IAddrExclusionControl *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IAddrExclusionControl *This);
//C           ULONG ( *Release)(IAddrExclusionControl *This);
//C           HRESULT ( *GetCurrentAddrExclusionList)(IAddrExclusionControl *This,const IID *const riid,void **ppEnumerator);
//C           HRESULT ( *UpdateAddrExclusionList)(IAddrExclusionControl *This,IUnknown *pEnumerator);
//C       } IAddrExclusionControlVtbl;
struct IAddrExclusionControlVtbl
{
    HRESULT  function(IAddrExclusionControl *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAddrExclusionControl *This)AddRef;
    ULONG  function(IAddrExclusionControl *This)Release;
    HRESULT  function(IAddrExclusionControl *This, IID *riid, void **ppEnumerator)GetCurrentAddrExclusionList;
    HRESULT  function(IAddrExclusionControl *This, IUnknown *pEnumerator)UpdateAddrExclusionList;
}
//C       struct IAddrExclusionControl {
//C         struct IAddrExclusionControlVtbl *lpVtbl;
//C       };
struct IAddrExclusionControl
{
    IAddrExclusionControlVtbl *lpVtbl;
}
//C       HRESULT IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(IAddrExclusionControl *This,const IID *const riid,void **ppEnumerator);
HRESULT  IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy(IAddrExclusionControl *This, IID *riid, void **ppEnumerator);
//C       void IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IAddrExclusionControl_UpdateAddrExclusionList_Proxy(IAddrExclusionControl *This,IUnknown *pEnumerator);
HRESULT  IAddrExclusionControl_UpdateAddrExclusionList_Proxy(IAddrExclusionControl *This, IUnknown *pEnumerator);
//C       void IAddrExclusionControl_UpdateAddrExclusionList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAddrExclusionControl_UpdateAddrExclusionList_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IPipeByte;
extern const IID IID_IPipeByte;
//C       typedef struct IPipeByteVtbl {
//C           HRESULT ( *QueryInterface)(IPipeByte *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPipeByte *This);
//C           ULONG ( *Release)(IPipeByte *This);
//C           HRESULT ( *Pull)(IPipeByte *This,BYTE *buf,ULONG cRequest,ULONG *pcReturned);
//C           HRESULT ( *Push)(IPipeByte *This,BYTE *buf,ULONG cSent);
//C       } IPipeByteVtbl;
struct IPipeByteVtbl
{
    HRESULT  function(IPipeByte *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPipeByte *This)AddRef;
    ULONG  function(IPipeByte *This)Release;
    HRESULT  function(IPipeByte *This, BYTE *buf, ULONG cRequest, ULONG *pcReturned)Pull;
    HRESULT  function(IPipeByte *This, BYTE *buf, ULONG cSent)Push;
}
//C       struct IPipeByte {
//C         struct IPipeByteVtbl *lpVtbl;
//C       };
struct IPipeByte
{
    IPipeByteVtbl *lpVtbl;
}
//C       HRESULT IPipeByte_Pull_Proxy(IPipeByte *This,BYTE *buf,ULONG cRequest,ULONG *pcReturned);
HRESULT  IPipeByte_Pull_Proxy(IPipeByte *This, BYTE *buf, ULONG cRequest, ULONG *pcReturned);
//C       void IPipeByte_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPipeByte_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPipeByte_Push_Proxy(IPipeByte *This,BYTE *buf,ULONG cSent);
HRESULT  IPipeByte_Push_Proxy(IPipeByte *This, BYTE *buf, ULONG cSent);
//C       void IPipeByte_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPipeByte_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_AsyncIPipeByte;
extern const IID IID_AsyncIPipeByte;
//C       typedef struct AsyncIPipeByteVtbl {
//C           HRESULT ( *QueryInterface)(AsyncIPipeByte *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(AsyncIPipeByte *This);
//C           ULONG ( *Release)(AsyncIPipeByte *This);
//C           HRESULT ( *Begin_Pull)(AsyncIPipeByte *This,ULONG cRequest);
//C           HRESULT ( *Finish_Pull)(AsyncIPipeByte *This,BYTE *buf,ULONG *pcReturned);
//C           HRESULT ( *Begin_Push)(AsyncIPipeByte *This,BYTE *buf,ULONG cSent);
//C           HRESULT ( *Finish_Push)(AsyncIPipeByte *This);
//C       } AsyncIPipeByteVtbl;
struct AsyncIPipeByteVtbl
{
    HRESULT  function(AsyncIPipeByte *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIPipeByte *This)AddRef;
    ULONG  function(AsyncIPipeByte *This)Release;
    HRESULT  function(AsyncIPipeByte *This, ULONG cRequest)Begin_Pull;
    HRESULT  function(AsyncIPipeByte *This, BYTE *buf, ULONG *pcReturned)Finish_Pull;
    HRESULT  function(AsyncIPipeByte *This, BYTE *buf, ULONG cSent)Begin_Push;
    HRESULT  function(AsyncIPipeByte *This)Finish_Push;
}
//C       struct AsyncIPipeByte {
//C         struct AsyncIPipeByteVtbl *lpVtbl;
//C       };
struct AsyncIPipeByte
{
    AsyncIPipeByteVtbl *lpVtbl;
}
//C       HRESULT AsyncIPipeByte_Begin_Pull_Proxy(AsyncIPipeByte *This,ULONG cRequest);
HRESULT  AsyncIPipeByte_Begin_Pull_Proxy(AsyncIPipeByte *This, ULONG cRequest);
//C       void AsyncIPipeByte_Begin_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeByte_Begin_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeByte_Finish_Pull_Proxy(AsyncIPipeByte *This,BYTE *buf,ULONG *pcReturned);
HRESULT  AsyncIPipeByte_Finish_Pull_Proxy(AsyncIPipeByte *This, BYTE *buf, ULONG *pcReturned);
//C       void AsyncIPipeByte_Finish_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeByte_Finish_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeByte_Begin_Push_Proxy(AsyncIPipeByte *This,BYTE *buf,ULONG cSent);
HRESULT  AsyncIPipeByte_Begin_Push_Proxy(AsyncIPipeByte *This, BYTE *buf, ULONG cSent);
//C       void AsyncIPipeByte_Begin_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeByte_Begin_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeByte_Finish_Push_Proxy(AsyncIPipeByte *This);
HRESULT  AsyncIPipeByte_Finish_Push_Proxy(AsyncIPipeByte *This);
//C       void AsyncIPipeByte_Finish_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeByte_Finish_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IPipeLong;
extern const IID IID_IPipeLong;
//C       typedef struct IPipeLongVtbl {
//C           HRESULT ( *QueryInterface)(IPipeLong *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPipeLong *This);
//C           ULONG ( *Release)(IPipeLong *This);
//C           HRESULT ( *Pull)(IPipeLong *This,LONG *buf,ULONG cRequest,ULONG *pcReturned);
//C           HRESULT ( *Push)(IPipeLong *This,LONG *buf,ULONG cSent);
//C       } IPipeLongVtbl;
struct IPipeLongVtbl
{
    HRESULT  function(IPipeLong *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPipeLong *This)AddRef;
    ULONG  function(IPipeLong *This)Release;
    HRESULT  function(IPipeLong *This, LONG *buf, ULONG cRequest, ULONG *pcReturned)Pull;
    HRESULT  function(IPipeLong *This, LONG *buf, ULONG cSent)Push;
}
//C       struct IPipeLong {
//C         struct IPipeLongVtbl *lpVtbl;
//C       };
struct IPipeLong
{
    IPipeLongVtbl *lpVtbl;
}
//C       HRESULT IPipeLong_Pull_Proxy(IPipeLong *This,LONG *buf,ULONG cRequest,ULONG *pcReturned);
HRESULT  IPipeLong_Pull_Proxy(IPipeLong *This, LONG *buf, ULONG cRequest, ULONG *pcReturned);
//C       void IPipeLong_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPipeLong_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPipeLong_Push_Proxy(IPipeLong *This,LONG *buf,ULONG cSent);
HRESULT  IPipeLong_Push_Proxy(IPipeLong *This, LONG *buf, ULONG cSent);
//C       void IPipeLong_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPipeLong_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_AsyncIPipeLong;
extern const IID IID_AsyncIPipeLong;
//C       typedef struct AsyncIPipeLongVtbl {
//C           HRESULT ( *QueryInterface)(AsyncIPipeLong *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(AsyncIPipeLong *This);
//C           ULONG ( *Release)(AsyncIPipeLong *This);
//C           HRESULT ( *Begin_Pull)(AsyncIPipeLong *This,ULONG cRequest);
//C           HRESULT ( *Finish_Pull)(AsyncIPipeLong *This,LONG *buf,ULONG *pcReturned);
//C           HRESULT ( *Begin_Push)(AsyncIPipeLong *This,LONG *buf,ULONG cSent);
//C           HRESULT ( *Finish_Push)(AsyncIPipeLong *This);
//C       } AsyncIPipeLongVtbl;
struct AsyncIPipeLongVtbl
{
    HRESULT  function(AsyncIPipeLong *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIPipeLong *This)AddRef;
    ULONG  function(AsyncIPipeLong *This)Release;
    HRESULT  function(AsyncIPipeLong *This, ULONG cRequest)Begin_Pull;
    HRESULT  function(AsyncIPipeLong *This, LONG *buf, ULONG *pcReturned)Finish_Pull;
    HRESULT  function(AsyncIPipeLong *This, LONG *buf, ULONG cSent)Begin_Push;
    HRESULT  function(AsyncIPipeLong *This)Finish_Push;
}
//C       struct AsyncIPipeLong {
//C         struct AsyncIPipeLongVtbl *lpVtbl;
//C       };
struct AsyncIPipeLong
{
    AsyncIPipeLongVtbl *lpVtbl;
}
//C       HRESULT AsyncIPipeLong_Begin_Pull_Proxy(AsyncIPipeLong *This,ULONG cRequest);
HRESULT  AsyncIPipeLong_Begin_Pull_Proxy(AsyncIPipeLong *This, ULONG cRequest);
//C       void AsyncIPipeLong_Begin_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeLong_Begin_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeLong_Finish_Pull_Proxy(AsyncIPipeLong *This,LONG *buf,ULONG *pcReturned);
HRESULT  AsyncIPipeLong_Finish_Pull_Proxy(AsyncIPipeLong *This, LONG *buf, ULONG *pcReturned);
//C       void AsyncIPipeLong_Finish_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeLong_Finish_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeLong_Begin_Push_Proxy(AsyncIPipeLong *This,LONG *buf,ULONG cSent);
HRESULT  AsyncIPipeLong_Begin_Push_Proxy(AsyncIPipeLong *This, LONG *buf, ULONG cSent);
//C       void AsyncIPipeLong_Begin_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeLong_Begin_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeLong_Finish_Push_Proxy(AsyncIPipeLong *This);
HRESULT  AsyncIPipeLong_Finish_Push_Proxy(AsyncIPipeLong *This);
//C       void AsyncIPipeLong_Finish_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeLong_Finish_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IPipeDouble;
extern const IID IID_IPipeDouble;
//C       typedef struct IPipeDoubleVtbl {
//C           HRESULT ( *QueryInterface)(IPipeDouble *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPipeDouble *This);
//C           ULONG ( *Release)(IPipeDouble *This);
//C           HRESULT ( *Pull)(IPipeDouble *This,DOUBLE *buf,ULONG cRequest,ULONG *pcReturned);
//C           HRESULT ( *Push)(IPipeDouble *This,DOUBLE *buf,ULONG cSent);
//C       } IPipeDoubleVtbl;
struct IPipeDoubleVtbl
{
    HRESULT  function(IPipeDouble *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPipeDouble *This)AddRef;
    ULONG  function(IPipeDouble *This)Release;
    HRESULT  function(IPipeDouble *This, DOUBLE *buf, ULONG cRequest, ULONG *pcReturned)Pull;
    HRESULT  function(IPipeDouble *This, DOUBLE *buf, ULONG cSent)Push;
}
//C       struct IPipeDouble {
//C         struct IPipeDoubleVtbl *lpVtbl;
//C       };
struct IPipeDouble
{
    IPipeDoubleVtbl *lpVtbl;
}
//C       HRESULT IPipeDouble_Pull_Proxy(IPipeDouble *This,DOUBLE *buf,ULONG cRequest,ULONG *pcReturned);
HRESULT  IPipeDouble_Pull_Proxy(IPipeDouble *This, DOUBLE *buf, ULONG cRequest, ULONG *pcReturned);
//C       void IPipeDouble_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPipeDouble_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPipeDouble_Push_Proxy(IPipeDouble *This,DOUBLE *buf,ULONG cSent);
HRESULT  IPipeDouble_Push_Proxy(IPipeDouble *This, DOUBLE *buf, ULONG cSent);
//C       void IPipeDouble_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPipeDouble_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_AsyncIPipeDouble;
extern const IID IID_AsyncIPipeDouble;
//C       typedef struct AsyncIPipeDoubleVtbl {
//C           HRESULT ( *QueryInterface)(AsyncIPipeDouble *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(AsyncIPipeDouble *This);
//C           ULONG ( *Release)(AsyncIPipeDouble *This);
//C           HRESULT ( *Begin_Pull)(AsyncIPipeDouble *This,ULONG cRequest);
//C           HRESULT ( *Finish_Pull)(AsyncIPipeDouble *This,DOUBLE *buf,ULONG *pcReturned);
//C           HRESULT ( *Begin_Push)(AsyncIPipeDouble *This,DOUBLE *buf,ULONG cSent);
//C           HRESULT ( *Finish_Push)(AsyncIPipeDouble *This);
//C       } AsyncIPipeDoubleVtbl;
struct AsyncIPipeDoubleVtbl
{
    HRESULT  function(AsyncIPipeDouble *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(AsyncIPipeDouble *This)AddRef;
    ULONG  function(AsyncIPipeDouble *This)Release;
    HRESULT  function(AsyncIPipeDouble *This, ULONG cRequest)Begin_Pull;
    HRESULT  function(AsyncIPipeDouble *This, DOUBLE *buf, ULONG *pcReturned)Finish_Pull;
    HRESULT  function(AsyncIPipeDouble *This, DOUBLE *buf, ULONG cSent)Begin_Push;
    HRESULT  function(AsyncIPipeDouble *This)Finish_Push;
}
//C       struct AsyncIPipeDouble {
//C         struct AsyncIPipeDoubleVtbl *lpVtbl;
//C       };
struct AsyncIPipeDouble
{
    AsyncIPipeDoubleVtbl *lpVtbl;
}
//C       HRESULT AsyncIPipeDouble_Begin_Pull_Proxy(AsyncIPipeDouble *This,ULONG cRequest);
HRESULT  AsyncIPipeDouble_Begin_Pull_Proxy(AsyncIPipeDouble *This, ULONG cRequest);
//C       void AsyncIPipeDouble_Begin_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeDouble_Begin_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeDouble_Finish_Pull_Proxy(AsyncIPipeDouble *This,DOUBLE *buf,ULONG *pcReturned);
HRESULT  AsyncIPipeDouble_Finish_Pull_Proxy(AsyncIPipeDouble *This, DOUBLE *buf, ULONG *pcReturned);
//C       void AsyncIPipeDouble_Finish_Pull_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeDouble_Finish_Pull_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeDouble_Begin_Push_Proxy(AsyncIPipeDouble *This,DOUBLE *buf,ULONG cSent);
HRESULT  AsyncIPipeDouble_Begin_Push_Proxy(AsyncIPipeDouble *This, DOUBLE *buf, ULONG cSent);
//C       void AsyncIPipeDouble_Begin_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeDouble_Begin_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT AsyncIPipeDouble_Finish_Push_Proxy(AsyncIPipeDouble *This);
HRESULT  AsyncIPipeDouble_Finish_Push_Proxy(AsyncIPipeDouble *This);
//C       void AsyncIPipeDouble_Finish_Push_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  AsyncIPipeDouble_Finish_Push_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IThumbnailExtractor;
extern const IID IID_IThumbnailExtractor;
//C       typedef struct IThumbnailExtractorVtbl {
//C           HRESULT ( *QueryInterface)(IThumbnailExtractor *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IThumbnailExtractor *This);
//C           ULONG ( *Release)(IThumbnailExtractor *This);
//C           HRESULT ( *ExtractThumbnail)(IThumbnailExtractor *This,IStorage *pStg,ULONG ulLength,ULONG ulHeight,ULONG *pulOutputLength,ULONG *pulOutputHeight,HBITMAP *phOutputBitmap);
//C           HRESULT ( *OnFileUpdated)(IThumbnailExtractor *This,IStorage *pStg);
//C       } IThumbnailExtractorVtbl;
struct IThumbnailExtractorVtbl
{
    HRESULT  function(IThumbnailExtractor *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IThumbnailExtractor *This)AddRef;
    ULONG  function(IThumbnailExtractor *This)Release;
    HRESULT  function(IThumbnailExtractor *This, IStorage *pStg, ULONG ulLength, ULONG ulHeight, ULONG *pulOutputLength, ULONG *pulOutputHeight, HBITMAP *phOutputBitmap)ExtractThumbnail;
    HRESULT  function(IThumbnailExtractor *This, IStorage *pStg)OnFileUpdated;
}
//C       struct IThumbnailExtractor {
//C         struct IThumbnailExtractorVtbl *lpVtbl;
//C       };
struct IThumbnailExtractor
{
    IThumbnailExtractorVtbl *lpVtbl;
}
//C       HRESULT IThumbnailExtractor_ExtractThumbnail_Proxy(IThumbnailExtractor *This,IStorage *pStg,ULONG ulLength,ULONG ulHeight,ULONG *pulOutputLength,ULONG *pulOutputHeight,HBITMAP *phOutputBitmap);
HRESULT  IThumbnailExtractor_ExtractThumbnail_Proxy(IThumbnailExtractor *This, IStorage *pStg, ULONG ulLength, ULONG ulHeight, ULONG *pulOutputLength, ULONG *pulOutputHeight, HBITMAP *phOutputBitmap);
//C       void IThumbnailExtractor_ExtractThumbnail_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IThumbnailExtractor_ExtractThumbnail_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IThumbnailExtractor_OnFileUpdated_Proxy(IThumbnailExtractor *This,IStorage *pStg);
HRESULT  IThumbnailExtractor_OnFileUpdated_Proxy(IThumbnailExtractor *This, IStorage *pStg);
//C       void IThumbnailExtractor_OnFileUpdated_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IThumbnailExtractor_OnFileUpdated_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IDummyHICONIncluder;
extern const IID IID_IDummyHICONIncluder;
//C       typedef struct IDummyHICONIncluderVtbl {
//C           HRESULT ( *QueryInterface)(IDummyHICONIncluder *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IDummyHICONIncluder *This);
//C           ULONG ( *Release)(IDummyHICONIncluder *This);
//C           HRESULT ( *Dummy)(IDummyHICONIncluder *This,HICON h1,HDC h2);
//C       } IDummyHICONIncluderVtbl;
struct IDummyHICONIncluderVtbl
{
    HRESULT  function(IDummyHICONIncluder *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDummyHICONIncluder *This)AddRef;
    ULONG  function(IDummyHICONIncluder *This)Release;
    HRESULT  function(IDummyHICONIncluder *This, HICON h1, HDC h2)Dummy;
}
//C       struct IDummyHICONIncluder {
//C         struct IDummyHICONIncluderVtbl *lpVtbl;
//C       };
struct IDummyHICONIncluder
{
    IDummyHICONIncluderVtbl *lpVtbl;
}
//C       HRESULT IDummyHICONIncluder_Dummy_Proxy(IDummyHICONIncluder *This,HICON h1,HDC h2);
HRESULT  IDummyHICONIncluder_Dummy_Proxy(IDummyHICONIncluder *This, HICON h1, HDC h2);
//C       void IDummyHICONIncluder_Dummy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDummyHICONIncluder_Dummy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef enum tagApplicationType {
//C         ServerApplication = 0,LibraryApplication = ServerApplication + 1
//C       } ApplicationType;
enum tagApplicationType
{
    ServerApplication,
    LibraryApplication,
}
alias tagApplicationType ApplicationType;
//C       typedef enum tagShutdownType {
//C         IdleShutdown = 0,ForcedShutdown = IdleShutdown + 1
//C       } ShutdownType;
enum tagShutdownType
{
    IdleShutdown,
    ForcedShutdown,
}
alias tagShutdownType ShutdownType;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0087_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0087_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0087_v0_0_s_ifspec;
//C       extern const IID IID_IProcessLock;
extern const IID IID_IProcessLock;
//C       typedef struct IProcessLockVtbl {
//C           HRESULT ( *QueryInterface)(IProcessLock *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IProcessLock *This);
//C           ULONG ( *Release)(IProcessLock *This);
//C           ULONG ( *AddRefOnProcess)(IProcessLock *This);
//C           ULONG ( *ReleaseRefOnProcess)(IProcessLock *This);
//C       } IProcessLockVtbl;
struct IProcessLockVtbl
{
    HRESULT  function(IProcessLock *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IProcessLock *This)AddRef;
    ULONG  function(IProcessLock *This)Release;
    ULONG  function(IProcessLock *This)AddRefOnProcess;
    ULONG  function(IProcessLock *This)ReleaseRefOnProcess;
}
//C       struct IProcessLock {
//C         struct IProcessLockVtbl *lpVtbl;
//C       };
struct IProcessLock
{
    IProcessLockVtbl *lpVtbl;
}
//C       ULONG IProcessLock_AddRefOnProcess_Proxy(IProcessLock *This);
ULONG  IProcessLock_AddRefOnProcess_Proxy(IProcessLock *This);
//C       void IProcessLock_AddRefOnProcess_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IProcessLock_AddRefOnProcess_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       ULONG IProcessLock_ReleaseRefOnProcess_Proxy(IProcessLock *This);
ULONG  IProcessLock_ReleaseRefOnProcess_Proxy(IProcessLock *This);
//C       void IProcessLock_ReleaseRefOnProcess_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IProcessLock_ReleaseRefOnProcess_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ISurrogateService;
extern const IID IID_ISurrogateService;
//C       typedef struct ISurrogateServiceVtbl {
//C           HRESULT ( *QueryInterface)(ISurrogateService *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISurrogateService *This);
//C           ULONG ( *Release)(ISurrogateService *This);
//C           HRESULT ( *Init)(ISurrogateService *This,const GUID *const rguidProcessID,IProcessLock *pProcessLock,WINBOOL *pfApplicationAware);
//C           HRESULT ( *ApplicationLaunch)(ISurrogateService *This,const GUID *const rguidApplID,ApplicationType appType);
//C           HRESULT ( *ApplicationFree)(ISurrogateService *This,const GUID *const rguidApplID);
//C           HRESULT ( *CatalogRefresh)(ISurrogateService *This,ULONG ulReserved);
//C           HRESULT ( *ProcessShutdown)(ISurrogateService *This,ShutdownType shutdownType);
//C       } ISurrogateServiceVtbl;
struct ISurrogateServiceVtbl
{
    HRESULT  function(ISurrogateService *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISurrogateService *This)AddRef;
    ULONG  function(ISurrogateService *This)Release;
    HRESULT  function(ISurrogateService *This, GUID *rguidProcessID, IProcessLock *pProcessLock, WINBOOL *pfApplicationAware)Init;
    HRESULT  function(ISurrogateService *This, GUID *rguidApplID, ApplicationType appType)ApplicationLaunch;
    HRESULT  function(ISurrogateService *This, GUID *rguidApplID)ApplicationFree;
    HRESULT  function(ISurrogateService *This, ULONG ulReserved)CatalogRefresh;
    HRESULT  function(ISurrogateService *This, ShutdownType shutdownType)ProcessShutdown;
}
//C       struct ISurrogateService {
//C         struct ISurrogateServiceVtbl *lpVtbl;
//C       };
struct ISurrogateService
{
    ISurrogateServiceVtbl *lpVtbl;
}
//C       HRESULT ISurrogateService_Init_Proxy(ISurrogateService *This,const GUID *const rguidProcessID,IProcessLock *pProcessLock,WINBOOL *pfApplicationAware);
HRESULT  ISurrogateService_Init_Proxy(ISurrogateService *This, GUID *rguidProcessID, IProcessLock *pProcessLock, WINBOOL *pfApplicationAware);
//C       void ISurrogateService_Init_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogateService_Init_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISurrogateService_ApplicationLaunch_Proxy(ISurrogateService *This,const GUID *const rguidApplID,ApplicationType appType);
HRESULT  ISurrogateService_ApplicationLaunch_Proxy(ISurrogateService *This, GUID *rguidApplID, ApplicationType appType);
//C       void ISurrogateService_ApplicationLaunch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogateService_ApplicationLaunch_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISurrogateService_ApplicationFree_Proxy(ISurrogateService *This,const GUID *const rguidApplID);
HRESULT  ISurrogateService_ApplicationFree_Proxy(ISurrogateService *This, GUID *rguidApplID);
//C       void ISurrogateService_ApplicationFree_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogateService_ApplicationFree_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISurrogateService_CatalogRefresh_Proxy(ISurrogateService *This,ULONG ulReserved);
HRESULT  ISurrogateService_CatalogRefresh_Proxy(ISurrogateService *This, ULONG ulReserved);
//C       void ISurrogateService_CatalogRefresh_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogateService_CatalogRefresh_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISurrogateService_ProcessShutdown_Proxy(ISurrogateService *This,ShutdownType shutdownType);
HRESULT  ISurrogateService_ProcessShutdown_Proxy(ISurrogateService *This, ShutdownType shutdownType);
//C       void ISurrogateService_ProcessShutdown_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISurrogateService_ProcessShutdown_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef enum _APTTYPE {
//C         APTTYPE_CURRENT = -1,APTTYPE_STA = 0,APTTYPE_MTA = 1,APTTYPE_NA = 2,APTTYPE_MAINSTA = 3
//C       } APTTYPE;
enum _APTTYPE
{
    APTTYPE_CURRENT = -1,
    APTTYPE_STA,
    APTTYPE_MTA,
    APTTYPE_NA,
    APTTYPE_MAINSTA,
}
alias _APTTYPE APTTYPE;
//C       typedef enum _THDTYPE {
//C         THDTYPE_BLOCKMESSAGES = 0,THDTYPE_PROCESSMESSAGES = 1
//C       } THDTYPE;
enum _THDTYPE
{
    THDTYPE_BLOCKMESSAGES,
    THDTYPE_PROCESSMESSAGES,
}
alias _THDTYPE THDTYPE;
//C       typedef DWORD APARTMENTID;
alias DWORD APARTMENTID;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0089_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0089_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0089_v0_0_s_ifspec;
//C       extern const IID IID_IComThreadingInfo;
extern const IID IID_IComThreadingInfo;
//C       typedef struct IComThreadingInfoVtbl {
//C           HRESULT ( *QueryInterface)(IComThreadingInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IComThreadingInfo *This);
//C           ULONG ( *Release)(IComThreadingInfo *This);
//C           HRESULT ( *GetCurrentApartmentType)(IComThreadingInfo *This,APTTYPE *pAptType);
//C           HRESULT ( *GetCurrentThreadType)(IComThreadingInfo *This,THDTYPE *pThreadType);
//C           HRESULT ( *GetCurrentLogicalThreadId)(IComThreadingInfo *This,GUID *pguidLogicalThreadId);
//C           HRESULT ( *SetCurrentLogicalThreadId)(IComThreadingInfo *This,const GUID *const rguid);
//C       } IComThreadingInfoVtbl;
struct IComThreadingInfoVtbl
{
    HRESULT  function(IComThreadingInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IComThreadingInfo *This)AddRef;
    ULONG  function(IComThreadingInfo *This)Release;
    HRESULT  function(IComThreadingInfo *This, APTTYPE *pAptType)GetCurrentApartmentType;
    HRESULT  function(IComThreadingInfo *This, THDTYPE *pThreadType)GetCurrentThreadType;
    HRESULT  function(IComThreadingInfo *This, GUID *pguidLogicalThreadId)GetCurrentLogicalThreadId;
    HRESULT  function(IComThreadingInfo *This, GUID *rguid)SetCurrentLogicalThreadId;
}
//C       struct IComThreadingInfo {
//C         struct IComThreadingInfoVtbl *lpVtbl;
//C       };
struct IComThreadingInfo
{
    IComThreadingInfoVtbl *lpVtbl;
}
//C       HRESULT IComThreadingInfo_GetCurrentApartmentType_Proxy(IComThreadingInfo *This,APTTYPE *pAptType);
HRESULT  IComThreadingInfo_GetCurrentApartmentType_Proxy(IComThreadingInfo *This, APTTYPE *pAptType);
//C       void IComThreadingInfo_GetCurrentApartmentType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IComThreadingInfo_GetCurrentApartmentType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IComThreadingInfo_GetCurrentThreadType_Proxy(IComThreadingInfo *This,THDTYPE *pThreadType);
HRESULT  IComThreadingInfo_GetCurrentThreadType_Proxy(IComThreadingInfo *This, THDTYPE *pThreadType);
//C       void IComThreadingInfo_GetCurrentThreadType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IComThreadingInfo_GetCurrentThreadType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(IComThreadingInfo *This,GUID *pguidLogicalThreadId);
HRESULT  IComThreadingInfo_GetCurrentLogicalThreadId_Proxy(IComThreadingInfo *This, GUID *pguidLogicalThreadId);
//C       void IComThreadingInfo_GetCurrentLogicalThreadId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IComThreadingInfo_GetCurrentLogicalThreadId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(IComThreadingInfo *This,const GUID *const rguid);
HRESULT  IComThreadingInfo_SetCurrentLogicalThreadId_Proxy(IComThreadingInfo *This, GUID *rguid);
//C       void IComThreadingInfo_SetCurrentLogicalThreadId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IComThreadingInfo_SetCurrentLogicalThreadId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IProcessInitControl;
extern const IID IID_IProcessInitControl;
//C       typedef struct IProcessInitControlVtbl {
//C           HRESULT ( *QueryInterface)(IProcessInitControl *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IProcessInitControl *This);
//C           ULONG ( *Release)(IProcessInitControl *This);
//C           HRESULT ( *ResetInitializerTimeout)(IProcessInitControl *This,DWORD dwSecondsRemaining);
//C       } IProcessInitControlVtbl;
struct IProcessInitControlVtbl
{
    HRESULT  function(IProcessInitControl *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IProcessInitControl *This)AddRef;
    ULONG  function(IProcessInitControl *This)Release;
    HRESULT  function(IProcessInitControl *This, DWORD dwSecondsRemaining)ResetInitializerTimeout;
}
//C       struct IProcessInitControl {
//C         struct IProcessInitControlVtbl *lpVtbl;
//C       };
struct IProcessInitControl
{
    IProcessInitControlVtbl *lpVtbl;
}
//C       HRESULT IProcessInitControl_ResetInitializerTimeout_Proxy(IProcessInitControl *This,DWORD dwSecondsRemaining);
HRESULT  IProcessInitControl_ResetInitializerTimeout_Proxy(IProcessInitControl *This, DWORD dwSecondsRemaining);
//C       void IProcessInitControl_ResetInitializerTimeout_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IProcessInitControl_ResetInitializerTimeout_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0091_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0091_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0091_v0_0_s_ifspec;
//C       typedef IInitializeSpy *LPINITIALIZESPY;
alias IInitializeSpy *LPINITIALIZESPY;
//C       extern const IID IID_IInitializeSpy;
extern const IID IID_IInitializeSpy;
//C       typedef struct IInitializeSpyVtbl {
//C           HRESULT ( *QueryInterface)(IInitializeSpy *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInitializeSpy *This);
//C           ULONG ( *Release)(IInitializeSpy *This);
//C           HRESULT ( *PreInitialize)(IInitializeSpy *This,DWORD dwCoInit,DWORD dwCurThreadAptRefs);
//C           HRESULT ( *PostInitialize)(IInitializeSpy *This,HRESULT hrCoInit,DWORD dwCoInit,DWORD dwNewThreadAptRefs);
//C           HRESULT ( *PreUninitialize)(IInitializeSpy *This,DWORD dwCurThreadAptRefs);
//C           HRESULT ( *PostUninitialize)(IInitializeSpy *This,DWORD dwNewThreadAptRefs);
//C       } IInitializeSpyVtbl;
struct IInitializeSpyVtbl
{
    HRESULT  function(IInitializeSpy *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInitializeSpy *This)AddRef;
    ULONG  function(IInitializeSpy *This)Release;
    HRESULT  function(IInitializeSpy *This, DWORD dwCoInit, DWORD dwCurThreadAptRefs)PreInitialize;
    HRESULT  function(IInitializeSpy *This, HRESULT hrCoInit, DWORD dwCoInit, DWORD dwNewThreadAptRefs)PostInitialize;
    HRESULT  function(IInitializeSpy *This, DWORD dwCurThreadAptRefs)PreUninitialize;
    HRESULT  function(IInitializeSpy *This, DWORD dwNewThreadAptRefs)PostUninitialize;
}
//C       struct IInitializeSpy {
//C         struct IInitializeSpyVtbl *lpVtbl;
//C       };
struct IInitializeSpy
{
    IInitializeSpyVtbl *lpVtbl;
}
//C       HRESULT IInitializeSpy_PreInitialize_Proxy(IInitializeSpy *This,DWORD dwCoInit,DWORD dwCurThreadAptRefs);
HRESULT  IInitializeSpy_PreInitialize_Proxy(IInitializeSpy *This, DWORD dwCoInit, DWORD dwCurThreadAptRefs);
//C       void IInitializeSpy_PreInitialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInitializeSpy_PreInitialize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInitializeSpy_PostInitialize_Proxy(IInitializeSpy *This,HRESULT hrCoInit,DWORD dwCoInit,DWORD dwNewThreadAptRefs);
HRESULT  IInitializeSpy_PostInitialize_Proxy(IInitializeSpy *This, HRESULT hrCoInit, DWORD dwCoInit, DWORD dwNewThreadAptRefs);
//C       void IInitializeSpy_PostInitialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInitializeSpy_PostInitialize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInitializeSpy_PreUninitialize_Proxy(IInitializeSpy *This,DWORD dwCurThreadAptRefs);
HRESULT  IInitializeSpy_PreUninitialize_Proxy(IInitializeSpy *This, DWORD dwCurThreadAptRefs);
//C       void IInitializeSpy_PreUninitialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInitializeSpy_PreUninitialize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInitializeSpy_PostUninitialize_Proxy(IInitializeSpy *This,DWORD dwNewThreadAptRefs);
HRESULT  IInitializeSpy_PostUninitialize_Proxy(IInitializeSpy *This, DWORD dwNewThreadAptRefs);
//C       void IInitializeSpy_PostUninitialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInitializeSpy_PostUninitialize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0092_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_objidl_0092_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0092_v0_0_s_ifspec;
//C       ULONG CLIPFORMAT_UserSize(ULONG *,ULONG,CLIPFORMAT *);
ULONG  CLIPFORMAT_UserSize(ULONG *, ULONG , CLIPFORMAT *);
//C       unsigned char * CLIPFORMAT_UserMarshal(ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserMarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C       unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserUnmarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C       void CLIPFORMAT_UserFree(ULONG *,CLIPFORMAT *);
void  CLIPFORMAT_UserFree(ULONG *, CLIPFORMAT *);
//C       ULONG HBITMAP_UserSize(ULONG *,ULONG,HBITMAP *);
ULONG  HBITMAP_UserSize(ULONG *, ULONG , HBITMAP *);
//C       unsigned char * HBITMAP_UserMarshal(ULONG *,unsigned char *,HBITMAP *);
ubyte * HBITMAP_UserMarshal(ULONG *, ubyte *, HBITMAP *);
//C       unsigned char * HBITMAP_UserUnmarshal(ULONG *,unsigned char *,HBITMAP *);
ubyte * HBITMAP_UserUnmarshal(ULONG *, ubyte *, HBITMAP *);
//C       void HBITMAP_UserFree(ULONG *,HBITMAP *);
void  HBITMAP_UserFree(ULONG *, HBITMAP *);
//C       ULONG HDC_UserSize(ULONG *,ULONG,HDC *);
ULONG  HDC_UserSize(ULONG *, ULONG , HDC *);
//C       unsigned char * HDC_UserMarshal(ULONG *,unsigned char *,HDC *);
ubyte * HDC_UserMarshal(ULONG *, ubyte *, HDC *);
//C       unsigned char * HDC_UserUnmarshal(ULONG *,unsigned char *,HDC *);
ubyte * HDC_UserUnmarshal(ULONG *, ubyte *, HDC *);
//C       void HDC_UserFree(ULONG *,HDC *);
void  HDC_UserFree(ULONG *, HDC *);
//C       ULONG HICON_UserSize(ULONG *,ULONG,HICON *);
ULONG  HICON_UserSize(ULONG *, ULONG , HICON *);
//C       unsigned char * HICON_UserMarshal(ULONG *,unsigned char *,HICON *);
ubyte * HICON_UserMarshal(ULONG *, ubyte *, HICON *);
//C       unsigned char * HICON_UserUnmarshal(ULONG *,unsigned char *,HICON *);
ubyte * HICON_UserUnmarshal(ULONG *, ubyte *, HICON *);
//C       void HICON_UserFree(ULONG *,HICON *);
void  HICON_UserFree(ULONG *, HICON *);
//C       HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This,ULONG celt,IUnknown **rgelt,ULONG *pceltFetched);
HRESULT  IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This,ULONG celt,IUnknown **rgelt,ULONG *pceltFetched);
HRESULT  IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
//C       HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This,BIND_OPTS *pbindopts);
HRESULT  IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts);
//C       HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This,BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts);
//C       HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This,BIND_OPTS *pbindopts);
HRESULT  IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts);
//C       HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This,BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts);
//C       HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This,ULONG celt,IMoniker **rgelt,ULONG *pceltFetched);
HRESULT  IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This,ULONG celt,IMoniker **rgelt,ULONG *pceltFetched);
HRESULT  IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
//C       WINBOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This);
WINBOOL  IRunnableObject_IsRunning_Proxy(IRunnableObject *This);
//C       HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This);
HRESULT  IRunnableObject_IsRunning_Stub(IRunnableObject *This);
//C       HRESULT IEnumString_Next_Proxy(IEnumString *This,ULONG celt,LPOLESTR *rgelt,ULONG *pceltFetched);
HRESULT  IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumString_Next_Stub(IEnumString *This,ULONG celt,LPOLESTR *rgelt,ULONG *pceltFetched);
HRESULT  IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
//C       HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This,ULARGE_INTEGER ulOffset,void *pv,ULONG cb,ULONG *pcbRead);
HRESULT  ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);
//C       HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This,ULARGE_INTEGER ulOffset,byte *pv,ULONG cb,ULONG *pcbRead);
HRESULT  ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead);
//C       HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This,ULARGE_INTEGER ulOffset,const void *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbWritten);
//C       HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This,ULARGE_INTEGER ulOffset,const byte *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbWritten);
//C       void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This,IMoniker *pmk);
void  IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk);
//C       HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This,IMoniker *pmk);
HRESULT  IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk);
//C       HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This,const void *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, void *pv, ULONG cb, ULONG *pcbWritten);
//C       HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This,const byte *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, byte *pv, ULONG cb, ULONG *pcbWritten);
//C       HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This,ULARGE_INTEGER ulOffset,const void *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbWritten);
//C       HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This,ULARGE_INTEGER ulOffset,const byte *pv,ULONG cb,ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbWritten);
//C       void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This,FORMATETC *pFormatetc,STGMEDIUM *pStgmed);
void  AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
//C       HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This,FORMATETC *pFormatetc,ASYNC_STGMEDIUM *pStgmed);
HRESULT  AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed);
//C       void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This,DWORD dwAspect,LONG lindex);
void  AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex);
//C       HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This,DWORD dwAspect,LONG lindex);
HRESULT  AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex);
//C       void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This,IMoniker *pmk);
void  AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk);
//C       HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This,IMoniker *pmk);
HRESULT  AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk);
//C       void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This);
void  AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This);
//C       HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This);
HRESULT  AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This);
//C       void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This,IMoniker *pmk);
void  AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk);
//C       HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This,IMoniker *pmk);
HRESULT  AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk);
//C       void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This);
void  AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This);
//C       HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This);
HRESULT  AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This);
//C     ULONG SNB_UserSize (ULONG *,ULONG,SNB *);
ULONG  SNB_UserSize(ULONG *, ULONG , SNB *);
//C     unsigned char * SNB_UserMarshal (ULONG *,unsigned char *,SNB *);
ubyte * SNB_UserMarshal(ULONG *, ubyte *, SNB *);
//C     unsigned char * SNB_UserUnmarshal(ULONG *,unsigned char *,SNB *);
ubyte * SNB_UserUnmarshal(ULONG *, ubyte *, SNB *);
//C     void SNB_UserFree (ULONG *,SNB *);
void  SNB_UserFree(ULONG *, SNB *);
//C     ULONG CLIPFORMAT_UserSize (ULONG *,ULONG,CLIPFORMAT *);
ULONG  CLIPFORMAT_UserSize(ULONG *, ULONG , CLIPFORMAT *);
//C     unsigned char * CLIPFORMAT_UserMarshal (ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserMarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C     unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserUnmarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C     void CLIPFORMAT_UserFree (ULONG *,CLIPFORMAT *);
void  CLIPFORMAT_UserFree(ULONG *, CLIPFORMAT *);
//C     ULONG STGMEDIUM_UserSize (ULONG *,ULONG,STGMEDIUM *);
ULONG  STGMEDIUM_UserSize(ULONG *, ULONG , STGMEDIUM *);
//C     unsigned char * STGMEDIUM_UserMarshal (ULONG *,unsigned char *,STGMEDIUM *);
ubyte * STGMEDIUM_UserMarshal(ULONG *, ubyte *, STGMEDIUM *);
//C     unsigned char * STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,STGMEDIUM *);
ubyte * STGMEDIUM_UserUnmarshal(ULONG *, ubyte *, STGMEDIUM *);
//C     void STGMEDIUM_UserFree (ULONG *,STGMEDIUM *);
void  STGMEDIUM_UserFree(ULONG *, STGMEDIUM *);
//C     ULONG ASYNC_STGMEDIUM_UserSize (ULONG *,ULONG,ASYNC_STGMEDIUM *);
ULONG  ASYNC_STGMEDIUM_UserSize(ULONG *, ULONG , ASYNC_STGMEDIUM *);
//C     unsigned char * ASYNC_STGMEDIUM_UserMarshal (ULONG *,unsigned char *,ASYNC_STGMEDIUM *);
ubyte * ASYNC_STGMEDIUM_UserMarshal(ULONG *, ubyte *, ASYNC_STGMEDIUM *);
//C     unsigned char * ASYNC_STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,ASYNC_STGMEDIUM *);
ubyte * ASYNC_STGMEDIUM_UserUnmarshal(ULONG *, ubyte *, ASYNC_STGMEDIUM *);
//C     void ASYNC_STGMEDIUM_UserFree (ULONG *,ASYNC_STGMEDIUM *);
void  ASYNC_STGMEDIUM_UserFree(ULONG *, ASYNC_STGMEDIUM *);
//C     ULONG FLAG_STGMEDIUM_UserSize (ULONG *,ULONG,FLAG_STGMEDIUM *);
ULONG  FLAG_STGMEDIUM_UserSize(ULONG *, ULONG , FLAG_STGMEDIUM *);
//C     unsigned char * FLAG_STGMEDIUM_UserMarshal (ULONG *,unsigned char *,FLAG_STGMEDIUM *);
ubyte * FLAG_STGMEDIUM_UserMarshal(ULONG *, ubyte *, FLAG_STGMEDIUM *);
//C     unsigned char * FLAG_STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,FLAG_STGMEDIUM *);
ubyte * FLAG_STGMEDIUM_UserUnmarshal(ULONG *, ubyte *, FLAG_STGMEDIUM *);
//C     void FLAG_STGMEDIUM_UserFree (ULONG *,FLAG_STGMEDIUM *);
void  FLAG_STGMEDIUM_UserFree(ULONG *, FLAG_STGMEDIUM *);
//C       extern const IID GUID_NULL;
extern const IID GUID_NULL;
//C       extern const IID CATID_MARSHALER;
extern const IID CATID_MARSHALER;
//C       extern const IID IID_IRpcChannel;
extern const IID IID_IRpcChannel;
//C       extern const IID IID_IRpcStub;
extern const IID IID_IRpcStub;
//C       extern const IID IID_IStubManager;
extern const IID IID_IStubManager;
//C       extern const IID IID_IRpcProxy;
extern const IID IID_IRpcProxy;
//C       extern const IID IID_IProxyManager;
extern const IID IID_IProxyManager;
//C       extern const IID IID_IPSFactory;
extern const IID IID_IPSFactory;
//C       extern const IID IID_IInternalMoniker;
extern const IID IID_IInternalMoniker;
//C       extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved1;
//C       extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved2;
//C       extern const IID IID_IDfReserved3;
extern const IID IID_IDfReserved3;
//C       extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_StdMarshal;
//C       extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_AggStdMarshal;
//C       extern const CLSID CLSID_StdAsyncActManager;
extern const CLSID CLSID_StdAsyncActManager;
//C       extern const IID IID_IStub;
extern const IID IID_IStub;
//C       extern const IID IID_IProxy;
extern const IID IID_IProxy;
//C       extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumGeneric;
//C       extern const IID IID_IEnumHolder;
extern const IID IID_IEnumHolder;
//C       extern const IID IID_IEnumCallback;
extern const IID IID_IEnumCallback;
//C       extern const IID IID_IOleManager;
extern const IID IID_IOleManager;
//C       extern const IID IID_IOlePresObj;
extern const IID IID_IOlePresObj;
//C       extern const IID IID_IDebug;
extern const IID IID_IDebug;
//C       extern const IID IID_IDebugStream;
extern const IID IID_IDebugStream;
//C       extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSGenObject;
//C       extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClientSite;
//C       extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSClassObject;
//C       extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceActive;
//C       extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSInPlaceFrame;
//C       extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSDragDrop;
//C       extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSBindCtx;
//C       extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_PSEnumerators;
//C       extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticMetafile;
//C       extern const CLSID CLSID_StaticDib;
extern const CLSID CLSID_StaticDib;
//C       extern const CLSID CID_CDfsVolume;
extern const CLSID CID_CDfsVolume;
//C       extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_DCOMAccessControl;
//C       extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_StdGlobalInterfaceTable;
//C       extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_ComBinding;
//C       extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_StdEvent;
//C       extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_ManualResetEvent;
//C       extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_SynchronizeContainer;
//C       extern const CLSID CLSID_AddrControl;
extern const CLSID CLSID_AddrControl;
//C       extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDFormKrnl;
//C       extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDPropertyPage;
//C       extern const CLSID CLSID_CCDFormDialog;
extern const CLSID CLSID_CCDFormDialog;
//C       extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDCommandButton;
//C       extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDComboBox;
//C       extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDTextBox;
//C       extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDCheckBox;
//C       extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDLabel;
//C       extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDOptionButton;
//C       extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDListBox;
//C       extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDScrollBar;
//C       extern const CLSID CLSID_CCDGroupBox;
extern const CLSID CLSID_CCDGroupBox;
//C       extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGeneralPropertyPage;
//C       extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
//C       extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
//C       extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
//C       extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
//C       extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
//C       extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
//C       extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
//C       extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
//C       extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
//C       extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
//C       extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
//C       extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
//C       extern const CLSID CLSID_CCDXObjectPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;
//C       extern const CLSID CLSID_CStdPropertyFrame;
extern const CLSID CLSID_CStdPropertyFrame;
//C       extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CFormPropertyPage;
//C       extern const CLSID CLSID_CGridPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;
//C       extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CWSJArticlePage;
//C       extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_CSystemPage;
//C       extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_IdentityUnmarshal;
//C       extern const CLSID CLSID_InProcFreeMarshaler;
extern const CLSID CLSID_InProcFreeMarshaler;
//C       extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_Metafile;
//C       extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_EnhMetafile;
//C       extern const CLSID CLSID_Picture_Dib;
extern const CLSID CLSID_Picture_Dib;
//C       extern const GUID GUID_TRISTATE;
extern const GUID GUID_TRISTATE;
//C     typedef enum tagCOINIT {
//C       COINIT_APARTMENTTHREADED = 0x2,COINIT_MULTITHREADED = 0x0,COINIT_DISABLE_OLE1DDE = 0x4,COINIT_SPEED_OVER_MEMORY = 0x8
//C     } COINIT;
enum tagCOINIT
{
    COINIT_APARTMENTTHREADED = 2,
    COINIT_MULTITHREADED = 0,
    COINIT_DISABLE_OLE1DDE = 4,
    COINIT_SPEED_OVER_MEMORY = 8,
}
alias tagCOINIT COINIT;
//C     extern  DWORD CoBuildVersion(void);
DWORD  CoBuildVersion();
//C     extern  HRESULT CoInitialize(LPVOID pvReserved);
HRESULT  CoInitialize(LPVOID pvReserved);
//C     extern  void CoUninitialize(void);
void  CoUninitialize();
//C     extern  HRESULT CoGetMalloc(DWORD dwMemContext,LPMALLOC *ppMalloc);
HRESULT  CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc);
//C     extern  DWORD CoGetCurrentProcess(void);
DWORD  CoGetCurrentProcess();
//C     extern  HRESULT CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
HRESULT  CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
//C     extern  HRESULT CoRevokeMallocSpy(void);
HRESULT  CoRevokeMallocSpy();
//C     extern  HRESULT CoCreateStandardMalloc(DWORD memctx,IMalloc **ppMalloc);
HRESULT  CoCreateStandardMalloc(DWORD memctx, IMalloc **ppMalloc);
//C     extern  HRESULT CoInitializeEx(LPVOID pvReserved,DWORD dwCoInit);
HRESULT  CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit);
//C     extern  HRESULT CoGetCallerTID(LPDWORD lpdwTID);
HRESULT  CoGetCallerTID(LPDWORD lpdwTID);
//C     extern  HRESULT CoRegisterInitializeSpy(LPINITIALIZESPY pSpy,ULARGE_INTEGER *puliCookie);
HRESULT  CoRegisterInitializeSpy(LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
//C     extern  HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie);
HRESULT  CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie);
//C     extern  HRESULT CoGetContextToken(ULONG_PTR *pToken);
HRESULT  CoGetContextToken(ULONG_PTR *pToken);
//C     typedef enum tagCOMSD {
//C       SD_LAUNCHPERMISSIONS = 0,SD_ACCESSPERMISSIONS = 1,SD_LAUNCHRESTRICTIONS = 2,SD_ACCESSRESTRICTIONS = 3
//C     } COMSD;
enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS,
    SD_ACCESSPERMISSIONS,
    SD_LAUNCHRESTRICTIONS,
    SD_ACCESSRESTRICTIONS,
}
alias tagCOMSD COMSD;
//C     extern  HRESULT CoGetSystemSecurityPermissions(COMSD comSDType,PSECURITY_DESCRIPTOR *ppSD);
HRESULT  CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);
//C     typedef struct tagSOleTlsDataPublic {
//C       void *pvReserved0[2];
//C       DWORD dwReserved0[3];
//C       void *pvReserved1[1];
//C       DWORD dwReserved1[3];
//C       void *pvReserved2[4];
//C       DWORD dwReserved2[1];
//C       void *pCurrentCtx;
//C     } SOleTlsDataPublic;
struct tagSOleTlsDataPublic
{
    void *[2]pvReserved0;
    DWORD [3]dwReserved0;
    void *[1]pvReserved1;
    DWORD [3]dwReserved1;
    void *[4]pvReserved2;
    DWORD [1]dwReserved2;
    void *pCurrentCtx;
}
alias tagSOleTlsDataPublic SOleTlsDataPublic;
//C     extern  HRESULT CoGetObjectContext(const IID *const riid,LPVOID *ppv);
HRESULT  CoGetObjectContext(IID *riid, LPVOID *ppv);
//C     extern  HRESULT CoGetClassObject(const IID *const rclsid,DWORD dwClsContext,LPVOID pvReserved,const IID *const riid,LPVOID *ppv);
HRESULT  CoGetClassObject(IID *rclsid, DWORD dwClsContext, LPVOID pvReserved, IID *riid, LPVOID *ppv);
//C     extern  HRESULT CoRegisterClassObject(const IID *const rclsid,LPUNKNOWN pUnk,DWORD dwClsContext,DWORD flags,LPDWORD lpdwRegister);
HRESULT  CoRegisterClassObject(IID *rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
//C     extern  HRESULT CoRevokeClassObject(DWORD dwRegister);
HRESULT  CoRevokeClassObject(DWORD dwRegister);
//C     extern  HRESULT CoResumeClassObjects(void);
HRESULT  CoResumeClassObjects();
//C     extern  HRESULT CoSuspendClassObjects(void);
HRESULT  CoSuspendClassObjects();
//C     extern  ULONG CoAddRefServerProcess(void);
ULONG  CoAddRefServerProcess();
//C     extern  ULONG CoReleaseServerProcess(void);
ULONG  CoReleaseServerProcess();
//C     extern  HRESULT CoGetPSClsid(const IID *const riid,CLSID *pClsid);
HRESULT  CoGetPSClsid(IID *riid, CLSID *pClsid);
//C     extern  HRESULT CoRegisterPSClsid(const IID *const riid,const IID *const rclsid);
HRESULT  CoRegisterPSClsid(IID *riid, IID *rclsid);
//C     extern  HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate);
HRESULT  CoRegisterSurrogate(LPSURROGATE pSurrogate);
//C     extern  HRESULT CoGetMarshalSizeMax(ULONG *pulSize,const IID *const riid,LPUNKNOWN pUnk,DWORD dwDestContext,LPVOID pvDestContext,DWORD mshlflags);
HRESULT  CoGetMarshalSizeMax(ULONG *pulSize, IID *riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
//C     extern  HRESULT CoMarshalInterface(LPSTREAM pStm,const IID *const riid,LPUNKNOWN pUnk,DWORD dwDestContext,LPVOID pvDestContext,DWORD mshlflags);
HRESULT  CoMarshalInterface(LPSTREAM pStm, IID *riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
//C     extern  HRESULT CoUnmarshalInterface(LPSTREAM pStm,const IID *const riid,LPVOID *ppv);
HRESULT  CoUnmarshalInterface(LPSTREAM pStm, IID *riid, LPVOID *ppv);
//C     extern  HRESULT CoMarshalHresult(LPSTREAM pstm,HRESULT hresult);
HRESULT  CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
//C     extern  HRESULT CoUnmarshalHresult(LPSTREAM pstm,HRESULT *phresult);
HRESULT  CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult);
//C     extern  HRESULT CoReleaseMarshalData(LPSTREAM pStm);
HRESULT  CoReleaseMarshalData(LPSTREAM pStm);
//C     extern  HRESULT CoDisconnectObject(LPUNKNOWN pUnk,DWORD dwReserved);
HRESULT  CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved);
//C     extern  HRESULT CoLockObjectExternal(LPUNKNOWN pUnk,WINBOOL fLock,WINBOOL fLastUnlockReleases);
HRESULT  CoLockObjectExternal(LPUNKNOWN pUnk, WINBOOL fLock, WINBOOL fLastUnlockReleases);
//C     extern  HRESULT CoGetStandardMarshal(const IID *const riid,LPUNKNOWN pUnk,DWORD dwDestContext,LPVOID pvDestContext,DWORD mshlflags,LPMARSHAL *ppMarshal);
HRESULT  CoGetStandardMarshal(IID *riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal);
//C     extern  HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter,DWORD smexflags,LPUNKNOWN *ppUnkInner);
HRESULT  CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner);
//C     typedef enum tagSTDMSHLFLAGS {
//C       SMEXF_SERVER = 0x01,SMEXF_HANDLER = 0x02
//C     } STDMSHLFLAGS;
enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 1,
    SMEXF_HANDLER,
}
alias tagSTDMSHLFLAGS STDMSHLFLAGS;
//C     extern  WINBOOL CoIsHandlerConnected(LPUNKNOWN pUnk);
WINBOOL  CoIsHandlerConnected(LPUNKNOWN pUnk);
//C     extern  HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid,LPUNKNOWN pUnk,LPSTREAM *ppStm);
HRESULT  CoMarshalInterThreadInterfaceInStream(IID *riid, LPUNKNOWN pUnk, LPSTREAM *ppStm);
//C     extern  HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm,const IID *const iid,LPVOID *ppv);
HRESULT  CoGetInterfaceAndReleaseStream(LPSTREAM pStm, IID *iid, LPVOID *ppv);
//C     extern  HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter,LPUNKNOWN *ppunkMarshal);
HRESULT  CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal);
//C     extern  HINSTANCE CoLoadLibrary(LPOLESTR lpszLibName,WINBOOL bAutoFree);
HINSTANCE  CoLoadLibrary(LPOLESTR lpszLibName, WINBOOL bAutoFree);
//C     extern  void CoFreeLibrary(HINSTANCE hInst);
void  CoFreeLibrary(HINSTANCE hInst);
//C     extern  void CoFreeAllLibraries(void);
void  CoFreeAllLibraries();
//C     extern  void CoFreeUnusedLibraries(void);
void  CoFreeUnusedLibraries();
//C     extern  void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay,DWORD dwReserved);
void  CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved);
//C     extern  HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc,LONG cAuthSvc,SOLE_AUTHENTICATION_SERVICE *asAuthSvc,void *pReserved1,DWORD dwAuthnLevel,DWORD dwImpLevel,void *pAuthList,DWORD dwCapabilities,void *pReserved3);
HRESULT  CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3);
//C     extern  HRESULT CoGetCallContext(const IID *const riid,void **ppInterface);
HRESULT  CoGetCallContext(IID *riid, void **ppInterface);
//C     extern  HRESULT CoQueryProxyBlanket(IUnknown *pProxy,DWORD *pwAuthnSvc,DWORD *pAuthzSvc,OLECHAR **pServerPrincName,DWORD *pAuthnLevel,DWORD *pImpLevel,RPC_AUTH_IDENTITY_HANDLE *pAuthInfo,DWORD *pCapabilites);
HRESULT  CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites);
//C     extern  HRESULT CoSetProxyBlanket(IUnknown *pProxy,DWORD dwAuthnSvc,DWORD dwAuthzSvc,OLECHAR *pServerPrincName,DWORD dwAuthnLevel,DWORD dwImpLevel,RPC_AUTH_IDENTITY_HANDLE pAuthInfo,DWORD dwCapabilities);
HRESULT  CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
//C     extern  HRESULT CoCopyProxy(IUnknown *pProxy,IUnknown **ppCopy);
HRESULT  CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy);
//C     extern  HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc,DWORD *pAuthzSvc,OLECHAR **pServerPrincName,DWORD *pAuthnLevel,DWORD *pImpLevel,RPC_AUTHZ_HANDLE *pPrivs,DWORD *pCapabilities);
HRESULT  CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities);
//C     extern  HRESULT CoImpersonateClient();
HRESULT  CoImpersonateClient();
//C     extern  HRESULT CoRevertToSelf();
HRESULT  CoRevertToSelf();
//C     extern  HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc,SOLE_AUTHENTICATION_SERVICE **asAuthSvc);
HRESULT  CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc);
//C     extern  HRESULT CoSwitchCallContext(IUnknown *pNewObject,IUnknown **ppOldObject);
HRESULT  CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject);
//C     extern  HRESULT CoCreateInstance(const IID *const rclsid,LPUNKNOWN pUnkOuter,DWORD dwClsContext,const IID *const riid,LPVOID *ppv);
HRESULT  CoCreateInstance(IID *rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, IID *riid, LPVOID *ppv);
//C     extern  HRESULT CoGetInstanceFromFile(COSERVERINFO *pServerInfo,CLSID *pClsid,IUnknown *punkOuter,DWORD dwClsCtx,DWORD grfMode,OLECHAR *pwszName,DWORD dwCount,MULTI_QI *pResults);
HRESULT  CoGetInstanceFromFile(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, DWORD grfMode, OLECHAR *pwszName, DWORD dwCount, MULTI_QI *pResults);
//C     extern  HRESULT CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo,CLSID *pClsid,IUnknown *punkOuter,DWORD dwClsCtx,struct IStorage *pstg,DWORD dwCount,MULTI_QI *pResults);
HRESULT  CoGetInstanceFromIStorage(COSERVERINFO *pServerInfo, CLSID *pClsid, IUnknown *punkOuter, DWORD dwClsCtx, IStorage *pstg, DWORD dwCount, MULTI_QI *pResults);
//C     extern  HRESULT CoCreateInstanceEx(const IID *const Clsid,IUnknown *punkOuter,DWORD dwClsCtx,COSERVERINFO *pServerInfo,DWORD dwCount,MULTI_QI *pResults);
HRESULT  CoCreateInstanceEx(IID *Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults);
//C     extern  HRESULT CoGetCancelObject(DWORD dwThreadId,const IID *const iid,void **ppUnk);
HRESULT  CoGetCancelObject(DWORD dwThreadId, IID *iid, void **ppUnk);
//C     extern  HRESULT CoSetCancelObject(IUnknown *pUnk);
HRESULT  CoSetCancelObject(IUnknown *pUnk);
//C     extern  HRESULT CoCancelCall(DWORD dwThreadId,ULONG ulTimeout);
HRESULT  CoCancelCall(DWORD dwThreadId, ULONG ulTimeout);
//C     extern  HRESULT CoTestCancel();
HRESULT  CoTestCancel();
//C     extern  HRESULT CoEnableCallCancellation(LPVOID pReserved);
HRESULT  CoEnableCallCancellation(LPVOID pReserved);
//C     extern  HRESULT CoDisableCallCancellation(LPVOID pReserved);
HRESULT  CoDisableCallCancellation(LPVOID pReserved);
//C     extern  HRESULT CoAllowSetForegroundWindow(IUnknown *pUnk,LPVOID lpvReserved);
HRESULT  CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved);
//C     extern  HRESULT DcomChannelSetHResult(LPVOID pvReserved,ULONG *pulReserved,HRESULT appsHR);
HRESULT  DcomChannelSetHResult(LPVOID pvReserved, ULONG *pulReserved, HRESULT appsHR);
//C     extern  HRESULT StringFromCLSID(const IID *const rclsid,LPOLESTR *lplpsz);
HRESULT  StringFromCLSID(IID *rclsid, LPOLESTR *lplpsz);
//C     extern  HRESULT CLSIDFromString(LPOLESTR lpsz,LPCLSID pclsid);
HRESULT  CLSIDFromString(LPOLESTR lpsz, LPCLSID pclsid);
//C     extern  HRESULT StringFromIID(const IID *const rclsid,LPOLESTR *lplpsz);
HRESULT  StringFromIID(IID *rclsid, LPOLESTR *lplpsz);
//C     extern  HRESULT IIDFromString(LPOLESTR lpsz,LPIID lpiid);
HRESULT  IIDFromString(LPOLESTR lpsz, LPIID lpiid);
//C     extern  WINBOOL CoIsOle1Class(const IID *const rclsid);
WINBOOL  CoIsOle1Class(IID *rclsid);
//C     extern  HRESULT ProgIDFromCLSID (const IID *const clsid,LPOLESTR *lplpszProgID);
HRESULT  ProgIDFromCLSID(IID *clsid, LPOLESTR *lplpszProgID);
//C     extern  HRESULT CLSIDFromProgID (LPCOLESTR lpszProgID,LPCLSID lpclsid);
HRESULT  CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid);
//C     extern  HRESULT CLSIDFromProgIDEx (LPCOLESTR lpszProgID,LPCLSID lpclsid);
HRESULT  CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid);
//C     extern  int StringFromGUID2(const GUID *const rguid,LPOLESTR lpsz,int cchMax);
int  StringFromGUID2(GUID *rguid, LPOLESTR lpsz, int cchMax);
//C     extern  HRESULT CoCreateGuid(GUID *pguid);
HRESULT  CoCreateGuid(GUID *pguid);
//C     extern  WINBOOL CoFileTimeToDosDateTime(FILETIME *lpFileTime,LPWORD lpDosDate,LPWORD lpDosTime);
WINBOOL  CoFileTimeToDosDateTime(FILETIME *lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
//C     extern  WINBOOL CoDosDateTimeToFileTime(WORD nDosDate,WORD nDosTime,FILETIME *lpFileTime);
WINBOOL  CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME *lpFileTime);
//C     extern  HRESULT CoFileTimeNow(FILETIME *lpFileTime);
HRESULT  CoFileTimeNow(FILETIME *lpFileTime);
//C     extern  HRESULT CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter,LPMESSAGEFILTER *lplpMessageFilter);
HRESULT  CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter, LPMESSAGEFILTER *lplpMessageFilter);
//C     extern  HRESULT CoRegisterChannelHook(const GUID *const ExtensionUuid,IChannelHook *pChannelHook);
HRESULT  CoRegisterChannelHook(GUID *ExtensionUuid, IChannelHook *pChannelHook);
//C     extern  HRESULT CoWaitForMultipleHandles (DWORD dwFlags,DWORD dwTimeout,ULONG cHandles,LPHANDLE pHandles,LPDWORD lpdwindex);
HRESULT  CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex);
//C     typedef enum tagCOWAIT_FLAGS {
//C       COWAIT_WAITALL = 1,COWAIT_ALERTABLE = 2,COWAIT_INPUTAVAILABLE = 4
//C     } COWAIT_FLAGS;
enum tagCOWAIT_FLAGS
{
    COWAIT_WAITALL = 1,
    COWAIT_ALERTABLE,
    COWAIT_INPUTAVAILABLE = 4,
}
alias tagCOWAIT_FLAGS COWAIT_FLAGS;
//C     extern  HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName);
HRESULT  CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName);
//C     extern  HRESULT CoGetTreatAsClass(const IID *const clsidOld,LPCLSID pClsidNew);
HRESULT  CoGetTreatAsClass(IID *clsidOld, LPCLSID pClsidNew);
//C     extern  HRESULT CoTreatAsClass(const IID *const clsidOld,const IID *const clsidNew);
HRESULT  CoTreatAsClass(IID *clsidOld, IID *clsidNew);
//C     typedef HRESULT ( *LPFNGETCLASSOBJECT)(const IID *const,const IID *const,LPVOID *);
alias HRESULT  function(IID *, IID *, LPVOID *)LPFNGETCLASSOBJECT;
//C     typedef HRESULT ( *LPFNCANUNLOADNOW)(void);
alias HRESULT  function()LPFNCANUNLOADNOW;
//C     extern HRESULT DllGetClassObject(const IID *const rclsid,const IID *const riid,LPVOID *ppv);
HRESULT  DllGetClassObject(IID *rclsid, IID *riid, LPVOID *ppv);
//C     extern HRESULT DllCanUnloadNow(void);
HRESULT  DllCanUnloadNow();
//C     extern  LPVOID CoTaskMemAlloc(SIZE_T cb);
LPVOID  CoTaskMemAlloc(SIZE_T cb);
//C     extern  LPVOID CoTaskMemRealloc(LPVOID pv,SIZE_T cb);
LPVOID  CoTaskMemRealloc(LPVOID pv, SIZE_T cb);
//C     extern  void CoTaskMemFree(LPVOID pv);
void  CoTaskMemFree(LPVOID pv);
//C     extern  HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder);
HRESULT  CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder);
//C     extern  HRESULT CreateDataCache(LPUNKNOWN pUnkOuter,const IID *const rclsid,const IID *const iid,LPVOID *ppv);
HRESULT  CreateDataCache(LPUNKNOWN pUnkOuter, IID *rclsid, IID *iid, LPVOID *ppv);
//C     extern  HRESULT StgCreateDocfile(const OLECHAR *pwcsName,DWORD grfMode,DWORD reserved,IStorage **ppstgOpen);
HRESULT  StgCreateDocfile(OLECHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
//C     extern  HRESULT StgCreateDocfileOnILockBytes(ILockBytes *plkbyt,DWORD grfMode,DWORD reserved,IStorage **ppstgOpen);
HRESULT  StgCreateDocfileOnILockBytes(ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
//C     extern  HRESULT StgOpenStorage(const OLECHAR *pwcsName,IStorage *pstgPriority,DWORD grfMode,SNB snbExclude,DWORD reserved,IStorage **ppstgOpen);
HRESULT  StgOpenStorage(OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
//C     extern  HRESULT StgOpenStorageOnILockBytes(ILockBytes *plkbyt,IStorage *pstgPriority,DWORD grfMode,SNB snbExclude,DWORD reserved,IStorage **ppstgOpen);
HRESULT  StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
//C     extern  HRESULT StgIsStorageFile(const OLECHAR *pwcsName);
HRESULT  StgIsStorageFile(OLECHAR *pwcsName);
//C     extern  HRESULT StgIsStorageILockBytes(ILockBytes *plkbyt);
HRESULT  StgIsStorageILockBytes(ILockBytes *plkbyt);
//C     extern  HRESULT StgSetTimes(OLECHAR const *lpszName,FILETIME const *pctime,FILETIME const *patime,FILETIME const *pmtime);
HRESULT  StgSetTimes(OLECHAR *lpszName, FILETIME *pctime, FILETIME *patime, FILETIME *pmtime);
//C     extern  HRESULT StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb,DWORD grfMode,DWORD asyncFlags,IStorage **ppstgOpen);
HRESULT  StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes *pflb, DWORD grfMode, DWORD asyncFlags, IStorage **ppstgOpen);
//C     extern  HRESULT StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb,IFillLockBytes **ppflb);
HRESULT  StgGetIFillLockBytesOnILockBytes(ILockBytes *pilb, IFillLockBytes **ppflb);
//C     extern  HRESULT StgGetIFillLockBytesOnFile(OLECHAR const *pwcsName,IFillLockBytes **ppflb);
HRESULT  StgGetIFillLockBytesOnFile(OLECHAR *pwcsName, IFillLockBytes **ppflb);
//C     extern  HRESULT StgOpenLayoutDocfile(OLECHAR const *pwcsDfName,DWORD grfMode,DWORD reserved,IStorage **ppstgOpen);
HRESULT  StgOpenLayoutDocfile(OLECHAR *pwcsDfName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen);
//C     typedef struct tagSTGOPTIONS {
//C       USHORT usVersion;
//C       USHORT reserved;
//C       ULONG ulSectorSize;
//C       const WCHAR *pwcsTemplateFile;
//C     } STGOPTIONS;
struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;
    WCHAR *pwcsTemplateFile;
}
alias tagSTGOPTIONS STGOPTIONS;
//C     extern  HRESULT StgCreateStorageEx (const WCHAR *pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,STGOPTIONS *pStgOptions,void *reserved,const IID *const riid,void **ppObjectOpen);
HRESULT  StgCreateStorageEx(WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, void *reserved, IID *riid, void **ppObjectOpen);
//C     extern  HRESULT StgOpenStorageEx (const WCHAR *pwcsName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,STGOPTIONS *pStgOptions,void *reserved,const IID *const riid,void **ppObjectOpen);
HRESULT  StgOpenStorageEx(WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, void *reserved, IID *riid, void **ppObjectOpen);
//C     extern  HRESULT BindMoniker(LPMONIKER pmk,DWORD grfOpt,const IID *const iidResult,LPVOID *ppvResult);
HRESULT  BindMoniker(LPMONIKER pmk, DWORD grfOpt, IID *iidResult, LPVOID *ppvResult);
//C     extern  HRESULT CoInstall(IBindCtx *pbc,DWORD dwFlags,uCLSSPEC *pClassSpec,QUERYCONTEXT *pQuery,LPWSTR pszCodeBase);
HRESULT  CoInstall(IBindCtx *pbc, DWORD dwFlags, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, LPWSTR pszCodeBase);
//C     extern  HRESULT CoGetObject(LPCWSTR pszName,BIND_OPTS *pBindOptions,const IID *const riid,void **ppv);
HRESULT  CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, IID *riid, void **ppv);
//C     extern  HRESULT MkParseDisplayName(LPBC pbc,LPCOLESTR szUserName,ULONG *pchEaten,LPMONIKER *ppmk);
HRESULT  MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG *pchEaten, LPMONIKER *ppmk);
//C     extern  HRESULT MonikerRelativePathTo(LPMONIKER pmkSrc,LPMONIKER pmkDest,LPMONIKER *ppmkRelPath,WINBOOL dwReserved);
HRESULT  MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER *ppmkRelPath, WINBOOL dwReserved);
//C     extern  HRESULT MonikerCommonPrefixWith(LPMONIKER pmkThis,LPMONIKER pmkOther,LPMONIKER *ppmkCommon);
HRESULT  MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther, LPMONIKER *ppmkCommon);
//C     extern  HRESULT CreateBindCtx(DWORD reserved,LPBC *ppbc);
HRESULT  CreateBindCtx(DWORD reserved, LPBC *ppbc);
//C     extern  HRESULT CreateGenericComposite(LPMONIKER pmkFirst,LPMONIKER pmkRest,LPMONIKER *ppmkComposite);
HRESULT  CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER *ppmkComposite);
//C     extern  HRESULT GetClassFile (LPCOLESTR szFilename,CLSID *pclsid);
HRESULT  GetClassFile(LPCOLESTR szFilename, CLSID *pclsid);
//C     extern  HRESULT CreateClassMoniker(const IID *const rclsid,LPMONIKER *ppmk);
HRESULT  CreateClassMoniker(IID *rclsid, LPMONIKER *ppmk);
//C     extern  HRESULT CreateFileMoniker(LPCOLESTR lpszPathName,LPMONIKER *ppmk);
HRESULT  CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER *ppmk);
//C     extern  HRESULT CreateItemMoniker(LPCOLESTR lpszDelim,LPCOLESTR lpszItem,LPMONIKER *ppmk);
HRESULT  CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem, LPMONIKER *ppmk);
//C     extern  HRESULT CreateAntiMoniker(LPMONIKER *ppmk);
HRESULT  CreateAntiMoniker(LPMONIKER *ppmk);
//C     extern  HRESULT CreatePointerMoniker(LPUNKNOWN punk,LPMONIKER *ppmk);
HRESULT  CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER *ppmk);
//C     extern  HRESULT CreateObjrefMoniker(LPUNKNOWN punk,LPMONIKER *ppmk);
HRESULT  CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER *ppmk);
//C     extern  HRESULT GetRunningObjectTable(DWORD reserved,LPRUNNINGOBJECTTABLE *pprot);
HRESULT  GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot);
//C     typedef struct IBinding IBinding;
//C     typedef struct IBindStatusCallback IBindStatusCallback;
//C     typedef struct IOleAdviseHolder IOleAdviseHolder;
//C     typedef struct IOleCache IOleCache;
//C     typedef struct IOleCache2 IOleCache2;
//C     typedef struct IOleCacheControl IOleCacheControl;
//C     typedef struct IParseDisplayName IParseDisplayName;
//C     typedef struct IOleContainer IOleContainer;
//C     typedef struct IOleClientSite IOleClientSite;
//C     typedef struct IOleObject IOleObject;
//C     typedef struct IOleWindow IOleWindow;
//C     typedef struct IOleLink IOleLink;
//C     typedef struct IOleItemContainer IOleItemContainer;
//C     typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
//C     typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
//C     typedef struct IOleInPlaceFrame IOleInPlaceFrame;
//C     typedef struct IOleInPlaceObject IOleInPlaceObject;
//C     typedef struct IOleInPlaceSite IOleInPlaceSite;
//C     typedef struct IContinue IContinue;
//C     typedef struct IViewObject IViewObject;
//C     typedef struct IViewObject2 IViewObject2;
//C     typedef struct IDropSource IDropSource;
//C     typedef struct IDropTarget IDropTarget;
//C     typedef struct IEnumOLEVERB IEnumOLEVERB;
//C       extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;
//C       typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
alias IOleAdviseHolder *LPOLEADVISEHOLDER;
//C       extern const IID IID_IOleAdviseHolder;
extern const IID IID_IOleAdviseHolder;
//C       typedef struct IOleAdviseHolderVtbl {
//C           HRESULT ( *QueryInterface)(IOleAdviseHolder *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleAdviseHolder *This);
//C           ULONG ( *Release)(IOleAdviseHolder *This);
//C           HRESULT ( *Advise)(IOleAdviseHolder *This,IAdviseSink *pAdvise,DWORD *pdwConnection);
//C           HRESULT ( *Unadvise)(IOleAdviseHolder *This,DWORD dwConnection);
//C           HRESULT ( *EnumAdvise)(IOleAdviseHolder *This,IEnumSTATDATA **ppenumAdvise);
//C           HRESULT ( *SendOnRename)(IOleAdviseHolder *This,IMoniker *pmk);
//C           HRESULT ( *SendOnSave)(IOleAdviseHolder *This);
//C           HRESULT ( *SendOnClose)(IOleAdviseHolder *This);
//C       } IOleAdviseHolderVtbl;
struct IOleAdviseHolderVtbl
{
    HRESULT  function(IOleAdviseHolder *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleAdviseHolder *This)AddRef;
    ULONG  function(IOleAdviseHolder *This)Release;
    HRESULT  function(IOleAdviseHolder *This, IAdviseSink *pAdvise, DWORD *pdwConnection)Advise;
    HRESULT  function(IOleAdviseHolder *This, DWORD dwConnection)Unadvise;
    HRESULT  function(IOleAdviseHolder *This, IEnumSTATDATA **ppenumAdvise)EnumAdvise;
    HRESULT  function(IOleAdviseHolder *This, IMoniker *pmk)SendOnRename;
    HRESULT  function(IOleAdviseHolder *This)SendOnSave;
    HRESULT  function(IOleAdviseHolder *This)SendOnClose;
}
//C       struct IOleAdviseHolder {
//C         struct IOleAdviseHolderVtbl *lpVtbl;
//C       };
struct IOleAdviseHolder
{
    IOleAdviseHolderVtbl *lpVtbl;
}
//C       HRESULT IOleAdviseHolder_Advise_Proxy(IOleAdviseHolder *This,IAdviseSink *pAdvise,DWORD *pdwConnection);
HRESULT  IOleAdviseHolder_Advise_Proxy(IOleAdviseHolder *This, IAdviseSink *pAdvise, DWORD *pdwConnection);
//C       void IOleAdviseHolder_Advise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleAdviseHolder_Advise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleAdviseHolder_Unadvise_Proxy(IOleAdviseHolder *This,DWORD dwConnection);
HRESULT  IOleAdviseHolder_Unadvise_Proxy(IOleAdviseHolder *This, DWORD dwConnection);
//C       void IOleAdviseHolder_Unadvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleAdviseHolder_Unadvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleAdviseHolder_EnumAdvise_Proxy(IOleAdviseHolder *This,IEnumSTATDATA **ppenumAdvise);
HRESULT  IOleAdviseHolder_EnumAdvise_Proxy(IOleAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);
//C       void IOleAdviseHolder_EnumAdvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleAdviseHolder_EnumAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleAdviseHolder_SendOnRename_Proxy(IOleAdviseHolder *This,IMoniker *pmk);
HRESULT  IOleAdviseHolder_SendOnRename_Proxy(IOleAdviseHolder *This, IMoniker *pmk);
//C       void IOleAdviseHolder_SendOnRename_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleAdviseHolder_SendOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleAdviseHolder_SendOnSave_Proxy(IOleAdviseHolder *This);
HRESULT  IOleAdviseHolder_SendOnSave_Proxy(IOleAdviseHolder *This);
//C       void IOleAdviseHolder_SendOnSave_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleAdviseHolder_SendOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleAdviseHolder_SendOnClose_Proxy(IOleAdviseHolder *This);
HRESULT  IOleAdviseHolder_SendOnClose_Proxy(IOleAdviseHolder *This);
//C       void IOleAdviseHolder_SendOnClose_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleAdviseHolder_SendOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleCache *LPOLECACHE;
alias IOleCache *LPOLECACHE;
//C       extern const IID IID_IOleCache;
extern const IID IID_IOleCache;
//C       typedef struct IOleCacheVtbl {
//C           HRESULT ( *QueryInterface)(IOleCache *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleCache *This);
//C           ULONG ( *Release)(IOleCache *This);
//C           HRESULT ( *Cache)(IOleCache *This,FORMATETC *pformatetc,DWORD advf,DWORD *pdwConnection);
//C           HRESULT ( *Uncache)(IOleCache *This,DWORD dwConnection);
//C           HRESULT ( *EnumCache)(IOleCache *This,IEnumSTATDATA **ppenumSTATDATA);
//C           HRESULT ( *InitCache)(IOleCache *This,IDataObject *pDataObject);
//C           HRESULT ( *SetData)(IOleCache *This,FORMATETC *pformatetc,STGMEDIUM *pmedium,WINBOOL fRelease);
//C       } IOleCacheVtbl;
struct IOleCacheVtbl
{
    HRESULT  function(IOleCache *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleCache *This)AddRef;
    ULONG  function(IOleCache *This)Release;
    HRESULT  function(IOleCache *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection)Cache;
    HRESULT  function(IOleCache *This, DWORD dwConnection)Uncache;
    HRESULT  function(IOleCache *This, IEnumSTATDATA **ppenumSTATDATA)EnumCache;
    HRESULT  function(IOleCache *This, IDataObject *pDataObject)InitCache;
    HRESULT  function(IOleCache *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, WINBOOL fRelease)SetData;
}
//C       struct IOleCache {
//C         struct IOleCacheVtbl *lpVtbl;
//C       };
struct IOleCache
{
    IOleCacheVtbl *lpVtbl;
}
//C       HRESULT IOleCache_Cache_Proxy(IOleCache *This,FORMATETC *pformatetc,DWORD advf,DWORD *pdwConnection);
HRESULT  IOleCache_Cache_Proxy(IOleCache *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);
//C       void IOleCache_Cache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache_Cache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleCache_Uncache_Proxy(IOleCache *This,DWORD dwConnection);
HRESULT  IOleCache_Uncache_Proxy(IOleCache *This, DWORD dwConnection);
//C       void IOleCache_Uncache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache_Uncache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleCache_EnumCache_Proxy(IOleCache *This,IEnumSTATDATA **ppenumSTATDATA);
HRESULT  IOleCache_EnumCache_Proxy(IOleCache *This, IEnumSTATDATA **ppenumSTATDATA);
//C       void IOleCache_EnumCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache_EnumCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleCache_InitCache_Proxy(IOleCache *This,IDataObject *pDataObject);
HRESULT  IOleCache_InitCache_Proxy(IOleCache *This, IDataObject *pDataObject);
//C       void IOleCache_InitCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache_InitCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleCache_SetData_Proxy(IOleCache *This,FORMATETC *pformatetc,STGMEDIUM *pmedium,WINBOOL fRelease);
HRESULT  IOleCache_SetData_Proxy(IOleCache *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, WINBOOL fRelease);
//C       void IOleCache_SetData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache_SetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleCache2 *LPOLECACHE2;
alias IOleCache2 *LPOLECACHE2;
//C       typedef enum tagDISCARDCACHE {
//C         DISCARDCACHE_SAVEIFDIRTY = 0,DISCARDCACHE_NOSAVE = 1
//C       } DISCARDCACHE;
enum tagDISCARDCACHE
{
    DISCARDCACHE_SAVEIFDIRTY,
    DISCARDCACHE_NOSAVE,
}
alias tagDISCARDCACHE DISCARDCACHE;
//C       extern const IID IID_IOleCache2;
extern const IID IID_IOleCache2;
//C       typedef struct IOleCache2Vtbl {
//C           HRESULT ( *QueryInterface)(IOleCache2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleCache2 *This);
//C           ULONG ( *Release)(IOleCache2 *This);
//C           HRESULT ( *Cache)(IOleCache2 *This,FORMATETC *pformatetc,DWORD advf,DWORD *pdwConnection);
//C           HRESULT ( *Uncache)(IOleCache2 *This,DWORD dwConnection);
//C           HRESULT ( *EnumCache)(IOleCache2 *This,IEnumSTATDATA **ppenumSTATDATA);
//C           HRESULT ( *InitCache)(IOleCache2 *This,IDataObject *pDataObject);
//C           HRESULT ( *SetData)(IOleCache2 *This,FORMATETC *pformatetc,STGMEDIUM *pmedium,WINBOOL fRelease);
//C           HRESULT ( *UpdateCache)(IOleCache2 *This,LPDATAOBJECT pDataObject,DWORD grfUpdf,LPVOID pReserved);
//C           HRESULT ( *DiscardCache)(IOleCache2 *This,DWORD dwDiscardOptions);
//C       } IOleCache2Vtbl;
struct IOleCache2Vtbl
{
    HRESULT  function(IOleCache2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleCache2 *This)AddRef;
    ULONG  function(IOleCache2 *This)Release;
    HRESULT  function(IOleCache2 *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection)Cache;
    HRESULT  function(IOleCache2 *This, DWORD dwConnection)Uncache;
    HRESULT  function(IOleCache2 *This, IEnumSTATDATA **ppenumSTATDATA)EnumCache;
    HRESULT  function(IOleCache2 *This, IDataObject *pDataObject)InitCache;
    HRESULT  function(IOleCache2 *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, WINBOOL fRelease)SetData;
    HRESULT  function(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved)UpdateCache;
    HRESULT  function(IOleCache2 *This, DWORD dwDiscardOptions)DiscardCache;
}
//C       struct IOleCache2 {
//C         struct IOleCache2Vtbl *lpVtbl;
//C       };
struct IOleCache2
{
    IOleCache2Vtbl *lpVtbl;
}
//C       HRESULT IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This,LPDATAOBJECT pDataObject,DWORD grfUpdf,LONG_PTR pReserved);
HRESULT  IOleCache2_RemoteUpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved);
//C       void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleCache2_DiscardCache_Proxy(IOleCache2 *This,DWORD dwDiscardOptions);
HRESULT  IOleCache2_DiscardCache_Proxy(IOleCache2 *This, DWORD dwDiscardOptions);
//C       void IOleCache2_DiscardCache_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCache2_DiscardCache_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleCacheControl *LPOLECACHECONTROL;
alias IOleCacheControl *LPOLECACHECONTROL;
//C       extern const IID IID_IOleCacheControl;
extern const IID IID_IOleCacheControl;
//C       typedef struct IOleCacheControlVtbl {
//C           HRESULT ( *QueryInterface)(IOleCacheControl *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleCacheControl *This);
//C           ULONG ( *Release)(IOleCacheControl *This);
//C           HRESULT ( *OnRun)(IOleCacheControl *This,LPDATAOBJECT pDataObject);
//C           HRESULT ( *OnStop)(IOleCacheControl *This);
//C       } IOleCacheControlVtbl;
struct IOleCacheControlVtbl
{
    HRESULT  function(IOleCacheControl *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleCacheControl *This)AddRef;
    ULONG  function(IOleCacheControl *This)Release;
    HRESULT  function(IOleCacheControl *This, LPDATAOBJECT pDataObject)OnRun;
    HRESULT  function(IOleCacheControl *This)OnStop;
}
//C       struct IOleCacheControl {
//C         struct IOleCacheControlVtbl *lpVtbl;
//C       };
struct IOleCacheControl
{
    IOleCacheControlVtbl *lpVtbl;
}
//C       HRESULT IOleCacheControl_OnRun_Proxy(IOleCacheControl *This,LPDATAOBJECT pDataObject);
HRESULT  IOleCacheControl_OnRun_Proxy(IOleCacheControl *This, LPDATAOBJECT pDataObject);
//C       void IOleCacheControl_OnRun_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCacheControl_OnRun_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleCacheControl_OnStop_Proxy(IOleCacheControl *This);
HRESULT  IOleCacheControl_OnStop_Proxy(IOleCacheControl *This);
//C       void IOleCacheControl_OnStop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleCacheControl_OnStop_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IParseDisplayName *LPPARSEDISPLAYNAME;
alias IParseDisplayName *LPPARSEDISPLAYNAME;
//C       extern const IID IID_IParseDisplayName;
extern const IID IID_IParseDisplayName;
//C       typedef struct IParseDisplayNameVtbl {
//C           HRESULT ( *QueryInterface)(IParseDisplayName *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IParseDisplayName *This);
//C           ULONG ( *Release)(IParseDisplayName *This);
//C           HRESULT ( *ParseDisplayName)(IParseDisplayName *This,IBindCtx *pbc,LPOLESTR pszDisplayName,ULONG *pchEaten,IMoniker **ppmkOut);
//C       } IParseDisplayNameVtbl;
struct IParseDisplayNameVtbl
{
    HRESULT  function(IParseDisplayName *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IParseDisplayName *This)AddRef;
    ULONG  function(IParseDisplayName *This)Release;
    HRESULT  function(IParseDisplayName *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut)ParseDisplayName;
}
//C       struct IParseDisplayName {
//C         struct IParseDisplayNameVtbl *lpVtbl;
//C       };
struct IParseDisplayName
{
    IParseDisplayNameVtbl *lpVtbl;
}
//C       HRESULT IParseDisplayName_ParseDisplayName_Proxy(IParseDisplayName *This,IBindCtx *pbc,LPOLESTR pszDisplayName,ULONG *pchEaten,IMoniker **ppmkOut);
HRESULT  IParseDisplayName_ParseDisplayName_Proxy(IParseDisplayName *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
//C       void IParseDisplayName_ParseDisplayName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IParseDisplayName_ParseDisplayName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleContainer *LPOLECONTAINER;
alias IOleContainer *LPOLECONTAINER;
//C       extern const IID IID_IOleContainer;
extern const IID IID_IOleContainer;
//C       typedef struct IOleContainerVtbl {
//C           HRESULT ( *QueryInterface)(IOleContainer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleContainer *This);
//C           ULONG ( *Release)(IOleContainer *This);
//C           HRESULT ( *ParseDisplayName)(IOleContainer *This,IBindCtx *pbc,LPOLESTR pszDisplayName,ULONG *pchEaten,IMoniker **ppmkOut);
//C           HRESULT ( *EnumObjects)(IOleContainer *This,DWORD grfFlags,IEnumUnknown **ppenum);
//C           HRESULT ( *LockContainer)(IOleContainer *This,WINBOOL fLock);
//C       } IOleContainerVtbl;
struct IOleContainerVtbl
{
    HRESULT  function(IOleContainer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleContainer *This)AddRef;
    ULONG  function(IOleContainer *This)Release;
    HRESULT  function(IOleContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut)ParseDisplayName;
    HRESULT  function(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum)EnumObjects;
    HRESULT  function(IOleContainer *This, WINBOOL fLock)LockContainer;
}
//C       struct IOleContainer {
//C         struct IOleContainerVtbl *lpVtbl;
//C       };
struct IOleContainer
{
    IOleContainerVtbl *lpVtbl;
}
//C       HRESULT IOleContainer_EnumObjects_Proxy(IOleContainer *This,DWORD grfFlags,IEnumUnknown **ppenum);
HRESULT  IOleContainer_EnumObjects_Proxy(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);
//C       void IOleContainer_EnumObjects_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleContainer_EnumObjects_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleContainer_LockContainer_Proxy(IOleContainer *This,WINBOOL fLock);
HRESULT  IOleContainer_LockContainer_Proxy(IOleContainer *This, WINBOOL fLock);
//C       void IOleContainer_LockContainer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleContainer_LockContainer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleClientSite *LPOLECLIENTSITE;
alias IOleClientSite *LPOLECLIENTSITE;
//C       extern const IID IID_IOleClientSite;
extern const IID IID_IOleClientSite;
//C       typedef struct IOleClientSiteVtbl {
//C           HRESULT ( *QueryInterface)(IOleClientSite *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleClientSite *This);
//C           ULONG ( *Release)(IOleClientSite *This);
//C           HRESULT ( *SaveObject)(IOleClientSite *This);
//C           HRESULT ( *GetMoniker)(IOleClientSite *This,DWORD dwAssign,DWORD dwWhichMoniker,IMoniker **ppmk);
//C           HRESULT ( *GetContainer)(IOleClientSite *This,IOleContainer **ppContainer);
//C           HRESULT ( *ShowObject)(IOleClientSite *This);
//C           HRESULT ( *OnShowWindow)(IOleClientSite *This,WINBOOL fShow);
//C           HRESULT ( *RequestNewObjectLayout)(IOleClientSite *This);
//C       } IOleClientSiteVtbl;
struct IOleClientSiteVtbl
{
    HRESULT  function(IOleClientSite *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleClientSite *This)AddRef;
    ULONG  function(IOleClientSite *This)Release;
    HRESULT  function(IOleClientSite *This)SaveObject;
    HRESULT  function(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk)GetMoniker;
    HRESULT  function(IOleClientSite *This, IOleContainer **ppContainer)GetContainer;
    HRESULT  function(IOleClientSite *This)ShowObject;
    HRESULT  function(IOleClientSite *This, WINBOOL fShow)OnShowWindow;
    HRESULT  function(IOleClientSite *This)RequestNewObjectLayout;
}
//C       struct IOleClientSite {
//C         struct IOleClientSiteVtbl *lpVtbl;
//C       };
struct IOleClientSite
{
    IOleClientSiteVtbl *lpVtbl;
}
//C       HRESULT IOleClientSite_SaveObject_Proxy(IOleClientSite *This);
HRESULT  IOleClientSite_SaveObject_Proxy(IOleClientSite *This);
//C       void IOleClientSite_SaveObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleClientSite_SaveObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleClientSite_GetMoniker_Proxy(IOleClientSite *This,DWORD dwAssign,DWORD dwWhichMoniker,IMoniker **ppmk);
HRESULT  IOleClientSite_GetMoniker_Proxy(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);
//C       void IOleClientSite_GetMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleClientSite_GetMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleClientSite_GetContainer_Proxy(IOleClientSite *This,IOleContainer **ppContainer);
HRESULT  IOleClientSite_GetContainer_Proxy(IOleClientSite *This, IOleContainer **ppContainer);
//C       void IOleClientSite_GetContainer_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleClientSite_GetContainer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleClientSite_ShowObject_Proxy(IOleClientSite *This);
HRESULT  IOleClientSite_ShowObject_Proxy(IOleClientSite *This);
//C       void IOleClientSite_ShowObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleClientSite_ShowObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleClientSite_OnShowWindow_Proxy(IOleClientSite *This,WINBOOL fShow);
HRESULT  IOleClientSite_OnShowWindow_Proxy(IOleClientSite *This, WINBOOL fShow);
//C       void IOleClientSite_OnShowWindow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleClientSite_OnShowWindow_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleClientSite_RequestNewObjectLayout_Proxy(IOleClientSite *This);
HRESULT  IOleClientSite_RequestNewObjectLayout_Proxy(IOleClientSite *This);
//C       void IOleClientSite_RequestNewObjectLayout_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleClientSite_RequestNewObjectLayout_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleObject *LPOLEOBJECT;
alias IOleObject *LPOLEOBJECT;
//C       typedef enum tagOLEGETMONIKER {
//C         OLEGETMONIKER_ONLYIFTHERE = 1,OLEGETMONIKER_FORCEASSIGN = 2,OLEGETMONIKER_UNASSIGN = 3,OLEGETMONIKER_TEMPFORUSER = 4
//C       } OLEGETMONIKER;
enum tagOLEGETMONIKER
{
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN,
    OLEGETMONIKER_UNASSIGN,
    OLEGETMONIKER_TEMPFORUSER,
}
alias tagOLEGETMONIKER OLEGETMONIKER;
//C       typedef enum tagOLEWHICHMK {
//C         OLEWHICHMK_CONTAINER = 1,OLEWHICHMK_OBJREL = 2,OLEWHICHMK_OBJFULL = 3
//C       } OLEWHICHMK;
enum tagOLEWHICHMK
{
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL,
    OLEWHICHMK_OBJFULL,
}
alias tagOLEWHICHMK OLEWHICHMK;
//C       typedef enum tagUSERCLASSTYPE {
//C         USERCLASSTYPE_FULL = 1,USERCLASSTYPE_SHORT = 2,USERCLASSTYPE_APPNAME = 3
//C       } USERCLASSTYPE;
enum tagUSERCLASSTYPE
{
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT,
    USERCLASSTYPE_APPNAME,
}
alias tagUSERCLASSTYPE USERCLASSTYPE;
//C       typedef enum tagOLEMISC {
//C         OLEMISC_RECOMPOSEONRESIZE = 0x1,OLEMISC_ONLYICONIC = 0x2,OLEMISC_INSERTNOTREPLACE = 0x4,OLEMISC_STATIC = 0x8,OLEMISC_CANTLINKINSIDE = 0x10,
//C         OLEMISC_CANLINKBYOLE1 = 0x20,OLEMISC_ISLINKOBJECT = 0x40,OLEMISC_INSIDEOUT = 0x80,OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
//C         OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,OLEMISC_INVISIBLEATRUNTIME = 0x400,OLEMISC_ALWAYSRUN = 0x800,OLEMISC_ACTSLIKEBUTTON = 0x1000,
//C         OLEMISC_ACTSLIKELABEL = 0x2000,OLEMISC_NOUIACTIVATE = 0x4000,OLEMISC_ALIGNABLE = 0x8000,OLEMISC_SIMPLEFRAME = 0x10000,
//C         OLEMISC_SETCLIENTSITEFIRST = 0x20000,OLEMISC_IMEMODE = 0x40000,OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,OLEMISC_WANTSTOMENUMERGE = 0x100000,
//C         OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
//C       } OLEMISC;
enum tagOLEMISC
{
    OLEMISC_RECOMPOSEONRESIZE = 1,
    OLEMISC_ONLYICONIC,
    OLEMISC_INSERTNOTREPLACE = 4,
    OLEMISC_STATIC = 8,
    OLEMISC_CANTLINKINSIDE = 16,
    OLEMISC_CANLINKBYOLE1 = 32,
    OLEMISC_ISLINKOBJECT = 64,
    OLEMISC_INSIDEOUT = 128,
    OLEMISC_ACTIVATEWHENVISIBLE = 256,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512,
    OLEMISC_INVISIBLEATRUNTIME = 1024,
    OLEMISC_ALWAYSRUN = 2048,
    OLEMISC_ACTSLIKEBUTTON = 4096,
    OLEMISC_ACTSLIKELABEL = 8192,
    OLEMISC_NOUIACTIVATE = 16384,
    OLEMISC_ALIGNABLE = 32768,
    OLEMISC_SIMPLEFRAME = 65536,
    OLEMISC_SETCLIENTSITEFIRST = 131072,
    OLEMISC_IMEMODE = 262144,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288,
    OLEMISC_WANTSTOMENUMERGE = 1048576,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152,
}
alias tagOLEMISC OLEMISC;
//C       typedef enum tagOLECLOSE {
//C         OLECLOSE_SAVEIFDIRTY = 0,OLECLOSE_NOSAVE = 1,OLECLOSE_PROMPTSAVE = 2
//C       } OLECLOSE;
enum tagOLECLOSE
{
    OLECLOSE_SAVEIFDIRTY,
    OLECLOSE_NOSAVE,
    OLECLOSE_PROMPTSAVE,
}
alias tagOLECLOSE OLECLOSE;
//C       extern const IID IID_IOleObject;
extern const IID IID_IOleObject;
//C       typedef struct IOleObjectVtbl {
//C           HRESULT ( *QueryInterface)(IOleObject *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleObject *This);
//C           ULONG ( *Release)(IOleObject *This);
//C           HRESULT ( *SetClientSite)(IOleObject *This,IOleClientSite *pClientSite);
//C           HRESULT ( *GetClientSite)(IOleObject *This,IOleClientSite **ppClientSite);
//C           HRESULT ( *SetHostNames)(IOleObject *This,LPCOLESTR szContainerApp,LPCOLESTR szContainerObj);
//C           HRESULT ( *Close)(IOleObject *This,DWORD dwSaveOption);
//C           HRESULT ( *SetMoniker)(IOleObject *This,DWORD dwWhichMoniker,IMoniker *pmk);
//C           HRESULT ( *GetMoniker)(IOleObject *This,DWORD dwAssign,DWORD dwWhichMoniker,IMoniker **ppmk);
//C           HRESULT ( *InitFromData)(IOleObject *This,IDataObject *pDataObject,WINBOOL fCreation,DWORD dwReserved);
//C           HRESULT ( *GetClipboardData)(IOleObject *This,DWORD dwReserved,IDataObject **ppDataObject);
//C           HRESULT ( *DoVerb)(IOleObject *This,LONG iVerb,LPMSG lpmsg,IOleClientSite *pActiveSite,LONG lindex,HWND hwndParent,LPCRECT lprcPosRect);
//C           HRESULT ( *EnumVerbs)(IOleObject *This,IEnumOLEVERB **ppEnumOleVerb);
//C           HRESULT ( *Update)(IOleObject *This);
//C           HRESULT ( *IsUpToDate)(IOleObject *This);
//C           HRESULT ( *GetUserClassID)(IOleObject *This,CLSID *pClsid);
//C           HRESULT ( *GetUserType)(IOleObject *This,DWORD dwFormOfType,LPOLESTR *pszUserType);
//C           HRESULT ( *SetExtent)(IOleObject *This,DWORD dwDrawAspect,SIZEL *psizel);
//C           HRESULT ( *GetExtent)(IOleObject *This,DWORD dwDrawAspect,SIZEL *psizel);
//C           HRESULT ( *Advise)(IOleObject *This,IAdviseSink *pAdvSink,DWORD *pdwConnection);
//C           HRESULT ( *Unadvise)(IOleObject *This,DWORD dwConnection);
//C           HRESULT ( *EnumAdvise)(IOleObject *This,IEnumSTATDATA **ppenumAdvise);
//C           HRESULT ( *GetMiscStatus)(IOleObject *This,DWORD dwAspect,DWORD *pdwStatus);
//C           HRESULT ( *SetColorScheme)(IOleObject *This,LOGPALETTE *pLogpal);
//C       } IOleObjectVtbl;
struct IOleObjectVtbl
{
    HRESULT  function(IOleObject *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleObject *This)AddRef;
    ULONG  function(IOleObject *This)Release;
    HRESULT  function(IOleObject *This, IOleClientSite *pClientSite)SetClientSite;
    HRESULT  function(IOleObject *This, IOleClientSite **ppClientSite)GetClientSite;
    HRESULT  function(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj)SetHostNames;
    HRESULT  function(IOleObject *This, DWORD dwSaveOption)Close;
    HRESULT  function(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk)SetMoniker;
    HRESULT  function(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk)GetMoniker;
    HRESULT  function(IOleObject *This, IDataObject *pDataObject, WINBOOL fCreation, DWORD dwReserved)InitFromData;
    HRESULT  function(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject)GetClipboardData;
    HRESULT  function(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect)DoVerb;
    HRESULT  function(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb)EnumVerbs;
    HRESULT  function(IOleObject *This)Update;
    HRESULT  function(IOleObject *This)IsUpToDate;
    HRESULT  function(IOleObject *This, CLSID *pClsid)GetUserClassID;
    HRESULT  function(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType)GetUserType;
    HRESULT  function(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel)SetExtent;
    HRESULT  function(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel)GetExtent;
    HRESULT  function(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection)Advise;
    HRESULT  function(IOleObject *This, DWORD dwConnection)Unadvise;
    HRESULT  function(IOleObject *This, IEnumSTATDATA **ppenumAdvise)EnumAdvise;
    HRESULT  function(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus)GetMiscStatus;
    HRESULT  function(IOleObject *This, LOGPALETTE *pLogpal)SetColorScheme;
}
//C       struct IOleObject {
//C         struct IOleObjectVtbl *lpVtbl;
//C       };
struct IOleObject
{
    IOleObjectVtbl *lpVtbl;
}
//C       HRESULT IOleObject_SetClientSite_Proxy(IOleObject *This,IOleClientSite *pClientSite);
HRESULT  IOleObject_SetClientSite_Proxy(IOleObject *This, IOleClientSite *pClientSite);
//C       void IOleObject_SetClientSite_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_SetClientSite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetClientSite_Proxy(IOleObject *This,IOleClientSite **ppClientSite);
HRESULT  IOleObject_GetClientSite_Proxy(IOleObject *This, IOleClientSite **ppClientSite);
//C       void IOleObject_GetClientSite_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetClientSite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_SetHostNames_Proxy(IOleObject *This,LPCOLESTR szContainerApp,LPCOLESTR szContainerObj);
HRESULT  IOleObject_SetHostNames_Proxy(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);
//C       void IOleObject_SetHostNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_SetHostNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_Close_Proxy(IOleObject *This,DWORD dwSaveOption);
HRESULT  IOleObject_Close_Proxy(IOleObject *This, DWORD dwSaveOption);
//C       void IOleObject_Close_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_Close_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_SetMoniker_Proxy(IOleObject *This,DWORD dwWhichMoniker,IMoniker *pmk);
HRESULT  IOleObject_SetMoniker_Proxy(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk);
//C       void IOleObject_SetMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_SetMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetMoniker_Proxy(IOleObject *This,DWORD dwAssign,DWORD dwWhichMoniker,IMoniker **ppmk);
HRESULT  IOleObject_GetMoniker_Proxy(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);
//C       void IOleObject_GetMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_InitFromData_Proxy(IOleObject *This,IDataObject *pDataObject,WINBOOL fCreation,DWORD dwReserved);
HRESULT  IOleObject_InitFromData_Proxy(IOleObject *This, IDataObject *pDataObject, WINBOOL fCreation, DWORD dwReserved);
//C       void IOleObject_InitFromData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_InitFromData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetClipboardData_Proxy(IOleObject *This,DWORD dwReserved,IDataObject **ppDataObject);
HRESULT  IOleObject_GetClipboardData_Proxy(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject);
//C       void IOleObject_GetClipboardData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetClipboardData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_DoVerb_Proxy(IOleObject *This,LONG iVerb,LPMSG lpmsg,IOleClientSite *pActiveSite,LONG lindex,HWND hwndParent,LPCRECT lprcPosRect);
HRESULT  IOleObject_DoVerb_Proxy(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);
//C       void IOleObject_DoVerb_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_DoVerb_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_EnumVerbs_Proxy(IOleObject *This,IEnumOLEVERB **ppEnumOleVerb);
HRESULT  IOleObject_EnumVerbs_Proxy(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb);
//C       void IOleObject_EnumVerbs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_EnumVerbs_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_Update_Proxy(IOleObject *This);
HRESULT  IOleObject_Update_Proxy(IOleObject *This);
//C       void IOleObject_Update_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_Update_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_IsUpToDate_Proxy(IOleObject *This);
HRESULT  IOleObject_IsUpToDate_Proxy(IOleObject *This);
//C       void IOleObject_IsUpToDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_IsUpToDate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetUserClassID_Proxy(IOleObject *This,CLSID *pClsid);
HRESULT  IOleObject_GetUserClassID_Proxy(IOleObject *This, CLSID *pClsid);
//C       void IOleObject_GetUserClassID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetUserClassID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetUserType_Proxy(IOleObject *This,DWORD dwFormOfType,LPOLESTR *pszUserType);
HRESULT  IOleObject_GetUserType_Proxy(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType);
//C       void IOleObject_GetUserType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetUserType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_SetExtent_Proxy(IOleObject *This,DWORD dwDrawAspect,SIZEL *psizel);
HRESULT  IOleObject_SetExtent_Proxy(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);
//C       void IOleObject_SetExtent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_SetExtent_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetExtent_Proxy(IOleObject *This,DWORD dwDrawAspect,SIZEL *psizel);
HRESULT  IOleObject_GetExtent_Proxy(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);
//C       void IOleObject_GetExtent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetExtent_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_Advise_Proxy(IOleObject *This,IAdviseSink *pAdvSink,DWORD *pdwConnection);
HRESULT  IOleObject_Advise_Proxy(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection);
//C       void IOleObject_Advise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_Advise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_Unadvise_Proxy(IOleObject *This,DWORD dwConnection);
HRESULT  IOleObject_Unadvise_Proxy(IOleObject *This, DWORD dwConnection);
//C       void IOleObject_Unadvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_Unadvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_EnumAdvise_Proxy(IOleObject *This,IEnumSTATDATA **ppenumAdvise);
HRESULT  IOleObject_EnumAdvise_Proxy(IOleObject *This, IEnumSTATDATA **ppenumAdvise);
//C       void IOleObject_EnumAdvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_EnumAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_GetMiscStatus_Proxy(IOleObject *This,DWORD dwAspect,DWORD *pdwStatus);
HRESULT  IOleObject_GetMiscStatus_Proxy(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);
//C       void IOleObject_GetMiscStatus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_GetMiscStatus_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleObject_SetColorScheme_Proxy(IOleObject *This,LOGPALETTE *pLogpal);
HRESULT  IOleObject_SetColorScheme_Proxy(IOleObject *This, LOGPALETTE *pLogpal);
//C       void IOleObject_SetColorScheme_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleObject_SetColorScheme_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef enum tagOLERENDER {
//C         OLERENDER_NONE = 0,OLERENDER_DRAW = 1,OLERENDER_FORMAT = 2,OLERENDER_ASIS = 3
//C       } OLERENDER;
enum tagOLERENDER
{
    OLERENDER_NONE,
    OLERENDER_DRAW,
    OLERENDER_FORMAT,
    OLERENDER_ASIS,
}
alias tagOLERENDER OLERENDER;
//C       typedef OLERENDER *LPOLERENDER;
alias OLERENDER *LPOLERENDER;
//C       typedef struct tagOBJECTDESCRIPTOR {
//C         ULONG cbSize;
//C         CLSID clsid;
//C         DWORD dwDrawAspect;
//C         SIZEL sizel;
//C         POINTL pointl;
//C         DWORD dwStatus;
//C         DWORD dwFullUserTypeName;
//C         DWORD dwSrcOfCopy;
//C       } OBJECTDESCRIPTOR;
struct tagOBJECTDESCRIPTOR
{
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
}
alias tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
//C       typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
alias tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
//C       typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
alias tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
//C       typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
alias tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
//C       typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
alias tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
//C       typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
alias tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
//C       extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
//C       typedef IOleWindow *LPOLEWINDOW;
alias IOleWindow *LPOLEWINDOW;
//C       extern const IID IID_IOleWindow;
extern const IID IID_IOleWindow;
//C       typedef struct IOleWindowVtbl {
//C           HRESULT ( *QueryInterface)(IOleWindow *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleWindow *This);
//C           ULONG ( *Release)(IOleWindow *This);
//C           HRESULT ( *GetWindow)(IOleWindow *This,HWND *phwnd);
//C           HRESULT ( *ContextSensitiveHelp)(IOleWindow *This,WINBOOL fEnterMode);
//C       } IOleWindowVtbl;
struct IOleWindowVtbl
{
    HRESULT  function(IOleWindow *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleWindow *This)AddRef;
    ULONG  function(IOleWindow *This)Release;
    HRESULT  function(IOleWindow *This, HWND *phwnd)GetWindow;
    HRESULT  function(IOleWindow *This, WINBOOL fEnterMode)ContextSensitiveHelp;
}
//C       struct IOleWindow {
//C         struct IOleWindowVtbl *lpVtbl;
//C       };
struct IOleWindow
{
    IOleWindowVtbl *lpVtbl;
}
//C       HRESULT IOleWindow_GetWindow_Proxy(IOleWindow *This,HWND *phwnd);
HRESULT  IOleWindow_GetWindow_Proxy(IOleWindow *This, HWND *phwnd);
//C       void IOleWindow_GetWindow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleWindow_GetWindow_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleWindow_ContextSensitiveHelp_Proxy(IOleWindow *This,WINBOOL fEnterMode);
HRESULT  IOleWindow_ContextSensitiveHelp_Proxy(IOleWindow *This, WINBOOL fEnterMode);
//C       void IOleWindow_ContextSensitiveHelp_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleWindow_ContextSensitiveHelp_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleLink *LPOLELINK;
alias IOleLink *LPOLELINK;
//C       typedef enum tagOLEUPDATE {
//C         OLEUPDATE_ALWAYS = 1,OLEUPDATE_ONCALL = 3
//C       } OLEUPDATE;
enum tagOLEUPDATE
{
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3,
}
alias tagOLEUPDATE OLEUPDATE;
//C       typedef OLEUPDATE *LPOLEUPDATE;
alias OLEUPDATE *LPOLEUPDATE;
//C       typedef OLEUPDATE *POLEUPDATE;
alias OLEUPDATE *POLEUPDATE;
//C       typedef enum tagOLELINKBIND {
//C         OLELINKBIND_EVENIFCLASSDIFF = 1
//C       } OLELINKBIND;
enum tagOLELINKBIND
{
    OLELINKBIND_EVENIFCLASSDIFF = 1,
}
alias tagOLELINKBIND OLELINKBIND;
//C       extern const IID IID_IOleLink;
extern const IID IID_IOleLink;
//C       typedef struct IOleLinkVtbl {
//C           HRESULT ( *QueryInterface)(IOleLink *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleLink *This);
//C           ULONG ( *Release)(IOleLink *This);
//C           HRESULT ( *SetUpdateOptions)(IOleLink *This,DWORD dwUpdateOpt);
//C           HRESULT ( *GetUpdateOptions)(IOleLink *This,DWORD *pdwUpdateOpt);
//C           HRESULT ( *SetSourceMoniker)(IOleLink *This,IMoniker *pmk,const IID *const rclsid);
//C           HRESULT ( *GetSourceMoniker)(IOleLink *This,IMoniker **ppmk);
//C           HRESULT ( *SetSourceDisplayName)(IOleLink *This,LPCOLESTR pszStatusText);
//C           HRESULT ( *GetSourceDisplayName)(IOleLink *This,LPOLESTR *ppszDisplayName);
//C           HRESULT ( *BindToSource)(IOleLink *This,DWORD bindflags,IBindCtx *pbc);
//C           HRESULT ( *BindIfRunning)(IOleLink *This);
//C           HRESULT ( *GetBoundSource)(IOleLink *This,IUnknown **ppunk);
//C           HRESULT ( *UnbindSource)(IOleLink *This);
//C           HRESULT ( *Update)(IOleLink *This,IBindCtx *pbc);
//C       } IOleLinkVtbl;
struct IOleLinkVtbl
{
    HRESULT  function(IOleLink *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleLink *This)AddRef;
    ULONG  function(IOleLink *This)Release;
    HRESULT  function(IOleLink *This, DWORD dwUpdateOpt)SetUpdateOptions;
    HRESULT  function(IOleLink *This, DWORD *pdwUpdateOpt)GetUpdateOptions;
    HRESULT  function(IOleLink *This, IMoniker *pmk, IID *rclsid)SetSourceMoniker;
    HRESULT  function(IOleLink *This, IMoniker **ppmk)GetSourceMoniker;
    HRESULT  function(IOleLink *This, LPCOLESTR pszStatusText)SetSourceDisplayName;
    HRESULT  function(IOleLink *This, LPOLESTR *ppszDisplayName)GetSourceDisplayName;
    HRESULT  function(IOleLink *This, DWORD bindflags, IBindCtx *pbc)BindToSource;
    HRESULT  function(IOleLink *This)BindIfRunning;
    HRESULT  function(IOleLink *This, IUnknown **ppunk)GetBoundSource;
    HRESULT  function(IOleLink *This)UnbindSource;
    HRESULT  function(IOleLink *This, IBindCtx *pbc)Update;
}
//C       struct IOleLink {
//C         struct IOleLinkVtbl *lpVtbl;
//C       };
struct IOleLink
{
    IOleLinkVtbl *lpVtbl;
}
//C       HRESULT IOleLink_SetUpdateOptions_Proxy(IOleLink *This,DWORD dwUpdateOpt);
HRESULT  IOleLink_SetUpdateOptions_Proxy(IOleLink *This, DWORD dwUpdateOpt);
//C       void IOleLink_SetUpdateOptions_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_SetUpdateOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_GetUpdateOptions_Proxy(IOleLink *This,DWORD *pdwUpdateOpt);
HRESULT  IOleLink_GetUpdateOptions_Proxy(IOleLink *This, DWORD *pdwUpdateOpt);
//C       void IOleLink_GetUpdateOptions_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_GetUpdateOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_SetSourceMoniker_Proxy(IOleLink *This,IMoniker *pmk,const IID *const rclsid);
HRESULT  IOleLink_SetSourceMoniker_Proxy(IOleLink *This, IMoniker *pmk, IID *rclsid);
//C       void IOleLink_SetSourceMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_SetSourceMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_GetSourceMoniker_Proxy(IOleLink *This,IMoniker **ppmk);
HRESULT  IOleLink_GetSourceMoniker_Proxy(IOleLink *This, IMoniker **ppmk);
//C       void IOleLink_GetSourceMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_GetSourceMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_SetSourceDisplayName_Proxy(IOleLink *This,LPCOLESTR pszStatusText);
HRESULT  IOleLink_SetSourceDisplayName_Proxy(IOleLink *This, LPCOLESTR pszStatusText);
//C       void IOleLink_SetSourceDisplayName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_SetSourceDisplayName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_GetSourceDisplayName_Proxy(IOleLink *This,LPOLESTR *ppszDisplayName);
HRESULT  IOleLink_GetSourceDisplayName_Proxy(IOleLink *This, LPOLESTR *ppszDisplayName);
//C       void IOleLink_GetSourceDisplayName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_GetSourceDisplayName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_BindToSource_Proxy(IOleLink *This,DWORD bindflags,IBindCtx *pbc);
HRESULT  IOleLink_BindToSource_Proxy(IOleLink *This, DWORD bindflags, IBindCtx *pbc);
//C       void IOleLink_BindToSource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_BindToSource_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_BindIfRunning_Proxy(IOleLink *This);
HRESULT  IOleLink_BindIfRunning_Proxy(IOleLink *This);
//C       void IOleLink_BindIfRunning_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_BindIfRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_GetBoundSource_Proxy(IOleLink *This,IUnknown **ppunk);
HRESULT  IOleLink_GetBoundSource_Proxy(IOleLink *This, IUnknown **ppunk);
//C       void IOleLink_GetBoundSource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_GetBoundSource_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_UnbindSource_Proxy(IOleLink *This);
HRESULT  IOleLink_UnbindSource_Proxy(IOleLink *This);
//C       void IOleLink_UnbindSource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_UnbindSource_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleLink_Update_Proxy(IOleLink *This,IBindCtx *pbc);
HRESULT  IOleLink_Update_Proxy(IOleLink *This, IBindCtx *pbc);
//C       void IOleLink_Update_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleLink_Update_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleItemContainer *LPOLEITEMCONTAINER;
alias IOleItemContainer *LPOLEITEMCONTAINER;
//C       typedef enum tagBINDSPEED {
//C         BINDSPEED_INDEFINITE = 1,BINDSPEED_MODERATE = 2,BINDSPEED_IMMEDIATE = 3
//C       } BINDSPEED;
enum tagBINDSPEED
{
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE,
    BINDSPEED_IMMEDIATE,
}
alias tagBINDSPEED BINDSPEED;
//C       typedef enum tagOLECONTF {
//C         OLECONTF_EMBEDDINGS = 1,OLECONTF_LINKS = 2,OLECONTF_OTHERS = 4,OLECONTF_ONLYUSER = 8,OLECONTF_ONLYIFRUNNING = 16
//C       } OLECONTF;
enum tagOLECONTF
{
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16,
}
alias tagOLECONTF OLECONTF;
//C       extern const IID IID_IOleItemContainer;
extern const IID IID_IOleItemContainer;
//C       typedef struct IOleItemContainerVtbl {
//C           HRESULT ( *QueryInterface)(IOleItemContainer *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleItemContainer *This);
//C           ULONG ( *Release)(IOleItemContainer *This);
//C           HRESULT ( *ParseDisplayName)(IOleItemContainer *This,IBindCtx *pbc,LPOLESTR pszDisplayName,ULONG *pchEaten,IMoniker **ppmkOut);
//C           HRESULT ( *EnumObjects)(IOleItemContainer *This,DWORD grfFlags,IEnumUnknown **ppenum);
//C           HRESULT ( *LockContainer)(IOleItemContainer *This,WINBOOL fLock);
//C           HRESULT ( *GetObjectA)(IOleItemContainer *This,LPOLESTR pszItem,DWORD dwSpeedNeeded,IBindCtx *pbc,const IID *const riid,void **ppvObject);
//C           HRESULT ( *GetObjectStorage)(IOleItemContainer *This,LPOLESTR pszItem,IBindCtx *pbc,const IID *const riid,void **ppvStorage);
//C           HRESULT ( *IsRunning)(IOleItemContainer *This,LPOLESTR pszItem);
//C       } IOleItemContainerVtbl;
struct IOleItemContainerVtbl
{
    HRESULT  function(IOleItemContainer *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleItemContainer *This)AddRef;
    ULONG  function(IOleItemContainer *This)Release;
    HRESULT  function(IOleItemContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut)ParseDisplayName;
    HRESULT  function(IOleItemContainer *This, DWORD grfFlags, IEnumUnknown **ppenum)EnumObjects;
    HRESULT  function(IOleItemContainer *This, WINBOOL fLock)LockContainer;
    HRESULT  function(IOleItemContainer *This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc, IID *riid, void **ppvObject)GetObjectA;
    HRESULT  function(IOleItemContainer *This, LPOLESTR pszItem, IBindCtx *pbc, IID *riid, void **ppvStorage)GetObjectStorage;
    HRESULT  function(IOleItemContainer *This, LPOLESTR pszItem)IsRunning;
}
//C       struct IOleItemContainer {
//C         struct IOleItemContainerVtbl *lpVtbl;
//C       };
struct IOleItemContainer
{
    IOleItemContainerVtbl *lpVtbl;
}
//C       HRESULT IOleItemContainer_GetObject_Proxy(IOleItemContainer *This,LPOLESTR pszItem,DWORD dwSpeedNeeded,IBindCtx *pbc,const IID *const riid,void **ppvObject);
HRESULT  IOleItemContainer_GetObject_Proxy(IOleItemContainer *This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc, IID *riid, void **ppvObject);
//C       void IOleItemContainer_GetObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleItemContainer_GetObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleItemContainer_GetObjectStorage_Proxy(IOleItemContainer *This,LPOLESTR pszItem,IBindCtx *pbc,const IID *const riid,void **ppvStorage);
HRESULT  IOleItemContainer_GetObjectStorage_Proxy(IOleItemContainer *This, LPOLESTR pszItem, IBindCtx *pbc, IID *riid, void **ppvStorage);
//C       void IOleItemContainer_GetObjectStorage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleItemContainer_GetObjectStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleItemContainer_IsRunning_Proxy(IOleItemContainer *This,LPOLESTR pszItem);
HRESULT  IOleItemContainer_IsRunning_Proxy(IOleItemContainer *This, LPOLESTR pszItem);
//C       void IOleItemContainer_IsRunning_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleItemContainer_IsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
alias IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
//C       typedef RECT BORDERWIDTHS;
alias RECT BORDERWIDTHS;
//C       typedef LPRECT LPBORDERWIDTHS;
alias LPRECT LPBORDERWIDTHS;
//C       typedef LPCRECT LPCBORDERWIDTHS;
alias LPCRECT LPCBORDERWIDTHS;
//C       extern const IID IID_IOleInPlaceUIWindow;
extern const IID IID_IOleInPlaceUIWindow;
//C       typedef struct IOleInPlaceUIWindowVtbl {
//C           HRESULT ( *QueryInterface)(IOleInPlaceUIWindow *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleInPlaceUIWindow *This);
//C           ULONG ( *Release)(IOleInPlaceUIWindow *This);
//C           HRESULT ( *GetWindow)(IOleInPlaceUIWindow *This,HWND *phwnd);
//C           HRESULT ( *ContextSensitiveHelp)(IOleInPlaceUIWindow *This,WINBOOL fEnterMode);
//C           HRESULT ( *GetBorder)(IOleInPlaceUIWindow *This,LPRECT lprectBorder);
//C           HRESULT ( *RequestBorderSpace)(IOleInPlaceUIWindow *This,LPCBORDERWIDTHS pborderwidths);
//C           HRESULT ( *SetBorderSpace)(IOleInPlaceUIWindow *This,LPCBORDERWIDTHS pborderwidths);
//C           HRESULT ( *SetActiveObject)(IOleInPlaceUIWindow *This,IOleInPlaceActiveObject *pActiveObject,LPCOLESTR pszObjName);
//C       } IOleInPlaceUIWindowVtbl;
struct IOleInPlaceUIWindowVtbl
{
    HRESULT  function(IOleInPlaceUIWindow *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleInPlaceUIWindow *This)AddRef;
    ULONG  function(IOleInPlaceUIWindow *This)Release;
    HRESULT  function(IOleInPlaceUIWindow *This, HWND *phwnd)GetWindow;
    HRESULT  function(IOleInPlaceUIWindow *This, WINBOOL fEnterMode)ContextSensitiveHelp;
    HRESULT  function(IOleInPlaceUIWindow *This, LPRECT lprectBorder)GetBorder;
    HRESULT  function(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths)RequestBorderSpace;
    HRESULT  function(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths)SetBorderSpace;
    HRESULT  function(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName)SetActiveObject;
}
//C       struct IOleInPlaceUIWindow {
//C         struct IOleInPlaceUIWindowVtbl *lpVtbl;
//C       };
struct IOleInPlaceUIWindow
{
    IOleInPlaceUIWindowVtbl *lpVtbl;
}
//C       HRESULT IOleInPlaceUIWindow_GetBorder_Proxy(IOleInPlaceUIWindow *This,LPRECT lprectBorder);
HRESULT  IOleInPlaceUIWindow_GetBorder_Proxy(IOleInPlaceUIWindow *This, LPRECT lprectBorder);
//C       void IOleInPlaceUIWindow_GetBorder_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceUIWindow_GetBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceUIWindow_RequestBorderSpace_Proxy(IOleInPlaceUIWindow *This,LPCBORDERWIDTHS pborderwidths);
HRESULT  IOleInPlaceUIWindow_RequestBorderSpace_Proxy(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);
//C       void IOleInPlaceUIWindow_RequestBorderSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceUIWindow_RequestBorderSpace_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceUIWindow_SetBorderSpace_Proxy(IOleInPlaceUIWindow *This,LPCBORDERWIDTHS pborderwidths);
HRESULT  IOleInPlaceUIWindow_SetBorderSpace_Proxy(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);
//C       void IOleInPlaceUIWindow_SetBorderSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceUIWindow_SetBorderSpace_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceUIWindow_SetActiveObject_Proxy(IOleInPlaceUIWindow *This,IOleInPlaceActiveObject *pActiveObject,LPCOLESTR pszObjName);
HRESULT  IOleInPlaceUIWindow_SetActiveObject_Proxy(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);
//C       void IOleInPlaceUIWindow_SetActiveObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceUIWindow_SetActiveObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
alias IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
//C       extern const IID IID_IOleInPlaceActiveObject;
extern const IID IID_IOleInPlaceActiveObject;
//C       typedef struct IOleInPlaceActiveObjectVtbl {
//C           HRESULT ( *QueryInterface)(IOleInPlaceActiveObject *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleInPlaceActiveObject *This);
//C           ULONG ( *Release)(IOleInPlaceActiveObject *This);
//C           HRESULT ( *GetWindow)(IOleInPlaceActiveObject *This,HWND *phwnd);
//C           HRESULT ( *ContextSensitiveHelp)(IOleInPlaceActiveObject *This,WINBOOL fEnterMode);
//C           HRESULT ( *TranslateAcceleratorA)(IOleInPlaceActiveObject *This,LPMSG lpmsg);
//C           HRESULT ( *OnFrameWindowActivate)(IOleInPlaceActiveObject *This,WINBOOL fActivate);
//C           HRESULT ( *OnDocWindowActivate)(IOleInPlaceActiveObject *This,WINBOOL fActivate);
//C           HRESULT ( *ResizeBorder)(IOleInPlaceActiveObject *This,LPCRECT prcBorder,IOleInPlaceUIWindow *pUIWindow,WINBOOL fFrameWindow);
//C           HRESULT ( *EnableModeless)(IOleInPlaceActiveObject *This,WINBOOL fEnable);
//C       } IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceActiveObjectVtbl
{
    HRESULT  function(IOleInPlaceActiveObject *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleInPlaceActiveObject *This)AddRef;
    ULONG  function(IOleInPlaceActiveObject *This)Release;
    HRESULT  function(IOleInPlaceActiveObject *This, HWND *phwnd)GetWindow;
    HRESULT  function(IOleInPlaceActiveObject *This, WINBOOL fEnterMode)ContextSensitiveHelp;
    HRESULT  function(IOleInPlaceActiveObject *This, LPMSG lpmsg)TranslateAcceleratorA;
    HRESULT  function(IOleInPlaceActiveObject *This, WINBOOL fActivate)OnFrameWindowActivate;
    HRESULT  function(IOleInPlaceActiveObject *This, WINBOOL fActivate)OnDocWindowActivate;
    HRESULT  function(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, WINBOOL fFrameWindow)ResizeBorder;
    HRESULT  function(IOleInPlaceActiveObject *This, WINBOOL fEnable)EnableModeless;
}
//C       struct IOleInPlaceActiveObject {
//C         struct IOleInPlaceActiveObjectVtbl *lpVtbl;
//C       };
struct IOleInPlaceActiveObject
{
    IOleInPlaceActiveObjectVtbl *lpVtbl;
}
//C       HRESULT IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This);
HRESULT  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject *This);
//C       void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(IOleInPlaceActiveObject *This,WINBOOL fActivate);
HRESULT  IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(IOleInPlaceActiveObject *This, WINBOOL fActivate);
//C       void IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(IOleInPlaceActiveObject *This,WINBOOL fActivate);
HRESULT  IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(IOleInPlaceActiveObject *This, WINBOOL fActivate);
//C       void IOleInPlaceActiveObject_OnDocWindowActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceActiveObject_OnDocWindowActivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This,LPCRECT prcBorder,const IID *const riid,IOleInPlaceUIWindow *pUIWindow,WINBOOL fFrameWindow);
HRESULT  IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IID *riid, IOleInPlaceUIWindow *pUIWindow, WINBOOL fFrameWindow);
//C       void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceActiveObject_EnableModeless_Proxy(IOleInPlaceActiveObject *This,WINBOOL fEnable);
HRESULT  IOleInPlaceActiveObject_EnableModeless_Proxy(IOleInPlaceActiveObject *This, WINBOOL fEnable);
//C       void IOleInPlaceActiveObject_EnableModeless_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceActiveObject_EnableModeless_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
alias IOleInPlaceFrame *LPOLEINPLACEFRAME;
//C       typedef struct tagOIFI {
//C         UINT cb;
//C         WINBOOL fMDIApp;
//C         HWND hwndFrame;
//C         HACCEL haccel;
//C         UINT cAccelEntries;
//C       } OLEINPLACEFRAMEINFO;
struct tagOIFI
{
    UINT cb;
    WINBOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
}
alias tagOIFI OLEINPLACEFRAMEINFO;
//C       typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
alias tagOIFI *LPOLEINPLACEFRAMEINFO;
//C       typedef struct tagOleMenuGroupWidths {
//C         LONG width[6 ];
//C       } OLEMENUGROUPWIDTHS;
struct tagOleMenuGroupWidths
{
    LONG [6]width;
}
alias tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
//C       typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
alias tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
//C       typedef HGLOBAL HOLEMENU;
alias HGLOBAL HOLEMENU;
//C       extern const IID IID_IOleInPlaceFrame;
extern const IID IID_IOleInPlaceFrame;
//C       typedef struct IOleInPlaceFrameVtbl {
//C           HRESULT ( *QueryInterface)(IOleInPlaceFrame *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleInPlaceFrame *This);
//C           ULONG ( *Release)(IOleInPlaceFrame *This);
//C           HRESULT ( *GetWindow)(IOleInPlaceFrame *This,HWND *phwnd);
//C           HRESULT ( *ContextSensitiveHelp)(IOleInPlaceFrame *This,WINBOOL fEnterMode);
//C           HRESULT ( *GetBorder)(IOleInPlaceFrame *This,LPRECT lprectBorder);
//C           HRESULT ( *RequestBorderSpace)(IOleInPlaceFrame *This,LPCBORDERWIDTHS pborderwidths);
//C           HRESULT ( *SetBorderSpace)(IOleInPlaceFrame *This,LPCBORDERWIDTHS pborderwidths);
//C           HRESULT ( *SetActiveObject)(IOleInPlaceFrame *This,IOleInPlaceActiveObject *pActiveObject,LPCOLESTR pszObjName);
//C           HRESULT ( *InsertMenus)(IOleInPlaceFrame *This,HMENU hmenuShared,LPOLEMENUGROUPWIDTHS lpMenuWidths);
//C           HRESULT ( *SetMenu)(IOleInPlaceFrame *This,HMENU hmenuShared,HOLEMENU holemenu,HWND hwndActiveObject);
//C           HRESULT ( *RemoveMenus)(IOleInPlaceFrame *This,HMENU hmenuShared);
//C           HRESULT ( *SetStatusText)(IOleInPlaceFrame *This,LPCOLESTR pszStatusText);
//C           HRESULT ( *EnableModeless)(IOleInPlaceFrame *This,WINBOOL fEnable);
//C           HRESULT ( *TranslateAcceleratorA)(IOleInPlaceFrame *This,LPMSG lpmsg,WORD wID);
//C       } IOleInPlaceFrameVtbl;
struct IOleInPlaceFrameVtbl
{
    HRESULT  function(IOleInPlaceFrame *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleInPlaceFrame *This)AddRef;
    ULONG  function(IOleInPlaceFrame *This)Release;
    HRESULT  function(IOleInPlaceFrame *This, HWND *phwnd)GetWindow;
    HRESULT  function(IOleInPlaceFrame *This, WINBOOL fEnterMode)ContextSensitiveHelp;
    HRESULT  function(IOleInPlaceFrame *This, LPRECT lprectBorder)GetBorder;
    HRESULT  function(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths)RequestBorderSpace;
    HRESULT  function(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths)SetBorderSpace;
    HRESULT  function(IOleInPlaceFrame *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName)SetActiveObject;
    HRESULT  function(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths)InsertMenus;
    HRESULT  function(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject)SetMenu;
    HRESULT  function(IOleInPlaceFrame *This, HMENU hmenuShared)RemoveMenus;
    HRESULT  function(IOleInPlaceFrame *This, LPCOLESTR pszStatusText)SetStatusText;
    HRESULT  function(IOleInPlaceFrame *This, WINBOOL fEnable)EnableModeless;
    HRESULT  function(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID)TranslateAcceleratorA;
}
//C       struct IOleInPlaceFrame {
//C         struct IOleInPlaceFrameVtbl *lpVtbl;
//C       };
struct IOleInPlaceFrame
{
    IOleInPlaceFrameVtbl *lpVtbl;
}
//C       HRESULT IOleInPlaceFrame_InsertMenus_Proxy(IOleInPlaceFrame *This,HMENU hmenuShared,LPOLEMENUGROUPWIDTHS lpMenuWidths);
HRESULT  IOleInPlaceFrame_InsertMenus_Proxy(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);
//C       void IOleInPlaceFrame_InsertMenus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceFrame_InsertMenus_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceFrame_SetMenu_Proxy(IOleInPlaceFrame *This,HMENU hmenuShared,HOLEMENU holemenu,HWND hwndActiveObject);
HRESULT  IOleInPlaceFrame_SetMenu_Proxy(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);
//C       void IOleInPlaceFrame_SetMenu_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceFrame_SetMenu_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceFrame_RemoveMenus_Proxy(IOleInPlaceFrame *This,HMENU hmenuShared);
HRESULT  IOleInPlaceFrame_RemoveMenus_Proxy(IOleInPlaceFrame *This, HMENU hmenuShared);
//C       void IOleInPlaceFrame_RemoveMenus_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceFrame_RemoveMenus_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceFrame_SetStatusText_Proxy(IOleInPlaceFrame *This,LPCOLESTR pszStatusText);
HRESULT  IOleInPlaceFrame_SetStatusText_Proxy(IOleInPlaceFrame *This, LPCOLESTR pszStatusText);
//C       void IOleInPlaceFrame_SetStatusText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceFrame_SetStatusText_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceFrame_EnableModeless_Proxy(IOleInPlaceFrame *This,WINBOOL fEnable);
HRESULT  IOleInPlaceFrame_EnableModeless_Proxy(IOleInPlaceFrame *This, WINBOOL fEnable);
//C       void IOleInPlaceFrame_EnableModeless_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceFrame_EnableModeless_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceFrame_TranslateAccelerator_Proxy(IOleInPlaceFrame *This,LPMSG lpmsg,WORD wID);
HRESULT  IOleInPlaceFrame_TranslateAccelerator_Proxy(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);
//C       void IOleInPlaceFrame_TranslateAccelerator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceFrame_TranslateAccelerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
alias IOleInPlaceObject *LPOLEINPLACEOBJECT;
//C       extern const IID IID_IOleInPlaceObject;
extern const IID IID_IOleInPlaceObject;
//C       typedef struct IOleInPlaceObjectVtbl {
//C           HRESULT ( *QueryInterface)(IOleInPlaceObject *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleInPlaceObject *This);
//C           ULONG ( *Release)(IOleInPlaceObject *This);
//C           HRESULT ( *GetWindow)(IOleInPlaceObject *This,HWND *phwnd);
//C           HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObject *This,WINBOOL fEnterMode);
//C           HRESULT ( *InPlaceDeactivate)(IOleInPlaceObject *This);
//C           HRESULT ( *UIDeactivate)(IOleInPlaceObject *This);
//C           HRESULT ( *SetObjectRects)(IOleInPlaceObject *This,LPCRECT lprcPosRect,LPCRECT lprcClipRect);
//C           HRESULT ( *ReactivateAndUndo)(IOleInPlaceObject *This);
//C       } IOleInPlaceObjectVtbl;
struct IOleInPlaceObjectVtbl
{
    HRESULT  function(IOleInPlaceObject *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleInPlaceObject *This)AddRef;
    ULONG  function(IOleInPlaceObject *This)Release;
    HRESULT  function(IOleInPlaceObject *This, HWND *phwnd)GetWindow;
    HRESULT  function(IOleInPlaceObject *This, WINBOOL fEnterMode)ContextSensitiveHelp;
    HRESULT  function(IOleInPlaceObject *This)InPlaceDeactivate;
    HRESULT  function(IOleInPlaceObject *This)UIDeactivate;
    HRESULT  function(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect)SetObjectRects;
    HRESULT  function(IOleInPlaceObject *This)ReactivateAndUndo;
}
//C       struct IOleInPlaceObject {
//C         struct IOleInPlaceObjectVtbl *lpVtbl;
//C       };
struct IOleInPlaceObject
{
    IOleInPlaceObjectVtbl *lpVtbl;
}
//C       HRESULT IOleInPlaceObject_InPlaceDeactivate_Proxy(IOleInPlaceObject *This);
HRESULT  IOleInPlaceObject_InPlaceDeactivate_Proxy(IOleInPlaceObject *This);
//C       void IOleInPlaceObject_InPlaceDeactivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceObject_InPlaceDeactivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceObject_UIDeactivate_Proxy(IOleInPlaceObject *This);
HRESULT  IOleInPlaceObject_UIDeactivate_Proxy(IOleInPlaceObject *This);
//C       void IOleInPlaceObject_UIDeactivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceObject_UIDeactivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceObject_SetObjectRects_Proxy(IOleInPlaceObject *This,LPCRECT lprcPosRect,LPCRECT lprcClipRect);
HRESULT  IOleInPlaceObject_SetObjectRects_Proxy(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);
//C       void IOleInPlaceObject_SetObjectRects_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceObject_SetObjectRects_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceObject_ReactivateAndUndo_Proxy(IOleInPlaceObject *This);
HRESULT  IOleInPlaceObject_ReactivateAndUndo_Proxy(IOleInPlaceObject *This);
//C       void IOleInPlaceObject_ReactivateAndUndo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceObject_ReactivateAndUndo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IOleInPlaceSite *LPOLEINPLACESITE;
alias IOleInPlaceSite *LPOLEINPLACESITE;
//C       extern const IID IID_IOleInPlaceSite;
extern const IID IID_IOleInPlaceSite;
//C       typedef struct IOleInPlaceSiteVtbl {
//C           HRESULT ( *QueryInterface)(IOleInPlaceSite *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IOleInPlaceSite *This);
//C           ULONG ( *Release)(IOleInPlaceSite *This);
//C           HRESULT ( *GetWindow)(IOleInPlaceSite *This,HWND *phwnd);
//C           HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSite *This,WINBOOL fEnterMode);
//C           HRESULT ( *CanInPlaceActivate)(IOleInPlaceSite *This);
//C           HRESULT ( *OnInPlaceActivate)(IOleInPlaceSite *This);
//C           HRESULT ( *OnUIActivate)(IOleInPlaceSite *This);
//C           HRESULT ( *GetWindowContext)(IOleInPlaceSite *This,IOleInPlaceFrame **ppFrame,IOleInPlaceUIWindow **ppDoc,LPRECT lprcPosRect,LPRECT lprcClipRect,LPOLEINPLACEFRAMEINFO lpFrameInfo);
//C           HRESULT ( *Scroll)(IOleInPlaceSite *This,SIZE scrollExtant);
//C           HRESULT ( *OnUIDeactivate)(IOleInPlaceSite *This,WINBOOL fUndoable);
//C           HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSite *This);
//C           HRESULT ( *DiscardUndoState)(IOleInPlaceSite *This);
//C           HRESULT ( *DeactivateAndUndo)(IOleInPlaceSite *This);
//C           HRESULT ( *OnPosRectChange)(IOleInPlaceSite *This,LPCRECT lprcPosRect);
//C       } IOleInPlaceSiteVtbl;
struct IOleInPlaceSiteVtbl
{
    HRESULT  function(IOleInPlaceSite *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IOleInPlaceSite *This)AddRef;
    ULONG  function(IOleInPlaceSite *This)Release;
    HRESULT  function(IOleInPlaceSite *This, HWND *phwnd)GetWindow;
    HRESULT  function(IOleInPlaceSite *This, WINBOOL fEnterMode)ContextSensitiveHelp;
    HRESULT  function(IOleInPlaceSite *This)CanInPlaceActivate;
    HRESULT  function(IOleInPlaceSite *This)OnInPlaceActivate;
    HRESULT  function(IOleInPlaceSite *This)OnUIActivate;
    HRESULT  function(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo)GetWindowContext;
    HRESULT  function(IOleInPlaceSite *This, SIZE scrollExtant)Scroll;
    HRESULT  function(IOleInPlaceSite *This, WINBOOL fUndoable)OnUIDeactivate;
    HRESULT  function(IOleInPlaceSite *This)OnInPlaceDeactivate;
    HRESULT  function(IOleInPlaceSite *This)DiscardUndoState;
    HRESULT  function(IOleInPlaceSite *This)DeactivateAndUndo;
    HRESULT  function(IOleInPlaceSite *This, LPCRECT lprcPosRect)OnPosRectChange;
}
//C       struct IOleInPlaceSite {
//C         struct IOleInPlaceSiteVtbl *lpVtbl;
//C       };
struct IOleInPlaceSite
{
    IOleInPlaceSiteVtbl *lpVtbl;
}
//C       HRESULT IOleInPlaceSite_CanInPlaceActivate_Proxy(IOleInPlaceSite *This);
HRESULT  IOleInPlaceSite_CanInPlaceActivate_Proxy(IOleInPlaceSite *This);
//C       void IOleInPlaceSite_CanInPlaceActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_CanInPlaceActivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_OnInPlaceActivate_Proxy(IOleInPlaceSite *This);
HRESULT  IOleInPlaceSite_OnInPlaceActivate_Proxy(IOleInPlaceSite *This);
//C       void IOleInPlaceSite_OnInPlaceActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_OnInPlaceActivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_OnUIActivate_Proxy(IOleInPlaceSite *This);
HRESULT  IOleInPlaceSite_OnUIActivate_Proxy(IOleInPlaceSite *This);
//C       void IOleInPlaceSite_OnUIActivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_OnUIActivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_GetWindowContext_Proxy(IOleInPlaceSite *This,IOleInPlaceFrame **ppFrame,IOleInPlaceUIWindow **ppDoc,LPRECT lprcPosRect,LPRECT lprcClipRect,LPOLEINPLACEFRAMEINFO lpFrameInfo);
HRESULT  IOleInPlaceSite_GetWindowContext_Proxy(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);
//C       void IOleInPlaceSite_GetWindowContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_GetWindowContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_Scroll_Proxy(IOleInPlaceSite *This,SIZE scrollExtant);
HRESULT  IOleInPlaceSite_Scroll_Proxy(IOleInPlaceSite *This, SIZE scrollExtant);
//C       void IOleInPlaceSite_Scroll_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_Scroll_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_OnUIDeactivate_Proxy(IOleInPlaceSite *This,WINBOOL fUndoable);
HRESULT  IOleInPlaceSite_OnUIDeactivate_Proxy(IOleInPlaceSite *This, WINBOOL fUndoable);
//C       void IOleInPlaceSite_OnUIDeactivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_OnUIDeactivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_OnInPlaceDeactivate_Proxy(IOleInPlaceSite *This);
HRESULT  IOleInPlaceSite_OnInPlaceDeactivate_Proxy(IOleInPlaceSite *This);
//C       void IOleInPlaceSite_OnInPlaceDeactivate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_OnInPlaceDeactivate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_DiscardUndoState_Proxy(IOleInPlaceSite *This);
HRESULT  IOleInPlaceSite_DiscardUndoState_Proxy(IOleInPlaceSite *This);
//C       void IOleInPlaceSite_DiscardUndoState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_DiscardUndoState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_DeactivateAndUndo_Proxy(IOleInPlaceSite *This);
HRESULT  IOleInPlaceSite_DeactivateAndUndo_Proxy(IOleInPlaceSite *This);
//C       void IOleInPlaceSite_DeactivateAndUndo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_DeactivateAndUndo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IOleInPlaceSite_OnPosRectChange_Proxy(IOleInPlaceSite *This,LPCRECT lprcPosRect);
HRESULT  IOleInPlaceSite_OnPosRectChange_Proxy(IOleInPlaceSite *This, LPCRECT lprcPosRect);
//C       void IOleInPlaceSite_OnPosRectChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IOleInPlaceSite_OnPosRectChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IContinue;
extern const IID IID_IContinue;
//C       typedef struct IContinueVtbl {
//C           HRESULT ( *QueryInterface)(IContinue *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IContinue *This);
//C           ULONG ( *Release)(IContinue *This);
//C           HRESULT ( *FContinue)(IContinue *This);
//C       } IContinueVtbl;
struct IContinueVtbl
{
    HRESULT  function(IContinue *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IContinue *This)AddRef;
    ULONG  function(IContinue *This)Release;
    HRESULT  function(IContinue *This)FContinue;
}
//C       struct IContinue {
//C         struct IContinueVtbl *lpVtbl;
//C       };
struct IContinue
{
    IContinueVtbl *lpVtbl;
}
//C       HRESULT IContinue_FContinue_Proxy(IContinue *This);
HRESULT  IContinue_FContinue_Proxy(IContinue *This);
//C       void IContinue_FContinue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IContinue_FContinue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IViewObject *LPVIEWOBJECT;
alias IViewObject *LPVIEWOBJECT;
//C       extern const IID IID_IViewObject;
extern const IID IID_IViewObject;
//C       typedef struct IViewObjectVtbl {
//C           HRESULT ( *QueryInterface)(IViewObject *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IViewObject *This);
//C           ULONG ( *Release)(IViewObject *This);
//C           HRESULT ( *Draw)(IViewObject *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DVTARGETDEVICE *ptd,HDC hdcTargetDev,HDC hdcDraw,LPCRECTL lprcBounds,LPCRECTL lprcWBounds,WINBOOL ( *pfnContinue)(ULONG_PTR dwContinue),ULONG_PTR dwContinue);
//C           HRESULT ( *GetColorSet)(IViewObject *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DVTARGETDEVICE *ptd,HDC hicTargetDev,LOGPALETTE **ppColorSet);
//C           HRESULT ( *Freeze)(IViewObject *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DWORD *pdwFreeze);
//C           HRESULT ( *Unfreeze)(IViewObject *This,DWORD dwFreeze);
//C           HRESULT ( *SetAdvise)(IViewObject *This,DWORD aspects,DWORD advf,IAdviseSink *pAdvSink);
//C           HRESULT ( *GetAdvise)(IViewObject *This,DWORD *pAspects,DWORD *pAdvf,IAdviseSink **ppAdvSink);
//C       } IViewObjectVtbl;
struct IViewObjectVtbl
{
    HRESULT  function(IViewObject *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IViewObject *This)AddRef;
    ULONG  function(IViewObject *This)Release;
    HRESULT  function(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, WINBOOL  function(ULONG_PTR dwContinue)pfnContinue, ULONG_PTR dwContinue)Draw;
    HRESULT  function(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)GetColorSet;
    HRESULT  function(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)Freeze;
    HRESULT  function(IViewObject *This, DWORD dwFreeze)Unfreeze;
    HRESULT  function(IViewObject *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink)SetAdvise;
    HRESULT  function(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)GetAdvise;
}
//C       struct IViewObject {
//C         struct IViewObjectVtbl *lpVtbl;
//C       };
struct IViewObject
{
    IViewObjectVtbl *lpVtbl;
}
//C       HRESULT IViewObject_RemoteDraw_Proxy(IViewObject *This,DWORD dwDrawAspect,LONG lindex,ULONG_PTR pvAspect,DVTARGETDEVICE *ptd,ULONG_PTR hdcTargetDev,ULONG_PTR hdcDraw,LPCRECTL lprcBounds,LPCRECTL lprcWBounds,IContinue *pContinue);
HRESULT  IViewObject_RemoteDraw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hdcTargetDev, ULONG_PTR hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue);
//C       void IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject_RemoteDraw_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IViewObject_RemoteGetColorSet_Proxy(IViewObject *This,DWORD dwDrawAspect,LONG lindex,ULONG_PTR pvAspect,DVTARGETDEVICE *ptd,ULONG_PTR hicTargetDev,LOGPALETTE **ppColorSet);
HRESULT  IViewObject_RemoteGetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet);
//C       void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IViewObject_RemoteFreeze_Proxy(IViewObject *This,DWORD dwDrawAspect,LONG lindex,ULONG_PTR pvAspect,DWORD *pdwFreeze);
HRESULT  IViewObject_RemoteFreeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze);
//C       void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject_RemoteFreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IViewObject_Unfreeze_Proxy(IViewObject *This,DWORD dwFreeze);
HRESULT  IViewObject_Unfreeze_Proxy(IViewObject *This, DWORD dwFreeze);
//C       void IViewObject_Unfreeze_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject_Unfreeze_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IViewObject_SetAdvise_Proxy(IViewObject *This,DWORD aspects,DWORD advf,IAdviseSink *pAdvSink);
HRESULT  IViewObject_SetAdvise_Proxy(IViewObject *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);
//C       void IViewObject_SetAdvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject_SetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IViewObject_RemoteGetAdvise_Proxy(IViewObject *This,DWORD *pAspects,DWORD *pAdvf,IAdviseSink **ppAdvSink);
HRESULT  IViewObject_RemoteGetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
//C       void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IViewObject2 *LPVIEWOBJECT2;
alias IViewObject2 *LPVIEWOBJECT2;
//C       extern const IID IID_IViewObject2;
extern const IID IID_IViewObject2;
//C       typedef struct IViewObject2Vtbl {
//C           HRESULT ( *QueryInterface)(IViewObject2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IViewObject2 *This);
//C           ULONG ( *Release)(IViewObject2 *This);
//C           HRESULT ( *Draw)(IViewObject2 *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DVTARGETDEVICE *ptd,HDC hdcTargetDev,HDC hdcDraw,LPCRECTL lprcBounds,LPCRECTL lprcWBounds,WINBOOL ( *pfnContinue)(ULONG_PTR dwContinue),ULONG_PTR dwContinue);
//C           HRESULT ( *GetColorSet)(IViewObject2 *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DVTARGETDEVICE *ptd,HDC hicTargetDev,LOGPALETTE **ppColorSet);
//C           HRESULT ( *Freeze)(IViewObject2 *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DWORD *pdwFreeze);
//C           HRESULT ( *Unfreeze)(IViewObject2 *This,DWORD dwFreeze);
//C           HRESULT ( *SetAdvise)(IViewObject2 *This,DWORD aspects,DWORD advf,IAdviseSink *pAdvSink);
//C           HRESULT ( *GetAdvise)(IViewObject2 *This,DWORD *pAspects,DWORD *pAdvf,IAdviseSink **ppAdvSink);
//C           HRESULT ( *GetExtent)(IViewObject2 *This,DWORD dwDrawAspect,LONG lindex,DVTARGETDEVICE *ptd,LPSIZEL lpsizel);
//C       } IViewObject2Vtbl;
struct IViewObject2Vtbl
{
    HRESULT  function(IViewObject2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IViewObject2 *This)AddRef;
    ULONG  function(IViewObject2 *This)Release;
    HRESULT  function(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, WINBOOL  function(ULONG_PTR dwContinue)pfnContinue, ULONG_PTR dwContinue)Draw;
    HRESULT  function(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet)GetColorSet;
    HRESULT  function(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)Freeze;
    HRESULT  function(IViewObject2 *This, DWORD dwFreeze)Unfreeze;
    HRESULT  function(IViewObject2 *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink)SetAdvise;
    HRESULT  function(IViewObject2 *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink)GetAdvise;
    HRESULT  function(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel)GetExtent;
}
//C       struct IViewObject2 {
//C         struct IViewObject2Vtbl *lpVtbl;
//C       };
struct IViewObject2
{
    IViewObject2Vtbl *lpVtbl;
}
//C       HRESULT IViewObject2_GetExtent_Proxy(IViewObject2 *This,DWORD dwDrawAspect,LONG lindex,DVTARGETDEVICE *ptd,LPSIZEL lpsizel);
HRESULT  IViewObject2_GetExtent_Proxy(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);
//C       void IViewObject2_GetExtent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IViewObject2_GetExtent_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IDropSource *LPDROPSOURCE;
alias IDropSource *LPDROPSOURCE;
//C       extern const IID IID_IDropSource;
extern const IID IID_IDropSource;
//C       typedef struct IDropSourceVtbl {
//C           HRESULT ( *QueryInterface)(IDropSource *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IDropSource *This);
//C           ULONG ( *Release)(IDropSource *This);
//C           HRESULT ( *QueryContinueDrag)(IDropSource *This,WINBOOL fEscapePressed,DWORD grfKeyState);
//C           HRESULT ( *GiveFeedback)(IDropSource *This,DWORD dwEffect);
//C       } IDropSourceVtbl;
struct IDropSourceVtbl
{
    HRESULT  function(IDropSource *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDropSource *This)AddRef;
    ULONG  function(IDropSource *This)Release;
    HRESULT  function(IDropSource *This, WINBOOL fEscapePressed, DWORD grfKeyState)QueryContinueDrag;
    HRESULT  function(IDropSource *This, DWORD dwEffect)GiveFeedback;
}
//C       struct IDropSource {
//C         struct IDropSourceVtbl *lpVtbl;
//C       };
struct IDropSource
{
    IDropSourceVtbl *lpVtbl;
}
//C       HRESULT IDropSource_QueryContinueDrag_Proxy(IDropSource *This,WINBOOL fEscapePressed,DWORD grfKeyState);
HRESULT  IDropSource_QueryContinueDrag_Proxy(IDropSource *This, WINBOOL fEscapePressed, DWORD grfKeyState);
//C       void IDropSource_QueryContinueDrag_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDropSource_QueryContinueDrag_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDropSource_GiveFeedback_Proxy(IDropSource *This,DWORD dwEffect);
HRESULT  IDropSource_GiveFeedback_Proxy(IDropSource *This, DWORD dwEffect);
//C       void IDropSource_GiveFeedback_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDropSource_GiveFeedback_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IDropTarget *LPDROPTARGET;
alias IDropTarget *LPDROPTARGET;
//C       extern const IID IID_IDropTarget;
extern const IID IID_IDropTarget;
//C       typedef struct IDropTargetVtbl {
//C           HRESULT ( *QueryInterface)(IDropTarget *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IDropTarget *This);
//C           ULONG ( *Release)(IDropTarget *This);
//C           HRESULT ( *DragEnter)(IDropTarget *This,IDataObject *pDataObj,DWORD grfKeyState,POINTL pt,DWORD *pdwEffect);
//C           HRESULT ( *DragOver)(IDropTarget *This,DWORD grfKeyState,POINTL pt,DWORD *pdwEffect);
//C           HRESULT ( *DragLeave)(IDropTarget *This);
//C           HRESULT ( *Drop)(IDropTarget *This,IDataObject *pDataObj,DWORD grfKeyState,POINTL pt,DWORD *pdwEffect);
//C       } IDropTargetVtbl;
struct IDropTargetVtbl
{
    HRESULT  function(IDropTarget *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDropTarget *This)AddRef;
    ULONG  function(IDropTarget *This)Release;
    HRESULT  function(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)DragEnter;
    HRESULT  function(IDropTarget *This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)DragOver;
    HRESULT  function(IDropTarget *This)DragLeave;
    HRESULT  function(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)Drop;
}
//C       struct IDropTarget {
//C         struct IDropTargetVtbl *lpVtbl;
//C       };
struct IDropTarget
{
    IDropTargetVtbl *lpVtbl;
}
//C       HRESULT IDropTarget_DragEnter_Proxy(IDropTarget *This,IDataObject *pDataObj,DWORD grfKeyState,POINTL pt,DWORD *pdwEffect);
HRESULT  IDropTarget_DragEnter_Proxy(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
//C       void IDropTarget_DragEnter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDropTarget_DragEnter_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDropTarget_DragOver_Proxy(IDropTarget *This,DWORD grfKeyState,POINTL pt,DWORD *pdwEffect);
HRESULT  IDropTarget_DragOver_Proxy(IDropTarget *This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
//C       void IDropTarget_DragOver_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDropTarget_DragOver_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDropTarget_DragLeave_Proxy(IDropTarget *This);
HRESULT  IDropTarget_DragLeave_Proxy(IDropTarget *This);
//C       void IDropTarget_DragLeave_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDropTarget_DragLeave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDropTarget_Drop_Proxy(IDropTarget *This,IDataObject *pDataObj,DWORD grfKeyState,POINTL pt,DWORD *pdwEffect);
HRESULT  IDropTarget_Drop_Proxy(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
//C       void IDropTarget_Drop_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDropTarget_Drop_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IEnumOLEVERB *LPENUMOLEVERB;
alias IEnumOLEVERB *LPENUMOLEVERB;
//C       typedef struct tagOLEVERB {
//C         LONG lVerb;
//C         LPOLESTR lpszVerbName;
//C         DWORD fuFlags;
//C         DWORD grfAttribs;
//C       } OLEVERB;
struct tagOLEVERB
{
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
}
alias tagOLEVERB OLEVERB;
//C       typedef struct tagOLEVERB *LPOLEVERB;
alias tagOLEVERB *LPOLEVERB;
//C       typedef enum tagOLEVERBATTRIB {
//C         OLEVERBATTRIB_NEVERDIRTIES = 1,OLEVERBATTRIB_ONCONTAINERMENU = 2
//C       } OLEVERBATTRIB;
enum tagOLEVERBATTRIB
{
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU,
}
alias tagOLEVERBATTRIB OLEVERBATTRIB;
//C       extern const IID IID_IEnumOLEVERB;
extern const IID IID_IEnumOLEVERB;
//C       typedef struct IEnumOLEVERBVtbl {
//C           HRESULT ( *QueryInterface)(IEnumOLEVERB *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IEnumOLEVERB *This);
//C           ULONG ( *Release)(IEnumOLEVERB *This);
//C           HRESULT ( *Next)(IEnumOLEVERB *This,ULONG celt,LPOLEVERB rgelt,ULONG *pceltFetched);
//C           HRESULT ( *Skip)(IEnumOLEVERB *This,ULONG celt);
//C           HRESULT ( *Reset)(IEnumOLEVERB *This);
//C           HRESULT ( *Clone)(IEnumOLEVERB *This,IEnumOLEVERB **ppenum);
//C       } IEnumOLEVERBVtbl;
struct IEnumOLEVERBVtbl
{
    HRESULT  function(IEnumOLEVERB *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumOLEVERB *This)AddRef;
    ULONG  function(IEnumOLEVERB *This)Release;
    HRESULT  function(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumOLEVERB *This, ULONG celt)Skip;
    HRESULT  function(IEnumOLEVERB *This)Reset;
    HRESULT  function(IEnumOLEVERB *This, IEnumOLEVERB **ppenum)Clone;
}
//C       struct IEnumOLEVERB {
//C         struct IEnumOLEVERBVtbl *lpVtbl;
//C       };
struct IEnumOLEVERB
{
    IEnumOLEVERBVtbl *lpVtbl;
}
//C       HRESULT IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This,ULONG celt,LPOLEVERB rgelt,ULONG *pceltFetched);
HRESULT  IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
//C       void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumOLEVERB_Skip_Proxy(IEnumOLEVERB *This,ULONG celt);
HRESULT  IEnumOLEVERB_Skip_Proxy(IEnumOLEVERB *This, ULONG celt);
//C       void IEnumOLEVERB_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumOLEVERB_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumOLEVERB_Reset_Proxy(IEnumOLEVERB *This);
HRESULT  IEnumOLEVERB_Reset_Proxy(IEnumOLEVERB *This);
//C       void IEnumOLEVERB_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumOLEVERB_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumOLEVERB_Clone_Proxy(IEnumOLEVERB *This,IEnumOLEVERB **ppenum);
HRESULT  IEnumOLEVERB_Clone_Proxy(IEnumOLEVERB *This, IEnumOLEVERB **ppenum);
//C       void IEnumOLEVERB_Clone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumOLEVERB_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       ULONG CLIPFORMAT_UserSize(ULONG *,ULONG,CLIPFORMAT *);
ULONG  CLIPFORMAT_UserSize(ULONG *, ULONG , CLIPFORMAT *);
//C       unsigned char * CLIPFORMAT_UserMarshal(ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserMarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C       unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserUnmarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C       void CLIPFORMAT_UserFree(ULONG *,CLIPFORMAT *);
void  CLIPFORMAT_UserFree(ULONG *, CLIPFORMAT *);
//C       ULONG HACCEL_UserSize(ULONG *,ULONG,HACCEL *);
ULONG  HACCEL_UserSize(ULONG *, ULONG , HACCEL *);
//C       unsigned char * HACCEL_UserMarshal(ULONG *,unsigned char *,HACCEL *);
ubyte * HACCEL_UserMarshal(ULONG *, ubyte *, HACCEL *);
//C       unsigned char * HACCEL_UserUnmarshal(ULONG *,unsigned char *,HACCEL *);
ubyte * HACCEL_UserUnmarshal(ULONG *, ubyte *, HACCEL *);
//C       void HACCEL_UserFree(ULONG *,HACCEL *);
void  HACCEL_UserFree(ULONG *, HACCEL *);
//C       ULONG HGLOBAL_UserSize(ULONG *,ULONG,HGLOBAL *);
ULONG  HGLOBAL_UserSize(ULONG *, ULONG , HGLOBAL *);
//C       unsigned char * HGLOBAL_UserMarshal(ULONG *,unsigned char *,HGLOBAL *);
ubyte * HGLOBAL_UserMarshal(ULONG *, ubyte *, HGLOBAL *);
//C       unsigned char * HGLOBAL_UserUnmarshal(ULONG *,unsigned char *,HGLOBAL *);
ubyte * HGLOBAL_UserUnmarshal(ULONG *, ubyte *, HGLOBAL *);
//C       void HGLOBAL_UserFree(ULONG *,HGLOBAL *);
void  HGLOBAL_UserFree(ULONG *, HGLOBAL *);
//C       ULONG HMENU_UserSize(ULONG *,ULONG,HMENU *);
ULONG  HMENU_UserSize(ULONG *, ULONG , HMENU *);
//C       unsigned char * HMENU_UserMarshal(ULONG *,unsigned char *,HMENU *);
ubyte * HMENU_UserMarshal(ULONG *, ubyte *, HMENU *);
//C       unsigned char * HMENU_UserUnmarshal(ULONG *,unsigned char *,HMENU *);
ubyte * HMENU_UserUnmarshal(ULONG *, ubyte *, HMENU *);
//C       void HMENU_UserFree(ULONG *,HMENU *);
void  HMENU_UserFree(ULONG *, HMENU *);
//C       ULONG HWND_UserSize(ULONG *,ULONG,HWND *);
ULONG  HWND_UserSize(ULONG *, ULONG , HWND *);
//C       unsigned char * HWND_UserMarshal(ULONG *,unsigned char *,HWND *);
ubyte * HWND_UserMarshal(ULONG *, ubyte *, HWND *);
//C       unsigned char * HWND_UserUnmarshal(ULONG *,unsigned char *,HWND *);
ubyte * HWND_UserUnmarshal(ULONG *, ubyte *, HWND *);
//C       void HWND_UserFree(ULONG *,HWND *);
void  HWND_UserFree(ULONG *, HWND *);
//C       ULONG STGMEDIUM_UserSize(ULONG *,ULONG,STGMEDIUM *);
ULONG  STGMEDIUM_UserSize(ULONG *, ULONG , STGMEDIUM *);
//C       unsigned char * STGMEDIUM_UserMarshal(ULONG *,unsigned char *,STGMEDIUM *);
ubyte * STGMEDIUM_UserMarshal(ULONG *, ubyte *, STGMEDIUM *);
//C       unsigned char * STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,STGMEDIUM *);
ubyte * STGMEDIUM_UserUnmarshal(ULONG *, ubyte *, STGMEDIUM *);
//C       void STGMEDIUM_UserFree(ULONG *,STGMEDIUM *);
void  STGMEDIUM_UserFree(ULONG *, STGMEDIUM *);
//C       HRESULT IOleCache2_UpdateCache_Proxy(IOleCache2 *This,LPDATAOBJECT pDataObject,DWORD grfUpdf,LPVOID pReserved);
HRESULT  IOleCache2_UpdateCache_Proxy(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);
//C       HRESULT IOleCache2_UpdateCache_Stub(IOleCache2 *This,LPDATAOBJECT pDataObject,DWORD grfUpdf,LONG_PTR pReserved);
HRESULT  IOleCache2_UpdateCache_Stub(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LONG_PTR pReserved);
//C       HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This,LPMSG lpmsg);
HRESULT  IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject *This, LPMSG lpmsg);
//C       HRESULT IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This);
HRESULT  IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject *This);
//C       HRESULT IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This,LPCRECT prcBorder,IOleInPlaceUIWindow *pUIWindow,WINBOOL fFrameWindow);
HRESULT  IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, WINBOOL fFrameWindow);
//C       HRESULT IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This,LPCRECT prcBorder,const IID *const riid,IOleInPlaceUIWindow *pUIWindow,WINBOOL fFrameWindow);
HRESULT  IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IID *riid, IOleInPlaceUIWindow *pUIWindow, WINBOOL fFrameWindow);
//C       HRESULT IViewObject_Draw_Proxy(IViewObject *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DVTARGETDEVICE *ptd,HDC hdcTargetDev,HDC hdcDraw,LPCRECTL lprcBounds,LPCRECTL lprcWBounds,WINBOOL ( *pfnContinue)(ULONG_PTR dwContinue),ULONG_PTR dwContinue);
HRESULT  IViewObject_Draw_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, WINBOOL  function(ULONG_PTR dwContinue)pfnContinue, ULONG_PTR dwContinue);
//C       HRESULT IViewObject_Draw_Stub(IViewObject *This,DWORD dwDrawAspect,LONG lindex,ULONG_PTR pvAspect,DVTARGETDEVICE *ptd,ULONG_PTR hdcTargetDev,ULONG_PTR hdcDraw,LPCRECTL lprcBounds,LPCRECTL lprcWBounds,IContinue *pContinue);
HRESULT  IViewObject_Draw_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hdcTargetDev, ULONG_PTR hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, IContinue *pContinue);
//C       HRESULT IViewObject_GetColorSet_Proxy(IViewObject *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DVTARGETDEVICE *ptd,HDC hicTargetDev,LOGPALETTE **ppColorSet);
HRESULT  IViewObject_GetColorSet_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);
//C       HRESULT IViewObject_GetColorSet_Stub(IViewObject *This,DWORD dwDrawAspect,LONG lindex,ULONG_PTR pvAspect,DVTARGETDEVICE *ptd,ULONG_PTR hicTargetDev,LOGPALETTE **ppColorSet);
HRESULT  IViewObject_GetColorSet_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DVTARGETDEVICE *ptd, ULONG_PTR hicTargetDev, LOGPALETTE **ppColorSet);
//C       HRESULT IViewObject_Freeze_Proxy(IViewObject *This,DWORD dwDrawAspect,LONG lindex,void *pvAspect,DWORD *pdwFreeze);
HRESULT  IViewObject_Freeze_Proxy(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);
//C       HRESULT IViewObject_Freeze_Stub(IViewObject *This,DWORD dwDrawAspect,LONG lindex,ULONG_PTR pvAspect,DWORD *pdwFreeze);
HRESULT  IViewObject_Freeze_Stub(IViewObject *This, DWORD dwDrawAspect, LONG lindex, ULONG_PTR pvAspect, DWORD *pdwFreeze);
//C       HRESULT IViewObject_GetAdvise_Proxy(IViewObject *This,DWORD *pAspects,DWORD *pAdvf,IAdviseSink **ppAdvSink);
HRESULT  IViewObject_GetAdvise_Proxy(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
//C       HRESULT IViewObject_GetAdvise_Stub(IViewObject *This,DWORD *pAspects,DWORD *pAdvf,IAdviseSink **ppAdvSink);
HRESULT  IViewObject_GetAdvise_Stub(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);
//C       HRESULT IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This,ULONG celt,LPOLEVERB rgelt,ULONG *pceltFetched);
HRESULT  IEnumOLEVERB_Next_Proxy(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This,ULONG celt,LPOLEVERB rgelt,ULONG *pceltFetched);
HRESULT  IEnumOLEVERB_Next_Stub(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
//C     typedef struct IPersistMoniker IPersistMoniker;
//C     typedef struct IMonikerProp IMonikerProp;
//C     typedef struct IBindProtocol IBindProtocol;
//C     typedef struct IAuthenticate IAuthenticate;
//C     typedef struct IHttpNegotiate IHttpNegotiate;
//C     typedef struct IHttpNegotiate2 IHttpNegotiate2;
//C     typedef struct IWinInetFileStream IWinInetFileStream;
//C     typedef struct IWindowForBindingUI IWindowForBindingUI;
//C     typedef struct ICodeInstall ICodeInstall;
//C     typedef struct IWinInetInfo IWinInetInfo;
//C     typedef struct IHttpSecurity IHttpSecurity;
//C     typedef struct IWinInetHttpInfo IWinInetHttpInfo;
//C     typedef struct IWinInetCacheHints IWinInetCacheHints;
//C     typedef struct IBindHost IBindHost;
//C     typedef struct IInternet IInternet;
//C     typedef struct IInternetBindInfo IInternetBindInfo;
//C     typedef struct IInternetProtocolRoot IInternetProtocolRoot;
//C     typedef struct IInternetProtocol IInternetProtocol;
//C     typedef struct IInternetProtocolSink IInternetProtocolSink;
//C     typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;
//C     typedef struct IInternetSession IInternetSession;
//C     typedef struct IInternetThreadSwitch IInternetThreadSwitch;
//C     typedef struct IInternetPriority IInternetPriority;
//C     typedef struct IInternetProtocolInfo IInternetProtocolInfo;
//C     typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;
//C     typedef struct IInternetSecurityManager IInternetSecurityManager;
//C     typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;
//C     typedef struct IZoneIdentifier IZoneIdentifier;
//C     typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;
//C     typedef struct IInternetZoneManager IInternetZoneManager;
//C     typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;
//C     typedef struct ISoftDistExt ISoftDistExt;
//C     typedef struct ICatalogFileInfo ICatalogFileInfo;
//C     typedef struct IDataFilter IDataFilter;
//C     typedef struct IEncodingFilterFactory IEncodingFilterFactory;
//C     typedef struct IWrappedProtocol IWrappedProtocol;
//C     typedef struct IServiceProvider IServiceProvider;
//C       extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_s_ifspec;
//C       typedef IServiceProvider *LPSERVICEPROVIDER;
alias IServiceProvider *LPSERVICEPROVIDER;
//C       extern const IID IID_IServiceProvider;
extern const IID IID_IServiceProvider;
//C       typedef struct IServiceProviderVtbl {
//C           HRESULT ( *QueryInterface)(IServiceProvider *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IServiceProvider *This);
//C           ULONG ( *Release)(IServiceProvider *This);
//C           HRESULT ( *QueryService)(IServiceProvider *This,const GUID *const guidService,const IID *const riid,void **ppvObject);
//C       } IServiceProviderVtbl;
struct IServiceProviderVtbl
{
    HRESULT  function(IServiceProvider *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IServiceProvider *This)AddRef;
    ULONG  function(IServiceProvider *This)Release;
    HRESULT  function(IServiceProvider *This, GUID *guidService, IID *riid, void **ppvObject)QueryService;
}
//C       struct IServiceProvider {
//C         struct IServiceProviderVtbl *lpVtbl;
//C       };
struct IServiceProvider
{
    IServiceProviderVtbl *lpVtbl;
}
//C       HRESULT IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This,const GUID *const guidService,const IID *const riid,IUnknown **ppvObject);
HRESULT  IServiceProvider_RemoteQueryService_Proxy(IServiceProvider *This, GUID *guidService, IID *riid, IUnknown **ppvObject);
//C       void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_servprov_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0093_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_servprov_0093_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0093_v0_0_s_ifspec;
//C       HRESULT IServiceProvider_QueryService_Proxy(IServiceProvider *This,const GUID *const guidService,const IID *const riid,void **ppvObject);
HRESULT  IServiceProvider_QueryService_Proxy(IServiceProvider *This, GUID *guidService, IID *riid, void **ppvObject);
//C       HRESULT IServiceProvider_QueryService_Stub(IServiceProvider *This,const GUID *const guidService,const IID *const riid,IUnknown **ppvObject);
HRESULT  IServiceProvider_QueryService_Stub(IServiceProvider *This, GUID *guidService, IID *riid, IUnknown **ppvObject);
//C     typedef struct IDispatch IDispatch;
//C     typedef struct ITypeComp ITypeComp;
//C     typedef struct ITypeInfo ITypeInfo;
//C     typedef struct ITypeLib ITypeLib;
//C     typedef struct IRecordInfo IRecordInfo;
//C     typedef struct IErrorLog IErrorLog;
//C     typedef struct ICreateTypeInfo ICreateTypeInfo;
//C     typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
//C     typedef struct ICreateTypeLib ICreateTypeLib;
//C     typedef struct ICreateTypeLib2 ICreateTypeLib2;
//C     typedef struct IEnumVARIANT IEnumVARIANT;
//C     typedef struct ITypeInfo2 ITypeInfo2;
//C     typedef struct ITypeLib2 ITypeLib2;
//C     typedef struct ITypeChangeEvents ITypeChangeEvents;
//C     typedef struct IErrorInfo IErrorInfo;
//C     typedef struct ICreateErrorInfo ICreateErrorInfo;
//C     typedef struct ISupportErrorInfo ISupportErrorInfo;
//C     typedef struct ITypeFactory ITypeFactory;
//C     typedef struct ITypeMarshal ITypeMarshal;
//C     typedef struct IPropertyBag IPropertyBag;
//C       extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_s_ifspec;
//C     extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
//C     extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
//C     typedef CY CURRENCY;
alias CY CURRENCY;
//C     typedef struct tagSAFEARRAYBOUND {
//C         ULONG cElements;
//C         LONG lLbound;
//C     } SAFEARRAYBOUND;
struct tagSAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
}
alias tagSAFEARRAYBOUND SAFEARRAYBOUND;
//C     typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
alias tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
//C     typedef struct _wireVARIANT *wireVARIANT;
alias _wireVARIANT *wireVARIANT;
//C     typedef struct _wireBRECORD *wireBRECORD;
alias _wireBRECORD *wireBRECORD;
//C     typedef struct _wireSAFEARR_BSTR {
//C         ULONG Size;
//C         wireBSTR *aBstr;
//C     } SAFEARR_BSTR;
struct _wireSAFEARR_BSTR
{
    ULONG Size;
    wireBSTR *aBstr;
}
alias _wireSAFEARR_BSTR SAFEARR_BSTR;
//C     typedef struct _wireSAFEARR_UNKNOWN {
//C         ULONG Size;
//C         IUnknown **apUnknown;
//C     } SAFEARR_UNKNOWN;
struct _wireSAFEARR_UNKNOWN
{
    ULONG Size;
    IUnknown **apUnknown;
}
alias _wireSAFEARR_UNKNOWN SAFEARR_UNKNOWN;
//C     typedef struct _wireSAFEARR_DISPATCH {
//C         ULONG Size;
//C         IDispatch **apDispatch;
//C     } SAFEARR_DISPATCH;
struct _wireSAFEARR_DISPATCH
{
    ULONG Size;
    IDispatch **apDispatch;
}
alias _wireSAFEARR_DISPATCH SAFEARR_DISPATCH;
//C     typedef struct _wireSAFEARR_VARIANT {
//C         ULONG Size;
//C         wireVARIANT *aVariant;
//C     } SAFEARR_VARIANT;
struct _wireSAFEARR_VARIANT
{
    ULONG Size;
    wireVARIANT *aVariant;
}
alias _wireSAFEARR_VARIANT SAFEARR_VARIANT;
//C     typedef struct _wireSAFEARR_BRECORD {
//C         ULONG Size;
//C         wireBRECORD *aRecord;
//C     } SAFEARR_BRECORD;
struct _wireSAFEARR_BRECORD
{
    ULONG Size;
    wireBRECORD *aRecord;
}
alias _wireSAFEARR_BRECORD SAFEARR_BRECORD;
//C     typedef struct _wireSAFEARR_HAVEIID {
//C         ULONG Size;
//C         IUnknown **apUnknown;
//C         IID iid;
//C     } SAFEARR_HAVEIID;
struct _wireSAFEARR_HAVEIID
{
    ULONG Size;
    IUnknown **apUnknown;
    IID iid;
}
alias _wireSAFEARR_HAVEIID SAFEARR_HAVEIID;
//C     typedef enum tagSF_TYPE {
//C         SF_ERROR = VT_ERROR,
//C         SF_I1 = VT_I1,
//C         SF_I2 = VT_I2,
//C         SF_I4 = VT_I4,
//C         SF_I8 = VT_I8,
//C         SF_BSTR = VT_BSTR,
//C         SF_UNKNOWN = VT_UNKNOWN,
//C         SF_DISPATCH = VT_DISPATCH,
//C         SF_VARIANT = VT_VARIANT,
//C         SF_RECORD = VT_RECORD,
//C         SF_HAVEIID = VT_UNKNOWN | VT_RESERVED
//C     } SF_TYPE;
enum tagSF_TYPE
{
    SF_ERROR = 10,
    SF_I1 = 16,
    SF_I2 = 2,
    SF_I4,
    SF_I8 = 20,
    SF_BSTR = 8,
    SF_UNKNOWN = 13,
    SF_DISPATCH = 9,
    SF_VARIANT = 12,
    SF_RECORD = 36,
    SF_HAVEIID = 32781,
}
alias tagSF_TYPE SF_TYPE;
//C     typedef struct _wireSAFEARRAY_UNION {
//C         ULONG sfType;
//C         union {
//C             SAFEARR_BSTR BstrStr;
//C             SAFEARR_UNKNOWN UnknownStr;
//C             SAFEARR_DISPATCH DispatchStr;
//C             SAFEARR_VARIANT VariantStr;
//C             SAFEARR_BRECORD RecordStr;
//C             SAFEARR_HAVEIID HaveIidStr;
//C             BYTE_SIZEDARR ByteStr;
//C             WORD_SIZEDARR WordStr;
//C             DWORD_SIZEDARR LongStr;
//C             HYPER_SIZEDARR HyperStr;
//C         } u;
union _N186
{
    SAFEARR_BSTR BstrStr;
    SAFEARR_UNKNOWN UnknownStr;
    SAFEARR_DISPATCH DispatchStr;
    SAFEARR_VARIANT VariantStr;
    SAFEARR_BRECORD RecordStr;
    SAFEARR_HAVEIID HaveIidStr;
    BYTE_SIZEDARR ByteStr;
    WORD_SIZEDARR WordStr;
    DWORD_SIZEDARR LongStr;
    HYPER_SIZEDARR HyperStr;
}
//C     } SAFEARRAYUNION;
struct _wireSAFEARRAY_UNION
{
    ULONG sfType;
    _N186 u;
}
alias _wireSAFEARRAY_UNION SAFEARRAYUNION;
//C     typedef struct _wireSAFEARRAY {
//C         USHORT cDims;
//C         USHORT fFeatures;
//C         ULONG cbElements;
//C         ULONG cLocks;
//C         SAFEARRAYUNION uArrayStructs;
//C         SAFEARRAYBOUND rgsabound[1];
//C     } *wireSAFEARRAY;
struct _wireSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND [1]rgsabound;
}
alias _wireSAFEARRAY *wireSAFEARRAY;
//C     typedef wireSAFEARRAY *wirePSAFEARRAY;
alias wireSAFEARRAY *wirePSAFEARRAY;
//C     typedef struct tagSAFEARRAY {
//C         USHORT cDims;
//C         USHORT fFeatures;
//C         ULONG cbElements;
//C         ULONG cLocks;
//C         PVOID pvData;
//C         SAFEARRAYBOUND rgsabound[1];
//C     } SAFEARRAY;
struct tagSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND [1]rgsabound;
}
alias tagSAFEARRAY SAFEARRAY;
//C     typedef SAFEARRAY *LPSAFEARRAY;
alias SAFEARRAY *LPSAFEARRAY;
//C     typedef struct tagVARIANT VARIANT;
alias tagVARIANT VARIANT;
//C     struct tagVARIANT {
//C         union {
//C             struct {
//C                 VARTYPE vt;
//C                 WORD wReserved1;
//C                 WORD wReserved2;
//C                 WORD wReserved3;
//C                 union {
//C                     LONGLONG llVal;
//C                     LONG lVal;
//C                     BYTE bVal;
//C                     SHORT iVal;
//C                     FLOAT fltVal;
//C                     DOUBLE dblVal;
//C                     VARIANT_BOOL boolVal;
//C                     SCODE scode;
//C                     CY cyVal;
//C                     DATE date;
//C                     BSTR bstrVal;
//C                     IUnknown *punkVal;
//C                     IDispatch *pdispVal;
//C                     SAFEARRAY *parray;
//C                     BYTE *pbVal;
//C                     SHORT *piVal;
//C                     LONG *plVal;
//C                     LONGLONG *pllVal;
//C                     FLOAT *pfltVal;
//C                     DOUBLE *pdblVal;
//C                     VARIANT_BOOL *pboolVal;
//C                     SCODE *pscode;
//C                     CY *pcyVal;
//C                     DATE *pdate;
//C                     BSTR *pbstrVal;
//C                     IUnknown **ppunkVal;
//C                     IDispatch **ppdispVal;
//C                     SAFEARRAY **pparray;
//C                     VARIANT *pvarVal;
//C                     PVOID byref;
//C                     CHAR cVal;
//C                     USHORT uiVal;
//C                     ULONG ulVal;
//C                     ULONGLONG ullVal;
//C                     INT intVal;
//C                     UINT uintVal;
//C                     DECIMAL *pdecVal;
//C                     CHAR *pcVal;
//C                     USHORT *puiVal;
//C                     ULONG *pulVal;
//C                     ULONGLONG *pullVal;
//C                     INT *pintVal;
//C                     UINT *puintVal;
//C                     struct {
//C                         PVOID pvRecord;
//C                         IRecordInfo *pRecInfo;
//C                     } ;
struct _N190
{
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
}
//C                 } ;
union _N189
{
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
}
//C             } ;
struct _N188
{
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
}
//C             DECIMAL decVal;
//C         } ;
union _N187
{
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
    DECIMAL decVal;
}
//C     };
struct tagVARIANT
{
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
    DECIMAL decVal;
}
//C     typedef VARIANT *LPVARIANT;
alias VARIANT *LPVARIANT;
//C     typedef VARIANT VARIANTARG;
alias VARIANT VARIANTARG;
//C     typedef VARIANT *LPVARIANTARG;
alias VARIANT *LPVARIANTARG;
//C     struct _wireBRECORD {
//C         ULONG fFlags;
//C         ULONG clSize;
//C         IRecordInfo *pRecInfo;
//C         byte *pRecord;
//C     };
struct _wireBRECORD
{
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
    byte *pRecord;
}
//C     struct _wireVARIANT {
//C         DWORD clSize;
//C         DWORD rpcReserved;
//C         USHORT vt;
//C         USHORT wReserved1;
//C         USHORT wReserved2;
//C         USHORT wReserved3;
//C         union {
//C             LONGLONG llVal;
//C             LONG lVal;
//C             BYTE bVal;
//C             SHORT iVal;
//C             FLOAT fltVal;
//C             DOUBLE dblVal;
//C             VARIANT_BOOL boolVal;
//C             SCODE scode;
//C             CY cyVal;
//C             DATE date;
//C             wireBSTR bstrVal;
//C             IUnknown *punkVal;
//C             IDispatch *pdispVal;
//C             wirePSAFEARRAY parray;
//C             wireBRECORD brecVal;
//C             BYTE *pbVal;
//C             SHORT *piVal;
//C             LONG *plVal;
//C             LONGLONG *pllVal;
//C             FLOAT *pfltVal;
//C             DOUBLE *pdblVal;
//C             VARIANT_BOOL *pboolVal;
//C             SCODE *pscode;
//C             CY *pcyVal;
//C             DATE *pdate;
//C             wireBSTR *pbstrVal;
//C             IUnknown **ppunkVal;
//C             IDispatch **ppdispVal;
//C             wirePSAFEARRAY *pparray;
//C             wireVARIANT *pvarVal;
//C             CHAR cVal;
//C             USHORT uiVal;
//C             ULONG ulVal;
//C             ULONGLONG ullVal;
//C             INT intVal;
//C             UINT uintVal;
//C             DECIMAL decVal;
//C             DECIMAL *pdecVal;
//C             CHAR *pcVal;
//C             USHORT *puiVal;
//C             ULONG *pulVal;
//C             ULONGLONG *pullVal;
//C             INT *pintVal;
//C             UINT *puintVal;
//C         } ;
union _N191
{
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    wireBSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    wirePSAFEARRAY parray;
    wireBRECORD brecVal;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    wireBSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    wirePSAFEARRAY *pparray;
    wireVARIANT *pvarVal;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL decVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
}
//C     };
struct _wireVARIANT
{
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    wireBSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    wirePSAFEARRAY parray;
    wireBRECORD brecVal;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    wireBSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    wirePSAFEARRAY *pparray;
    wireVARIANT *pvarVal;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL decVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
}
//C     typedef LONG DISPID;
alias LONG DISPID;
//C     typedef DISPID MEMBERID;
alias DISPID MEMBERID;
//C     typedef DWORD HREFTYPE;
alias DWORD HREFTYPE;
//C     typedef enum tagTYPEKIND {
//C         TKIND_ENUM = 0,
//C         TKIND_RECORD = 1,
//C         TKIND_MODULE = 2,
//C         TKIND_INTERFACE = 3,
//C         TKIND_DISPATCH = 4,
//C         TKIND_COCLASS = 5,
//C         TKIND_ALIAS = 6,
//C         TKIND_UNION = 7,
//C         TKIND_MAX = 8
//C     } TYPEKIND;
enum tagTYPEKIND
{
    TKIND_ENUM,
    TKIND_RECORD,
    TKIND_MODULE,
    TKIND_INTERFACE,
    TKIND_DISPATCH,
    TKIND_COCLASS,
    TKIND_ALIAS,
    TKIND_UNION,
    TKIND_MAX,
}
alias tagTYPEKIND TYPEKIND;
//C     typedef struct tagTYPEDESC {
//C         union {
//C             struct tagTYPEDESC *lptdesc;
//C             struct tagARRAYDESC *lpadesc;
//C             HREFTYPE hreftype;
//C         } ;
union _N192
{
    tagTYPEDESC *lptdesc;
    tagARRAYDESC *lpadesc;
    HREFTYPE hreftype;
}
//C         VARTYPE vt;
//C     } TYPEDESC;
struct tagTYPEDESC
{
    tagTYPEDESC *lptdesc;
    tagARRAYDESC *lpadesc;
    HREFTYPE hreftype;
    VARTYPE vt;
}
alias tagTYPEDESC TYPEDESC;
//C     typedef struct tagARRAYDESC {
//C         TYPEDESC tdescElem;
//C         USHORT cDims;
//C         SAFEARRAYBOUND rgbounds[1];
//C     } ARRAYDESC;
struct tagARRAYDESC
{
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND [1]rgbounds;
}
alias tagARRAYDESC ARRAYDESC;
//C     typedef struct tagPARAMDESCEX {
//C         ULONG cBytes;
//C         VARIANTARG varDefaultValue;
//C     } PARAMDESCEX;
struct tagPARAMDESCEX
{
    ULONG cBytes;
    VARIANTARG varDefaultValue;
}
alias tagPARAMDESCEX PARAMDESCEX;
//C     typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
alias tagPARAMDESCEX *LPPARAMDESCEX;
//C     typedef struct tagPARAMDESC {
//C         LPPARAMDESCEX pparamdescex;
//C         USHORT wParamFlags;
//C     } PARAMDESC;
struct tagPARAMDESC
{
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
}
alias tagPARAMDESC PARAMDESC;
//C     typedef struct tagPARAMDESC *LPPARAMDESC;
alias tagPARAMDESC *LPPARAMDESC;
//C     typedef struct tagIDLDESC {
//C         ULONG_PTR dwReserved;
//C         USHORT wIDLFlags;
//C     } IDLDESC;
struct tagIDLDESC
{
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
}
alias tagIDLDESC IDLDESC;
//C     typedef struct tagIDLDESC *LPIDLDESC;
alias tagIDLDESC *LPIDLDESC;
//C       typedef struct tagELEMDESC {
//C         TYPEDESC tdesc;
//C          union {
//C           IDLDESC idldesc;
//C           PARAMDESC paramdesc;
//C         } ;
union _N193
{
    IDLDESC idldesc;
    PARAMDESC paramdesc;
}
//C       } ELEMDESC,*LPELEMDESC;
struct tagELEMDESC
{
    TYPEDESC tdesc;
    IDLDESC idldesc;
    PARAMDESC paramdesc;
}
alias tagELEMDESC ELEMDESC;
alias tagELEMDESC *LPELEMDESC;
//C     typedef struct tagTYPEATTR {
//C         GUID guid;
//C         LCID lcid;
//C         DWORD dwReserved;
//C         MEMBERID memidConstructor;
//C         MEMBERID memidDestructor;
//C         LPOLESTR lpstrSchema;
//C         ULONG cbSizeInstance;
//C         TYPEKIND typekind;
//C         WORD cFuncs;
//C         WORD cVars;
//C         WORD cImplTypes;
//C         WORD cbSizeVft;
//C         WORD cbAlignment;
//C         WORD wTypeFlags;
//C         WORD wMajorVerNum;
//C         WORD wMinorVerNum;
//C         TYPEDESC tdescAlias;
//C         IDLDESC idldescType;
//C     } TYPEATTR;
struct tagTYPEATTR
{
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
}
alias tagTYPEATTR TYPEATTR;
//C     typedef struct tagTYPEATTR *LPTYPEATTR;
alias tagTYPEATTR *LPTYPEATTR;
//C     typedef struct tagDISPPARAMS {
//C         VARIANTARG *rgvarg;
//C         DISPID *rgdispidNamedArgs;
//C         UINT cArgs;
//C         UINT cNamedArgs;
//C     } DISPPARAMS;
struct tagDISPPARAMS
{
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
}
alias tagDISPPARAMS DISPPARAMS;
//C     typedef struct tagEXCEPINFO {
//C         WORD wCode;
//C         WORD wReserved;
//C         BSTR bstrSource;
//C         BSTR bstrDescription;
//C         BSTR bstrHelpFile;
//C         DWORD dwHelpContext;
//C         PVOID pvReserved;
//C         HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);
//C         SCODE scode;
//C     } EXCEPINFO,*LPEXCEPINFO;
struct tagEXCEPINFO
{
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT  function(tagEXCEPINFO *)pfnDeferredFillIn;
    SCODE scode;
}
alias tagEXCEPINFO EXCEPINFO;
alias tagEXCEPINFO *LPEXCEPINFO;
//C     typedef enum tagCALLCONV {
//C         CC_FASTCALL = 0,
//C         CC_CDECL = 1,
//C         CC_MSCPASCAL = 2,
//C         CC_PASCAL = CC_MSCPASCAL,
//C         CC_MACPASCAL = 3,
//C         CC_STDCALL = 4,
//C         CC_FPFASTCALL = 5,
//C         CC_SYSCALL = 6,
//C         CC_MPWCDECL = 7,
//C         CC_MPWPASCAL = 8,
//C         CC_MAX = 9
//C     } CALLCONV;
enum tagCALLCONV
{
    CC_FASTCALL,
    CC_CDECL,
    CC_MSCPASCAL,
    CC_PASCAL = 2,
    CC_MACPASCAL,
    CC_STDCALL,
    CC_FPFASTCALL,
    CC_SYSCALL,
    CC_MPWCDECL,
    CC_MPWPASCAL,
    CC_MAX,
}
alias tagCALLCONV CALLCONV;
//C     typedef enum tagFUNCKIND {
//C         FUNC_VIRTUAL = 0,
//C         FUNC_PUREVIRTUAL = 1,
//C         FUNC_NONVIRTUAL = 2,
//C         FUNC_STATIC = 3,
//C         FUNC_DISPATCH = 4
//C     } FUNCKIND;
enum tagFUNCKIND
{
    FUNC_VIRTUAL,
    FUNC_PUREVIRTUAL,
    FUNC_NONVIRTUAL,
    FUNC_STATIC,
    FUNC_DISPATCH,
}
alias tagFUNCKIND FUNCKIND;
//C     typedef enum tagINVOKEKIND {
//C         INVOKE_FUNC = 1,
//C         INVOKE_PROPERTYGET = 2,
//C         INVOKE_PROPERTYPUT = 4,
//C         INVOKE_PROPERTYPUTREF = 8
//C     } INVOKEKIND;
enum tagINVOKEKIND
{
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8,
}
alias tagINVOKEKIND INVOKEKIND;
//C     typedef struct tagFUNCDESC {
//C         MEMBERID memid;
//C         SCODE *lprgscode;
//C         ELEMDESC *lprgelemdescParam;
//C         FUNCKIND funckind;
//C         INVOKEKIND invkind;
//C         CALLCONV callconv;
//C         SHORT cParams;
//C         SHORT cParamsOpt;
//C         SHORT oVft;
//C         SHORT cScodes;
//C         ELEMDESC elemdescFunc;
//C         WORD wFuncFlags;
//C     } FUNCDESC;
struct tagFUNCDESC
{
    MEMBERID memid;
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
}
alias tagFUNCDESC FUNCDESC;
//C     typedef struct tagFUNCDESC *LPFUNCDESC;
alias tagFUNCDESC *LPFUNCDESC;
//C     typedef enum tagVARKIND {
//C         VAR_PERINSTANCE = 0,
//C         VAR_STATIC = 1,
//C         VAR_CONST = 2,
//C         VAR_DISPATCH = 3
//C     } VARKIND;
enum tagVARKIND
{
    VAR_PERINSTANCE,
    VAR_STATIC,
    VAR_CONST,
    VAR_DISPATCH,
}
alias tagVARKIND VARKIND;
//C     typedef struct tagVARDESC {
//C         MEMBERID memid;
//C         LPOLESTR lpstrSchema;
//C         union {
//C             ULONG oInst;
//C             VARIANT *lpvarValue;
//C         } ;
union _N194
{
    ULONG oInst;
    VARIANT *lpvarValue;
}
//C         ELEMDESC elemdescVar;
//C         WORD wVarFlags;
//C         VARKIND varkind;
//C     } VARDESC;
struct tagVARDESC
{
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    ULONG oInst;
    VARIANT *lpvarValue;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
}
alias tagVARDESC VARDESC;
//C     typedef struct tagVARDESC *LPVARDESC;
alias tagVARDESC *LPVARDESC;
//C       typedef enum tagTYPEFLAGS {
//C         TYPEFLAG_FAPPOBJECT = 0x1,TYPEFLAG_FCANCREATE = 0x2,TYPEFLAG_FLICENSED = 0x4,
//C         TYPEFLAG_FPREDECLID = 0x8,TYPEFLAG_FHIDDEN = 0x10,
//C         TYPEFLAG_FCONTROL = 0x20,TYPEFLAG_FDUAL = 0x40,TYPEFLAG_FNONEXTENSIBLE = 0x80,
//C         TYPEFLAG_FOLEAUTOMATION = 0x100,TYPEFLAG_FRESTRICTED = 0x200,
//C         TYPEFLAG_FAGGREGATABLE = 0x400,TYPEFLAG_FREPLACEABLE = 0x800,
//C         TYPEFLAG_FDISPATCHABLE = 0x1000,TYPEFLAG_FREVERSEBIND = 0x2000,
//C         TYPEFLAG_FPROXY = 0x4000
//C       } TYPEFLAGS;
enum tagTYPEFLAGS
{
    TYPEFLAG_FAPPOBJECT = 1,
    TYPEFLAG_FCANCREATE,
    TYPEFLAG_FLICENSED = 4,
    TYPEFLAG_FPREDECLID = 8,
    TYPEFLAG_FHIDDEN = 16,
    TYPEFLAG_FCONTROL = 32,
    TYPEFLAG_FDUAL = 64,
    TYPEFLAG_FNONEXTENSIBLE = 128,
    TYPEFLAG_FOLEAUTOMATION = 256,
    TYPEFLAG_FRESTRICTED = 512,
    TYPEFLAG_FAGGREGATABLE = 1024,
    TYPEFLAG_FREPLACEABLE = 2048,
    TYPEFLAG_FDISPATCHABLE = 4096,
    TYPEFLAG_FREVERSEBIND = 8192,
    TYPEFLAG_FPROXY = 16384,
}
alias tagTYPEFLAGS TYPEFLAGS;
//C       typedef enum tagFUNCFLAGS {
//C         FUNCFLAG_FRESTRICTED = 0x1,FUNCFLAG_FSOURCE = 0x2,FUNCFLAG_FBINDABLE = 0x4,
//C         FUNCFLAG_FREQUESTEDIT = 0x8,FUNCFLAG_FDISPLAYBIND = 0x10,
//C         FUNCFLAG_FDEFAULTBIND = 0x20,FUNCFLAG_FHIDDEN = 0x40,
//C         FUNCFLAG_FUSESGETLASTERROR = 0x80,FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
//C         FUNCFLAG_FUIDEFAULT = 0x200,
//C         FUNCFLAG_FNONBROWSABLE = 0x400,FUNCFLAG_FREPLACEABLE = 0x800,
//C         FUNCFLAG_FIMMEDIATEBIND = 0x1000
//C       } FUNCFLAGS;
enum tagFUNCFLAGS
{
    FUNCFLAG_FRESTRICTED = 1,
    FUNCFLAG_FSOURCE,
    FUNCFLAG_FBINDABLE = 4,
    FUNCFLAG_FREQUESTEDIT = 8,
    FUNCFLAG_FDISPLAYBIND = 16,
    FUNCFLAG_FDEFAULTBIND = 32,
    FUNCFLAG_FHIDDEN = 64,
    FUNCFLAG_FUSESGETLASTERROR = 128,
    FUNCFLAG_FDEFAULTCOLLELEM = 256,
    FUNCFLAG_FUIDEFAULT = 512,
    FUNCFLAG_FNONBROWSABLE = 1024,
    FUNCFLAG_FREPLACEABLE = 2048,
    FUNCFLAG_FIMMEDIATEBIND = 4096,
}
alias tagFUNCFLAGS FUNCFLAGS;
//C       typedef enum tagVARFLAGS {
//C         VARFLAG_FREADONLY = 0x1,VARFLAG_FSOURCE = 0x2,VARFLAG_FBINDABLE = 0x4,
//C         VARFLAG_FREQUESTEDIT = 0x8,VARFLAG_FDISPLAYBIND = 0x10,
//C         VARFLAG_FDEFAULTBIND = 0x20,VARFLAG_FHIDDEN = 0x40,VARFLAG_FRESTRICTED = 0x80,
//C         VARFLAG_FDEFAULTCOLLELEM = 0x100,VARFLAG_FUIDEFAULT = 0x200,
//C         VARFLAG_FNONBROWSABLE = 0x400,VARFLAG_FREPLACEABLE = 0x800,VARFLAG_FIMMEDIATEBIND = 0x1000
//C       } VARFLAGS;
enum tagVARFLAGS
{
    VARFLAG_FREADONLY = 1,
    VARFLAG_FSOURCE,
    VARFLAG_FBINDABLE = 4,
    VARFLAG_FREQUESTEDIT = 8,
    VARFLAG_FDISPLAYBIND = 16,
    VARFLAG_FDEFAULTBIND = 32,
    VARFLAG_FHIDDEN = 64,
    VARFLAG_FRESTRICTED = 128,
    VARFLAG_FDEFAULTCOLLELEM = 256,
    VARFLAG_FUIDEFAULT = 512,
    VARFLAG_FNONBROWSABLE = 1024,
    VARFLAG_FREPLACEABLE = 2048,
    VARFLAG_FIMMEDIATEBIND = 4096,
}
alias tagVARFLAGS VARFLAGS;
//C     typedef struct tagCLEANLOCALSTORAGE {
//C         IUnknown *pInterface;
//C         PVOID pStorage;
//C         DWORD flags;
//C     } CLEANLOCALSTORAGE;
struct tagCLEANLOCALSTORAGE
{
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
}
alias tagCLEANLOCALSTORAGE CLEANLOCALSTORAGE;
//C       typedef struct tagCUSTDATAITEM {
//C         GUID guid;
//C         VARIANTARG varValue;
//C       } CUSTDATAITEM;
struct tagCUSTDATAITEM
{
    GUID guid;
    VARIANTARG varValue;
}
alias tagCUSTDATAITEM CUSTDATAITEM;
//C       typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
alias tagCUSTDATAITEM *LPCUSTDATAITEM;
//C       typedef struct tagCUSTDATA {
//C         DWORD cCustData;
//C         LPCUSTDATAITEM prgCustData;
//C       } CUSTDATA;
struct tagCUSTDATA
{
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
}
alias tagCUSTDATA CUSTDATA;
//C       typedef struct tagCUSTDATA *LPCUSTDATA;
alias tagCUSTDATA *LPCUSTDATA;
//C       typedef ICreateTypeInfo *LPCREATETYPEINFO;
alias ICreateTypeInfo *LPCREATETYPEINFO;
//C       extern const IID IID_ICreateTypeInfo;
extern const IID IID_ICreateTypeInfo;
//C       typedef struct ICreateTypeInfoVtbl {
//C           HRESULT ( *QueryInterface)(ICreateTypeInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICreateTypeInfo *This);
//C           ULONG ( *Release)(ICreateTypeInfo *This);
//C           HRESULT ( *SetGuid)(ICreateTypeInfo *This,const GUID *const guid);
//C           HRESULT ( *SetTypeFlags)(ICreateTypeInfo *This,UINT uTypeFlags);
//C           HRESULT ( *SetDocString)(ICreateTypeInfo *This,LPOLESTR pStrDoc);
//C           HRESULT ( *SetHelpContext)(ICreateTypeInfo *This,DWORD dwHelpContext);
//C           HRESULT ( *SetVersion)(ICreateTypeInfo *This,WORD wMajorVerNum,WORD wMinorVerNum);
//C           HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo *This,ITypeInfo *pTInfo,HREFTYPE *phRefType);
//C           HRESULT ( *AddFuncDesc)(ICreateTypeInfo *This,UINT index,FUNCDESC *pFuncDesc);
//C           HRESULT ( *AddImplType)(ICreateTypeInfo *This,UINT index,HREFTYPE hRefType);
//C           HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo *This,UINT index,INT implTypeFlags);
//C           HRESULT ( *SetAlignment)(ICreateTypeInfo *This,WORD cbAlignment);
//C           HRESULT ( *SetSchema)(ICreateTypeInfo *This,LPOLESTR pStrSchema);
//C           HRESULT ( *AddVarDesc)(ICreateTypeInfo *This,UINT index,VARDESC *pVarDesc);
//C           HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo *This,UINT index,LPOLESTR *rgszNames,UINT cNames);
//C           HRESULT ( *SetVarName)(ICreateTypeInfo *This,UINT index,LPOLESTR szName);
//C           HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo *This,TYPEDESC *pTDescAlias);
//C           HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo *This,UINT index,LPOLESTR szDllName,LPOLESTR szProcName);
//C           HRESULT ( *SetFuncDocString)(ICreateTypeInfo *This,UINT index,LPOLESTR szDocString);
//C           HRESULT ( *SetVarDocString)(ICreateTypeInfo *This,UINT index,LPOLESTR szDocString);
//C           HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo *This,UINT index,DWORD dwHelpContext);
//C           HRESULT ( *SetVarHelpContext)(ICreateTypeInfo *This,UINT index,DWORD dwHelpContext);
//C           HRESULT ( *SetMops)(ICreateTypeInfo *This,UINT index,BSTR bstrMops);
//C           HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo *This,IDLDESC *pIdlDesc);
//C           HRESULT ( *LayOut)(ICreateTypeInfo *This);
//C       } ICreateTypeInfoVtbl;
struct ICreateTypeInfoVtbl
{
    HRESULT  function(ICreateTypeInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICreateTypeInfo *This)AddRef;
    ULONG  function(ICreateTypeInfo *This)Release;
    HRESULT  function(ICreateTypeInfo *This, GUID *guid)SetGuid;
    HRESULT  function(ICreateTypeInfo *This, UINT uTypeFlags)SetTypeFlags;
    HRESULT  function(ICreateTypeInfo *This, LPOLESTR pStrDoc)SetDocString;
    HRESULT  function(ICreateTypeInfo *This, DWORD dwHelpContext)SetHelpContext;
    HRESULT  function(ICreateTypeInfo *This, WORD wMajorVerNum, WORD wMinorVerNum)SetVersion;
    HRESULT  function(ICreateTypeInfo *This, ITypeInfo *pTInfo, HREFTYPE *phRefType)AddRefTypeInfo;
    HRESULT  function(ICreateTypeInfo *This, UINT index, FUNCDESC *pFuncDesc)AddFuncDesc;
    HRESULT  function(ICreateTypeInfo *This, UINT index, HREFTYPE hRefType)AddImplType;
    HRESULT  function(ICreateTypeInfo *This, UINT index, INT implTypeFlags)SetImplTypeFlags;
    HRESULT  function(ICreateTypeInfo *This, WORD cbAlignment)SetAlignment;
    HRESULT  function(ICreateTypeInfo *This, LPOLESTR pStrSchema)SetSchema;
    HRESULT  function(ICreateTypeInfo *This, UINT index, VARDESC *pVarDesc)AddVarDesc;
    HRESULT  function(ICreateTypeInfo *This, UINT index, LPOLESTR *rgszNames, UINT cNames)SetFuncAndParamNames;
    HRESULT  function(ICreateTypeInfo *This, UINT index, LPOLESTR szName)SetVarName;
    HRESULT  function(ICreateTypeInfo *This, TYPEDESC *pTDescAlias)SetTypeDescAlias;
    HRESULT  function(ICreateTypeInfo *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName)DefineFuncAsDllEntry;
    HRESULT  function(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString)SetFuncDocString;
    HRESULT  function(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString)SetVarDocString;
    HRESULT  function(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext)SetFuncHelpContext;
    HRESULT  function(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext)SetVarHelpContext;
    HRESULT  function(ICreateTypeInfo *This, UINT index, BSTR bstrMops)SetMops;
    HRESULT  function(ICreateTypeInfo *This, IDLDESC *pIdlDesc)SetTypeIdldesc;
    HRESULT  function(ICreateTypeInfo *This)LayOut;
}
//C       struct ICreateTypeInfo {
//C         struct ICreateTypeInfoVtbl *lpVtbl;
//C       };
struct ICreateTypeInfo
{
    ICreateTypeInfoVtbl *lpVtbl;
}
//C       HRESULT ICreateTypeInfo_SetGuid_Proxy(ICreateTypeInfo *This,const GUID *const guid);
HRESULT  ICreateTypeInfo_SetGuid_Proxy(ICreateTypeInfo *This, GUID *guid);
//C       void ICreateTypeInfo_SetGuid_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetGuid_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetTypeFlags_Proxy(ICreateTypeInfo *This,UINT uTypeFlags);
HRESULT  ICreateTypeInfo_SetTypeFlags_Proxy(ICreateTypeInfo *This, UINT uTypeFlags);
//C       void ICreateTypeInfo_SetTypeFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetTypeFlags_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetDocString_Proxy(ICreateTypeInfo *This,LPOLESTR pStrDoc);
HRESULT  ICreateTypeInfo_SetDocString_Proxy(ICreateTypeInfo *This, LPOLESTR pStrDoc);
//C       void ICreateTypeInfo_SetDocString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetDocString_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetHelpContext_Proxy(ICreateTypeInfo *This,DWORD dwHelpContext);
HRESULT  ICreateTypeInfo_SetHelpContext_Proxy(ICreateTypeInfo *This, DWORD dwHelpContext);
//C       void ICreateTypeInfo_SetHelpContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetHelpContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetVersion_Proxy(ICreateTypeInfo *This,WORD wMajorVerNum,WORD wMinorVerNum);
HRESULT  ICreateTypeInfo_SetVersion_Proxy(ICreateTypeInfo *This, WORD wMajorVerNum, WORD wMinorVerNum);
//C       void ICreateTypeInfo_SetVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetVersion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_AddRefTypeInfo_Proxy(ICreateTypeInfo *This,ITypeInfo *pTInfo,HREFTYPE *phRefType);
HRESULT  ICreateTypeInfo_AddRefTypeInfo_Proxy(ICreateTypeInfo *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);
//C       void ICreateTypeInfo_AddRefTypeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_AddRefTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_AddFuncDesc_Proxy(ICreateTypeInfo *This,UINT index,FUNCDESC *pFuncDesc);
HRESULT  ICreateTypeInfo_AddFuncDesc_Proxy(ICreateTypeInfo *This, UINT index, FUNCDESC *pFuncDesc);
//C       void ICreateTypeInfo_AddFuncDesc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_AddFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_AddImplType_Proxy(ICreateTypeInfo *This,UINT index,HREFTYPE hRefType);
HRESULT  ICreateTypeInfo_AddImplType_Proxy(ICreateTypeInfo *This, UINT index, HREFTYPE hRefType);
//C       void ICreateTypeInfo_AddImplType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_AddImplType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetImplTypeFlags_Proxy(ICreateTypeInfo *This,UINT index,INT implTypeFlags);
HRESULT  ICreateTypeInfo_SetImplTypeFlags_Proxy(ICreateTypeInfo *This, UINT index, INT implTypeFlags);
//C       void ICreateTypeInfo_SetImplTypeFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetImplTypeFlags_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetAlignment_Proxy(ICreateTypeInfo *This,WORD cbAlignment);
HRESULT  ICreateTypeInfo_SetAlignment_Proxy(ICreateTypeInfo *This, WORD cbAlignment);
//C       void ICreateTypeInfo_SetAlignment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetAlignment_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetSchema_Proxy(ICreateTypeInfo *This,LPOLESTR pStrSchema);
HRESULT  ICreateTypeInfo_SetSchema_Proxy(ICreateTypeInfo *This, LPOLESTR pStrSchema);
//C       void ICreateTypeInfo_SetSchema_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetSchema_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_AddVarDesc_Proxy(ICreateTypeInfo *This,UINT index,VARDESC *pVarDesc);
HRESULT  ICreateTypeInfo_AddVarDesc_Proxy(ICreateTypeInfo *This, UINT index, VARDESC *pVarDesc);
//C       void ICreateTypeInfo_AddVarDesc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_AddVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetFuncAndParamNames_Proxy(ICreateTypeInfo *This,UINT index,LPOLESTR *rgszNames,UINT cNames);
HRESULT  ICreateTypeInfo_SetFuncAndParamNames_Proxy(ICreateTypeInfo *This, UINT index, LPOLESTR *rgszNames, UINT cNames);
//C       void ICreateTypeInfo_SetFuncAndParamNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetFuncAndParamNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetVarName_Proxy(ICreateTypeInfo *This,UINT index,LPOLESTR szName);
HRESULT  ICreateTypeInfo_SetVarName_Proxy(ICreateTypeInfo *This, UINT index, LPOLESTR szName);
//C       void ICreateTypeInfo_SetVarName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetVarName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetTypeDescAlias_Proxy(ICreateTypeInfo *This,TYPEDESC *pTDescAlias);
HRESULT  ICreateTypeInfo_SetTypeDescAlias_Proxy(ICreateTypeInfo *This, TYPEDESC *pTDescAlias);
//C       void ICreateTypeInfo_SetTypeDescAlias_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetTypeDescAlias_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(ICreateTypeInfo *This,UINT index,LPOLESTR szDllName,LPOLESTR szProcName);
HRESULT  ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(ICreateTypeInfo *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);
//C       void ICreateTypeInfo_DefineFuncAsDllEntry_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_DefineFuncAsDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetFuncDocString_Proxy(ICreateTypeInfo *This,UINT index,LPOLESTR szDocString);
HRESULT  ICreateTypeInfo_SetFuncDocString_Proxy(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);
//C       void ICreateTypeInfo_SetFuncDocString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetFuncDocString_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetVarDocString_Proxy(ICreateTypeInfo *This,UINT index,LPOLESTR szDocString);
HRESULT  ICreateTypeInfo_SetVarDocString_Proxy(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);
//C       void ICreateTypeInfo_SetVarDocString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetVarDocString_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetFuncHelpContext_Proxy(ICreateTypeInfo *This,UINT index,DWORD dwHelpContext);
HRESULT  ICreateTypeInfo_SetFuncHelpContext_Proxy(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);
//C       void ICreateTypeInfo_SetFuncHelpContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetFuncHelpContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetVarHelpContext_Proxy(ICreateTypeInfo *This,UINT index,DWORD dwHelpContext);
HRESULT  ICreateTypeInfo_SetVarHelpContext_Proxy(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);
//C       void ICreateTypeInfo_SetVarHelpContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetVarHelpContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetMops_Proxy(ICreateTypeInfo *This,UINT index,BSTR bstrMops);
HRESULT  ICreateTypeInfo_SetMops_Proxy(ICreateTypeInfo *This, UINT index, BSTR bstrMops);
//C       void ICreateTypeInfo_SetMops_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetMops_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_SetTypeIdldesc_Proxy(ICreateTypeInfo *This,IDLDESC *pIdlDesc);
HRESULT  ICreateTypeInfo_SetTypeIdldesc_Proxy(ICreateTypeInfo *This, IDLDESC *pIdlDesc);
//C       void ICreateTypeInfo_SetTypeIdldesc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_SetTypeIdldesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo_LayOut_Proxy(ICreateTypeInfo *This);
HRESULT  ICreateTypeInfo_LayOut_Proxy(ICreateTypeInfo *This);
//C       void ICreateTypeInfo_LayOut_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo_LayOut_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
alias ICreateTypeInfo2 *LPCREATETYPEINFO2;
//C       extern const IID IID_ICreateTypeInfo2;
extern const IID IID_ICreateTypeInfo2;
//C       typedef struct ICreateTypeInfo2Vtbl {
//C           HRESULT ( *QueryInterface)(ICreateTypeInfo2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICreateTypeInfo2 *This);
//C           ULONG ( *Release)(ICreateTypeInfo2 *This);
//C           HRESULT ( *SetGuid)(ICreateTypeInfo2 *This,const GUID *const guid);
//C           HRESULT ( *SetTypeFlags)(ICreateTypeInfo2 *This,UINT uTypeFlags);
//C           HRESULT ( *SetDocString)(ICreateTypeInfo2 *This,LPOLESTR pStrDoc);
//C           HRESULT ( *SetHelpContext)(ICreateTypeInfo2 *This,DWORD dwHelpContext);
//C           HRESULT ( *SetVersion)(ICreateTypeInfo2 *This,WORD wMajorVerNum,WORD wMinorVerNum);
//C           HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo2 *This,ITypeInfo *pTInfo,HREFTYPE *phRefType);
//C           HRESULT ( *AddFuncDesc)(ICreateTypeInfo2 *This,UINT index,FUNCDESC *pFuncDesc);
//C           HRESULT ( *AddImplType)(ICreateTypeInfo2 *This,UINT index,HREFTYPE hRefType);
//C           HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo2 *This,UINT index,INT implTypeFlags);
//C           HRESULT ( *SetAlignment)(ICreateTypeInfo2 *This,WORD cbAlignment);
//C           HRESULT ( *SetSchema)(ICreateTypeInfo2 *This,LPOLESTR pStrSchema);
//C           HRESULT ( *AddVarDesc)(ICreateTypeInfo2 *This,UINT index,VARDESC *pVarDesc);
//C           HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo2 *This,UINT index,LPOLESTR *rgszNames,UINT cNames);
//C           HRESULT ( *SetVarName)(ICreateTypeInfo2 *This,UINT index,LPOLESTR szName);
//C           HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo2 *This,TYPEDESC *pTDescAlias);
//C           HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo2 *This,UINT index,LPOLESTR szDllName,LPOLESTR szProcName);
//C           HRESULT ( *SetFuncDocString)(ICreateTypeInfo2 *This,UINT index,LPOLESTR szDocString);
//C           HRESULT ( *SetVarDocString)(ICreateTypeInfo2 *This,UINT index,LPOLESTR szDocString);
//C           HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo2 *This,UINT index,DWORD dwHelpContext);
//C           HRESULT ( *SetVarHelpContext)(ICreateTypeInfo2 *This,UINT index,DWORD dwHelpContext);
//C           HRESULT ( *SetMops)(ICreateTypeInfo2 *This,UINT index,BSTR bstrMops);
//C           HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo2 *This,IDLDESC *pIdlDesc);
//C           HRESULT ( *LayOut)(ICreateTypeInfo2 *This);
//C           HRESULT ( *DeleteFuncDesc)(ICreateTypeInfo2 *This,UINT index);
//C           HRESULT ( *DeleteFuncDescByMemId)(ICreateTypeInfo2 *This,MEMBERID memid,INVOKEKIND invKind);
//C           HRESULT ( *DeleteVarDesc)(ICreateTypeInfo2 *This,UINT index);
//C           HRESULT ( *DeleteVarDescByMemId)(ICreateTypeInfo2 *This,MEMBERID memid);
//C           HRESULT ( *DeleteImplType)(ICreateTypeInfo2 *This,UINT index);
//C           HRESULT ( *SetCustData)(ICreateTypeInfo2 *This,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *SetFuncCustData)(ICreateTypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *SetParamCustData)(ICreateTypeInfo2 *This,UINT indexFunc,UINT indexParam,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *SetVarCustData)(ICreateTypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *SetImplTypeCustData)(ICreateTypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *SetHelpStringContext)(ICreateTypeInfo2 *This,ULONG dwHelpStringContext);
//C           HRESULT ( *SetFuncHelpStringContext)(ICreateTypeInfo2 *This,UINT index,ULONG dwHelpStringContext);
//C           HRESULT ( *SetVarHelpStringContext)(ICreateTypeInfo2 *This,UINT index,ULONG dwHelpStringContext);
//C           HRESULT ( *Invalidate)(ICreateTypeInfo2 *This);
//C           HRESULT ( *SetName)(ICreateTypeInfo2 *This,LPOLESTR szName);
//C       } ICreateTypeInfo2Vtbl;
struct ICreateTypeInfo2Vtbl
{
    HRESULT  function(ICreateTypeInfo2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICreateTypeInfo2 *This)AddRef;
    ULONG  function(ICreateTypeInfo2 *This)Release;
    HRESULT  function(ICreateTypeInfo2 *This, GUID *guid)SetGuid;
    HRESULT  function(ICreateTypeInfo2 *This, UINT uTypeFlags)SetTypeFlags;
    HRESULT  function(ICreateTypeInfo2 *This, LPOLESTR pStrDoc)SetDocString;
    HRESULT  function(ICreateTypeInfo2 *This, DWORD dwHelpContext)SetHelpContext;
    HRESULT  function(ICreateTypeInfo2 *This, WORD wMajorVerNum, WORD wMinorVerNum)SetVersion;
    HRESULT  function(ICreateTypeInfo2 *This, ITypeInfo *pTInfo, HREFTYPE *phRefType)AddRefTypeInfo;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, FUNCDESC *pFuncDesc)AddFuncDesc;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, HREFTYPE hRefType)AddImplType;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, INT implTypeFlags)SetImplTypeFlags;
    HRESULT  function(ICreateTypeInfo2 *This, WORD cbAlignment)SetAlignment;
    HRESULT  function(ICreateTypeInfo2 *This, LPOLESTR pStrSchema)SetSchema;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, VARDESC *pVarDesc)AddVarDesc;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, LPOLESTR *rgszNames, UINT cNames)SetFuncAndParamNames;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, LPOLESTR szName)SetVarName;
    HRESULT  function(ICreateTypeInfo2 *This, TYPEDESC *pTDescAlias)SetTypeDescAlias;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName)DefineFuncAsDllEntry;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString)SetFuncDocString;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString)SetVarDocString;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext)SetFuncHelpContext;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext)SetVarHelpContext;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, BSTR bstrMops)SetMops;
    HRESULT  function(ICreateTypeInfo2 *This, IDLDESC *pIdlDesc)SetTypeIdldesc;
    HRESULT  function(ICreateTypeInfo2 *This)LayOut;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index)DeleteFuncDesc;
    HRESULT  function(ICreateTypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind)DeleteFuncDescByMemId;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index)DeleteVarDesc;
    HRESULT  function(ICreateTypeInfo2 *This, MEMBERID memid)DeleteVarDescByMemId;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index)DeleteImplType;
    HRESULT  function(ICreateTypeInfo2 *This, GUID *guid, VARIANT *pVarVal)SetCustData;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal)SetFuncCustData;
    HRESULT  function(ICreateTypeInfo2 *This, UINT indexFunc, UINT indexParam, GUID *guid, VARIANT *pVarVal)SetParamCustData;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal)SetVarCustData;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal)SetImplTypeCustData;
    HRESULT  function(ICreateTypeInfo2 *This, ULONG dwHelpStringContext)SetHelpStringContext;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext)SetFuncHelpStringContext;
    HRESULT  function(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext)SetVarHelpStringContext;
    HRESULT  function(ICreateTypeInfo2 *This)Invalidate;
    HRESULT  function(ICreateTypeInfo2 *This, LPOLESTR szName)SetName;
}
//C       struct ICreateTypeInfo2 {
//C         struct ICreateTypeInfo2Vtbl *lpVtbl;
//C       };
struct ICreateTypeInfo2
{
    ICreateTypeInfo2Vtbl *lpVtbl;
}
//C       HRESULT ICreateTypeInfo2_DeleteFuncDesc_Proxy(ICreateTypeInfo2 *This,UINT index);
HRESULT  ICreateTypeInfo2_DeleteFuncDesc_Proxy(ICreateTypeInfo2 *This, UINT index);
//C       void ICreateTypeInfo2_DeleteFuncDesc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_DeleteFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(ICreateTypeInfo2 *This,MEMBERID memid,INVOKEKIND invKind);
HRESULT  ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(ICreateTypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind);
//C       void ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_DeleteVarDesc_Proxy(ICreateTypeInfo2 *This,UINT index);
HRESULT  ICreateTypeInfo2_DeleteVarDesc_Proxy(ICreateTypeInfo2 *This, UINT index);
//C       void ICreateTypeInfo2_DeleteVarDesc_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_DeleteVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(ICreateTypeInfo2 *This,MEMBERID memid);
HRESULT  ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(ICreateTypeInfo2 *This, MEMBERID memid);
//C       void ICreateTypeInfo2_DeleteVarDescByMemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_DeleteVarDescByMemId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_DeleteImplType_Proxy(ICreateTypeInfo2 *This,UINT index);
HRESULT  ICreateTypeInfo2_DeleteImplType_Proxy(ICreateTypeInfo2 *This, UINT index);
//C       void ICreateTypeInfo2_DeleteImplType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_DeleteImplType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetCustData_Proxy(ICreateTypeInfo2 *This,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ICreateTypeInfo2_SetCustData_Proxy(ICreateTypeInfo2 *This, GUID *guid, VARIANT *pVarVal);
//C       void ICreateTypeInfo2_SetCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetFuncCustData_Proxy(ICreateTypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ICreateTypeInfo2_SetFuncCustData_Proxy(ICreateTypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal);
//C       void ICreateTypeInfo2_SetFuncCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetFuncCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetParamCustData_Proxy(ICreateTypeInfo2 *This,UINT indexFunc,UINT indexParam,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ICreateTypeInfo2_SetParamCustData_Proxy(ICreateTypeInfo2 *This, UINT indexFunc, UINT indexParam, GUID *guid, VARIANT *pVarVal);
//C       void ICreateTypeInfo2_SetParamCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetParamCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetVarCustData_Proxy(ICreateTypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ICreateTypeInfo2_SetVarCustData_Proxy(ICreateTypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal);
//C       void ICreateTypeInfo2_SetVarCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetVarCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetImplTypeCustData_Proxy(ICreateTypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ICreateTypeInfo2_SetImplTypeCustData_Proxy(ICreateTypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal);
//C       void ICreateTypeInfo2_SetImplTypeCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetImplTypeCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetHelpStringContext_Proxy(ICreateTypeInfo2 *This,ULONG dwHelpStringContext);
HRESULT  ICreateTypeInfo2_SetHelpStringContext_Proxy(ICreateTypeInfo2 *This, ULONG dwHelpStringContext);
//C       void ICreateTypeInfo2_SetHelpStringContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetHelpStringContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(ICreateTypeInfo2 *This,UINT index,ULONG dwHelpStringContext);
HRESULT  ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);
//C       void ICreateTypeInfo2_SetFuncHelpStringContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetFuncHelpStringContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetVarHelpStringContext_Proxy(ICreateTypeInfo2 *This,UINT index,ULONG dwHelpStringContext);
HRESULT  ICreateTypeInfo2_SetVarHelpStringContext_Proxy(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);
//C       void ICreateTypeInfo2_SetVarHelpStringContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetVarHelpStringContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_Invalidate_Proxy(ICreateTypeInfo2 *This);
HRESULT  ICreateTypeInfo2_Invalidate_Proxy(ICreateTypeInfo2 *This);
//C       void ICreateTypeInfo2_Invalidate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_Invalidate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeInfo2_SetName_Proxy(ICreateTypeInfo2 *This,LPOLESTR szName);
HRESULT  ICreateTypeInfo2_SetName_Proxy(ICreateTypeInfo2 *This, LPOLESTR szName);
//C       void ICreateTypeInfo2_SetName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeInfo2_SetName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ICreateTypeLib *LPCREATETYPELIB;
alias ICreateTypeLib *LPCREATETYPELIB;
//C       extern const IID IID_ICreateTypeLib;
extern const IID IID_ICreateTypeLib;
//C       typedef struct ICreateTypeLibVtbl {
//C           HRESULT ( *QueryInterface)(ICreateTypeLib *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICreateTypeLib *This);
//C           ULONG ( *Release)(ICreateTypeLib *This);
//C           HRESULT ( *CreateTypeInfo)(ICreateTypeLib *This,LPOLESTR szName,TYPEKIND tkind,ICreateTypeInfo **ppCTInfo);
//C           HRESULT ( *SetName)(ICreateTypeLib *This,LPOLESTR szName);
//C           HRESULT ( *SetVersion)(ICreateTypeLib *This,WORD wMajorVerNum,WORD wMinorVerNum);
//C           HRESULT ( *SetGuid)(ICreateTypeLib *This,const GUID *const guid);
//C           HRESULT ( *SetDocString)(ICreateTypeLib *This,LPOLESTR szDoc);
//C           HRESULT ( *SetHelpFileName)(ICreateTypeLib *This,LPOLESTR szHelpFileName);
//C           HRESULT ( *SetHelpContext)(ICreateTypeLib *This,DWORD dwHelpContext);
//C           HRESULT ( *SetLcid)(ICreateTypeLib *This,LCID lcid);
//C           HRESULT ( *SetLibFlags)(ICreateTypeLib *This,UINT uLibFlags);
//C           HRESULT ( *SaveAllChanges)(ICreateTypeLib *This);
//C       } ICreateTypeLibVtbl;
struct ICreateTypeLibVtbl
{
    HRESULT  function(ICreateTypeLib *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICreateTypeLib *This)AddRef;
    ULONG  function(ICreateTypeLib *This)Release;
    HRESULT  function(ICreateTypeLib *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo)CreateTypeInfo;
    HRESULT  function(ICreateTypeLib *This, LPOLESTR szName)SetName;
    HRESULT  function(ICreateTypeLib *This, WORD wMajorVerNum, WORD wMinorVerNum)SetVersion;
    HRESULT  function(ICreateTypeLib *This, GUID *guid)SetGuid;
    HRESULT  function(ICreateTypeLib *This, LPOLESTR szDoc)SetDocString;
    HRESULT  function(ICreateTypeLib *This, LPOLESTR szHelpFileName)SetHelpFileName;
    HRESULT  function(ICreateTypeLib *This, DWORD dwHelpContext)SetHelpContext;
    HRESULT  function(ICreateTypeLib *This, LCID lcid)SetLcid;
    HRESULT  function(ICreateTypeLib *This, UINT uLibFlags)SetLibFlags;
    HRESULT  function(ICreateTypeLib *This)SaveAllChanges;
}
//C       struct ICreateTypeLib {
//C         struct ICreateTypeLibVtbl *lpVtbl;
//C       };
struct ICreateTypeLib
{
    ICreateTypeLibVtbl *lpVtbl;
}
//C       HRESULT ICreateTypeLib_CreateTypeInfo_Proxy(ICreateTypeLib *This,LPOLESTR szName,TYPEKIND tkind,ICreateTypeInfo **ppCTInfo);
HRESULT  ICreateTypeLib_CreateTypeInfo_Proxy(ICreateTypeLib *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);
//C       void ICreateTypeLib_CreateTypeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_CreateTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetName_Proxy(ICreateTypeLib *This,LPOLESTR szName);
HRESULT  ICreateTypeLib_SetName_Proxy(ICreateTypeLib *This, LPOLESTR szName);
//C       void ICreateTypeLib_SetName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetVersion_Proxy(ICreateTypeLib *This,WORD wMajorVerNum,WORD wMinorVerNum);
HRESULT  ICreateTypeLib_SetVersion_Proxy(ICreateTypeLib *This, WORD wMajorVerNum, WORD wMinorVerNum);
//C       void ICreateTypeLib_SetVersion_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetVersion_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetGuid_Proxy(ICreateTypeLib *This,const GUID *const guid);
HRESULT  ICreateTypeLib_SetGuid_Proxy(ICreateTypeLib *This, GUID *guid);
//C       void ICreateTypeLib_SetGuid_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetGuid_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetDocString_Proxy(ICreateTypeLib *This,LPOLESTR szDoc);
HRESULT  ICreateTypeLib_SetDocString_Proxy(ICreateTypeLib *This, LPOLESTR szDoc);
//C       void ICreateTypeLib_SetDocString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetDocString_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetHelpFileName_Proxy(ICreateTypeLib *This,LPOLESTR szHelpFileName);
HRESULT  ICreateTypeLib_SetHelpFileName_Proxy(ICreateTypeLib *This, LPOLESTR szHelpFileName);
//C       void ICreateTypeLib_SetHelpFileName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetHelpFileName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetHelpContext_Proxy(ICreateTypeLib *This,DWORD dwHelpContext);
HRESULT  ICreateTypeLib_SetHelpContext_Proxy(ICreateTypeLib *This, DWORD dwHelpContext);
//C       void ICreateTypeLib_SetHelpContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetHelpContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetLcid_Proxy(ICreateTypeLib *This,LCID lcid);
HRESULT  ICreateTypeLib_SetLcid_Proxy(ICreateTypeLib *This, LCID lcid);
//C       void ICreateTypeLib_SetLcid_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetLcid_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SetLibFlags_Proxy(ICreateTypeLib *This,UINT uLibFlags);
HRESULT  ICreateTypeLib_SetLibFlags_Proxy(ICreateTypeLib *This, UINT uLibFlags);
//C       void ICreateTypeLib_SetLibFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SetLibFlags_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib_SaveAllChanges_Proxy(ICreateTypeLib *This);
HRESULT  ICreateTypeLib_SaveAllChanges_Proxy(ICreateTypeLib *This);
//C       void ICreateTypeLib_SaveAllChanges_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib_SaveAllChanges_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ICreateTypeLib2 *LPCREATETYPELIB2;
alias ICreateTypeLib2 *LPCREATETYPELIB2;
//C       extern const IID IID_ICreateTypeLib2;
extern const IID IID_ICreateTypeLib2;
//C       typedef struct ICreateTypeLib2Vtbl {
//C           HRESULT ( *QueryInterface)(ICreateTypeLib2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICreateTypeLib2 *This);
//C           ULONG ( *Release)(ICreateTypeLib2 *This);
//C           HRESULT ( *CreateTypeInfo)(ICreateTypeLib2 *This,LPOLESTR szName,TYPEKIND tkind,ICreateTypeInfo **ppCTInfo);
//C           HRESULT ( *SetName)(ICreateTypeLib2 *This,LPOLESTR szName);
//C           HRESULT ( *SetVersion)(ICreateTypeLib2 *This,WORD wMajorVerNum,WORD wMinorVerNum);
//C           HRESULT ( *SetGuid)(ICreateTypeLib2 *This,const GUID *const guid);
//C           HRESULT ( *SetDocString)(ICreateTypeLib2 *This,LPOLESTR szDoc);
//C           HRESULT ( *SetHelpFileName)(ICreateTypeLib2 *This,LPOLESTR szHelpFileName);
//C           HRESULT ( *SetHelpContext)(ICreateTypeLib2 *This,DWORD dwHelpContext);
//C           HRESULT ( *SetLcid)(ICreateTypeLib2 *This,LCID lcid);
//C           HRESULT ( *SetLibFlags)(ICreateTypeLib2 *This,UINT uLibFlags);
//C           HRESULT ( *SaveAllChanges)(ICreateTypeLib2 *This);
//C           HRESULT ( *DeleteTypeInfo)(ICreateTypeLib2 *This,LPOLESTR szName);
//C           HRESULT ( *SetCustData)(ICreateTypeLib2 *This,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *SetHelpStringContext)(ICreateTypeLib2 *This,ULONG dwHelpStringContext);
//C           HRESULT ( *SetHelpStringDll)(ICreateTypeLib2 *This,LPOLESTR szFileName);
//C       } ICreateTypeLib2Vtbl;
struct ICreateTypeLib2Vtbl
{
    HRESULT  function(ICreateTypeLib2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICreateTypeLib2 *This)AddRef;
    ULONG  function(ICreateTypeLib2 *This)Release;
    HRESULT  function(ICreateTypeLib2 *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo)CreateTypeInfo;
    HRESULT  function(ICreateTypeLib2 *This, LPOLESTR szName)SetName;
    HRESULT  function(ICreateTypeLib2 *This, WORD wMajorVerNum, WORD wMinorVerNum)SetVersion;
    HRESULT  function(ICreateTypeLib2 *This, GUID *guid)SetGuid;
    HRESULT  function(ICreateTypeLib2 *This, LPOLESTR szDoc)SetDocString;
    HRESULT  function(ICreateTypeLib2 *This, LPOLESTR szHelpFileName)SetHelpFileName;
    HRESULT  function(ICreateTypeLib2 *This, DWORD dwHelpContext)SetHelpContext;
    HRESULT  function(ICreateTypeLib2 *This, LCID lcid)SetLcid;
    HRESULT  function(ICreateTypeLib2 *This, UINT uLibFlags)SetLibFlags;
    HRESULT  function(ICreateTypeLib2 *This)SaveAllChanges;
    HRESULT  function(ICreateTypeLib2 *This, LPOLESTR szName)DeleteTypeInfo;
    HRESULT  function(ICreateTypeLib2 *This, GUID *guid, VARIANT *pVarVal)SetCustData;
    HRESULT  function(ICreateTypeLib2 *This, ULONG dwHelpStringContext)SetHelpStringContext;
    HRESULT  function(ICreateTypeLib2 *This, LPOLESTR szFileName)SetHelpStringDll;
}
//C       struct ICreateTypeLib2 {
//C         struct ICreateTypeLib2Vtbl *lpVtbl;
//C       };
struct ICreateTypeLib2
{
    ICreateTypeLib2Vtbl *lpVtbl;
}
//C       HRESULT ICreateTypeLib2_DeleteTypeInfo_Proxy(ICreateTypeLib2 *This,LPOLESTR szName);
HRESULT  ICreateTypeLib2_DeleteTypeInfo_Proxy(ICreateTypeLib2 *This, LPOLESTR szName);
//C       void ICreateTypeLib2_DeleteTypeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib2_DeleteTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib2_SetCustData_Proxy(ICreateTypeLib2 *This,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ICreateTypeLib2_SetCustData_Proxy(ICreateTypeLib2 *This, GUID *guid, VARIANT *pVarVal);
//C       void ICreateTypeLib2_SetCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib2_SetCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib2_SetHelpStringContext_Proxy(ICreateTypeLib2 *This,ULONG dwHelpStringContext);
HRESULT  ICreateTypeLib2_SetHelpStringContext_Proxy(ICreateTypeLib2 *This, ULONG dwHelpStringContext);
//C       void ICreateTypeLib2_SetHelpStringContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib2_SetHelpStringContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateTypeLib2_SetHelpStringDll_Proxy(ICreateTypeLib2 *This,LPOLESTR szFileName);
HRESULT  ICreateTypeLib2_SetHelpStringDll_Proxy(ICreateTypeLib2 *This, LPOLESTR szFileName);
//C       void ICreateTypeLib2_SetHelpStringDll_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateTypeLib2_SetHelpStringDll_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IDispatch *LPDISPATCH;

//C     extern const GUID IID_IDispatch;
extern const GUID IID_IDispatch;
//C     typedef struct IDispatchVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IDispatch* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IDispatch* This);
//C         ULONG ( *Release)(
//C             IDispatch* This);
//C         HRESULT ( *GetTypeInfoCount)(
//C             IDispatch* This,
//C             UINT *pctinfo);
//C         HRESULT ( *GetTypeInfo)(
//C             IDispatch* This,
//C             UINT iTInfo,
//C             LCID lcid,
//C             ITypeInfo **ppTInfo);
//C         HRESULT ( *GetIDsOfNames)(
//C             IDispatch* This,
//C             const IID *const riid,
//C             LPOLESTR *rgszNames,
//C             UINT cNames,
//C             LCID lcid,
//C             DISPID *rgDispId);
//C         HRESULT ( *Invoke)(
//C             IDispatch* This,
//C             DISPID dispIdMember,
//C             const IID *const riid,
//C             LCID lcid,
//C             WORD wFlags,
//C             DISPPARAMS *pDispParams,
//C             VARIANT *pVarResult,
//C             EXCEPINFO *pExcepInfo,
//C             UINT *puArgErr);
//C     } IDispatchVtbl;
struct IDispatchVtbl
{
    HRESULT  function(IDispatch *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDispatch *This)AddRef;
    ULONG  function(IDispatch *This)Release;
    HRESULT  function(IDispatch *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IDispatch *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IDispatch *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
}
//C     struct IDispatch {
//C         IDispatchVtbl* lpVtbl;
//C     };
struct IDispatch
{
    IDispatchVtbl *lpVtbl;
}
//C     HRESULT IDispatch_GetTypeInfoCount_Proxy(
//C         IDispatch* This,
//C         UINT *pctinfo);
HRESULT  IDispatch_GetTypeInfoCount_Proxy(IDispatch *This, UINT *pctinfo);
//C     void IDispatch_GetTypeInfoCount_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDispatch_GetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDispatch_GetTypeInfo_Proxy(
//C         IDispatch* This,
//C         UINT iTInfo,
//C         LCID lcid,
//C         ITypeInfo **ppTInfo);
HRESULT  IDispatch_GetTypeInfo_Proxy(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
//C     void IDispatch_GetTypeInfo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDispatch_GetTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDispatch_GetIDsOfNames_Proxy(
//C         IDispatch* This,
//C         const IID *const riid,
//C         LPOLESTR *rgszNames,
//C         UINT cNames,
//C         LCID lcid,
//C         DISPID *rgDispId);
HRESULT  IDispatch_GetIDsOfNames_Proxy(IDispatch *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
//C     void IDispatch_GetIDsOfNames_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDispatch_GetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDispatch_RemoteInvoke_Proxy(
//C         IDispatch* This,
//C         DISPID dispIdMember,
//C         const IID *const riid,
//C         LCID lcid,
//C         DWORD dwFlags,
//C         DISPPARAMS *pDispParams,
//C         VARIANT *pVarResult,
//C         EXCEPINFO *pExcepInfo,
//C         UINT *pArgErr,
//C         UINT cVarRef,
//C         UINT *rgVarRefIdx,
//C         VARIANTARG *rgVarRef);
HRESULT  IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, IID *riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef);
//C     void IDispatch_RemoteInvoke_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IDispatch_Invoke_Proxy(
//C         IDispatch* This,
//C         DISPID dispIdMember,
//C         const IID *const riid,
//C         LCID lcid,
//C         WORD wFlags,
//C         DISPPARAMS *pDispParams,
//C         VARIANT *pVarResult,
//C         EXCEPINFO *pExcepInfo,
//C         UINT *puArgErr);
HRESULT  IDispatch_Invoke_Proxy(IDispatch *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
//C     HRESULT IDispatch_Invoke_Stub(
//C         IDispatch* This,
//C         DISPID dispIdMember,
//C         const IID *const riid,
//C         LCID lcid,
//C         DWORD dwFlags,
//C         DISPPARAMS *pDispParams,
//C         VARIANT *pVarResult,
//C         EXCEPINFO *pExcepInfo,
//C         UINT *pArgErr,
//C         UINT cVarRef,
//C         UINT *rgVarRefIdx,
//C         VARIANTARG *rgVarRef);
HRESULT  IDispatch_Invoke_Stub(IDispatch *This, DISPID dispIdMember, IID *riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef);
//C       typedef IEnumVARIANT *LPENUMVARIANT;
alias IEnumVARIANT *LPENUMVARIANT;
//C       extern const IID IID_IEnumVARIANT;
extern const IID IID_IEnumVARIANT;
//C       typedef struct IEnumVARIANTVtbl {
//C           HRESULT ( *QueryInterface)(IEnumVARIANT *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IEnumVARIANT *This);
//C           ULONG ( *Release)(IEnumVARIANT *This);
//C           HRESULT ( *Next)(IEnumVARIANT *This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched);
//C           HRESULT ( *Skip)(IEnumVARIANT *This,ULONG celt);
//C           HRESULT ( *Reset)(IEnumVARIANT *This);
//C           HRESULT ( *Clone)(IEnumVARIANT *This,IEnumVARIANT **ppEnum);
//C       } IEnumVARIANTVtbl;
struct IEnumVARIANTVtbl
{
    HRESULT  function(IEnumVARIANT *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumVARIANT *This)AddRef;
    ULONG  function(IEnumVARIANT *This)Release;
    HRESULT  function(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)Next;
    HRESULT  function(IEnumVARIANT *This, ULONG celt)Skip;
    HRESULT  function(IEnumVARIANT *This)Reset;
    HRESULT  function(IEnumVARIANT *This, IEnumVARIANT **ppEnum)Clone;
}
//C       struct IEnumVARIANT {
//C         struct IEnumVARIANTVtbl *lpVtbl;
//C       };
struct IEnumVARIANT
{
    IEnumVARIANTVtbl *lpVtbl;
}
//C       HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched);
HRESULT  IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
//C       void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumVARIANT_Skip_Proxy(IEnumVARIANT *This,ULONG celt);
HRESULT  IEnumVARIANT_Skip_Proxy(IEnumVARIANT *This, ULONG celt);
//C       void IEnumVARIANT_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumVARIANT_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumVARIANT_Reset_Proxy(IEnumVARIANT *This);
HRESULT  IEnumVARIANT_Reset_Proxy(IEnumVARIANT *This);
//C       void IEnumVARIANT_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumVARIANT_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumVARIANT_Clone_Proxy(IEnumVARIANT *This,IEnumVARIANT **ppEnum);
HRESULT  IEnumVARIANT_Clone_Proxy(IEnumVARIANT *This, IEnumVARIANT **ppEnum);
//C       void IEnumVARIANT_Clone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumVARIANT_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef ITypeComp *LPTYPECOMP;

//C     typedef enum tagDESCKIND {
//C         DESCKIND_NONE = 0,
//C         DESCKIND_FUNCDESC = 1,
//C         DESCKIND_VARDESC = 2,
//C         DESCKIND_TYPECOMP = 3,
//C         DESCKIND_IMPLICITAPPOBJ = 4,
//C         DESCKIND_MAX = 5
//C     } DESCKIND;
enum tagDESCKIND
{
    DESCKIND_NONE,
    DESCKIND_FUNCDESC,
    DESCKIND_VARDESC,
    DESCKIND_TYPECOMP,
    DESCKIND_IMPLICITAPPOBJ,
    DESCKIND_MAX,
}
alias tagDESCKIND DESCKIND;
//C     typedef union tagBINDPTR {
//C         FUNCDESC *lpfuncdesc;
//C         VARDESC *lpvardesc;
//C         ITypeComp *lptcomp;
//C     } BINDPTR;
union tagBINDPTR
{
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
}
alias tagBINDPTR BINDPTR;
//C     typedef union tagBINDPTR *LPBINDPTR;
alias tagBINDPTR *LPBINDPTR;
//C     extern const GUID IID_ITypeComp;
extern const GUID IID_ITypeComp;
//C     typedef struct ITypeCompVtbl {
//C         HRESULT ( *QueryInterface)(
//C             ITypeComp* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             ITypeComp* This);
//C         ULONG ( *Release)(
//C             ITypeComp* This);
//C         HRESULT ( *Bind)(
//C             ITypeComp* This,
//C             LPOLESTR szName,
//C             ULONG lHashVal,
//C             WORD wFlags,
//C             ITypeInfo **ppTInfo,
//C             DESCKIND *pDescKind,
//C             BINDPTR *pBindPtr);
//C         HRESULT ( *BindType)(
//C             ITypeComp* This,
//C             LPOLESTR szName,
//C             ULONG lHashVal,
//C             ITypeInfo **ppTInfo,
//C             ITypeComp **ppTComp);
//C     } ITypeCompVtbl;
struct ITypeCompVtbl
{
    HRESULT  function(ITypeComp *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeComp *This)AddRef;
    ULONG  function(ITypeComp *This)Release;
    HRESULT  function(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr)Bind;
    HRESULT  function(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp)BindType;
}
//C     struct ITypeComp {
//C         ITypeCompVtbl* lpVtbl;
//C     };
struct ITypeComp
{
    ITypeCompVtbl *lpVtbl;
}
//C     HRESULT ITypeComp_RemoteBind_Proxy(
//C         ITypeComp* This,
//C         LPOLESTR szName,
//C         ULONG lHashVal,
//C         WORD wFlags,
//C         ITypeInfo **ppTInfo,
//C         DESCKIND *pDescKind,
//C         LPFUNCDESC *ppFuncDesc,
//C         LPVARDESC *ppVarDesc,
//C         ITypeComp **ppTypeComp,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy);
//C     void ITypeComp_RemoteBind_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeComp_RemoteBindType_Proxy(
//C         ITypeComp* This,
//C         LPOLESTR szName,
//C         ULONG lHashVal,
//C         ITypeInfo **ppTInfo);
HRESULT  ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo);
//C     void ITypeComp_RemoteBindType_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeComp_Bind_Proxy(
//C         ITypeComp* This,
//C         LPOLESTR szName,
//C         ULONG lHashVal,
//C         WORD wFlags,
//C         ITypeInfo **ppTInfo,
//C         DESCKIND *pDescKind,
//C         BINDPTR *pBindPtr);
HRESULT  ITypeComp_Bind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);
//C     HRESULT ITypeComp_Bind_Stub(
//C         ITypeComp* This,
//C         LPOLESTR szName,
//C         ULONG lHashVal,
//C         WORD wFlags,
//C         ITypeInfo **ppTInfo,
//C         DESCKIND *pDescKind,
//C         LPFUNCDESC *ppFuncDesc,
//C         LPVARDESC *ppVarDesc,
//C         ITypeComp **ppTypeComp,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeComp_Bind_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy);
//C     HRESULT ITypeComp_BindType_Proxy(
//C         ITypeComp* This,
//C         LPOLESTR szName,
//C         ULONG lHashVal,
//C         ITypeInfo **ppTInfo,
//C         ITypeComp **ppTComp);
HRESULT  ITypeComp_BindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);
//C     HRESULT ITypeComp_BindType_Stub(
//C         ITypeComp* This,
//C         LPOLESTR szName,
//C         ULONG lHashVal,
//C         ITypeInfo **ppTInfo);
HRESULT  ITypeComp_BindType_Stub(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo);
//C     typedef ITypeInfo *LPTYPEINFO;

//C     extern const GUID IID_ITypeInfo;
extern const GUID IID_ITypeInfo;
//C     typedef struct ITypeInfoVtbl {
//C         HRESULT ( *QueryInterface)(
//C             ITypeInfo* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             ITypeInfo* This);
//C         ULONG ( *Release)(
//C             ITypeInfo* This);
//C         HRESULT ( *GetTypeAttr)(
//C             ITypeInfo* This,
//C             TYPEATTR **ppTypeAttr);
//C         HRESULT ( *GetTypeComp)(
//C             ITypeInfo* This,
//C             ITypeComp **ppTComp);
//C         HRESULT ( *GetFuncDesc)(
//C             ITypeInfo* This,
//C             UINT index,
//C             FUNCDESC **ppFuncDesc);
//C         HRESULT ( *GetVarDesc)(
//C             ITypeInfo* This,
//C             UINT index,
//C             VARDESC **ppVarDesc);
//C         HRESULT ( *GetNames)(
//C             ITypeInfo* This,
//C             MEMBERID memid,
//C             BSTR *rgBstrNames,
//C             UINT cMaxNames,
//C             UINT *pcNames);
//C         HRESULT ( *GetRefTypeOfImplType)(
//C             ITypeInfo* This,
//C             UINT index,
//C             HREFTYPE *pRefType);
//C         HRESULT ( *GetImplTypeFlags)(
//C             ITypeInfo* This,
//C             UINT index,
//C             INT *pImplTypeFlags);
//C         HRESULT ( *GetIDsOfNames)(
//C             ITypeInfo* This,
//C             LPOLESTR *rgszNames,
//C             UINT cNames,
//C             MEMBERID *pMemId);
//C         HRESULT ( *Invoke)(
//C             ITypeInfo* This,
//C             PVOID pvInstance,
//C             MEMBERID memid,
//C             WORD wFlags,
//C             DISPPARAMS *pDispParams,
//C             VARIANT *pVarResult,
//C             EXCEPINFO *pExcepInfo,
//C             UINT *puArgErr);
//C         HRESULT ( *GetDocumentation)(
//C             ITypeInfo* This,
//C             MEMBERID memid,
//C             BSTR *pBstrName,
//C             BSTR *pBstrDocString,
//C             DWORD *pdwHelpContext,
//C             BSTR *pBstrHelpFile);
//C         HRESULT ( *GetDllEntry)(
//C             ITypeInfo* This,
//C             MEMBERID memid,
//C             INVOKEKIND invKind,
//C             BSTR *pBstrDllName,
//C             BSTR *pBstrName,
//C             WORD *pwOrdinal);
//C         HRESULT ( *GetRefTypeInfo)(
//C             ITypeInfo* This,
//C             HREFTYPE hRefType,
//C             ITypeInfo **ppTInfo);
//C         HRESULT ( *AddressOfMember)(
//C             ITypeInfo* This,
//C             MEMBERID memid,
//C             INVOKEKIND invKind,
//C             PVOID *ppv);
//C         HRESULT ( *CreateInstance)(
//C             ITypeInfo* This,
//C             IUnknown *pUnkOuter,
//C             const IID *const riid,
//C             PVOID *ppvObj);
//C         HRESULT ( *GetMops)(
//C             ITypeInfo* This,
//C             MEMBERID memid,
//C             BSTR *pBstrMops);
//C         HRESULT ( *GetContainingTypeLib)(
//C             ITypeInfo* This,
//C             ITypeLib **ppTLib,
//C             UINT *pIndex);
//C         void ( *ReleaseTypeAttr)(
//C             ITypeInfo* This,
//C             TYPEATTR *pTypeAttr);
//C         void ( *ReleaseFuncDesc)(
//C             ITypeInfo* This,
//C             FUNCDESC *pFuncDesc);
//C         void ( *ReleaseVarDesc)(
//C             ITypeInfo* This,
//C             VARDESC *pVarDesc);
//C     } ITypeInfoVtbl;
struct ITypeInfoVtbl
{
    HRESULT  function(ITypeInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeInfo *This)AddRef;
    ULONG  function(ITypeInfo *This)Release;
    HRESULT  function(ITypeInfo *This, TYPEATTR **ppTypeAttr)GetTypeAttr;
    HRESULT  function(ITypeInfo *This, ITypeComp **ppTComp)GetTypeComp;
    HRESULT  function(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc)GetFuncDesc;
    HRESULT  function(ITypeInfo *This, UINT index, VARDESC **ppVarDesc)GetVarDesc;
    HRESULT  function(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)GetNames;
    HRESULT  function(ITypeInfo *This, UINT index, HREFTYPE *pRefType)GetRefTypeOfImplType;
    HRESULT  function(ITypeInfo *This, UINT index, INT *pImplTypeFlags)GetImplTypeFlags;
    HRESULT  function(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)GetIDsOfNames;
    HRESULT  function(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)GetDocumentation;
    HRESULT  function(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)GetDllEntry;
    HRESULT  function(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo)GetRefTypeInfo;
    HRESULT  function(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)AddressOfMember;
    HRESULT  function(ITypeInfo *This, IUnknown *pUnkOuter, IID *riid, PVOID *ppvObj)CreateInstance;
    HRESULT  function(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops)GetMops;
    HRESULT  function(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex)GetContainingTypeLib;
    void  function(ITypeInfo *This, TYPEATTR *pTypeAttr)ReleaseTypeAttr;
    void  function(ITypeInfo *This, FUNCDESC *pFuncDesc)ReleaseFuncDesc;
    void  function(ITypeInfo *This, VARDESC *pVarDesc)ReleaseVarDesc;
}
//C     struct ITypeInfo {
//C         ITypeInfoVtbl* lpVtbl;
//C     };
struct ITypeInfo
{
    ITypeInfoVtbl *lpVtbl;
}
//C     HRESULT ITypeInfo_RemoteGetTypeAttr_Proxy(
//C         ITypeInfo* This,
//C         LPTYPEATTR *ppTypeAttr,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy);
//C     void ITypeInfo_RemoteGetTypeAttr_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_GetTypeComp_Proxy(
//C         ITypeInfo* This,
//C         ITypeComp **ppTComp);
HRESULT  ITypeInfo_GetTypeComp_Proxy(ITypeInfo *This, ITypeComp **ppTComp);
//C     void ITypeInfo_GetTypeComp_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_GetTypeComp_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteGetFuncDesc_Proxy(
//C         ITypeInfo* This,
//C         UINT index,
//C         LPFUNCDESC *ppFuncDesc,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy);
//C     void ITypeInfo_RemoteGetFuncDesc_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteGetVarDesc_Proxy(
//C         ITypeInfo* This,
//C         UINT index,
//C         LPVARDESC *ppVarDesc,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy);
//C     void ITypeInfo_RemoteGetVarDesc_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteGetNames_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         BSTR *rgBstrNames,
//C         UINT cMaxNames,
//C         UINT *pcNames);
HRESULT  ITypeInfo_RemoteGetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
//C     void ITypeInfo_RemoteGetNames_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_GetRefTypeOfImplType_Proxy(
//C         ITypeInfo* This,
//C         UINT index,
//C         HREFTYPE *pRefType);
HRESULT  ITypeInfo_GetRefTypeOfImplType_Proxy(ITypeInfo *This, UINT index, HREFTYPE *pRefType);
//C     void ITypeInfo_GetRefTypeOfImplType_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_GetRefTypeOfImplType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_GetImplTypeFlags_Proxy(
//C         ITypeInfo* This,
//C         UINT index,
//C         INT *pImplTypeFlags);
HRESULT  ITypeInfo_GetImplTypeFlags_Proxy(ITypeInfo *This, UINT index, INT *pImplTypeFlags);
//C     void ITypeInfo_GetImplTypeFlags_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_GetImplTypeFlags_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_LocalGetIDsOfNames_Proxy(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo *This);
//C     void ITypeInfo_LocalGetIDsOfNames_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_LocalInvoke_Proxy(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_LocalInvoke_Proxy(ITypeInfo *This);
//C     void ITypeInfo_LocalInvoke_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteGetDocumentation_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         DWORD refPtrFlags,
//C         BSTR *pBstrName,
//C         BSTR *pBstrDocString,
//C         DWORD *pdwHelpContext,
//C         BSTR *pBstrHelpFile);
HRESULT  ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
//C     void ITypeInfo_RemoteGetDocumentation_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteGetDllEntry_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         INVOKEKIND invKind,
//C         DWORD refPtrFlags,
//C         BSTR *pBstrDllName,
//C         BSTR *pBstrName,
//C         WORD *pwOrdinal);
HRESULT  ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
//C     void ITypeInfo_RemoteGetDllEntry_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_GetRefTypeInfo_Proxy(
//C         ITypeInfo* This,
//C         HREFTYPE hRefType,
//C         ITypeInfo **ppTInfo);
HRESULT  ITypeInfo_GetRefTypeInfo_Proxy(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);
//C     void ITypeInfo_GetRefTypeInfo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_GetRefTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_LocalAddressOfMember_Proxy(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo *This);
//C     void ITypeInfo_LocalAddressOfMember_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteCreateInstance_Proxy(
//C         ITypeInfo* This,
//C         const IID *const riid,
//C         IUnknown **ppvObj);
HRESULT  ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo *This, IID *riid, IUnknown **ppvObj);
//C     void ITypeInfo_RemoteCreateInstance_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_GetMops_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         BSTR *pBstrMops);
HRESULT  ITypeInfo_GetMops_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);
//C     void ITypeInfo_GetMops_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_GetMops_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_RemoteGetContainingTypeLib_Proxy(
//C         ITypeInfo* This,
//C         ITypeLib **ppTLib,
//C         UINT *pIndex);
HRESULT  ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);
//C     void ITypeInfo_RemoteGetContainingTypeLib_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_LocalReleaseTypeAttr_Proxy(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo *This);
//C     void ITypeInfo_LocalReleaseTypeAttr_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_LocalReleaseFuncDesc_Proxy(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo *This);
//C     void ITypeInfo_LocalReleaseFuncDesc_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_LocalReleaseVarDesc_Proxy(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo *This);
//C     void ITypeInfo_LocalReleaseVarDesc_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeInfo_GetTypeAttr_Proxy(
//C         ITypeInfo* This,
//C         TYPEATTR **ppTypeAttr);
HRESULT  ITypeInfo_GetTypeAttr_Proxy(ITypeInfo *This, TYPEATTR **ppTypeAttr);
//C     HRESULT ITypeInfo_GetTypeAttr_Stub(
//C         ITypeInfo* This,
//C         LPTYPEATTR *ppTypeAttr,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_GetTypeAttr_Stub(ITypeInfo *This, LPTYPEATTR *ppTypeAttr, CLEANLOCALSTORAGE *pDummy);
//C     HRESULT ITypeInfo_GetFuncDesc_Proxy(
//C         ITypeInfo* This,
//C         UINT index,
//C         FUNCDESC **ppFuncDesc);
HRESULT  ITypeInfo_GetFuncDesc_Proxy(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);
//C     HRESULT ITypeInfo_GetFuncDesc_Stub(
//C         ITypeInfo* This,
//C         UINT index,
//C         LPFUNCDESC *ppFuncDesc,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_GetFuncDesc_Stub(ITypeInfo *This, UINT index, LPFUNCDESC *ppFuncDesc, CLEANLOCALSTORAGE *pDummy);
//C     HRESULT ITypeInfo_GetVarDesc_Proxy(
//C         ITypeInfo* This,
//C         UINT index,
//C         VARDESC **ppVarDesc);
HRESULT  ITypeInfo_GetVarDesc_Proxy(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);
//C     HRESULT ITypeInfo_GetVarDesc_Stub(
//C         ITypeInfo* This,
//C         UINT index,
//C         LPVARDESC *ppVarDesc,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_GetVarDesc_Stub(ITypeInfo *This, UINT index, LPVARDESC *ppVarDesc, CLEANLOCALSTORAGE *pDummy);
//C     HRESULT ITypeInfo_GetNames_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         BSTR *rgBstrNames,
//C         UINT cMaxNames,
//C         UINT *pcNames);
HRESULT  ITypeInfo_GetNames_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
//C     HRESULT ITypeInfo_GetNames_Stub(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         BSTR *rgBstrNames,
//C         UINT cMaxNames,
//C         UINT *pcNames);
HRESULT  ITypeInfo_GetNames_Stub(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
//C     HRESULT ITypeInfo_GetIDsOfNames_Proxy(
//C         ITypeInfo* This,
//C         LPOLESTR *rgszNames,
//C         UINT cNames,
//C         MEMBERID *pMemId);
HRESULT  ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
//C     HRESULT ITypeInfo_GetIDsOfNames_Stub(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_GetIDsOfNames_Stub(ITypeInfo *This);
//C     HRESULT ITypeInfo_Invoke_Proxy(
//C         ITypeInfo* This,
//C         PVOID pvInstance,
//C         MEMBERID memid,
//C         WORD wFlags,
//C         DISPPARAMS *pDispParams,
//C         VARIANT *pVarResult,
//C         EXCEPINFO *pExcepInfo,
//C         UINT *puArgErr);
HRESULT  ITypeInfo_Invoke_Proxy(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
//C     HRESULT ITypeInfo_Invoke_Stub(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_Invoke_Stub(ITypeInfo *This);
//C     HRESULT ITypeInfo_GetDocumentation_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         BSTR *pBstrName,
//C         BSTR *pBstrDocString,
//C         DWORD *pdwHelpContext,
//C         BSTR *pBstrHelpFile);
HRESULT  ITypeInfo_GetDocumentation_Proxy(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
//C     HRESULT ITypeInfo_GetDocumentation_Stub(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         DWORD refPtrFlags,
//C         BSTR *pBstrName,
//C         BSTR *pBstrDocString,
//C         DWORD *pdwHelpContext,
//C         BSTR *pBstrHelpFile);
HRESULT  ITypeInfo_GetDocumentation_Stub(ITypeInfo *This, MEMBERID memid, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
//C     HRESULT ITypeInfo_GetDllEntry_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         INVOKEKIND invKind,
//C         BSTR *pBstrDllName,
//C         BSTR *pBstrName,
//C         WORD *pwOrdinal);
HRESULT  ITypeInfo_GetDllEntry_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
//C     HRESULT ITypeInfo_GetDllEntry_Stub(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         INVOKEKIND invKind,
//C         DWORD refPtrFlags,
//C         BSTR *pBstrDllName,
//C         BSTR *pBstrName,
//C         WORD *pwOrdinal);
HRESULT  ITypeInfo_GetDllEntry_Stub(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, DWORD refPtrFlags, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
//C     HRESULT ITypeInfo_AddressOfMember_Proxy(
//C         ITypeInfo* This,
//C         MEMBERID memid,
//C         INVOKEKIND invKind,
//C         PVOID *ppv);
HRESULT  ITypeInfo_AddressOfMember_Proxy(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
//C     HRESULT ITypeInfo_AddressOfMember_Stub(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_AddressOfMember_Stub(ITypeInfo *This);
//C     HRESULT ITypeInfo_CreateInstance_Proxy(
//C         ITypeInfo* This,
//C         IUnknown *pUnkOuter,
//C         const IID *const riid,
//C         PVOID *ppvObj);
HRESULT  ITypeInfo_CreateInstance_Proxy(ITypeInfo *This, IUnknown *pUnkOuter, IID *riid, PVOID *ppvObj);
//C     HRESULT ITypeInfo_CreateInstance_Stub(
//C         ITypeInfo* This,
//C         const IID *const riid,
//C         IUnknown **ppvObj);
HRESULT  ITypeInfo_CreateInstance_Stub(ITypeInfo *This, IID *riid, IUnknown **ppvObj);
//C     HRESULT ITypeInfo_GetContainingTypeLib_Proxy(
//C         ITypeInfo* This,
//C         ITypeLib **ppTLib,
//C         UINT *pIndex);
HRESULT  ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);
//C     HRESULT ITypeInfo_GetContainingTypeLib_Stub(
//C         ITypeInfo* This,
//C         ITypeLib **ppTLib,
//C         UINT *pIndex);
HRESULT  ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);
//C     void ITypeInfo_ReleaseTypeAttr_Proxy(
//C         ITypeInfo* This,
//C         TYPEATTR *pTypeAttr);
void  ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo *This, TYPEATTR *pTypeAttr);
//C     HRESULT ITypeInfo_ReleaseTypeAttr_Stub(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo *This);
//C     void ITypeInfo_ReleaseFuncDesc_Proxy(
//C         ITypeInfo* This,
//C         FUNCDESC *pFuncDesc);
void  ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo *This, FUNCDESC *pFuncDesc);
//C     HRESULT ITypeInfo_ReleaseFuncDesc_Stub(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo *This);
//C     void ITypeInfo_ReleaseVarDesc_Proxy(
//C         ITypeInfo* This,
//C         VARDESC *pVarDesc);
void  ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo *This, VARDESC *pVarDesc);
//C     HRESULT ITypeInfo_ReleaseVarDesc_Stub(
//C         ITypeInfo* This);
HRESULT  ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo *This);
//C       typedef ITypeInfo2 *LPTYPEINFO2;
alias ITypeInfo2 *LPTYPEINFO2;
//C       extern const IID IID_ITypeInfo2;
extern const IID IID_ITypeInfo2;
//C       typedef struct ITypeInfo2Vtbl {
//C           HRESULT ( *QueryInterface)(ITypeInfo2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ITypeInfo2 *This);
//C           ULONG ( *Release)(ITypeInfo2 *This);
//C           HRESULT ( *GetTypeAttr)(ITypeInfo2 *This,TYPEATTR **ppTypeAttr);
//C           HRESULT ( *GetTypeComp)(ITypeInfo2 *This,ITypeComp **ppTComp);
//C           HRESULT ( *GetFuncDesc)(ITypeInfo2 *This,UINT index,FUNCDESC **ppFuncDesc);
//C           HRESULT ( *GetVarDesc)(ITypeInfo2 *This,UINT index,VARDESC **ppVarDesc);
//C           HRESULT ( *GetNames)(ITypeInfo2 *This,MEMBERID memid,BSTR *rgBstrNames,UINT cMaxNames,UINT *pcNames);
//C           HRESULT ( *GetRefTypeOfImplType)(ITypeInfo2 *This,UINT index,HREFTYPE *pRefType);
//C           HRESULT ( *GetImplTypeFlags)(ITypeInfo2 *This,UINT index,INT *pImplTypeFlags);
//C           HRESULT ( *GetIDsOfNames)(ITypeInfo2 *This,LPOLESTR *rgszNames,UINT cNames,MEMBERID *pMemId);
//C           HRESULT ( *Invoke)(ITypeInfo2 *This,PVOID pvInstance,MEMBERID memid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *GetDocumentation)(ITypeInfo2 *This,MEMBERID memid,BSTR *pBstrName,BSTR *pBstrDocString,DWORD *pdwHelpContext,BSTR *pBstrHelpFile);
//C           HRESULT ( *GetDllEntry)(ITypeInfo2 *This,MEMBERID memid,INVOKEKIND invKind,BSTR *pBstrDllName,BSTR *pBstrName,WORD *pwOrdinal);
//C           HRESULT ( *GetRefTypeInfo)(ITypeInfo2 *This,HREFTYPE hRefType,ITypeInfo **ppTInfo);
//C           HRESULT ( *AddressOfMember)(ITypeInfo2 *This,MEMBERID memid,INVOKEKIND invKind,PVOID *ppv);
//C           HRESULT ( *CreateInstance)(ITypeInfo2 *This,IUnknown *pUnkOuter,const IID *const riid,PVOID *ppvObj);
//C           HRESULT ( *GetMops)(ITypeInfo2 *This,MEMBERID memid,BSTR *pBstrMops);
//C           HRESULT ( *GetContainingTypeLib)(ITypeInfo2 *This,ITypeLib **ppTLib,UINT *pIndex);
//C           void ( *ReleaseTypeAttr)(ITypeInfo2 *This,TYPEATTR *pTypeAttr);
//C           void ( *ReleaseFuncDesc)(ITypeInfo2 *This,FUNCDESC *pFuncDesc);
//C           void ( *ReleaseVarDesc)(ITypeInfo2 *This,VARDESC *pVarDesc);
//C           HRESULT ( *GetTypeKind)(ITypeInfo2 *This,TYPEKIND *pTypeKind);
//C           HRESULT ( *GetTypeFlags)(ITypeInfo2 *This,ULONG *pTypeFlags);
//C           HRESULT ( *GetFuncIndexOfMemId)(ITypeInfo2 *This,MEMBERID memid,INVOKEKIND invKind,UINT *pFuncIndex);
//C           HRESULT ( *GetVarIndexOfMemId)(ITypeInfo2 *This,MEMBERID memid,UINT *pVarIndex);
//C           HRESULT ( *GetCustData)(ITypeInfo2 *This,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *GetFuncCustData)(ITypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *GetParamCustData)(ITypeInfo2 *This,UINT indexFunc,UINT indexParam,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *GetVarCustData)(ITypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *GetImplTypeCustData)(ITypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *GetDocumentation2)(ITypeInfo2 *This,MEMBERID memid,LCID lcid,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
//C           HRESULT ( *GetAllCustData)(ITypeInfo2 *This,CUSTDATA *pCustData);
//C           HRESULT ( *GetAllFuncCustData)(ITypeInfo2 *This,UINT index,CUSTDATA *pCustData);
//C           HRESULT ( *GetAllParamCustData)(ITypeInfo2 *This,UINT indexFunc,UINT indexParam,CUSTDATA *pCustData);
//C           HRESULT ( *GetAllVarCustData)(ITypeInfo2 *This,UINT index,CUSTDATA *pCustData);
//C           HRESULT ( *GetAllImplTypeCustData)(ITypeInfo2 *This,UINT index,CUSTDATA *pCustData);
//C       } ITypeInfo2Vtbl;
struct ITypeInfo2Vtbl
{
    HRESULT  function(ITypeInfo2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeInfo2 *This)AddRef;
    ULONG  function(ITypeInfo2 *This)Release;
    HRESULT  function(ITypeInfo2 *This, TYPEATTR **ppTypeAttr)GetTypeAttr;
    HRESULT  function(ITypeInfo2 *This, ITypeComp **ppTComp)GetTypeComp;
    HRESULT  function(ITypeInfo2 *This, UINT index, FUNCDESC **ppFuncDesc)GetFuncDesc;
    HRESULT  function(ITypeInfo2 *This, UINT index, VARDESC **ppVarDesc)GetVarDesc;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames)GetNames;
    HRESULT  function(ITypeInfo2 *This, UINT index, HREFTYPE *pRefType)GetRefTypeOfImplType;
    HRESULT  function(ITypeInfo2 *This, UINT index, INT *pImplTypeFlags)GetImplTypeFlags;
    HRESULT  function(ITypeInfo2 *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId)GetIDsOfNames;
    HRESULT  function(ITypeInfo2 *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)GetDocumentation;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal)GetDllEntry;
    HRESULT  function(ITypeInfo2 *This, HREFTYPE hRefType, ITypeInfo **ppTInfo)GetRefTypeInfo;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv)AddressOfMember;
    HRESULT  function(ITypeInfo2 *This, IUnknown *pUnkOuter, IID *riid, PVOID *ppvObj)CreateInstance;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrMops)GetMops;
    HRESULT  function(ITypeInfo2 *This, ITypeLib **ppTLib, UINT *pIndex)GetContainingTypeLib;
    void  function(ITypeInfo2 *This, TYPEATTR *pTypeAttr)ReleaseTypeAttr;
    void  function(ITypeInfo2 *This, FUNCDESC *pFuncDesc)ReleaseFuncDesc;
    void  function(ITypeInfo2 *This, VARDESC *pVarDesc)ReleaseVarDesc;
    HRESULT  function(ITypeInfo2 *This, TYPEKIND *pTypeKind)GetTypeKind;
    HRESULT  function(ITypeInfo2 *This, ULONG *pTypeFlags)GetTypeFlags;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex)GetFuncIndexOfMemId;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, UINT *pVarIndex)GetVarIndexOfMemId;
    HRESULT  function(ITypeInfo2 *This, GUID *guid, VARIANT *pVarVal)GetCustData;
    HRESULT  function(ITypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal)GetFuncCustData;
    HRESULT  function(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, GUID *guid, VARIANT *pVarVal)GetParamCustData;
    HRESULT  function(ITypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal)GetVarCustData;
    HRESULT  function(ITypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal)GetImplTypeCustData;
    HRESULT  function(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)GetDocumentation2;
    HRESULT  function(ITypeInfo2 *This, CUSTDATA *pCustData)GetAllCustData;
    HRESULT  function(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData)GetAllFuncCustData;
    HRESULT  function(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData)GetAllParamCustData;
    HRESULT  function(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData)GetAllVarCustData;
    HRESULT  function(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData)GetAllImplTypeCustData;
}
//C       struct ITypeInfo2 {
//C         struct ITypeInfo2Vtbl *lpVtbl;
//C       };
struct ITypeInfo2
{
    ITypeInfo2Vtbl *lpVtbl;
}
//C       HRESULT ITypeInfo2_GetTypeKind_Proxy(ITypeInfo2 *This,TYPEKIND *pTypeKind);
HRESULT  ITypeInfo2_GetTypeKind_Proxy(ITypeInfo2 *This, TYPEKIND *pTypeKind);
//C       void ITypeInfo2_GetTypeKind_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetTypeKind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetTypeFlags_Proxy(ITypeInfo2 *This,ULONG *pTypeFlags);
HRESULT  ITypeInfo2_GetTypeFlags_Proxy(ITypeInfo2 *This, ULONG *pTypeFlags);
//C       void ITypeInfo2_GetTypeFlags_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetTypeFlags_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetFuncIndexOfMemId_Proxy(ITypeInfo2 *This,MEMBERID memid,INVOKEKIND invKind,UINT *pFuncIndex);
HRESULT  ITypeInfo2_GetFuncIndexOfMemId_Proxy(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex);
//C       void ITypeInfo2_GetFuncIndexOfMemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetFuncIndexOfMemId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetVarIndexOfMemId_Proxy(ITypeInfo2 *This,MEMBERID memid,UINT *pVarIndex);
HRESULT  ITypeInfo2_GetVarIndexOfMemId_Proxy(ITypeInfo2 *This, MEMBERID memid, UINT *pVarIndex);
//C       void ITypeInfo2_GetVarIndexOfMemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetVarIndexOfMemId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetCustData_Proxy(ITypeInfo2 *This,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ITypeInfo2_GetCustData_Proxy(ITypeInfo2 *This, GUID *guid, VARIANT *pVarVal);
//C       void ITypeInfo2_GetCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetFuncCustData_Proxy(ITypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ITypeInfo2_GetFuncCustData_Proxy(ITypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal);
//C       void ITypeInfo2_GetFuncCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetFuncCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetParamCustData_Proxy(ITypeInfo2 *This,UINT indexFunc,UINT indexParam,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ITypeInfo2_GetParamCustData_Proxy(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, GUID *guid, VARIANT *pVarVal);
//C       void ITypeInfo2_GetParamCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetParamCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetVarCustData_Proxy(ITypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ITypeInfo2_GetVarCustData_Proxy(ITypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal);
//C       void ITypeInfo2_GetVarCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetVarCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetImplTypeCustData_Proxy(ITypeInfo2 *This,UINT index,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ITypeInfo2_GetImplTypeCustData_Proxy(ITypeInfo2 *This, UINT index, GUID *guid, VARIANT *pVarVal);
//C       void ITypeInfo2_GetImplTypeCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetImplTypeCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This,MEMBERID memid,LCID lcid,DWORD refPtrFlags,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
HRESULT  ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
//C       void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetAllCustData_Proxy(ITypeInfo2 *This,CUSTDATA *pCustData);
HRESULT  ITypeInfo2_GetAllCustData_Proxy(ITypeInfo2 *This, CUSTDATA *pCustData);
//C       void ITypeInfo2_GetAllCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetAllCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetAllFuncCustData_Proxy(ITypeInfo2 *This,UINT index,CUSTDATA *pCustData);
HRESULT  ITypeInfo2_GetAllFuncCustData_Proxy(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);
//C       void ITypeInfo2_GetAllFuncCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetAllFuncCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetAllParamCustData_Proxy(ITypeInfo2 *This,UINT indexFunc,UINT indexParam,CUSTDATA *pCustData);
HRESULT  ITypeInfo2_GetAllParamCustData_Proxy(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData);
//C       void ITypeInfo2_GetAllParamCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetAllParamCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetAllVarCustData_Proxy(ITypeInfo2 *This,UINT index,CUSTDATA *pCustData);
HRESULT  ITypeInfo2_GetAllVarCustData_Proxy(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);
//C       void ITypeInfo2_GetAllVarCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetAllVarCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeInfo2_GetAllImplTypeCustData_Proxy(ITypeInfo2 *This,UINT index,CUSTDATA *pCustData);
HRESULT  ITypeInfo2_GetAllImplTypeCustData_Proxy(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);
//C       void ITypeInfo2_GetAllImplTypeCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeInfo2_GetAllImplTypeCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef ITypeLib *LPTYPELIB;

//C     typedef enum tagSYSKIND {
//C         SYS_WIN16 = 0,
//C         SYS_WIN32 = 1,
//C         SYS_MAC = 2,
//C         SYS_WIN64 = 3
//C     } SYSKIND;
enum tagSYSKIND
{
    SYS_WIN16,
    SYS_WIN32,
    SYS_MAC,
    SYS_WIN64,
}
alias tagSYSKIND SYSKIND;
//C     typedef enum tagLIBFLAGS {
//C         LIBFLAG_FRESTRICTED = 0x1,
//C         LIBFLAG_FCONTROL = 0x2,
//C         LIBFLAG_FHIDDEN = 0x4,
//C         LIBFLAG_FHASDISKIMAGE = 0x8
//C     } LIBFLAGS;
enum tagLIBFLAGS
{
    LIBFLAG_FRESTRICTED = 1,
    LIBFLAG_FCONTROL,
    LIBFLAG_FHIDDEN = 4,
    LIBFLAG_FHASDISKIMAGE = 8,
}
alias tagLIBFLAGS LIBFLAGS;
//C     typedef struct tagTLIBATTR {
//C         GUID guid;
//C         LCID lcid;
//C         SYSKIND syskind;
//C         WORD wMajorVerNum;
//C         WORD wMinorVerNum;
//C         WORD wLibFlags;
//C     } TLIBATTR;
struct tagTLIBATTR
{
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
}
alias tagTLIBATTR TLIBATTR;
//C     typedef struct tagTLIBATTR *LPTLIBATTR;
alias tagTLIBATTR *LPTLIBATTR;
//C     extern const GUID IID_ITypeLib;
extern const GUID IID_ITypeLib;
//C     typedef struct ITypeLibVtbl {
//C         HRESULT ( *QueryInterface)(
//C             ITypeLib* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             ITypeLib* This);
//C         ULONG ( *Release)(
//C             ITypeLib* This);
//C         UINT ( *GetTypeInfoCount)(
//C             ITypeLib* This);
//C         HRESULT ( *GetTypeInfo)(
//C             ITypeLib* This,
//C             UINT index,
//C             ITypeInfo **ppTInfo);
//C         HRESULT ( *GetTypeInfoType)(
//C             ITypeLib* This,
//C             UINT index,
//C             TYPEKIND *pTKind);
//C         HRESULT ( *GetTypeInfoOfGuid)(
//C             ITypeLib* This,
//C             const GUID *const guid,
//C             ITypeInfo **ppTinfo);
//C         HRESULT ( *GetLibAttr)(
//C             ITypeLib* This,
//C             TLIBATTR **ppTLibAttr);
//C         HRESULT ( *GetTypeComp)(
//C             ITypeLib* This,
//C             ITypeComp **ppTComp);
//C         HRESULT ( *GetDocumentation)(
//C             ITypeLib* This,
//C             INT index,
//C             BSTR *pBstrName,
//C             BSTR *pBstrDocString,
//C             DWORD *pdwHelpContext,
//C             BSTR *pBstrHelpFile);
//C         HRESULT ( *IsName)(
//C             ITypeLib* This,
//C             LPOLESTR szNameBuf,
//C             ULONG lHashVal,
//C             WINBOOL *pfName);
//C         HRESULT ( *FindName)(
//C             ITypeLib* This,
//C             LPOLESTR szNameBuf,
//C             ULONG lHashVal,
//C             ITypeInfo **ppTInfo,
//C             MEMBERID *rgMemId,
//C             USHORT *pcFound);
//C         void ( *ReleaseTLibAttr)(
//C             ITypeLib* This,
//C             TLIBATTR *pTLibAttr);
//C     } ITypeLibVtbl;
struct ITypeLibVtbl
{
    HRESULT  function(ITypeLib *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeLib *This)AddRef;
    ULONG  function(ITypeLib *This)Release;
    UINT  function(ITypeLib *This)GetTypeInfoCount;
    HRESULT  function(ITypeLib *This, UINT index, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(ITypeLib *This, UINT index, TYPEKIND *pTKind)GetTypeInfoType;
    HRESULT  function(ITypeLib *This, GUID *guid, ITypeInfo **ppTinfo)GetTypeInfoOfGuid;
    HRESULT  function(ITypeLib *This, TLIBATTR **ppTLibAttr)GetLibAttr;
    HRESULT  function(ITypeLib *This, ITypeComp **ppTComp)GetTypeComp;
    HRESULT  function(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)GetDocumentation;
    HRESULT  function(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL *pfName)IsName;
    HRESULT  function(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)FindName;
    void  function(ITypeLib *This, TLIBATTR *pTLibAttr)ReleaseTLibAttr;
}
//C     struct ITypeLib {
//C         ITypeLibVtbl* lpVtbl;
//C     };
struct ITypeLib
{
    ITypeLibVtbl *lpVtbl;
}
//C     HRESULT ITypeLib_RemoteGetTypeInfoCount_Proxy(
//C         ITypeLib* This,
//C         UINT *pcTInfo);
HRESULT  ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib *This, UINT *pcTInfo);
//C     void ITypeLib_RemoteGetTypeInfoCount_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_GetTypeInfo_Proxy(
//C         ITypeLib* This,
//C         UINT index,
//C         ITypeInfo **ppTInfo);
HRESULT  ITypeLib_GetTypeInfo_Proxy(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);
//C     void ITypeLib_GetTypeInfo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_GetTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_GetTypeInfoType_Proxy(
//C         ITypeLib* This,
//C         UINT index,
//C         TYPEKIND *pTKind);
HRESULT  ITypeLib_GetTypeInfoType_Proxy(ITypeLib *This, UINT index, TYPEKIND *pTKind);
//C     void ITypeLib_GetTypeInfoType_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_GetTypeInfoType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_GetTypeInfoOfGuid_Proxy(
//C         ITypeLib* This,
//C         const GUID *const guid,
//C         ITypeInfo **ppTinfo);
HRESULT  ITypeLib_GetTypeInfoOfGuid_Proxy(ITypeLib *This, GUID *guid, ITypeInfo **ppTinfo);
//C     void ITypeLib_GetTypeInfoOfGuid_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_GetTypeInfoOfGuid_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_RemoteGetLibAttr_Proxy(
//C         ITypeLib* This,
//C         LPTLIBATTR *ppTLibAttr,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy);
//C     void ITypeLib_RemoteGetLibAttr_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_GetTypeComp_Proxy(
//C         ITypeLib* This,
//C         ITypeComp **ppTComp);
HRESULT  ITypeLib_GetTypeComp_Proxy(ITypeLib *This, ITypeComp **ppTComp);
//C     void ITypeLib_GetTypeComp_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_GetTypeComp_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_RemoteGetDocumentation_Proxy(
//C         ITypeLib* This,
//C         INT index,
//C         DWORD refPtrFlags,
//C         BSTR *pBstrName,
//C         BSTR *pBstrDocString,
//C         DWORD *pdwHelpContext,
//C         BSTR *pBstrHelpFile);
HRESULT  ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
//C     void ITypeLib_RemoteGetDocumentation_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_RemoteIsName_Proxy(
//C         ITypeLib* This,
//C         LPOLESTR szNameBuf,
//C         ULONG lHashVal,
//C         WINBOOL *pfName,
//C         BSTR *pBstrLibName);
HRESULT  ITypeLib_RemoteIsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL *pfName, BSTR *pBstrLibName);
//C     void ITypeLib_RemoteIsName_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_RemoteIsName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_RemoteFindName_Proxy(
//C         ITypeLib* This,
//C         LPOLESTR szNameBuf,
//C         ULONG lHashVal,
//C         ITypeInfo **ppTInfo,
//C         MEMBERID *rgMemId,
//C         USHORT *pcFound,
//C         BSTR *pBstrLibName);
HRESULT  ITypeLib_RemoteFindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName);
//C     void ITypeLib_RemoteFindName_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_RemoteFindName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT ITypeLib_LocalReleaseTLibAttr_Proxy(
//C         ITypeLib* This);
HRESULT  ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib *This);
//C     void ITypeLib_LocalReleaseTLibAttr_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     UINT ITypeLib_GetTypeInfoCount_Proxy(
//C         ITypeLib* This);
UINT  ITypeLib_GetTypeInfoCount_Proxy(ITypeLib *This);
//C     HRESULT ITypeLib_GetTypeInfoCount_Stub(
//C         ITypeLib* This,
//C         UINT *pcTInfo);
HRESULT  ITypeLib_GetTypeInfoCount_Stub(ITypeLib *This, UINT *pcTInfo);
//C     HRESULT ITypeLib_GetLibAttr_Proxy(
//C         ITypeLib* This,
//C         TLIBATTR **ppTLibAttr);
HRESULT  ITypeLib_GetLibAttr_Proxy(ITypeLib *This, TLIBATTR **ppTLibAttr);
//C     HRESULT ITypeLib_GetLibAttr_Stub(
//C         ITypeLib* This,
//C         LPTLIBATTR *ppTLibAttr,
//C         CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeLib_GetLibAttr_Stub(ITypeLib *This, LPTLIBATTR *ppTLibAttr, CLEANLOCALSTORAGE *pDummy);
//C     HRESULT ITypeLib_GetDocumentation_Proxy(
//C         ITypeLib* This,
//C         INT index,
//C         BSTR *pBstrName,
//C         BSTR *pBstrDocString,
//C         DWORD *pdwHelpContext,
//C         BSTR *pBstrHelpFile);
HRESULT  ITypeLib_GetDocumentation_Proxy(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
//C     HRESULT ITypeLib_GetDocumentation_Stub(
//C         ITypeLib* This,
//C         INT index,
//C         DWORD refPtrFlags,
//C         BSTR *pBstrName,
//C         BSTR *pBstrDocString,
//C         DWORD *pdwHelpContext,
//C         BSTR *pBstrHelpFile);
HRESULT  ITypeLib_GetDocumentation_Stub(ITypeLib *This, INT index, DWORD refPtrFlags, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
//C     HRESULT ITypeLib_IsName_Proxy(
//C         ITypeLib* This,
//C         LPOLESTR szNameBuf,
//C         ULONG lHashVal,
//C         WINBOOL *pfName);
HRESULT  ITypeLib_IsName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL *pfName);
//C     HRESULT ITypeLib_IsName_Stub(
//C         ITypeLib* This,
//C         LPOLESTR szNameBuf,
//C         ULONG lHashVal,
//C         WINBOOL *pfName,
//C         BSTR *pBstrLibName);
HRESULT  ITypeLib_IsName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL *pfName, BSTR *pBstrLibName);
//C     HRESULT ITypeLib_FindName_Proxy(
//C         ITypeLib* This,
//C         LPOLESTR szNameBuf,
//C         ULONG lHashVal,
//C         ITypeInfo **ppTInfo,
//C         MEMBERID *rgMemId,
//C         USHORT *pcFound);
HRESULT  ITypeLib_FindName_Proxy(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
//C     HRESULT ITypeLib_FindName_Stub(
//C         ITypeLib* This,
//C         LPOLESTR szNameBuf,
//C         ULONG lHashVal,
//C         ITypeInfo **ppTInfo,
//C         MEMBERID *rgMemId,
//C         USHORT *pcFound,
//C         BSTR *pBstrLibName);
HRESULT  ITypeLib_FindName_Stub(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound, BSTR *pBstrLibName);
//C     void ITypeLib_ReleaseTLibAttr_Proxy(
//C         ITypeLib* This,
//C         TLIBATTR *pTLibAttr);
void  ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib *This, TLIBATTR *pTLibAttr);
//C     HRESULT ITypeLib_ReleaseTLibAttr_Stub(
//C         ITypeLib* This);
HRESULT  ITypeLib_ReleaseTLibAttr_Stub(ITypeLib *This);
//C       typedef ITypeLib2 *LPTYPELIB2;
alias ITypeLib2 *LPTYPELIB2;
//C       extern const IID IID_ITypeLib2;
extern const IID IID_ITypeLib2;
//C       typedef struct ITypeLib2Vtbl {
//C           HRESULT ( *QueryInterface)(ITypeLib2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ITypeLib2 *This);
//C           ULONG ( *Release)(ITypeLib2 *This);
//C           UINT ( *GetTypeInfoCount)(ITypeLib2 *This);
//C           HRESULT ( *GetTypeInfo)(ITypeLib2 *This,UINT index,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetTypeInfoType)(ITypeLib2 *This,UINT index,TYPEKIND *pTKind);
//C           HRESULT ( *GetTypeInfoOfGuid)(ITypeLib2 *This,const GUID *const guid,ITypeInfo **ppTinfo);
//C           HRESULT ( *GetLibAttr)(ITypeLib2 *This,TLIBATTR **ppTLibAttr);
//C           HRESULT ( *GetTypeComp)(ITypeLib2 *This,ITypeComp **ppTComp);
//C           HRESULT ( *GetDocumentation)(ITypeLib2 *This,INT index,BSTR *pBstrName,BSTR *pBstrDocString,DWORD *pdwHelpContext,BSTR *pBstrHelpFile);
//C           HRESULT ( *IsName)(ITypeLib2 *This,LPOLESTR szNameBuf,ULONG lHashVal,WINBOOL *pfName);
//C           HRESULT ( *FindName)(ITypeLib2 *This,LPOLESTR szNameBuf,ULONG lHashVal,ITypeInfo **ppTInfo,MEMBERID *rgMemId,USHORT *pcFound);
//C           void ( *ReleaseTLibAttr)(ITypeLib2 *This,TLIBATTR *pTLibAttr);
//C           HRESULT ( *GetCustData)(ITypeLib2 *This,const GUID *const guid,VARIANT *pVarVal);
//C           HRESULT ( *GetLibStatistics)(ITypeLib2 *This,ULONG *pcUniqueNames,ULONG *pcchUniqueNames);
//C           HRESULT ( *GetDocumentation2)(ITypeLib2 *This,INT index,LCID lcid,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
//C           HRESULT ( *GetAllCustData)(ITypeLib2 *This,CUSTDATA *pCustData);
//C       } ITypeLib2Vtbl;
struct ITypeLib2Vtbl
{
    HRESULT  function(ITypeLib2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeLib2 *This)AddRef;
    ULONG  function(ITypeLib2 *This)Release;
    UINT  function(ITypeLib2 *This)GetTypeInfoCount;
    HRESULT  function(ITypeLib2 *This, UINT index, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(ITypeLib2 *This, UINT index, TYPEKIND *pTKind)GetTypeInfoType;
    HRESULT  function(ITypeLib2 *This, GUID *guid, ITypeInfo **ppTinfo)GetTypeInfoOfGuid;
    HRESULT  function(ITypeLib2 *This, TLIBATTR **ppTLibAttr)GetLibAttr;
    HRESULT  function(ITypeLib2 *This, ITypeComp **ppTComp)GetTypeComp;
    HRESULT  function(ITypeLib2 *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile)GetDocumentation;
    HRESULT  function(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, WINBOOL *pfName)IsName;
    HRESULT  function(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound)FindName;
    void  function(ITypeLib2 *This, TLIBATTR *pTLibAttr)ReleaseTLibAttr;
    HRESULT  function(ITypeLib2 *This, GUID *guid, VARIANT *pVarVal)GetCustData;
    HRESULT  function(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames)GetLibStatistics;
    HRESULT  function(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll)GetDocumentation2;
    HRESULT  function(ITypeLib2 *This, CUSTDATA *pCustData)GetAllCustData;
}
//C       struct ITypeLib2 {
//C         struct ITypeLib2Vtbl *lpVtbl;
//C       };
struct ITypeLib2
{
    ITypeLib2Vtbl *lpVtbl;
}
//C       HRESULT ITypeLib2_GetCustData_Proxy(ITypeLib2 *This,const GUID *const guid,VARIANT *pVarVal);
HRESULT  ITypeLib2_GetCustData_Proxy(ITypeLib2 *This, GUID *guid, VARIANT *pVarVal);
//C       void ITypeLib2_GetCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeLib2_GetCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This,ULONG *pcUniqueNames,ULONG *pcchUniqueNames);
HRESULT  ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
//C       void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This,INT index,LCID lcid,DWORD refPtrFlags,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
HRESULT  ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
//C       void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeLib2_GetAllCustData_Proxy(ITypeLib2 *This,CUSTDATA *pCustData);
HRESULT  ITypeLib2_GetAllCustData_Proxy(ITypeLib2 *This, CUSTDATA *pCustData);
//C       void ITypeLib2_GetAllCustData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeLib2_GetAllCustData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
alias ITypeChangeEvents *LPTYPECHANGEEVENTS;
//C       typedef enum tagCHANGEKIND {
//C         CHANGEKIND_ADDMEMBER = 0,
//C         CHANGEKIND_DELETEMEMBER,CHANGEKIND_SETNAMES,CHANGEKIND_SETDOCUMENTATION,
//C         CHANGEKIND_GENERAL,CHANGEKIND_INVALIDATE,CHANGEKIND_CHANGEFAILED,
//C         CHANGEKIND_MAX
//C       } CHANGEKIND;
enum tagCHANGEKIND
{
    CHANGEKIND_ADDMEMBER,
    CHANGEKIND_DELETEMEMBER,
    CHANGEKIND_SETNAMES,
    CHANGEKIND_SETDOCUMENTATION,
    CHANGEKIND_GENERAL,
    CHANGEKIND_INVALIDATE,
    CHANGEKIND_CHANGEFAILED,
    CHANGEKIND_MAX,
}
alias tagCHANGEKIND CHANGEKIND;
//C       extern const IID IID_ITypeChangeEvents;
extern const IID IID_ITypeChangeEvents;
//C       typedef struct ITypeChangeEventsVtbl {
//C           HRESULT ( *QueryInterface)(ITypeChangeEvents *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ITypeChangeEvents *This);
//C           ULONG ( *Release)(ITypeChangeEvents *This);
//C           HRESULT ( *RequestTypeChange)(ITypeChangeEvents *This,CHANGEKIND changeKind,ITypeInfo *pTInfoBefore,LPOLESTR pStrName,INT *pfCancel);
//C           HRESULT ( *AfterTypeChange)(ITypeChangeEvents *This,CHANGEKIND changeKind,ITypeInfo *pTInfoAfter,LPOLESTR pStrName);
//C       } ITypeChangeEventsVtbl;
struct ITypeChangeEventsVtbl
{
    HRESULT  function(ITypeChangeEvents *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeChangeEvents *This)AddRef;
    ULONG  function(ITypeChangeEvents *This)Release;
    HRESULT  function(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel)RequestTypeChange;
    HRESULT  function(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName)AfterTypeChange;
}
//C       struct ITypeChangeEvents {
//C         struct ITypeChangeEventsVtbl *lpVtbl;
//C       };
struct ITypeChangeEvents
{
    ITypeChangeEventsVtbl *lpVtbl;
}
//C       HRESULT ITypeChangeEvents_RequestTypeChange_Proxy(ITypeChangeEvents *This,CHANGEKIND changeKind,ITypeInfo *pTInfoBefore,LPOLESTR pStrName,INT *pfCancel);
HRESULT  ITypeChangeEvents_RequestTypeChange_Proxy(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel);
//C       void ITypeChangeEvents_RequestTypeChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeChangeEvents_RequestTypeChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeChangeEvents_AfterTypeChange_Proxy(ITypeChangeEvents *This,CHANGEKIND changeKind,ITypeInfo *pTInfoAfter,LPOLESTR pStrName);
HRESULT  ITypeChangeEvents_AfterTypeChange_Proxy(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName);
//C       void ITypeChangeEvents_AfterTypeChange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeChangeEvents_AfterTypeChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IErrorInfo *LPERRORINFO;
alias IErrorInfo *LPERRORINFO;
//C       extern const IID IID_IErrorInfo;
extern const IID IID_IErrorInfo;
//C       typedef struct IErrorInfoVtbl {
//C           HRESULT ( *QueryInterface)(IErrorInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IErrorInfo *This);
//C           ULONG ( *Release)(IErrorInfo *This);
//C           HRESULT ( *GetGUID)(IErrorInfo *This,GUID *pGUID);
//C           HRESULT ( *GetSource)(IErrorInfo *This,BSTR *pBstrSource);
//C           HRESULT ( *GetDescription)(IErrorInfo *This,BSTR *pBstrDescription);
//C           HRESULT ( *GetHelpFile)(IErrorInfo *This,BSTR *pBstrHelpFile);
//C           HRESULT ( *GetHelpContext)(IErrorInfo *This,DWORD *pdwHelpContext);
//C       } IErrorInfoVtbl;
struct IErrorInfoVtbl
{
    HRESULT  function(IErrorInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IErrorInfo *This)AddRef;
    ULONG  function(IErrorInfo *This)Release;
    HRESULT  function(IErrorInfo *This, GUID *pGUID)GetGUID;
    HRESULT  function(IErrorInfo *This, BSTR *pBstrSource)GetSource;
    HRESULT  function(IErrorInfo *This, BSTR *pBstrDescription)GetDescription;
    HRESULT  function(IErrorInfo *This, BSTR *pBstrHelpFile)GetHelpFile;
    HRESULT  function(IErrorInfo *This, DWORD *pdwHelpContext)GetHelpContext;
}
//C       struct IErrorInfo {
//C         struct IErrorInfoVtbl *lpVtbl;
//C       };
struct IErrorInfo
{
    IErrorInfoVtbl *lpVtbl;
}
//C       HRESULT IErrorInfo_GetGUID_Proxy(IErrorInfo *This,GUID *pGUID);
HRESULT  IErrorInfo_GetGUID_Proxy(IErrorInfo *This, GUID *pGUID);
//C       void IErrorInfo_GetGUID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IErrorInfo_GetGUID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IErrorInfo_GetSource_Proxy(IErrorInfo *This,BSTR *pBstrSource);
HRESULT  IErrorInfo_GetSource_Proxy(IErrorInfo *This, BSTR *pBstrSource);
//C       void IErrorInfo_GetSource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IErrorInfo_GetSource_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IErrorInfo_GetDescription_Proxy(IErrorInfo *This,BSTR *pBstrDescription);
HRESULT  IErrorInfo_GetDescription_Proxy(IErrorInfo *This, BSTR *pBstrDescription);
//C       void IErrorInfo_GetDescription_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IErrorInfo_GetDescription_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IErrorInfo_GetHelpFile_Proxy(IErrorInfo *This,BSTR *pBstrHelpFile);
HRESULT  IErrorInfo_GetHelpFile_Proxy(IErrorInfo *This, BSTR *pBstrHelpFile);
//C       void IErrorInfo_GetHelpFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IErrorInfo_GetHelpFile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IErrorInfo_GetHelpContext_Proxy(IErrorInfo *This,DWORD *pdwHelpContext);
HRESULT  IErrorInfo_GetHelpContext_Proxy(IErrorInfo *This, DWORD *pdwHelpContext);
//C       void IErrorInfo_GetHelpContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IErrorInfo_GetHelpContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ICreateErrorInfo *LPCREATEERRORINFO;
alias ICreateErrorInfo *LPCREATEERRORINFO;
//C       extern const IID IID_ICreateErrorInfo;
extern const IID IID_ICreateErrorInfo;
//C       typedef struct ICreateErrorInfoVtbl {
//C           HRESULT ( *QueryInterface)(ICreateErrorInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICreateErrorInfo *This);
//C           ULONG ( *Release)(ICreateErrorInfo *This);
//C           HRESULT ( *SetGUID)(ICreateErrorInfo *This,const GUID *const rguid);
//C           HRESULT ( *SetSource)(ICreateErrorInfo *This,LPOLESTR szSource);
//C           HRESULT ( *SetDescription)(ICreateErrorInfo *This,LPOLESTR szDescription);
//C           HRESULT ( *SetHelpFile)(ICreateErrorInfo *This,LPOLESTR szHelpFile);
//C           HRESULT ( *SetHelpContext)(ICreateErrorInfo *This,DWORD dwHelpContext);
//C       } ICreateErrorInfoVtbl;
struct ICreateErrorInfoVtbl
{
    HRESULT  function(ICreateErrorInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICreateErrorInfo *This)AddRef;
    ULONG  function(ICreateErrorInfo *This)Release;
    HRESULT  function(ICreateErrorInfo *This, GUID *rguid)SetGUID;
    HRESULT  function(ICreateErrorInfo *This, LPOLESTR szSource)SetSource;
    HRESULT  function(ICreateErrorInfo *This, LPOLESTR szDescription)SetDescription;
    HRESULT  function(ICreateErrorInfo *This, LPOLESTR szHelpFile)SetHelpFile;
    HRESULT  function(ICreateErrorInfo *This, DWORD dwHelpContext)SetHelpContext;
}
//C       struct ICreateErrorInfo {
//C         struct ICreateErrorInfoVtbl *lpVtbl;
//C       };
struct ICreateErrorInfo
{
    ICreateErrorInfoVtbl *lpVtbl;
}
//C       HRESULT ICreateErrorInfo_SetGUID_Proxy(ICreateErrorInfo *This,const GUID *const rguid);
HRESULT  ICreateErrorInfo_SetGUID_Proxy(ICreateErrorInfo *This, GUID *rguid);
//C       void ICreateErrorInfo_SetGUID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateErrorInfo_SetGUID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateErrorInfo_SetSource_Proxy(ICreateErrorInfo *This,LPOLESTR szSource);
HRESULT  ICreateErrorInfo_SetSource_Proxy(ICreateErrorInfo *This, LPOLESTR szSource);
//C       void ICreateErrorInfo_SetSource_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateErrorInfo_SetSource_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateErrorInfo_SetDescription_Proxy(ICreateErrorInfo *This,LPOLESTR szDescription);
HRESULT  ICreateErrorInfo_SetDescription_Proxy(ICreateErrorInfo *This, LPOLESTR szDescription);
//C       void ICreateErrorInfo_SetDescription_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateErrorInfo_SetDescription_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateErrorInfo_SetHelpFile_Proxy(ICreateErrorInfo *This,LPOLESTR szHelpFile);
HRESULT  ICreateErrorInfo_SetHelpFile_Proxy(ICreateErrorInfo *This, LPOLESTR szHelpFile);
//C       void ICreateErrorInfo_SetHelpFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateErrorInfo_SetHelpFile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICreateErrorInfo_SetHelpContext_Proxy(ICreateErrorInfo *This,DWORD dwHelpContext);
HRESULT  ICreateErrorInfo_SetHelpContext_Proxy(ICreateErrorInfo *This, DWORD dwHelpContext);
//C       void ICreateErrorInfo_SetHelpContext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICreateErrorInfo_SetHelpContext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
alias ISupportErrorInfo *LPSUPPORTERRORINFO;
//C       extern const IID IID_ISupportErrorInfo;
extern const IID IID_ISupportErrorInfo;
//C       typedef struct ISupportErrorInfoVtbl {
//C           HRESULT ( *QueryInterface)(ISupportErrorInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISupportErrorInfo *This);
//C           ULONG ( *Release)(ISupportErrorInfo *This);
//C           HRESULT ( *InterfaceSupportsErrorInfo)(ISupportErrorInfo *This,const IID *const riid);
//C       } ISupportErrorInfoVtbl;
struct ISupportErrorInfoVtbl
{
    HRESULT  function(ISupportErrorInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISupportErrorInfo *This)AddRef;
    ULONG  function(ISupportErrorInfo *This)Release;
    HRESULT  function(ISupportErrorInfo *This, IID *riid)InterfaceSupportsErrorInfo;
}
//C       struct ISupportErrorInfo {
//C         struct ISupportErrorInfoVtbl *lpVtbl;
//C       };
struct ISupportErrorInfo
{
    ISupportErrorInfoVtbl *lpVtbl;
}
//C       HRESULT ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(ISupportErrorInfo *This,const IID *const riid);
HRESULT  ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(ISupportErrorInfo *This, IID *riid);
//C       void ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ITypeFactory;
extern const IID IID_ITypeFactory;
//C       typedef struct ITypeFactoryVtbl {
//C           HRESULT ( *QueryInterface)(ITypeFactory *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ITypeFactory *This);
//C           ULONG ( *Release)(ITypeFactory *This);
//C           HRESULT ( *CreateFromTypeInfo)(ITypeFactory *This,ITypeInfo *pTypeInfo,const IID *const riid,IUnknown **ppv);
//C       } ITypeFactoryVtbl;
struct ITypeFactoryVtbl
{
    HRESULT  function(ITypeFactory *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeFactory *This)AddRef;
    ULONG  function(ITypeFactory *This)Release;
    HRESULT  function(ITypeFactory *This, ITypeInfo *pTypeInfo, IID *riid, IUnknown **ppv)CreateFromTypeInfo;
}
//C       struct ITypeFactory {
//C         struct ITypeFactoryVtbl *lpVtbl;
//C       };
struct ITypeFactory
{
    ITypeFactoryVtbl *lpVtbl;
}
//C       HRESULT ITypeFactory_CreateFromTypeInfo_Proxy(ITypeFactory *This,ITypeInfo *pTypeInfo,const IID *const riid,IUnknown **ppv);
HRESULT  ITypeFactory_CreateFromTypeInfo_Proxy(ITypeFactory *This, ITypeInfo *pTypeInfo, IID *riid, IUnknown **ppv);
//C       void ITypeFactory_CreateFromTypeInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeFactory_CreateFromTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_ITypeMarshal;
extern const IID IID_ITypeMarshal;
//C       typedef struct ITypeMarshalVtbl {
//C           HRESULT ( *QueryInterface)(ITypeMarshal *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ITypeMarshal *This);
//C           ULONG ( *Release)(ITypeMarshal *This);
//C           HRESULT ( *Size)(ITypeMarshal *This,PVOID pvType,DWORD dwDestContext,PVOID pvDestContext,ULONG *pSize);
//C           HRESULT ( *Marshal)(ITypeMarshal *This,PVOID pvType,DWORD dwDestContext,PVOID pvDestContext,ULONG cbBufferLength,BYTE *pBuffer,ULONG *pcbWritten);
//C           HRESULT ( *Unmarshal)(ITypeMarshal *This,PVOID pvType,DWORD dwFlags,ULONG cbBufferLength,BYTE *pBuffer,ULONG *pcbRead);
//C           HRESULT ( *Free)(ITypeMarshal *This,PVOID pvType);
//C       } ITypeMarshalVtbl;
struct ITypeMarshalVtbl
{
    HRESULT  function(ITypeMarshal *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ITypeMarshal *This)AddRef;
    ULONG  function(ITypeMarshal *This)Release;
    HRESULT  function(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize)Size;
    HRESULT  function(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten)Marshal;
    HRESULT  function(ITypeMarshal *This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead)Unmarshal;
    HRESULT  function(ITypeMarshal *This, PVOID pvType)Free;
}
//C       struct ITypeMarshal {
//C         struct ITypeMarshalVtbl *lpVtbl;
//C       };
struct ITypeMarshal
{
    ITypeMarshalVtbl *lpVtbl;
}
//C       HRESULT ITypeMarshal_Size_Proxy(ITypeMarshal *This,PVOID pvType,DWORD dwDestContext,PVOID pvDestContext,ULONG *pSize);
HRESULT  ITypeMarshal_Size_Proxy(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize);
//C       void ITypeMarshal_Size_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeMarshal_Size_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeMarshal_Marshal_Proxy(ITypeMarshal *This,PVOID pvType,DWORD dwDestContext,PVOID pvDestContext,ULONG cbBufferLength,BYTE *pBuffer,ULONG *pcbWritten);
HRESULT  ITypeMarshal_Marshal_Proxy(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten);
//C       void ITypeMarshal_Marshal_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeMarshal_Marshal_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeMarshal_Unmarshal_Proxy(ITypeMarshal *This,PVOID pvType,DWORD dwFlags,ULONG cbBufferLength,BYTE *pBuffer,ULONG *pcbRead);
HRESULT  ITypeMarshal_Unmarshal_Proxy(ITypeMarshal *This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead);
//C       void ITypeMarshal_Unmarshal_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeMarshal_Unmarshal_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ITypeMarshal_Free_Proxy(ITypeMarshal *This,PVOID pvType);
HRESULT  ITypeMarshal_Free_Proxy(ITypeMarshal *This, PVOID pvType);
//C       void ITypeMarshal_Free_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ITypeMarshal_Free_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IRecordInfo *LPRECORDINFO;
alias IRecordInfo *LPRECORDINFO;
//C     extern const GUID IID_IRecordInfo;
extern const GUID IID_IRecordInfo;
//C     typedef struct IRecordInfoVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IRecordInfo* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IRecordInfo* This);
//C         ULONG ( *Release)(
//C             IRecordInfo* This);
//C         HRESULT ( *RecordInit)(
//C             IRecordInfo* This,
//C             PVOID pvNew);
//C         HRESULT ( *RecordClear)(
//C             IRecordInfo* This,
//C             PVOID pvExisting);
//C         HRESULT ( *RecordCopy)(
//C             IRecordInfo* This,
//C             PVOID pvExisting,
//C             PVOID pvNew);
//C         HRESULT ( *GetGuid)(
//C             IRecordInfo* This,
//C             GUID *pguid);
//C         HRESULT ( *GetName)(
//C             IRecordInfo* This,
//C             BSTR *pbstrName);
//C         HRESULT ( *GetSize)(
//C             IRecordInfo* This,
//C             ULONG *pcbSize);
//C         HRESULT ( *GetTypeInfo)(
//C             IRecordInfo* This,
//C             ITypeInfo **ppTypeInfo);
//C         HRESULT ( *GetField)(
//C             IRecordInfo* This,
//C             PVOID pvData,
//C             LPCOLESTR szFieldName,
//C             VARIANT *pvarField);
//C         HRESULT ( *GetFieldNoCopy)(
//C             IRecordInfo* This,
//C             PVOID pvData,
//C             LPCOLESTR szFieldName,
//C             VARIANT *pvarField,
//C             PVOID *ppvDataCArray);
//C         HRESULT ( *PutField)(
//C             IRecordInfo* This,
//C             ULONG wFlags,
//C             PVOID pvData,
//C             LPCOLESTR szFieldName,
//C             VARIANT *pvarField);
//C         HRESULT ( *PutFieldNoCopy)(
//C             IRecordInfo* This,
//C             ULONG wFlags,
//C             PVOID pvData,
//C             LPCOLESTR szFieldName,
//C             VARIANT *pvarField);
//C         HRESULT ( *GetFieldNames)(
//C             IRecordInfo* This,
//C             ULONG *pcNames,
//C             BSTR *rgBstrNames);
//C         WINBOOL ( *IsMatchingType)(
//C             IRecordInfo* This,
//C             IRecordInfo *pRecordInfo);
//C         PVOID ( *RecordCreate)(
//C             IRecordInfo* This);
//C         HRESULT ( *RecordCreateCopy)(
//C             IRecordInfo* This,
//C             PVOID pvSource,
//C             PVOID *ppvDest);
//C         HRESULT ( *RecordDestroy)(
//C             IRecordInfo* This,
//C             PVOID pvRecord);
//C     } IRecordInfoVtbl;
struct IRecordInfoVtbl
{
    HRESULT  function(IRecordInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IRecordInfo *This)AddRef;
    ULONG  function(IRecordInfo *This)Release;
    HRESULT  function(IRecordInfo *This, PVOID pvNew)RecordInit;
    HRESULT  function(IRecordInfo *This, PVOID pvExisting)RecordClear;
    HRESULT  function(IRecordInfo *This, PVOID pvExisting, PVOID pvNew)RecordCopy;
    HRESULT  function(IRecordInfo *This, GUID *pguid)GetGuid;
    HRESULT  function(IRecordInfo *This, BSTR *pbstrName)GetName;
    HRESULT  function(IRecordInfo *This, ULONG *pcbSize)GetSize;
    HRESULT  function(IRecordInfo *This, ITypeInfo **ppTypeInfo)GetTypeInfo;
    HRESULT  function(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField)GetField;
    HRESULT  function(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray)GetFieldNoCopy;
    HRESULT  function(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField)PutField;
    HRESULT  function(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField)PutFieldNoCopy;
    HRESULT  function(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames)GetFieldNames;
    WINBOOL  function(IRecordInfo *This, IRecordInfo *pRecordInfo)IsMatchingType;
    PVOID  function(IRecordInfo *This)RecordCreate;
    HRESULT  function(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest)RecordCreateCopy;
    HRESULT  function(IRecordInfo *This, PVOID pvRecord)RecordDestroy;
}
//C     struct IRecordInfo {
//C         IRecordInfoVtbl* lpVtbl;
//C     };
struct IRecordInfo
{
    IRecordInfoVtbl *lpVtbl;
}
//C     HRESULT IRecordInfo_RecordInit_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvNew);
HRESULT  IRecordInfo_RecordInit_Proxy(IRecordInfo *This, PVOID pvNew);
//C     void IRecordInfo_RecordInit_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_RecordInit_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_RecordClear_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvExisting);
HRESULT  IRecordInfo_RecordClear_Proxy(IRecordInfo *This, PVOID pvExisting);
//C     void IRecordInfo_RecordClear_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_RecordClear_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_RecordCopy_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvExisting,
//C         PVOID pvNew);
HRESULT  IRecordInfo_RecordCopy_Proxy(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);
//C     void IRecordInfo_RecordCopy_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_RecordCopy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetGuid_Proxy(
//C         IRecordInfo* This,
//C         GUID *pguid);
HRESULT  IRecordInfo_GetGuid_Proxy(IRecordInfo *This, GUID *pguid);
//C     void IRecordInfo_GetGuid_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetGuid_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetName_Proxy(
//C         IRecordInfo* This,
//C         BSTR *pbstrName);
HRESULT  IRecordInfo_GetName_Proxy(IRecordInfo *This, BSTR *pbstrName);
//C     void IRecordInfo_GetName_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetSize_Proxy(
//C         IRecordInfo* This,
//C         ULONG *pcbSize);
HRESULT  IRecordInfo_GetSize_Proxy(IRecordInfo *This, ULONG *pcbSize);
//C     void IRecordInfo_GetSize_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetTypeInfo_Proxy(
//C         IRecordInfo* This,
//C         ITypeInfo **ppTypeInfo);
HRESULT  IRecordInfo_GetTypeInfo_Proxy(IRecordInfo *This, ITypeInfo **ppTypeInfo);
//C     void IRecordInfo_GetTypeInfo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetTypeInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetField_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvData,
//C         LPCOLESTR szFieldName,
//C         VARIANT *pvarField);
HRESULT  IRecordInfo_GetField_Proxy(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
//C     void IRecordInfo_GetField_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetField_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetFieldNoCopy_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvData,
//C         LPCOLESTR szFieldName,
//C         VARIANT *pvarField,
//C         PVOID *ppvDataCArray);
HRESULT  IRecordInfo_GetFieldNoCopy_Proxy(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);
//C     void IRecordInfo_GetFieldNoCopy_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetFieldNoCopy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_PutField_Proxy(
//C         IRecordInfo* This,
//C         ULONG wFlags,
//C         PVOID pvData,
//C         LPCOLESTR szFieldName,
//C         VARIANT *pvarField);
HRESULT  IRecordInfo_PutField_Proxy(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
//C     void IRecordInfo_PutField_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_PutField_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_PutFieldNoCopy_Proxy(
//C         IRecordInfo* This,
//C         ULONG wFlags,
//C         PVOID pvData,
//C         LPCOLESTR szFieldName,
//C         VARIANT *pvarField);
HRESULT  IRecordInfo_PutFieldNoCopy_Proxy(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
//C     void IRecordInfo_PutFieldNoCopy_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_PutFieldNoCopy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_GetFieldNames_Proxy(
//C         IRecordInfo* This,
//C         ULONG *pcNames,
//C         BSTR *rgBstrNames);
HRESULT  IRecordInfo_GetFieldNames_Proxy(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);
//C     void IRecordInfo_GetFieldNames_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_GetFieldNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     WINBOOL IRecordInfo_IsMatchingType_Proxy(
//C         IRecordInfo* This,
//C         IRecordInfo *pRecordInfo);
WINBOOL  IRecordInfo_IsMatchingType_Proxy(IRecordInfo *This, IRecordInfo *pRecordInfo);
//C     void IRecordInfo_IsMatchingType_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_IsMatchingType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     PVOID IRecordInfo_RecordCreate_Proxy(
//C         IRecordInfo* This);
PVOID  IRecordInfo_RecordCreate_Proxy(IRecordInfo *This);
//C     void IRecordInfo_RecordCreate_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_RecordCreate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_RecordCreateCopy_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvSource,
//C         PVOID *ppvDest);
HRESULT  IRecordInfo_RecordCreateCopy_Proxy(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);
//C     void IRecordInfo_RecordCreateCopy_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_RecordCreateCopy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IRecordInfo_RecordDestroy_Proxy(
//C         IRecordInfo* This,
//C         PVOID pvRecord);
HRESULT  IRecordInfo_RecordDestroy_Proxy(IRecordInfo *This, PVOID pvRecord);
//C     void IRecordInfo_RecordDestroy_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IRecordInfo_RecordDestroy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     typedef IErrorLog *LPERRORLOG;
alias IErrorLog *LPERRORLOG;
//C     extern const GUID IID_IErrorLog;
extern const GUID IID_IErrorLog;
//C     typedef struct IErrorLogVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IErrorLog* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IErrorLog* This);
//C         ULONG ( *Release)(
//C             IErrorLog* This);
//C         HRESULT ( *AddError)(
//C             IErrorLog* This,
//C             LPCOLESTR pszPropName,
//C             EXCEPINFO *pExcepInfo);
//C     } IErrorLogVtbl;
struct IErrorLogVtbl
{
    HRESULT  function(IErrorLog *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IErrorLog *This)AddRef;
    ULONG  function(IErrorLog *This)Release;
    HRESULT  function(IErrorLog *This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo)AddError;
}
//C     struct IErrorLog {
//C         IErrorLogVtbl* lpVtbl;
//C     };
struct IErrorLog
{
    IErrorLogVtbl *lpVtbl;
}
//C     HRESULT IErrorLog_AddError_Proxy(
//C         IErrorLog* This,
//C         LPCOLESTR pszPropName,
//C         EXCEPINFO *pExcepInfo);
HRESULT  IErrorLog_AddError_Proxy(IErrorLog *This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo);
//C     void IErrorLog_AddError_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IErrorLog_AddError_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C       typedef IPropertyBag *LPPROPERTYBAG;
alias IPropertyBag *LPPROPERTYBAG;
//C       extern const IID IID_IPropertyBag;
extern const IID IID_IPropertyBag;
//C       typedef struct IPropertyBagVtbl {
//C           HRESULT ( *QueryInterface)(IPropertyBag *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPropertyBag *This);
//C           ULONG ( *Release)(IPropertyBag *This);
//C           HRESULT ( *Read)(IPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar,IErrorLog *pErrorLog);
//C           HRESULT ( *Write)(IPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar);
//C       } IPropertyBagVtbl;
struct IPropertyBagVtbl
{
    HRESULT  function(IPropertyBag *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPropertyBag *This)AddRef;
    ULONG  function(IPropertyBag *This)Release;
    HRESULT  function(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)Read;
    HRESULT  function(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar)Write;
}
//C       struct IPropertyBag {
//C         struct IPropertyBagVtbl *lpVtbl;
//C       };
struct IPropertyBag
{
    IPropertyBagVtbl *lpVtbl;
}
//C       HRESULT IPropertyBag_RemoteRead_Proxy(IPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar,IErrorLog *pErrorLog,DWORD varType,IUnknown *pUnkObj);
HRESULT  IPropertyBag_RemoteRead_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj);
//C       void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyBag_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyBag_Write_Proxy(IPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar);
HRESULT  IPropertyBag_Write_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);
//C       void IPropertyBag_Write_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyBag_Write_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumVARIANT_Next_Proxy(IEnumVARIANT *This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched);
HRESULT  IEnumVARIANT_Next_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
//C       HRESULT IEnumVARIANT_Next_Stub(IEnumVARIANT *This,ULONG celt,VARIANT *rgVar,ULONG *pCeltFetched);
HRESULT  IEnumVARIANT_Next_Stub(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);
//C       HRESULT ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This,MEMBERID memid,LCID lcid,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
HRESULT  ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
//C       HRESULT ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This,MEMBERID memid,LCID lcid,DWORD refPtrFlags,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
HRESULT  ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2 *This, MEMBERID memid, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
//C       HRESULT ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This,ULONG *pcUniqueNames,ULONG *pcchUniqueNames);
HRESULT  ITypeLib2_GetLibStatistics_Proxy(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
//C       HRESULT ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This,ULONG *pcUniqueNames,ULONG *pcchUniqueNames);
HRESULT  ITypeLib2_GetLibStatistics_Stub(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);
//C       HRESULT ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This,INT index,LCID lcid,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
HRESULT  ITypeLib2_GetDocumentation2_Proxy(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
//C       HRESULT ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This,INT index,LCID lcid,DWORD refPtrFlags,BSTR *pbstrHelpString,DWORD *pdwHelpStringContext,BSTR *pbstrHelpStringDll);
HRESULT  ITypeLib2_GetDocumentation2_Stub(ITypeLib2 *This, INT index, LCID lcid, DWORD refPtrFlags, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);
//C       HRESULT IPropertyBag_Read_Proxy(IPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar,IErrorLog *pErrorLog);
HRESULT  IPropertyBag_Read_Proxy(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);
//C       HRESULT IPropertyBag_Read_Stub(IPropertyBag *This,LPCOLESTR pszPropName,VARIANT *pVar,IErrorLog *pErrorLog,DWORD varType,IUnknown *pUnkObj);
HRESULT  IPropertyBag_Read_Stub(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog, DWORD varType, IUnknown *pUnkObj);
//C     ULONG VARIANT_UserSize (ULONG *,ULONG,VARIANT *);
ULONG  VARIANT_UserSize(ULONG *, ULONG , VARIANT *);
//C     unsigned char * VARIANT_UserMarshal (ULONG *,unsigned char *,VARIANT *);
ubyte * VARIANT_UserMarshal(ULONG *, ubyte *, VARIANT *);
//C     unsigned char * VARIANT_UserUnmarshal(ULONG *,unsigned char *,VARIANT *);
ubyte * VARIANT_UserUnmarshal(ULONG *, ubyte *, VARIANT *);
//C     void VARIANT_UserFree (ULONG *,VARIANT *);
void  VARIANT_UserFree(ULONG *, VARIANT *);
//C     ULONG BSTR_UserSize (ULONG *,ULONG,BSTR *);
ULONG  BSTR_UserSize(ULONG *, ULONG , BSTR *);
//C     unsigned char * BSTR_UserMarshal (ULONG *,unsigned char *,BSTR *);
ubyte * BSTR_UserMarshal(ULONG *, ubyte *, BSTR *);
//C     unsigned char * BSTR_UserUnmarshal(ULONG *,unsigned char *,BSTR *);
ubyte * BSTR_UserUnmarshal(ULONG *, ubyte *, BSTR *);
//C     void BSTR_UserFree (ULONG *,BSTR *);
void  BSTR_UserFree(ULONG *, BSTR *);
//C     ULONG CLEANLOCALSTORAGE_UserSize (ULONG *,ULONG,CLEANLOCALSTORAGE *);
ULONG  CLEANLOCALSTORAGE_UserSize(ULONG *, ULONG , CLEANLOCALSTORAGE *);
//C     unsigned char * CLEANLOCALSTORAGE_UserMarshal (ULONG *,unsigned char *,CLEANLOCALSTORAGE *);
ubyte * CLEANLOCALSTORAGE_UserMarshal(ULONG *, ubyte *, CLEANLOCALSTORAGE *);
//C     unsigned char * CLEANLOCALSTORAGE_UserUnmarshal(ULONG *,unsigned char *,CLEANLOCALSTORAGE *);
ubyte * CLEANLOCALSTORAGE_UserUnmarshal(ULONG *, ubyte *, CLEANLOCALSTORAGE *);
//C     void CLEANLOCALSTORAGE_UserFree (ULONG *,CLEANLOCALSTORAGE *);
void  CLEANLOCALSTORAGE_UserFree(ULONG *, CLEANLOCALSTORAGE *);
//C     typedef struct IXMLDOMImplementation IXMLDOMImplementation;
//C     typedef struct IXMLDOMNode IXMLDOMNode;
//C     typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
//C     typedef struct IXMLDOMDocument IXMLDOMDocument;
//C     typedef struct IXMLDOMNodeList IXMLDOMNodeList;
//C     typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
//C     typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;
//C     typedef struct IXMLDOMAttribute IXMLDOMAttribute;
//C     typedef struct IXMLDOMElement IXMLDOMElement;
//C     typedef struct IXMLDOMText IXMLDOMText;
//C     typedef struct IXMLDOMComment IXMLDOMComment;
//C     typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
//C     typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
//C     typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
//C     typedef struct IXMLDOMNotation IXMLDOMNotation;
//C     typedef struct IXMLDOMEntity IXMLDOMEntity;
//C     typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
//C     typedef struct IXMLDOMParseError IXMLDOMParseError;
//C     typedef struct IXTLRuntime IXTLRuntime;
//C     typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
//C     typedef struct DOMDocument DOMDocument;
//C     typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;
//C     typedef struct IXMLHttpRequest IXMLHttpRequest;
//C     typedef struct XMLHTTPRequest XMLHTTPRequest;
//C     typedef struct IXMLDSOControl IXMLDSOControl;
//C     typedef struct XMLDSOControl XMLDSOControl;
//C     typedef struct IXMLElementCollection IXMLElementCollection;
//C     typedef struct IXMLDocument IXMLDocument;
//C     typedef struct IXMLDocument2 IXMLDocument2;
//C     typedef struct IXMLElement IXMLElement;
//C     typedef struct IXMLElement2 IXMLElement2;
//C     typedef struct IXMLAttribute IXMLAttribute;
//C     typedef struct IXMLError IXMLError;
//C     typedef struct XMLDocument XMLDocument;
//C       typedef struct _xml_error {
//C         unsigned int _nLine;
//C         BSTR _pchBuf;
//C         unsigned int _cchBuf;
//C         unsigned int _ich;
//C         BSTR _pszFound;
//C         BSTR _pszExpected;
//C         DWORD _reserved1;
//C         DWORD _reserved2;
//C       } XML_ERROR;
struct _xml_error
{
    uint _nLine;
    BSTR _pchBuf;
    uint _cchBuf;
    uint _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
}
alias _xml_error XML_ERROR;
//C       extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;
//C       typedef enum tagDOMNodeType {
//C         NODE_INVALID = 0,NODE_ELEMENT,NODE_ATTRIBUTE,NODE_TEXT,NODE_CDATA_SECTION,
//C         NODE_ENTITY_REFERENCE,NODE_ENTITY,NODE_PROCESSING_INSTRUCTION,NODE_COMMENT,
//C         NODE_DOCUMENT,NODE_DOCUMENT_TYPE,NODE_DOCUMENT_FRAGMENT,NODE_NOTATION
//C       } DOMNodeType;
enum tagDOMNodeType
{
    NODE_INVALID,
    NODE_ELEMENT,
    NODE_ATTRIBUTE,
    NODE_TEXT,
    NODE_CDATA_SECTION,
    NODE_ENTITY_REFERENCE,
    NODE_ENTITY,
    NODE_PROCESSING_INSTRUCTION,
    NODE_COMMENT,
    NODE_DOCUMENT,
    NODE_DOCUMENT_TYPE,
    NODE_DOCUMENT_FRAGMENT,
    NODE_NOTATION,
}
alias tagDOMNodeType DOMNodeType;
//C       typedef enum tagXMLEMEM_TYPE {
//C         XMLELEMTYPE_ELEMENT = 0,XMLELEMTYPE_TEXT,XMLELEMTYPE_COMMENT,XMLELEMTYPE_DOCUMENT,
//C         XMLELEMTYPE_DTD,XMLELEMTYPE_PI,XMLELEMTYPE_OTHER
//C       } XMLELEM_TYPE;
enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT,
    XMLELEMTYPE_TEXT,
    XMLELEMTYPE_COMMENT,
    XMLELEMTYPE_DOCUMENT,
    XMLELEMTYPE_DTD,
    XMLELEMTYPE_PI,
    XMLELEMTYPE_OTHER,
}
alias tagXMLEMEM_TYPE XMLELEM_TYPE;
//C       extern const IID LIBID_MSXML;
extern const IID LIBID_MSXML;
//C       extern const IID IID_IXMLDOMImplementation;
extern const IID IID_IXMLDOMImplementation;
//C       typedef struct IXMLDOMImplementationVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMImplementation *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMImplementation *This);
//C           ULONG ( *Release)(IXMLDOMImplementation *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMImplementation *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMImplementation *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMImplementation *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMImplementation *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *hasFeature)(IXMLDOMImplementation *This,BSTR feature,BSTR version_,VARIANT_BOOL *hasFeature);
//C       } IXMLDOMImplementationVtbl;
struct IXMLDOMImplementationVtbl
{
    HRESULT  function(IXMLDOMImplementation *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMImplementation *This)AddRef;
    ULONG  function(IXMLDOMImplementation *This)Release;
    HRESULT  function(IXMLDOMImplementation *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMImplementation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMImplementation *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMImplementation *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMImplementation *This, BSTR feature, BSTR version_, VARIANT_BOOL *hasFeature)hasFeature;
}
//C       struct IXMLDOMImplementation {
//C         struct IXMLDOMImplementationVtbl *lpVtbl;
//C       };
struct IXMLDOMImplementation
{
    IXMLDOMImplementationVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMImplementation_hasFeature_Proxy(IXMLDOMImplementation *This,BSTR feature,BSTR version_,VARIANT_BOOL *hasFeature);
HRESULT  IXMLDOMImplementation_hasFeature_Proxy(IXMLDOMImplementation *This, BSTR feature, BSTR version_, VARIANT_BOOL *hasFeature);
//C       void IXMLDOMImplementation_hasFeature_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMImplementation_hasFeature_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMNode;
extern const IID IID_IXMLDOMNode;
//C       typedef struct IXMLDOMNodeVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMNode *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMNode *This);
//C           ULONG ( *Release)(IXMLDOMNode *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMNode *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMNode *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMNode *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMNode *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMNode *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMNode *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMNode *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMNode *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMNode *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMNode *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMNode *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMNode *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMNode *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMNode *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMNode *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMNode *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMNode *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMNode *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMNode *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMNode *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMNode *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMNode *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMNode *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMNode *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMNode *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMNode *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMNode *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMNode *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMNode *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMNode *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMNode *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMNode *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMNode *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMNode *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMNode *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMNode *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMNode *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMNode *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C       } IXMLDOMNodeVtbl;
struct IXMLDOMNodeVtbl
{
    HRESULT  function(IXMLDOMNode *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMNode *This)AddRef;
    ULONG  function(IXMLDOMNode *This)Release;
    HRESULT  function(IXMLDOMNode *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMNode *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMNode *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMNode *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMNode *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMNode *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMNode *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMNode *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMNode *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMNode *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMNode *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMNode *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMNode *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMNode *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMNode *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMNode *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMNode *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMNode *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMNode *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMNode *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMNode *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMNode *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMNode *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMNode *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMNode *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
}
//C       struct IXMLDOMNode {
//C         struct IXMLDOMNodeVtbl *lpVtbl;
//C       };
struct IXMLDOMNode
{
    IXMLDOMNodeVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMNode_get_nodeName_Proxy(IXMLDOMNode *This,BSTR *name);
HRESULT  IXMLDOMNode_get_nodeName_Proxy(IXMLDOMNode *This, BSTR *name);
//C       void IXMLDOMNode_get_nodeName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_nodeName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_nodeValue_Proxy(IXMLDOMNode *This,VARIANT *value);
HRESULT  IXMLDOMNode_get_nodeValue_Proxy(IXMLDOMNode *This, VARIANT *value);
//C       void IXMLDOMNode_get_nodeValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_nodeValue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_put_nodeValue_Proxy(IXMLDOMNode *This,VARIANT value);
HRESULT  IXMLDOMNode_put_nodeValue_Proxy(IXMLDOMNode *This, VARIANT value);
//C       void IXMLDOMNode_put_nodeValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_put_nodeValue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_nodeType_Proxy(IXMLDOMNode *This,DOMNodeType *type);
HRESULT  IXMLDOMNode_get_nodeType_Proxy(IXMLDOMNode *This, DOMNodeType *type);
//C       void IXMLDOMNode_get_nodeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_nodeType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_parentNode_Proxy(IXMLDOMNode *This,IXMLDOMNode **parent);
HRESULT  IXMLDOMNode_get_parentNode_Proxy(IXMLDOMNode *This, IXMLDOMNode **parent);
//C       void IXMLDOMNode_get_parentNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_parentNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_childNodes_Proxy(IXMLDOMNode *This,IXMLDOMNodeList **childList);
HRESULT  IXMLDOMNode_get_childNodes_Proxy(IXMLDOMNode *This, IXMLDOMNodeList **childList);
//C       void IXMLDOMNode_get_childNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_childNodes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_firstChild_Proxy(IXMLDOMNode *This,IXMLDOMNode **firstChild);
HRESULT  IXMLDOMNode_get_firstChild_Proxy(IXMLDOMNode *This, IXMLDOMNode **firstChild);
//C       void IXMLDOMNode_get_firstChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_firstChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_lastChild_Proxy(IXMLDOMNode *This,IXMLDOMNode **lastChild);
HRESULT  IXMLDOMNode_get_lastChild_Proxy(IXMLDOMNode *This, IXMLDOMNode **lastChild);
//C       void IXMLDOMNode_get_lastChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_lastChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_previousSibling_Proxy(IXMLDOMNode *This,IXMLDOMNode **previousSibling);
HRESULT  IXMLDOMNode_get_previousSibling_Proxy(IXMLDOMNode *This, IXMLDOMNode **previousSibling);
//C       void IXMLDOMNode_get_previousSibling_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_previousSibling_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_nextSibling_Proxy(IXMLDOMNode *This,IXMLDOMNode **nextSibling);
HRESULT  IXMLDOMNode_get_nextSibling_Proxy(IXMLDOMNode *This, IXMLDOMNode **nextSibling);
//C       void IXMLDOMNode_get_nextSibling_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_nextSibling_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_attributes_Proxy(IXMLDOMNode *This,IXMLDOMNamedNodeMap **attributeMap);
HRESULT  IXMLDOMNode_get_attributes_Proxy(IXMLDOMNode *This, IXMLDOMNamedNodeMap **attributeMap);
//C       void IXMLDOMNode_get_attributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_attributes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_insertBefore_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
HRESULT  IXMLDOMNode_insertBefore_Proxy(IXMLDOMNode *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);
//C       void IXMLDOMNode_insertBefore_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_insertBefore_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_replaceChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
HRESULT  IXMLDOMNode_replaceChild_Proxy(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);
//C       void IXMLDOMNode_replaceChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_replaceChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_removeChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
HRESULT  IXMLDOMNode_removeChild_Proxy(IXMLDOMNode *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);
//C       void IXMLDOMNode_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_removeChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_appendChild_Proxy(IXMLDOMNode *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
HRESULT  IXMLDOMNode_appendChild_Proxy(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);
//C       void IXMLDOMNode_appendChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_appendChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_hasChildNodes_Proxy(IXMLDOMNode *This,VARIANT_BOOL *hasChild);
HRESULT  IXMLDOMNode_hasChildNodes_Proxy(IXMLDOMNode *This, VARIANT_BOOL *hasChild);
//C       void IXMLDOMNode_hasChildNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_hasChildNodes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_ownerDocument_Proxy(IXMLDOMNode *This,IXMLDOMDocument **DOMDocument);
HRESULT  IXMLDOMNode_get_ownerDocument_Proxy(IXMLDOMNode *This, IXMLDOMDocument **DOMDocument);
//C       void IXMLDOMNode_get_ownerDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_ownerDocument_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_cloneNode_Proxy(IXMLDOMNode *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
HRESULT  IXMLDOMNode_cloneNode_Proxy(IXMLDOMNode *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);
//C       void IXMLDOMNode_cloneNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_cloneNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_nodeTypeString_Proxy(IXMLDOMNode *This,BSTR *nodeType);
HRESULT  IXMLDOMNode_get_nodeTypeString_Proxy(IXMLDOMNode *This, BSTR *nodeType);
//C       void IXMLDOMNode_get_nodeTypeString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_nodeTypeString_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_text_Proxy(IXMLDOMNode *This,BSTR *text);
HRESULT  IXMLDOMNode_get_text_Proxy(IXMLDOMNode *This, BSTR *text);
//C       void IXMLDOMNode_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_text_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_put_text_Proxy(IXMLDOMNode *This,BSTR text);
HRESULT  IXMLDOMNode_put_text_Proxy(IXMLDOMNode *This, BSTR text);
//C       void IXMLDOMNode_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_put_text_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_specified_Proxy(IXMLDOMNode *This,VARIANT_BOOL *isSpecified);
HRESULT  IXMLDOMNode_get_specified_Proxy(IXMLDOMNode *This, VARIANT_BOOL *isSpecified);
//C       void IXMLDOMNode_get_specified_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_specified_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_definition_Proxy(IXMLDOMNode *This,IXMLDOMNode **definitionNode);
HRESULT  IXMLDOMNode_get_definition_Proxy(IXMLDOMNode *This, IXMLDOMNode **definitionNode);
//C       void IXMLDOMNode_get_definition_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_definition_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_nodeTypedValue_Proxy(IXMLDOMNode *This,VARIANT *typedValue);
HRESULT  IXMLDOMNode_get_nodeTypedValue_Proxy(IXMLDOMNode *This, VARIANT *typedValue);
//C       void IXMLDOMNode_get_nodeTypedValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_nodeTypedValue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_put_nodeTypedValue_Proxy(IXMLDOMNode *This,VARIANT typedValue);
HRESULT  IXMLDOMNode_put_nodeTypedValue_Proxy(IXMLDOMNode *This, VARIANT typedValue);
//C       void IXMLDOMNode_put_nodeTypedValue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_put_nodeTypedValue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_dataType_Proxy(IXMLDOMNode *This,VARIANT *dataTypeName);
HRESULT  IXMLDOMNode_get_dataType_Proxy(IXMLDOMNode *This, VARIANT *dataTypeName);
//C       void IXMLDOMNode_get_dataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_dataType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_put_dataType_Proxy(IXMLDOMNode *This,BSTR dataTypeName);
HRESULT  IXMLDOMNode_put_dataType_Proxy(IXMLDOMNode *This, BSTR dataTypeName);
//C       void IXMLDOMNode_put_dataType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_put_dataType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_xml_Proxy(IXMLDOMNode *This,BSTR *xmlString);
HRESULT  IXMLDOMNode_get_xml_Proxy(IXMLDOMNode *This, BSTR *xmlString);
//C       void IXMLDOMNode_get_xml_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_xml_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_transformNode_Proxy(IXMLDOMNode *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
HRESULT  IXMLDOMNode_transformNode_Proxy(IXMLDOMNode *This, IXMLDOMNode *stylesheet, BSTR *xmlString);
//C       void IXMLDOMNode_transformNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_transformNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_selectNodes_Proxy(IXMLDOMNode *This,BSTR queryString,IXMLDOMNodeList **resultList);
HRESULT  IXMLDOMNode_selectNodes_Proxy(IXMLDOMNode *This, BSTR queryString, IXMLDOMNodeList **resultList);
//C       void IXMLDOMNode_selectNodes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_selectNodes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_selectSingleNode_Proxy(IXMLDOMNode *This,BSTR queryString,IXMLDOMNode **resultNode);
HRESULT  IXMLDOMNode_selectSingleNode_Proxy(IXMLDOMNode *This, BSTR queryString, IXMLDOMNode **resultNode);
//C       void IXMLDOMNode_selectSingleNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_selectSingleNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_parsed_Proxy(IXMLDOMNode *This,VARIANT_BOOL *isParsed);
HRESULT  IXMLDOMNode_get_parsed_Proxy(IXMLDOMNode *This, VARIANT_BOOL *isParsed);
//C       void IXMLDOMNode_get_parsed_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_parsed_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_namespaceURI_Proxy(IXMLDOMNode *This,BSTR *namespaceURI);
HRESULT  IXMLDOMNode_get_namespaceURI_Proxy(IXMLDOMNode *This, BSTR *namespaceURI);
//C       void IXMLDOMNode_get_namespaceURI_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_namespaceURI_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_prefix_Proxy(IXMLDOMNode *This,BSTR *prefixString);
HRESULT  IXMLDOMNode_get_prefix_Proxy(IXMLDOMNode *This, BSTR *prefixString);
//C       void IXMLDOMNode_get_prefix_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_prefix_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_get_baseName_Proxy(IXMLDOMNode *This,BSTR *nameString);
HRESULT  IXMLDOMNode_get_baseName_Proxy(IXMLDOMNode *This, BSTR *nameString);
//C       void IXMLDOMNode_get_baseName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_get_baseName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNode_transformNodeToObject_Proxy(IXMLDOMNode *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
HRESULT  IXMLDOMNode_transformNodeToObject_Proxy(IXMLDOMNode *This, IXMLDOMNode *stylesheet, VARIANT outputObject);
//C       void IXMLDOMNode_transformNodeToObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNode_transformNodeToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMDocumentFragment;
extern const IID IID_IXMLDOMDocumentFragment;
//C       typedef struct IXMLDOMDocumentFragmentVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMDocumentFragment *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMDocumentFragment *This);
//C           ULONG ( *Release)(IXMLDOMDocumentFragment *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentFragment *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMDocumentFragment *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentFragment *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMDocumentFragment *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMDocumentFragment *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMDocumentFragment *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMDocumentFragment *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMDocumentFragment *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMDocumentFragment *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMDocumentFragment *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMDocumentFragment *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMDocumentFragment *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMDocumentFragment *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMDocumentFragment *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMDocumentFragment *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMDocumentFragment *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMDocumentFragment *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMDocumentFragment *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentFragment *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMDocumentFragment *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMDocumentFragment *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMDocumentFragment *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMDocumentFragment *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentFragment *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentFragment *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMDocumentFragment *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMDocumentFragment *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMDocumentFragment *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMDocumentFragment *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMDocumentFragment *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMDocumentFragment *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMDocumentFragment *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMDocumentFragment *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMDocumentFragment *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMDocumentFragment *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMDocumentFragment *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C       } IXMLDOMDocumentFragmentVtbl;
struct IXMLDOMDocumentFragmentVtbl
{
    HRESULT  function(IXMLDOMDocumentFragment *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMDocumentFragment *This)AddRef;
    ULONG  function(IXMLDOMDocumentFragment *This)Release;
    HRESULT  function(IXMLDOMDocumentFragment *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMDocumentFragment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMDocumentFragment *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMDocumentFragment *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMDocumentFragment *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMDocumentFragment *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
}
//C       struct IXMLDOMDocumentFragment {
//C         struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
//C       };
struct IXMLDOMDocumentFragment
{
    IXMLDOMDocumentFragmentVtbl *lpVtbl;
}
//C       extern const IID IID_IXMLDOMDocument;
extern const IID IID_IXMLDOMDocument;
//C       typedef struct IXMLDOMDocumentVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMDocument *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMDocument *This);
//C           ULONG ( *Release)(IXMLDOMDocument *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMDocument *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMDocument *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMDocument *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMDocument *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMDocument *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMDocument *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMDocument *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMDocument *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMDocument *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMDocument *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMDocument *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMDocument *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMDocument *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMDocument *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMDocument *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMDocument *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMDocument *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMDocument *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMDocument *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMDocument *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMDocument *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMDocument *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMDocument *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMDocument *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMDocument *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMDocument *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMDocument *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMDocument *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMDocument *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMDocument *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMDocument *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMDocument *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMDocument *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMDocument *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMDocument *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMDocument *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMDocument *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMDocument *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMDocument *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMDocument *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_doctype)(IXMLDOMDocument *This,IXMLDOMDocumentType **documentType);
//C           HRESULT ( *get_implementation)(IXMLDOMDocument *This,IXMLDOMImplementation **impl);
//C           HRESULT ( *get_documentElement)(IXMLDOMDocument *This,IXMLDOMElement **DOMElement);
//C           HRESULT ( *putref_documentElement)(IXMLDOMDocument *This,IXMLDOMElement *DOMElement);
//C           HRESULT ( *createElement)(IXMLDOMDocument *This,BSTR tagName,IXMLDOMElement **element);
//C           HRESULT ( *createDocumentFragment)(IXMLDOMDocument *This,IXMLDOMDocumentFragment **docFrag);
//C           HRESULT ( *createTextNode)(IXMLDOMDocument *This,BSTR data,IXMLDOMText **text);
//C           HRESULT ( *createComment)(IXMLDOMDocument *This,BSTR data,IXMLDOMComment **comment);
//C           HRESULT ( *createCDATASection)(IXMLDOMDocument *This,BSTR data,IXMLDOMCDATASection **cdata);
//C           HRESULT ( *createProcessingInstruction)(IXMLDOMDocument *This,BSTR target,BSTR data,IXMLDOMProcessingInstruction **pi);
//C           HRESULT ( *createAttribute)(IXMLDOMDocument *This,BSTR name,IXMLDOMAttribute **attribute);
//C           HRESULT ( *createEntityReference)(IXMLDOMDocument *This,BSTR name,IXMLDOMEntityReference **entityRef);
//C           HRESULT ( *getElementsByTagName)(IXMLDOMDocument *This,BSTR tagName,IXMLDOMNodeList **resultList);
//C           HRESULT ( *createNode)(IXMLDOMDocument *This,VARIANT Type,BSTR name,BSTR namespaceURI,IXMLDOMNode **node);
//C           HRESULT ( *nodeFromID)(IXMLDOMDocument *This,BSTR idString,IXMLDOMNode **node);
//C           HRESULT ( *load)(IXMLDOMDocument *This,VARIANT xmlSource,VARIANT_BOOL *isSuccessful);
//C           HRESULT ( *get_readyState)(IXMLDOMDocument *This,LONG *value);
//C           HRESULT ( *get_parseError)(IXMLDOMDocument *This,IXMLDOMParseError **errorObj);
//C           HRESULT ( *get_url)(IXMLDOMDocument *This,BSTR *urlString);
//C           HRESULT ( *get_async)(IXMLDOMDocument *This,VARIANT_BOOL *isAsync);
//C           HRESULT ( *put_async)(IXMLDOMDocument *This,VARIANT_BOOL isAsync);
//C           HRESULT ( *abort)(IXMLDOMDocument *This);
//C           HRESULT ( *loadXML)(IXMLDOMDocument *This,BSTR bstrXML,VARIANT_BOOL *isSuccessful);
//C           HRESULT ( *save)(IXMLDOMDocument *This,VARIANT destination);
//C           HRESULT ( *get_validateOnParse)(IXMLDOMDocument *This,VARIANT_BOOL *isValidating);
//C           HRESULT ( *put_validateOnParse)(IXMLDOMDocument *This,VARIANT_BOOL isValidating);
//C           HRESULT ( *get_resolveExternals)(IXMLDOMDocument *This,VARIANT_BOOL *isResolving);
//C           HRESULT ( *put_resolveExternals)(IXMLDOMDocument *This,VARIANT_BOOL isResolving);
//C           HRESULT ( *get_preserveWhiteSpace)(IXMLDOMDocument *This,VARIANT_BOOL *isPreserving);
//C           HRESULT ( *put_preserveWhiteSpace)(IXMLDOMDocument *This,VARIANT_BOOL isPreserving);
//C           HRESULT ( *put_onreadystatechange)(IXMLDOMDocument *This,VARIANT readystatechangeSink);
//C           HRESULT ( *put_ondataavailable)(IXMLDOMDocument *This,VARIANT ondataavailableSink);
//C           HRESULT ( *put_ontransformnode)(IXMLDOMDocument *This,VARIANT ontransformnodeSink);
//C       } IXMLDOMDocumentVtbl;
struct IXMLDOMDocumentVtbl
{
    HRESULT  function(IXMLDOMDocument *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMDocument *This)AddRef;
    ULONG  function(IXMLDOMDocument *This)Release;
    HRESULT  function(IXMLDOMDocument *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMDocument *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMDocument *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMDocument *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMDocument *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMDocument *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMDocument *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMDocument *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMDocument *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMDocument *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMDocument *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMDocument *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMDocument *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMDocument *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMDocument *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMDocument *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMDocument *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMDocument *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMDocumentType **documentType)get_doctype;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMImplementation **impl)get_implementation;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMElement **DOMElement)get_documentElement;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMElement *DOMElement)putref_documentElement;
    HRESULT  function(IXMLDOMDocument *This, BSTR tagName, IXMLDOMElement **element)createElement;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMDocumentFragment **docFrag)createDocumentFragment;
    HRESULT  function(IXMLDOMDocument *This, BSTR data, IXMLDOMText **text)createTextNode;
    HRESULT  function(IXMLDOMDocument *This, BSTR data, IXMLDOMComment **comment)createComment;
    HRESULT  function(IXMLDOMDocument *This, BSTR data, IXMLDOMCDATASection **cdata)createCDATASection;
    HRESULT  function(IXMLDOMDocument *This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi)createProcessingInstruction;
    HRESULT  function(IXMLDOMDocument *This, BSTR name, IXMLDOMAttribute **attribute)createAttribute;
    HRESULT  function(IXMLDOMDocument *This, BSTR name, IXMLDOMEntityReference **entityRef)createEntityReference;
    HRESULT  function(IXMLDOMDocument *This, BSTR tagName, IXMLDOMNodeList **resultList)getElementsByTagName;
    HRESULT  function(IXMLDOMDocument *This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node)createNode;
    HRESULT  function(IXMLDOMDocument *This, BSTR idString, IXMLDOMNode **node)nodeFromID;
    HRESULT  function(IXMLDOMDocument *This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful)load;
    HRESULT  function(IXMLDOMDocument *This, LONG *value)get_readyState;
    HRESULT  function(IXMLDOMDocument *This, IXMLDOMParseError **errorObj)get_parseError;
    HRESULT  function(IXMLDOMDocument *This, BSTR *urlString)get_url;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *isAsync)get_async;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL isAsync)put_async;
    HRESULT  function(IXMLDOMDocument *This)abort;
    HRESULT  function(IXMLDOMDocument *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful)loadXML;
    HRESULT  function(IXMLDOMDocument *This, VARIANT destination)save;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *isValidating)get_validateOnParse;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL isValidating)put_validateOnParse;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *isResolving)get_resolveExternals;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL isResolving)put_resolveExternals;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL *isPreserving)get_preserveWhiteSpace;
    HRESULT  function(IXMLDOMDocument *This, VARIANT_BOOL isPreserving)put_preserveWhiteSpace;
    HRESULT  function(IXMLDOMDocument *This, VARIANT readystatechangeSink)put_onreadystatechange;
    HRESULT  function(IXMLDOMDocument *This, VARIANT ondataavailableSink)put_ondataavailable;
    HRESULT  function(IXMLDOMDocument *This, VARIANT ontransformnodeSink)put_ontransformnode;
}
//C       struct IXMLDOMDocument {
//C         struct IXMLDOMDocumentVtbl *lpVtbl;
//C       };
struct IXMLDOMDocument
{
    IXMLDOMDocumentVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMDocument_get_doctype_Proxy(IXMLDOMDocument *This,IXMLDOMDocumentType **documentType);
HRESULT  IXMLDOMDocument_get_doctype_Proxy(IXMLDOMDocument *This, IXMLDOMDocumentType **documentType);
//C       void IXMLDOMDocument_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_doctype_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_implementation_Proxy(IXMLDOMDocument *This,IXMLDOMImplementation **impl);
HRESULT  IXMLDOMDocument_get_implementation_Proxy(IXMLDOMDocument *This, IXMLDOMImplementation **impl);
//C       void IXMLDOMDocument_get_implementation_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_implementation_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_documentElement_Proxy(IXMLDOMDocument *This,IXMLDOMElement **DOMElement);
HRESULT  IXMLDOMDocument_get_documentElement_Proxy(IXMLDOMDocument *This, IXMLDOMElement **DOMElement);
//C       void IXMLDOMDocument_get_documentElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_documentElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_putref_documentElement_Proxy(IXMLDOMDocument *This,IXMLDOMElement *DOMElement);
HRESULT  IXMLDOMDocument_putref_documentElement_Proxy(IXMLDOMDocument *This, IXMLDOMElement *DOMElement);
//C       void IXMLDOMDocument_putref_documentElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_putref_documentElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createElement_Proxy(IXMLDOMDocument *This,BSTR tagName,IXMLDOMElement **element);
HRESULT  IXMLDOMDocument_createElement_Proxy(IXMLDOMDocument *This, BSTR tagName, IXMLDOMElement **element);
//C       void IXMLDOMDocument_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createDocumentFragment_Proxy(IXMLDOMDocument *This,IXMLDOMDocumentFragment **docFrag);
HRESULT  IXMLDOMDocument_createDocumentFragment_Proxy(IXMLDOMDocument *This, IXMLDOMDocumentFragment **docFrag);
//C       void IXMLDOMDocument_createDocumentFragment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createDocumentFragment_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createTextNode_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMText **text);
HRESULT  IXMLDOMDocument_createTextNode_Proxy(IXMLDOMDocument *This, BSTR data, IXMLDOMText **text);
//C       void IXMLDOMDocument_createTextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createTextNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createComment_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMComment **comment);
HRESULT  IXMLDOMDocument_createComment_Proxy(IXMLDOMDocument *This, BSTR data, IXMLDOMComment **comment);
//C       void IXMLDOMDocument_createComment_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createComment_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createCDATASection_Proxy(IXMLDOMDocument *This,BSTR data,IXMLDOMCDATASection **cdata);
HRESULT  IXMLDOMDocument_createCDATASection_Proxy(IXMLDOMDocument *This, BSTR data, IXMLDOMCDATASection **cdata);
//C       void IXMLDOMDocument_createCDATASection_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createCDATASection_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createProcessingInstruction_Proxy(IXMLDOMDocument *This,BSTR target,BSTR data,IXMLDOMProcessingInstruction **pi);
HRESULT  IXMLDOMDocument_createProcessingInstruction_Proxy(IXMLDOMDocument *This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi);
//C       void IXMLDOMDocument_createProcessingInstruction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createProcessingInstruction_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createAttribute_Proxy(IXMLDOMDocument *This,BSTR name,IXMLDOMAttribute **attribute);
HRESULT  IXMLDOMDocument_createAttribute_Proxy(IXMLDOMDocument *This, BSTR name, IXMLDOMAttribute **attribute);
//C       void IXMLDOMDocument_createAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createEntityReference_Proxy(IXMLDOMDocument *This,BSTR name,IXMLDOMEntityReference **entityRef);
HRESULT  IXMLDOMDocument_createEntityReference_Proxy(IXMLDOMDocument *This, BSTR name, IXMLDOMEntityReference **entityRef);
//C       void IXMLDOMDocument_createEntityReference_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createEntityReference_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_getElementsByTagName_Proxy(IXMLDOMDocument *This,BSTR tagName,IXMLDOMNodeList **resultList);
HRESULT  IXMLDOMDocument_getElementsByTagName_Proxy(IXMLDOMDocument *This, BSTR tagName, IXMLDOMNodeList **resultList);
//C       void IXMLDOMDocument_getElementsByTagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_getElementsByTagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_createNode_Proxy(IXMLDOMDocument *This,VARIANT Type,BSTR name,BSTR namespaceURI,IXMLDOMNode **node);
HRESULT  IXMLDOMDocument_createNode_Proxy(IXMLDOMDocument *This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node);
//C       void IXMLDOMDocument_createNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_createNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_nodeFromID_Proxy(IXMLDOMDocument *This,BSTR idString,IXMLDOMNode **node);
HRESULT  IXMLDOMDocument_nodeFromID_Proxy(IXMLDOMDocument *This, BSTR idString, IXMLDOMNode **node);
//C       void IXMLDOMDocument_nodeFromID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_nodeFromID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_load_Proxy(IXMLDOMDocument *This,VARIANT xmlSource,VARIANT_BOOL *isSuccessful);
HRESULT  IXMLDOMDocument_load_Proxy(IXMLDOMDocument *This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful);
//C       void IXMLDOMDocument_load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_load_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_readyState_Proxy(IXMLDOMDocument *This,LONG *value);
HRESULT  IXMLDOMDocument_get_readyState_Proxy(IXMLDOMDocument *This, LONG *value);
//C       void IXMLDOMDocument_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_readyState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_parseError_Proxy(IXMLDOMDocument *This,IXMLDOMParseError **errorObj);
HRESULT  IXMLDOMDocument_get_parseError_Proxy(IXMLDOMDocument *This, IXMLDOMParseError **errorObj);
//C       void IXMLDOMDocument_get_parseError_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_parseError_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_url_Proxy(IXMLDOMDocument *This,BSTR *urlString);
HRESULT  IXMLDOMDocument_get_url_Proxy(IXMLDOMDocument *This, BSTR *urlString);
//C       void IXMLDOMDocument_get_url_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_url_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_async_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isAsync);
HRESULT  IXMLDOMDocument_get_async_Proxy(IXMLDOMDocument *This, VARIANT_BOOL *isAsync);
//C       void IXMLDOMDocument_get_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_async_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_async_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isAsync);
HRESULT  IXMLDOMDocument_put_async_Proxy(IXMLDOMDocument *This, VARIANT_BOOL isAsync);
//C       void IXMLDOMDocument_put_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_async_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_abort_Proxy(IXMLDOMDocument *This);
HRESULT  IXMLDOMDocument_abort_Proxy(IXMLDOMDocument *This);
//C       void IXMLDOMDocument_abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_abort_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_loadXML_Proxy(IXMLDOMDocument *This,BSTR bstrXML,VARIANT_BOOL *isSuccessful);
HRESULT  IXMLDOMDocument_loadXML_Proxy(IXMLDOMDocument *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);
//C       void IXMLDOMDocument_loadXML_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_loadXML_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_save_Proxy(IXMLDOMDocument *This,VARIANT destination);
HRESULT  IXMLDOMDocument_save_Proxy(IXMLDOMDocument *This, VARIANT destination);
//C       void IXMLDOMDocument_save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_save_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_validateOnParse_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isValidating);
HRESULT  IXMLDOMDocument_get_validateOnParse_Proxy(IXMLDOMDocument *This, VARIANT_BOOL *isValidating);
//C       void IXMLDOMDocument_get_validateOnParse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_validateOnParse_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_validateOnParse_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isValidating);
HRESULT  IXMLDOMDocument_put_validateOnParse_Proxy(IXMLDOMDocument *This, VARIANT_BOOL isValidating);
//C       void IXMLDOMDocument_put_validateOnParse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_validateOnParse_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_resolveExternals_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isResolving);
HRESULT  IXMLDOMDocument_get_resolveExternals_Proxy(IXMLDOMDocument *This, VARIANT_BOOL *isResolving);
//C       void IXMLDOMDocument_get_resolveExternals_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_resolveExternals_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_resolveExternals_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isResolving);
HRESULT  IXMLDOMDocument_put_resolveExternals_Proxy(IXMLDOMDocument *This, VARIANT_BOOL isResolving);
//C       void IXMLDOMDocument_put_resolveExternals_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_resolveExternals_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_get_preserveWhiteSpace_Proxy(IXMLDOMDocument *This,VARIANT_BOOL *isPreserving);
HRESULT  IXMLDOMDocument_get_preserveWhiteSpace_Proxy(IXMLDOMDocument *This, VARIANT_BOOL *isPreserving);
//C       void IXMLDOMDocument_get_preserveWhiteSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_get_preserveWhiteSpace_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_preserveWhiteSpace_Proxy(IXMLDOMDocument *This,VARIANT_BOOL isPreserving);
HRESULT  IXMLDOMDocument_put_preserveWhiteSpace_Proxy(IXMLDOMDocument *This, VARIANT_BOOL isPreserving);
//C       void IXMLDOMDocument_put_preserveWhiteSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_preserveWhiteSpace_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_onreadystatechange_Proxy(IXMLDOMDocument *This,VARIANT readystatechangeSink);
HRESULT  IXMLDOMDocument_put_onreadystatechange_Proxy(IXMLDOMDocument *This, VARIANT readystatechangeSink);
//C       void IXMLDOMDocument_put_onreadystatechange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_onreadystatechange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_ondataavailable_Proxy(IXMLDOMDocument *This,VARIANT ondataavailableSink);
HRESULT  IXMLDOMDocument_put_ondataavailable_Proxy(IXMLDOMDocument *This, VARIANT ondataavailableSink);
//C       void IXMLDOMDocument_put_ondataavailable_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_ondataavailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocument_put_ontransformnode_Proxy(IXMLDOMDocument *This,VARIANT ontransformnodeSink);
HRESULT  IXMLDOMDocument_put_ontransformnode_Proxy(IXMLDOMDocument *This, VARIANT ontransformnodeSink);
//C       void IXMLDOMDocument_put_ontransformnode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocument_put_ontransformnode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMNodeList;
extern const IID IID_IXMLDOMNodeList;
//C       typedef struct IXMLDOMNodeListVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMNodeList *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMNodeList *This);
//C           ULONG ( *Release)(IXMLDOMNodeList *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMNodeList *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMNodeList *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMNodeList *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMNodeList *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_item)(IXMLDOMNodeList *This,LONG index,IXMLDOMNode **listItem);
//C           HRESULT ( *get_length)(IXMLDOMNodeList *This,LONG *listLength);
//C           HRESULT ( *nextNode)(IXMLDOMNodeList *This,IXMLDOMNode **nextItem);
//C           HRESULT ( *reset)(IXMLDOMNodeList *This);
//C           HRESULT ( *get__newEnum)(IXMLDOMNodeList *This,IUnknown **ppUnk);
//C       } IXMLDOMNodeListVtbl;
struct IXMLDOMNodeListVtbl
{
    HRESULT  function(IXMLDOMNodeList *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMNodeList *This)AddRef;
    ULONG  function(IXMLDOMNodeList *This)Release;
    HRESULT  function(IXMLDOMNodeList *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMNodeList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMNodeList *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMNodeList *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMNodeList *This, LONG index, IXMLDOMNode **listItem)get_item;
    HRESULT  function(IXMLDOMNodeList *This, LONG *listLength)get_length;
    HRESULT  function(IXMLDOMNodeList *This, IXMLDOMNode **nextItem)nextNode;
    HRESULT  function(IXMLDOMNodeList *This)reset;
    HRESULT  function(IXMLDOMNodeList *This, IUnknown **ppUnk)get__newEnum;
}
//C       struct IXMLDOMNodeList {
//C         struct IXMLDOMNodeListVtbl *lpVtbl;
//C       };
struct IXMLDOMNodeList
{
    IXMLDOMNodeListVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMNodeList_get_item_Proxy(IXMLDOMNodeList *This,LONG index,IXMLDOMNode **listItem);
HRESULT  IXMLDOMNodeList_get_item_Proxy(IXMLDOMNodeList *This, LONG index, IXMLDOMNode **listItem);
//C       void IXMLDOMNodeList_get_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNodeList_get_item_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNodeList_get_length_Proxy(IXMLDOMNodeList *This,LONG *listLength);
HRESULT  IXMLDOMNodeList_get_length_Proxy(IXMLDOMNodeList *This, LONG *listLength);
//C       void IXMLDOMNodeList_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNodeList_get_length_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNodeList_nextNode_Proxy(IXMLDOMNodeList *This,IXMLDOMNode **nextItem);
HRESULT  IXMLDOMNodeList_nextNode_Proxy(IXMLDOMNodeList *This, IXMLDOMNode **nextItem);
//C       void IXMLDOMNodeList_nextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNodeList_nextNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNodeList_reset_Proxy(IXMLDOMNodeList *This);
HRESULT  IXMLDOMNodeList_reset_Proxy(IXMLDOMNodeList *This);
//C       void IXMLDOMNodeList_reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNodeList_reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNodeList_get__newEnum_Proxy(IXMLDOMNodeList *This,IUnknown **ppUnk);
HRESULT  IXMLDOMNodeList_get__newEnum_Proxy(IXMLDOMNodeList *This, IUnknown **ppUnk);
//C       void IXMLDOMNodeList_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNodeList_get__newEnum_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMNamedNodeMap;
extern const IID IID_IXMLDOMNamedNodeMap;
//C       typedef struct IXMLDOMNamedNodeMapVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMNamedNodeMap *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMNamedNodeMap *This);
//C           ULONG ( *Release)(IXMLDOMNamedNodeMap *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMNamedNodeMap *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMNamedNodeMap *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMNamedNodeMap *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMNamedNodeMap *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *getNamedItem)(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
//C           HRESULT ( *setNamedItem)(IXMLDOMNamedNodeMap *This,IXMLDOMNode *newItem,IXMLDOMNode **nameItem);
//C           HRESULT ( *removeNamedItem)(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
//C           HRESULT ( *get_item)(IXMLDOMNamedNodeMap *This,LONG index,IXMLDOMNode **listItem);
//C           HRESULT ( *get_length)(IXMLDOMNamedNodeMap *This,LONG *listLength);
//C           HRESULT ( *getQualifiedItem)(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
//C           HRESULT ( *removeQualifiedItem)(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
//C           HRESULT ( *nextNode)(IXMLDOMNamedNodeMap *This,IXMLDOMNode **nextItem);
//C           HRESULT ( *reset)(IXMLDOMNamedNodeMap *This);
//C           HRESULT ( *get__newEnum)(IXMLDOMNamedNodeMap *This,IUnknown **ppUnk);
//C       } IXMLDOMNamedNodeMapVtbl;
struct IXMLDOMNamedNodeMapVtbl
{
    HRESULT  function(IXMLDOMNamedNodeMap *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMNamedNodeMap *This)AddRef;
    ULONG  function(IXMLDOMNamedNodeMap *This)Release;
    HRESULT  function(IXMLDOMNamedNodeMap *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMNamedNodeMap *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMNamedNodeMap *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMNamedNodeMap *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem)getNamedItem;
    HRESULT  function(IXMLDOMNamedNodeMap *This, IXMLDOMNode *newItem, IXMLDOMNode **nameItem)setNamedItem;
    HRESULT  function(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem)removeNamedItem;
    HRESULT  function(IXMLDOMNamedNodeMap *This, LONG index, IXMLDOMNode **listItem)get_item;
    HRESULT  function(IXMLDOMNamedNodeMap *This, LONG *listLength)get_length;
    HRESULT  function(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem)getQualifiedItem;
    HRESULT  function(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem)removeQualifiedItem;
    HRESULT  function(IXMLDOMNamedNodeMap *This, IXMLDOMNode **nextItem)nextNode;
    HRESULT  function(IXMLDOMNamedNodeMap *This)reset;
    HRESULT  function(IXMLDOMNamedNodeMap *This, IUnknown **ppUnk)get__newEnum;
}
//C       struct IXMLDOMNamedNodeMap {
//C         struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
//C       };
struct IXMLDOMNamedNodeMap
{
    IXMLDOMNamedNodeMapVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMNamedNodeMap_getNamedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
HRESULT  IXMLDOMNamedNodeMap_getNamedItem_Proxy(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);
//C       void IXMLDOMNamedNodeMap_getNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_getNamedItem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_setNamedItem_Proxy(IXMLDOMNamedNodeMap *This,IXMLDOMNode *newItem,IXMLDOMNode **nameItem);
HRESULT  IXMLDOMNamedNodeMap_setNamedItem_Proxy(IXMLDOMNamedNodeMap *This, IXMLDOMNode *newItem, IXMLDOMNode **nameItem);
//C       void IXMLDOMNamedNodeMap_setNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_setNamedItem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_removeNamedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR name,IXMLDOMNode **namedItem);
HRESULT  IXMLDOMNamedNodeMap_removeNamedItem_Proxy(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);
//C       void IXMLDOMNamedNodeMap_removeNamedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_removeNamedItem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_get_item_Proxy(IXMLDOMNamedNodeMap *This,LONG index,IXMLDOMNode **listItem);
HRESULT  IXMLDOMNamedNodeMap_get_item_Proxy(IXMLDOMNamedNodeMap *This, LONG index, IXMLDOMNode **listItem);
//C       void IXMLDOMNamedNodeMap_get_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_get_item_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_get_length_Proxy(IXMLDOMNamedNodeMap *This,LONG *listLength);
HRESULT  IXMLDOMNamedNodeMap_get_length_Proxy(IXMLDOMNamedNodeMap *This, LONG *listLength);
//C       void IXMLDOMNamedNodeMap_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_get_length_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
HRESULT  IXMLDOMNamedNodeMap_getQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);
//C       void IXMLDOMNamedNodeMap_getQualifiedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_getQualifiedItem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This,BSTR baseName,BSTR namespaceURI,IXMLDOMNode **qualifiedItem);
HRESULT  IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);
//C       void IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_nextNode_Proxy(IXMLDOMNamedNodeMap *This,IXMLDOMNode **nextItem);
HRESULT  IXMLDOMNamedNodeMap_nextNode_Proxy(IXMLDOMNamedNodeMap *This, IXMLDOMNode **nextItem);
//C       void IXMLDOMNamedNodeMap_nextNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_nextNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_reset_Proxy(IXMLDOMNamedNodeMap *This);
HRESULT  IXMLDOMNamedNodeMap_reset_Proxy(IXMLDOMNamedNodeMap *This);
//C       void IXMLDOMNamedNodeMap_reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNamedNodeMap_get__newEnum_Proxy(IXMLDOMNamedNodeMap *This,IUnknown **ppUnk);
HRESULT  IXMLDOMNamedNodeMap_get__newEnum_Proxy(IXMLDOMNamedNodeMap *This, IUnknown **ppUnk);
//C       void IXMLDOMNamedNodeMap_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNamedNodeMap_get__newEnum_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMCharacterData;
extern const IID IID_IXMLDOMCharacterData;
//C       typedef struct IXMLDOMCharacterDataVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMCharacterData *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMCharacterData *This);
//C           ULONG ( *Release)(IXMLDOMCharacterData *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMCharacterData *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMCharacterData *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMCharacterData *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMCharacterData *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMCharacterData *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMCharacterData *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMCharacterData *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMCharacterData *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMCharacterData *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMCharacterData *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMCharacterData *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMCharacterData *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMCharacterData *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMCharacterData *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMCharacterData *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMCharacterData *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMCharacterData *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMCharacterData *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMCharacterData *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMCharacterData *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMCharacterData *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMCharacterData *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMCharacterData *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMCharacterData *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMCharacterData *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMCharacterData *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMCharacterData *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMCharacterData *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMCharacterData *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMCharacterData *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMCharacterData *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMCharacterData *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMCharacterData *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMCharacterData *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMCharacterData *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMCharacterData *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMCharacterData *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMCharacterData *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMCharacterData *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMCharacterData *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_data)(IXMLDOMCharacterData *This,BSTR *data);
//C           HRESULT ( *put_data)(IXMLDOMCharacterData *This,BSTR data);
//C           HRESULT ( *get_length)(IXMLDOMCharacterData *This,LONG *dataLength);
//C           HRESULT ( *substringData)(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR *data);
//C           HRESULT ( *appendData)(IXMLDOMCharacterData *This,BSTR data);
//C           HRESULT ( *insertData)(IXMLDOMCharacterData *This,LONG offset,BSTR data);
//C           HRESULT ( *deleteData)(IXMLDOMCharacterData *This,LONG offset,LONG count);
//C           HRESULT ( *replaceData)(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR data);
//C       } IXMLDOMCharacterDataVtbl;
struct IXMLDOMCharacterDataVtbl
{
    HRESULT  function(IXMLDOMCharacterData *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMCharacterData *This)AddRef;
    ULONG  function(IXMLDOMCharacterData *This)Release;
    HRESULT  function(IXMLDOMCharacterData *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMCharacterData *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMCharacterData *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMCharacterData *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMCharacterData *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMCharacterData *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR *data)get_data;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR data)put_data;
    HRESULT  function(IXMLDOMCharacterData *This, LONG *dataLength)get_length;
    HRESULT  function(IXMLDOMCharacterData *This, LONG offset, LONG count, BSTR *data)substringData;
    HRESULT  function(IXMLDOMCharacterData *This, BSTR data)appendData;
    HRESULT  function(IXMLDOMCharacterData *This, LONG offset, BSTR data)insertData;
    HRESULT  function(IXMLDOMCharacterData *This, LONG offset, LONG count)deleteData;
    HRESULT  function(IXMLDOMCharacterData *This, LONG offset, LONG count, BSTR data)replaceData;
}
//C       struct IXMLDOMCharacterData {
//C         struct IXMLDOMCharacterDataVtbl *lpVtbl;
//C       };
struct IXMLDOMCharacterData
{
    IXMLDOMCharacterDataVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMCharacterData_get_data_Proxy(IXMLDOMCharacterData *This,BSTR *data);
HRESULT  IXMLDOMCharacterData_get_data_Proxy(IXMLDOMCharacterData *This, BSTR *data);
//C       void IXMLDOMCharacterData_get_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_get_data_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_put_data_Proxy(IXMLDOMCharacterData *This,BSTR data);
HRESULT  IXMLDOMCharacterData_put_data_Proxy(IXMLDOMCharacterData *This, BSTR data);
//C       void IXMLDOMCharacterData_put_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_put_data_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_get_length_Proxy(IXMLDOMCharacterData *This,LONG *dataLength);
HRESULT  IXMLDOMCharacterData_get_length_Proxy(IXMLDOMCharacterData *This, LONG *dataLength);
//C       void IXMLDOMCharacterData_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_get_length_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_substringData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR *data);
HRESULT  IXMLDOMCharacterData_substringData_Proxy(IXMLDOMCharacterData *This, LONG offset, LONG count, BSTR *data);
//C       void IXMLDOMCharacterData_substringData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_substringData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_appendData_Proxy(IXMLDOMCharacterData *This,BSTR data);
HRESULT  IXMLDOMCharacterData_appendData_Proxy(IXMLDOMCharacterData *This, BSTR data);
//C       void IXMLDOMCharacterData_appendData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_appendData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_insertData_Proxy(IXMLDOMCharacterData *This,LONG offset,BSTR data);
HRESULT  IXMLDOMCharacterData_insertData_Proxy(IXMLDOMCharacterData *This, LONG offset, BSTR data);
//C       void IXMLDOMCharacterData_insertData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_insertData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_deleteData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count);
HRESULT  IXMLDOMCharacterData_deleteData_Proxy(IXMLDOMCharacterData *This, LONG offset, LONG count);
//C       void IXMLDOMCharacterData_deleteData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_deleteData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMCharacterData_replaceData_Proxy(IXMLDOMCharacterData *This,LONG offset,LONG count,BSTR data);
HRESULT  IXMLDOMCharacterData_replaceData_Proxy(IXMLDOMCharacterData *This, LONG offset, LONG count, BSTR data);
//C       void IXMLDOMCharacterData_replaceData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMCharacterData_replaceData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMAttribute;
extern const IID IID_IXMLDOMAttribute;
//C       typedef struct IXMLDOMAttributeVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMAttribute *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMAttribute *This);
//C           ULONG ( *Release)(IXMLDOMAttribute *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMAttribute *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMAttribute *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMAttribute *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMAttribute *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMAttribute *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMAttribute *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMAttribute *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMAttribute *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMAttribute *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMAttribute *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMAttribute *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMAttribute *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMAttribute *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMAttribute *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMAttribute *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMAttribute *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMAttribute *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMAttribute *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMAttribute *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMAttribute *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMAttribute *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMAttribute *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMAttribute *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMAttribute *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMAttribute *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMAttribute *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMAttribute *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMAttribute *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMAttribute *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMAttribute *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMAttribute *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMAttribute *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMAttribute *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMAttribute *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMAttribute *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMAttribute *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMAttribute *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMAttribute *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMAttribute *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMAttribute *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_name)(IXMLDOMAttribute *This,BSTR *attributeName);
//C           HRESULT ( *get_value)(IXMLDOMAttribute *This,VARIANT *attributeValue);
//C           HRESULT ( *put_value)(IXMLDOMAttribute *This,VARIANT attributeValue);
//C       } IXMLDOMAttributeVtbl;
struct IXMLDOMAttributeVtbl
{
    HRESULT  function(IXMLDOMAttribute *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMAttribute *This)AddRef;
    ULONG  function(IXMLDOMAttribute *This)Release;
    HRESULT  function(IXMLDOMAttribute *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMAttribute *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMAttribute *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMAttribute *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMAttribute *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMAttribute *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMAttribute *This, BSTR *attributeName)get_name;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT *attributeValue)get_value;
    HRESULT  function(IXMLDOMAttribute *This, VARIANT attributeValue)put_value;
}
//C       struct IXMLDOMAttribute {
//C         struct IXMLDOMAttributeVtbl *lpVtbl;
//C       };
struct IXMLDOMAttribute
{
    IXMLDOMAttributeVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMAttribute_get_name_Proxy(IXMLDOMAttribute *This,BSTR *attributeName);
HRESULT  IXMLDOMAttribute_get_name_Proxy(IXMLDOMAttribute *This, BSTR *attributeName);
//C       void IXMLDOMAttribute_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMAttribute_get_name_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMAttribute_get_value_Proxy(IXMLDOMAttribute *This,VARIANT *attributeValue);
HRESULT  IXMLDOMAttribute_get_value_Proxy(IXMLDOMAttribute *This, VARIANT *attributeValue);
//C       void IXMLDOMAttribute_get_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMAttribute_get_value_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMAttribute_put_value_Proxy(IXMLDOMAttribute *This,VARIANT attributeValue);
HRESULT  IXMLDOMAttribute_put_value_Proxy(IXMLDOMAttribute *This, VARIANT attributeValue);
//C       void IXMLDOMAttribute_put_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMAttribute_put_value_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMElement;
extern const IID IID_IXMLDOMElement;
//C       typedef struct IXMLDOMElementVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMElement *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMElement *This);
//C           ULONG ( *Release)(IXMLDOMElement *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMElement *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMElement *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMElement *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMElement *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMElement *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMElement *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMElement *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMElement *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMElement *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMElement *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMElement *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMElement *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMElement *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMElement *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMElement *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMElement *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMElement *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMElement *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMElement *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMElement *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMElement *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMElement *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMElement *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMElement *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMElement *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMElement *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMElement *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMElement *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMElement *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMElement *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMElement *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMElement *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMElement *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMElement *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMElement *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMElement *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMElement *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMElement *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMElement *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMElement *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_tagName)(IXMLDOMElement *This,BSTR *tagName);
//C           HRESULT ( *getAttribute)(IXMLDOMElement *This,BSTR name,VARIANT *value);
//C           HRESULT ( *setAttribute)(IXMLDOMElement *This,BSTR name,VARIANT value);
//C           HRESULT ( *removeAttribute)(IXMLDOMElement *This,BSTR name);
//C           HRESULT ( *getAttributeNode)(IXMLDOMElement *This,BSTR name,IXMLDOMAttribute **attributeNode);
//C           HRESULT ( *setAttributeNode)(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
//C           HRESULT ( *removeAttributeNode)(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
//C           HRESULT ( *getElementsByTagName)(IXMLDOMElement *This,BSTR tagName,IXMLDOMNodeList **resultList);
//C           HRESULT ( *normalize)(IXMLDOMElement *This);
//C       } IXMLDOMElementVtbl;
struct IXMLDOMElementVtbl
{
    HRESULT  function(IXMLDOMElement *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMElement *This)AddRef;
    ULONG  function(IXMLDOMElement *This)Release;
    HRESULT  function(IXMLDOMElement *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMElement *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMElement *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMElement *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMElement *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMElement *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMElement *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMElement *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMElement *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMElement *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMElement *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMElement *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMElement *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMElement *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMElement *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMElement *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMElement *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMElement *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMElement *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMElement *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMElement *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMElement *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMElement *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMElement *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMElement *This, BSTR *tagName)get_tagName;
    HRESULT  function(IXMLDOMElement *This, BSTR name, VARIANT *value)getAttribute;
    HRESULT  function(IXMLDOMElement *This, BSTR name, VARIANT value)setAttribute;
    HRESULT  function(IXMLDOMElement *This, BSTR name)removeAttribute;
    HRESULT  function(IXMLDOMElement *This, BSTR name, IXMLDOMAttribute **attributeNode)getAttributeNode;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode)setAttributeNode;
    HRESULT  function(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode)removeAttributeNode;
    HRESULT  function(IXMLDOMElement *This, BSTR tagName, IXMLDOMNodeList **resultList)getElementsByTagName;
    HRESULT  function(IXMLDOMElement *This)normalize;
}
//C       struct IXMLDOMElement {
//C         struct IXMLDOMElementVtbl *lpVtbl;
//C       };
struct IXMLDOMElement
{
    IXMLDOMElementVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMElement_get_tagName_Proxy(IXMLDOMElement *This,BSTR *tagName);
HRESULT  IXMLDOMElement_get_tagName_Proxy(IXMLDOMElement *This, BSTR *tagName);
//C       void IXMLDOMElement_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_get_tagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_getAttribute_Proxy(IXMLDOMElement *This,BSTR name,VARIANT *value);
HRESULT  IXMLDOMElement_getAttribute_Proxy(IXMLDOMElement *This, BSTR name, VARIANT *value);
//C       void IXMLDOMElement_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_getAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_setAttribute_Proxy(IXMLDOMElement *This,BSTR name,VARIANT value);
HRESULT  IXMLDOMElement_setAttribute_Proxy(IXMLDOMElement *This, BSTR name, VARIANT value);
//C       void IXMLDOMElement_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_setAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_removeAttribute_Proxy(IXMLDOMElement *This,BSTR name);
HRESULT  IXMLDOMElement_removeAttribute_Proxy(IXMLDOMElement *This, BSTR name);
//C       void IXMLDOMElement_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_removeAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_getAttributeNode_Proxy(IXMLDOMElement *This,BSTR name,IXMLDOMAttribute **attributeNode);
HRESULT  IXMLDOMElement_getAttributeNode_Proxy(IXMLDOMElement *This, BSTR name, IXMLDOMAttribute **attributeNode);
//C       void IXMLDOMElement_getAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_getAttributeNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_setAttributeNode_Proxy(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
HRESULT  IXMLDOMElement_setAttributeNode_Proxy(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);
//C       void IXMLDOMElement_setAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_setAttributeNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_removeAttributeNode_Proxy(IXMLDOMElement *This,IXMLDOMAttribute *DOMAttribute,IXMLDOMAttribute **attributeNode);
HRESULT  IXMLDOMElement_removeAttributeNode_Proxy(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);
//C       void IXMLDOMElement_removeAttributeNode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_removeAttributeNode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_getElementsByTagName_Proxy(IXMLDOMElement *This,BSTR tagName,IXMLDOMNodeList **resultList);
HRESULT  IXMLDOMElement_getElementsByTagName_Proxy(IXMLDOMElement *This, BSTR tagName, IXMLDOMNodeList **resultList);
//C       void IXMLDOMElement_getElementsByTagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_getElementsByTagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMElement_normalize_Proxy(IXMLDOMElement *This);
HRESULT  IXMLDOMElement_normalize_Proxy(IXMLDOMElement *This);
//C       void IXMLDOMElement_normalize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMElement_normalize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMText;
extern const IID IID_IXMLDOMText;
//C       typedef struct IXMLDOMTextVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMText *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMText *This);
//C           ULONG ( *Release)(IXMLDOMText *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMText *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMText *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMText *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMText *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMText *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMText *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMText *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMText *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMText *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMText *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMText *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMText *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMText *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMText *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMText *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMText *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMText *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMText *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMText *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMText *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMText *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMText *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMText *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMText *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMText *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMText *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMText *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMText *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMText *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMText *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMText *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMText *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMText *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMText *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMText *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMText *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMText *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMText *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMText *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMText *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_data)(IXMLDOMText *This,BSTR *data);
//C           HRESULT ( *put_data)(IXMLDOMText *This,BSTR data);
//C           HRESULT ( *get_length)(IXMLDOMText *This,LONG *dataLength);
//C           HRESULT ( *substringData)(IXMLDOMText *This,LONG offset,LONG count,BSTR *data);
//C           HRESULT ( *appendData)(IXMLDOMText *This,BSTR data);
//C           HRESULT ( *insertData)(IXMLDOMText *This,LONG offset,BSTR data);
//C           HRESULT ( *deleteData)(IXMLDOMText *This,LONG offset,LONG count);
//C           HRESULT ( *replaceData)(IXMLDOMText *This,LONG offset,LONG count,BSTR data);
//C           HRESULT ( *splitText)(IXMLDOMText *This,LONG offset,IXMLDOMText **rightHandTextNode);
//C       } IXMLDOMTextVtbl;
struct IXMLDOMTextVtbl
{
    HRESULT  function(IXMLDOMText *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMText *This)AddRef;
    ULONG  function(IXMLDOMText *This)Release;
    HRESULT  function(IXMLDOMText *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMText *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMText *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMText *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMText *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMText *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMText *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMText *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMText *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMText *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMText *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMText *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMText *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMText *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMText *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMText *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMText *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMText *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMText *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMText *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMText *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMText *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMText *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMText *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMText *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMText *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMText *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMText *This, BSTR *data)get_data;
    HRESULT  function(IXMLDOMText *This, BSTR data)put_data;
    HRESULT  function(IXMLDOMText *This, LONG *dataLength)get_length;
    HRESULT  function(IXMLDOMText *This, LONG offset, LONG count, BSTR *data)substringData;
    HRESULT  function(IXMLDOMText *This, BSTR data)appendData;
    HRESULT  function(IXMLDOMText *This, LONG offset, BSTR data)insertData;
    HRESULT  function(IXMLDOMText *This, LONG offset, LONG count)deleteData;
    HRESULT  function(IXMLDOMText *This, LONG offset, LONG count, BSTR data)replaceData;
    HRESULT  function(IXMLDOMText *This, LONG offset, IXMLDOMText **rightHandTextNode)splitText;
}
//C       struct IXMLDOMText {
//C         struct IXMLDOMTextVtbl *lpVtbl;
//C       };
struct IXMLDOMText
{
    IXMLDOMTextVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMText_splitText_Proxy(IXMLDOMText *This,LONG offset,IXMLDOMText **rightHandTextNode);
HRESULT  IXMLDOMText_splitText_Proxy(IXMLDOMText *This, LONG offset, IXMLDOMText **rightHandTextNode);
//C       void IXMLDOMText_splitText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMText_splitText_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMComment;
extern const IID IID_IXMLDOMComment;
//C       typedef struct IXMLDOMCommentVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMComment *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMComment *This);
//C           ULONG ( *Release)(IXMLDOMComment *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMComment *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMComment *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMComment *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMComment *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMComment *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMComment *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMComment *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMComment *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMComment *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMComment *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMComment *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMComment *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMComment *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMComment *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMComment *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMComment *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMComment *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMComment *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMComment *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMComment *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMComment *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMComment *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMComment *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMComment *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMComment *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMComment *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMComment *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMComment *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMComment *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMComment *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMComment *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMComment *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMComment *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMComment *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMComment *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMComment *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMComment *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMComment *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMComment *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMComment *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_data)(IXMLDOMComment *This,BSTR *data);
//C           HRESULT ( *put_data)(IXMLDOMComment *This,BSTR data);
//C           HRESULT ( *get_length)(IXMLDOMComment *This,LONG *dataLength);
//C           HRESULT ( *substringData)(IXMLDOMComment *This,LONG offset,LONG count,BSTR *data);
//C           HRESULT ( *appendData)(IXMLDOMComment *This,BSTR data);
//C           HRESULT ( *insertData)(IXMLDOMComment *This,LONG offset,BSTR data);
//C           HRESULT ( *deleteData)(IXMLDOMComment *This,LONG offset,LONG count);
//C           HRESULT ( *replaceData)(IXMLDOMComment *This,LONG offset,LONG count,BSTR data);
//C       } IXMLDOMCommentVtbl;
struct IXMLDOMCommentVtbl
{
    HRESULT  function(IXMLDOMComment *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMComment *This)AddRef;
    ULONG  function(IXMLDOMComment *This)Release;
    HRESULT  function(IXMLDOMComment *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMComment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMComment *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMComment *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMComment *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMComment *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMComment *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMComment *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMComment *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMComment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMComment *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMComment *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMComment *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMComment *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMComment *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMComment *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMComment *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMComment *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMComment *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMComment *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMComment *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMComment *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMComment *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMComment *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMComment *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMComment *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMComment *This, BSTR *data)get_data;
    HRESULT  function(IXMLDOMComment *This, BSTR data)put_data;
    HRESULT  function(IXMLDOMComment *This, LONG *dataLength)get_length;
    HRESULT  function(IXMLDOMComment *This, LONG offset, LONG count, BSTR *data)substringData;
    HRESULT  function(IXMLDOMComment *This, BSTR data)appendData;
    HRESULT  function(IXMLDOMComment *This, LONG offset, BSTR data)insertData;
    HRESULT  function(IXMLDOMComment *This, LONG offset, LONG count)deleteData;
    HRESULT  function(IXMLDOMComment *This, LONG offset, LONG count, BSTR data)replaceData;
}
//C       struct IXMLDOMComment {
//C         struct IXMLDOMCommentVtbl *lpVtbl;
//C       };
struct IXMLDOMComment
{
    IXMLDOMCommentVtbl *lpVtbl;
}
//C       extern const IID IID_IXMLDOMProcessingInstruction;
extern const IID IID_IXMLDOMProcessingInstruction;
//C       typedef struct IXMLDOMProcessingInstructionVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMProcessingInstruction *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMProcessingInstruction *This);
//C           ULONG ( *Release)(IXMLDOMProcessingInstruction *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMProcessingInstruction *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMProcessingInstruction *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMProcessingInstruction *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMProcessingInstruction *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMProcessingInstruction *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMProcessingInstruction *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMProcessingInstruction *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMProcessingInstruction *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMProcessingInstruction *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMProcessingInstruction *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMProcessingInstruction *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMProcessingInstruction *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMProcessingInstruction *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMProcessingInstruction *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMProcessingInstruction *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMProcessingInstruction *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMProcessingInstruction *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMProcessingInstruction *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMProcessingInstruction *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMProcessingInstruction *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMProcessingInstruction *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMProcessingInstruction *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMProcessingInstruction *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMProcessingInstruction *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMProcessingInstruction *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMProcessingInstruction *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMProcessingInstruction *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_target)(IXMLDOMProcessingInstruction *This,BSTR *name);
//C           HRESULT ( *get_data)(IXMLDOMProcessingInstruction *This,BSTR *value);
//C           HRESULT ( *put_data)(IXMLDOMProcessingInstruction *This,BSTR value);
//C       } IXMLDOMProcessingInstructionVtbl;
struct IXMLDOMProcessingInstructionVtbl
{
    HRESULT  function(IXMLDOMProcessingInstruction *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMProcessingInstruction *This)AddRef;
    ULONG  function(IXMLDOMProcessingInstruction *This)Release;
    HRESULT  function(IXMLDOMProcessingInstruction *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMProcessingInstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMProcessingInstruction *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMProcessingInstruction *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *name)get_target;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR *value)get_data;
    HRESULT  function(IXMLDOMProcessingInstruction *This, BSTR value)put_data;
}
//C       struct IXMLDOMProcessingInstruction {
//C         struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
//C       };
struct IXMLDOMProcessingInstruction
{
    IXMLDOMProcessingInstructionVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMProcessingInstruction_get_target_Proxy(IXMLDOMProcessingInstruction *This,BSTR *name);
HRESULT  IXMLDOMProcessingInstruction_get_target_Proxy(IXMLDOMProcessingInstruction *This, BSTR *name);
//C       void IXMLDOMProcessingInstruction_get_target_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMProcessingInstruction_get_target_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMProcessingInstruction_get_data_Proxy(IXMLDOMProcessingInstruction *This,BSTR *value);
HRESULT  IXMLDOMProcessingInstruction_get_data_Proxy(IXMLDOMProcessingInstruction *This, BSTR *value);
//C       void IXMLDOMProcessingInstruction_get_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMProcessingInstruction_get_data_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMProcessingInstruction_put_data_Proxy(IXMLDOMProcessingInstruction *This,BSTR value);
HRESULT  IXMLDOMProcessingInstruction_put_data_Proxy(IXMLDOMProcessingInstruction *This, BSTR value);
//C       void IXMLDOMProcessingInstruction_put_data_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMProcessingInstruction_put_data_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMCDATASection;
extern const IID IID_IXMLDOMCDATASection;
//C       typedef struct IXMLDOMCDATASectionVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMCDATASection *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMCDATASection *This);
//C           ULONG ( *Release)(IXMLDOMCDATASection *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMCDATASection *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMCDATASection *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMCDATASection *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMCDATASection *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMCDATASection *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMCDATASection *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMCDATASection *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMCDATASection *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMCDATASection *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMCDATASection *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMCDATASection *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMCDATASection *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMCDATASection *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMCDATASection *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMCDATASection *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMCDATASection *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMCDATASection *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMCDATASection *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMCDATASection *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMCDATASection *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMCDATASection *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMCDATASection *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMCDATASection *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMCDATASection *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMCDATASection *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMCDATASection *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMCDATASection *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMCDATASection *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMCDATASection *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMCDATASection *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMCDATASection *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMCDATASection *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMCDATASection *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMCDATASection *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMCDATASection *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMCDATASection *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMCDATASection *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMCDATASection *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMCDATASection *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMCDATASection *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_data)(IXMLDOMCDATASection *This,BSTR *data);
//C           HRESULT ( *put_data)(IXMLDOMCDATASection *This,BSTR data);
//C           HRESULT ( *get_length)(IXMLDOMCDATASection *This,LONG *dataLength);
//C           HRESULT ( *substringData)(IXMLDOMCDATASection *This,LONG offset,LONG count,BSTR *data);
//C           HRESULT ( *appendData)(IXMLDOMCDATASection *This,BSTR data);
//C           HRESULT ( *insertData)(IXMLDOMCDATASection *This,LONG offset,BSTR data);
//C           HRESULT ( *deleteData)(IXMLDOMCDATASection *This,LONG offset,LONG count);
//C           HRESULT ( *replaceData)(IXMLDOMCDATASection *This,LONG offset,LONG count,BSTR data);
//C           HRESULT ( *splitText)(IXMLDOMCDATASection *This,LONG offset,IXMLDOMText **rightHandTextNode);
//C       } IXMLDOMCDATASectionVtbl;
struct IXMLDOMCDATASectionVtbl
{
    HRESULT  function(IXMLDOMCDATASection *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMCDATASection *This)AddRef;
    ULONG  function(IXMLDOMCDATASection *This)Release;
    HRESULT  function(IXMLDOMCDATASection *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMCDATASection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMCDATASection *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMCDATASection *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMCDATASection *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMCDATASection *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR *data)get_data;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR data)put_data;
    HRESULT  function(IXMLDOMCDATASection *This, LONG *dataLength)get_length;
    HRESULT  function(IXMLDOMCDATASection *This, LONG offset, LONG count, BSTR *data)substringData;
    HRESULT  function(IXMLDOMCDATASection *This, BSTR data)appendData;
    HRESULT  function(IXMLDOMCDATASection *This, LONG offset, BSTR data)insertData;
    HRESULT  function(IXMLDOMCDATASection *This, LONG offset, LONG count)deleteData;
    HRESULT  function(IXMLDOMCDATASection *This, LONG offset, LONG count, BSTR data)replaceData;
    HRESULT  function(IXMLDOMCDATASection *This, LONG offset, IXMLDOMText **rightHandTextNode)splitText;
}
//C       struct IXMLDOMCDATASection {
//C         struct IXMLDOMCDATASectionVtbl *lpVtbl;
//C       };
struct IXMLDOMCDATASection
{
    IXMLDOMCDATASectionVtbl *lpVtbl;
}
//C       extern const IID IID_IXMLDOMDocumentType;
extern const IID IID_IXMLDOMDocumentType;
//C       typedef struct IXMLDOMDocumentTypeVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMDocumentType *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMDocumentType *This);
//C           ULONG ( *Release)(IXMLDOMDocumentType *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentType *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMDocumentType *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentType *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMDocumentType *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMDocumentType *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMDocumentType *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMDocumentType *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMDocumentType *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMDocumentType *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMDocumentType *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMDocumentType *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMDocumentType *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMDocumentType *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMDocumentType *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMDocumentType *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMDocumentType *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMDocumentType *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMDocumentType *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMDocumentType *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMDocumentType *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMDocumentType *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentType *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMDocumentType *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMDocumentType *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMDocumentType *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMDocumentType *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentType *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentType *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMDocumentType *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMDocumentType *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMDocumentType *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMDocumentType *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMDocumentType *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMDocumentType *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMDocumentType *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMDocumentType *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMDocumentType *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMDocumentType *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMDocumentType *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_name)(IXMLDOMDocumentType *This,BSTR *rootName);
//C           HRESULT ( *get_entities)(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **entityMap);
//C           HRESULT ( *get_notations)(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **notationMap);
//C       } IXMLDOMDocumentTypeVtbl;
struct IXMLDOMDocumentTypeVtbl
{
    HRESULT  function(IXMLDOMDocumentType *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMDocumentType *This)AddRef;
    ULONG  function(IXMLDOMDocumentType *This)Release;
    HRESULT  function(IXMLDOMDocumentType *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMDocumentType *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMDocumentType *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMDocumentType *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMDocumentType *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMDocumentType *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMDocumentType *This, BSTR *rootName)get_name;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **entityMap)get_entities;
    HRESULT  function(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **notationMap)get_notations;
}
//C       struct IXMLDOMDocumentType {
//C         struct IXMLDOMDocumentTypeVtbl *lpVtbl;
//C       };
struct IXMLDOMDocumentType
{
    IXMLDOMDocumentTypeVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMDocumentType_get_name_Proxy(IXMLDOMDocumentType *This,BSTR *rootName);
HRESULT  IXMLDOMDocumentType_get_name_Proxy(IXMLDOMDocumentType *This, BSTR *rootName);
//C       void IXMLDOMDocumentType_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocumentType_get_name_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocumentType_get_entities_Proxy(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **entityMap);
HRESULT  IXMLDOMDocumentType_get_entities_Proxy(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **entityMap);
//C       void IXMLDOMDocumentType_get_entities_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocumentType_get_entities_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMDocumentType_get_notations_Proxy(IXMLDOMDocumentType *This,IXMLDOMNamedNodeMap **notationMap);
HRESULT  IXMLDOMDocumentType_get_notations_Proxy(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **notationMap);
//C       void IXMLDOMDocumentType_get_notations_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMDocumentType_get_notations_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMNotation;
extern const IID IID_IXMLDOMNotation;
//C       typedef struct IXMLDOMNotationVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMNotation *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMNotation *This);
//C           ULONG ( *Release)(IXMLDOMNotation *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMNotation *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMNotation *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMNotation *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMNotation *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMNotation *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMNotation *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMNotation *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMNotation *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMNotation *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMNotation *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMNotation *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMNotation *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMNotation *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMNotation *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMNotation *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMNotation *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMNotation *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMNotation *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMNotation *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMNotation *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMNotation *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMNotation *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMNotation *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMNotation *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMNotation *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMNotation *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMNotation *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMNotation *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMNotation *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMNotation *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMNotation *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMNotation *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMNotation *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMNotation *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMNotation *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMNotation *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMNotation *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMNotation *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMNotation *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMNotation *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_publicId)(IXMLDOMNotation *This,VARIANT *publicID);
//C           HRESULT ( *get_systemId)(IXMLDOMNotation *This,VARIANT *systemID);
//C       } IXMLDOMNotationVtbl;
struct IXMLDOMNotationVtbl
{
    HRESULT  function(IXMLDOMNotation *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMNotation *This)AddRef;
    ULONG  function(IXMLDOMNotation *This)Release;
    HRESULT  function(IXMLDOMNotation *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMNotation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMNotation *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMNotation *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMNotation *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMNotation *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMNotation *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMNotation *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMNotation *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMNotation *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMNotation *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMNotation *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMNotation *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMNotation *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMNotation *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMNotation *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMNotation *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMNotation *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMNotation *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMNotation *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMNotation *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMNotation *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMNotation *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMNotation *This, VARIANT *publicID)get_publicId;
    HRESULT  function(IXMLDOMNotation *This, VARIANT *systemID)get_systemId;
}
//C       struct IXMLDOMNotation {
//C         struct IXMLDOMNotationVtbl *lpVtbl;
//C       };
struct IXMLDOMNotation
{
    IXMLDOMNotationVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMNotation_get_publicId_Proxy(IXMLDOMNotation *This,VARIANT *publicID);
HRESULT  IXMLDOMNotation_get_publicId_Proxy(IXMLDOMNotation *This, VARIANT *publicID);
//C       void IXMLDOMNotation_get_publicId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNotation_get_publicId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMNotation_get_systemId_Proxy(IXMLDOMNotation *This,VARIANT *systemID);
HRESULT  IXMLDOMNotation_get_systemId_Proxy(IXMLDOMNotation *This, VARIANT *systemID);
//C       void IXMLDOMNotation_get_systemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMNotation_get_systemId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMEntity;
extern const IID IID_IXMLDOMEntity;
//C       typedef struct IXMLDOMEntityVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMEntity *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMEntity *This);
//C           ULONG ( *Release)(IXMLDOMEntity *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMEntity *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMEntity *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMEntity *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMEntity *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMEntity *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMEntity *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMEntity *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMEntity *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMEntity *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMEntity *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMEntity *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMEntity *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMEntity *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMEntity *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMEntity *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMEntity *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMEntity *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMEntity *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMEntity *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMEntity *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMEntity *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMEntity *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMEntity *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMEntity *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMEntity *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMEntity *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMEntity *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMEntity *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMEntity *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMEntity *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMEntity *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMEntity *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMEntity *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMEntity *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMEntity *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMEntity *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMEntity *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMEntity *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMEntity *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMEntity *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *get_publicId)(IXMLDOMEntity *This,VARIANT *publicID);
//C           HRESULT ( *get_systemId)(IXMLDOMEntity *This,VARIANT *systemID);
//C           HRESULT ( *get_notationName)(IXMLDOMEntity *This,BSTR *name);
//C       } IXMLDOMEntityVtbl;
struct IXMLDOMEntityVtbl
{
    HRESULT  function(IXMLDOMEntity *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMEntity *This)AddRef;
    ULONG  function(IXMLDOMEntity *This)Release;
    HRESULT  function(IXMLDOMEntity *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMEntity *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMEntity *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMEntity *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMEntity *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMEntity *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMEntity *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMEntity *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMEntity *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMEntity *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMEntity *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMEntity *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMEntity *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMEntity *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMEntity *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMEntity *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMEntity *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMEntity *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMEntity *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMEntity *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMEntity *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMEntity *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMEntity *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXMLDOMEntity *This, VARIANT *publicID)get_publicId;
    HRESULT  function(IXMLDOMEntity *This, VARIANT *systemID)get_systemId;
    HRESULT  function(IXMLDOMEntity *This, BSTR *name)get_notationName;
}
//C       struct IXMLDOMEntity {
//C         struct IXMLDOMEntityVtbl *lpVtbl;
//C       };
struct IXMLDOMEntity
{
    IXMLDOMEntityVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMEntity_get_publicId_Proxy(IXMLDOMEntity *This,VARIANT *publicID);
HRESULT  IXMLDOMEntity_get_publicId_Proxy(IXMLDOMEntity *This, VARIANT *publicID);
//C       void IXMLDOMEntity_get_publicId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMEntity_get_publicId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMEntity_get_systemId_Proxy(IXMLDOMEntity *This,VARIANT *systemID);
HRESULT  IXMLDOMEntity_get_systemId_Proxy(IXMLDOMEntity *This, VARIANT *systemID);
//C       void IXMLDOMEntity_get_systemId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMEntity_get_systemId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMEntity_get_notationName_Proxy(IXMLDOMEntity *This,BSTR *name);
HRESULT  IXMLDOMEntity_get_notationName_Proxy(IXMLDOMEntity *This, BSTR *name);
//C       void IXMLDOMEntity_get_notationName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMEntity_get_notationName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDOMEntityReference;
extern const IID IID_IXMLDOMEntityReference;
//C       typedef struct IXMLDOMEntityReferenceVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMEntityReference *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMEntityReference *This);
//C           ULONG ( *Release)(IXMLDOMEntityReference *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMEntityReference *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMEntityReference *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMEntityReference *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMEntityReference *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXMLDOMEntityReference *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXMLDOMEntityReference *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXMLDOMEntityReference *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXMLDOMEntityReference *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXMLDOMEntityReference *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXMLDOMEntityReference *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXMLDOMEntityReference *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXMLDOMEntityReference *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXMLDOMEntityReference *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXMLDOMEntityReference *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXMLDOMEntityReference *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXMLDOMEntityReference *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXMLDOMEntityReference *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXMLDOMEntityReference *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXMLDOMEntityReference *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXMLDOMEntityReference *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXMLDOMEntityReference *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXMLDOMEntityReference *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXMLDOMEntityReference *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXMLDOMEntityReference *This,BSTR *text);
//C           HRESULT ( *put_text)(IXMLDOMEntityReference *This,BSTR text);
//C           HRESULT ( *get_specified)(IXMLDOMEntityReference *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXMLDOMEntityReference *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXMLDOMEntityReference *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXMLDOMEntityReference *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXMLDOMEntityReference *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXMLDOMEntityReference *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXMLDOMEntityReference *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXMLDOMEntityReference *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXMLDOMEntityReference *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXMLDOMEntityReference *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXMLDOMEntityReference *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXMLDOMEntityReference *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXMLDOMEntityReference *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXMLDOMEntityReference *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXMLDOMEntityReference *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C       } IXMLDOMEntityReferenceVtbl;
struct IXMLDOMEntityReferenceVtbl
{
    HRESULT  function(IXMLDOMEntityReference *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMEntityReference *This)AddRef;
    ULONG  function(IXMLDOMEntityReference *This)Release;
    HRESULT  function(IXMLDOMEntityReference *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMEntityReference *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMEntityReference *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMEntityReference *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *name)get_nodeName;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXMLDOMEntityReference *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *text)get_text;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR text)put_text;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXMLDOMEntityReference *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXMLDOMEntityReference *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
}
//C       struct IXMLDOMEntityReference {
//C         struct IXMLDOMEntityReferenceVtbl *lpVtbl;
//C       };
struct IXMLDOMEntityReference
{
    IXMLDOMEntityReferenceVtbl *lpVtbl;
}
//C       extern const IID IID_IXMLDOMParseError;
extern const IID IID_IXMLDOMParseError;
//C       typedef struct IXMLDOMParseErrorVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDOMParseError *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDOMParseError *This);
//C           ULONG ( *Release)(IXMLDOMParseError *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDOMParseError *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDOMParseError *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDOMParseError *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDOMParseError *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_errorCode)(IXMLDOMParseError *This,LONG *errorCode);
//C           HRESULT ( *get_url)(IXMLDOMParseError *This,BSTR *urlString);
//C           HRESULT ( *get_reason)(IXMLDOMParseError *This,BSTR *reasonString);
//C           HRESULT ( *get_srcText)(IXMLDOMParseError *This,BSTR *sourceString);
//C           HRESULT ( *get_line)(IXMLDOMParseError *This,LONG *lineNumber);
//C           HRESULT ( *get_linepos)(IXMLDOMParseError *This,LONG *linePosition);
//C           HRESULT ( *get_filepos)(IXMLDOMParseError *This,LONG *filePosition);
//C       } IXMLDOMParseErrorVtbl;
struct IXMLDOMParseErrorVtbl
{
    HRESULT  function(IXMLDOMParseError *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDOMParseError *This)AddRef;
    ULONG  function(IXMLDOMParseError *This)Release;
    HRESULT  function(IXMLDOMParseError *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDOMParseError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDOMParseError *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDOMParseError *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDOMParseError *This, LONG *errorCode)get_errorCode;
    HRESULT  function(IXMLDOMParseError *This, BSTR *urlString)get_url;
    HRESULT  function(IXMLDOMParseError *This, BSTR *reasonString)get_reason;
    HRESULT  function(IXMLDOMParseError *This, BSTR *sourceString)get_srcText;
    HRESULT  function(IXMLDOMParseError *This, LONG *lineNumber)get_line;
    HRESULT  function(IXMLDOMParseError *This, LONG *linePosition)get_linepos;
    HRESULT  function(IXMLDOMParseError *This, LONG *filePosition)get_filepos;
}
//C       struct IXMLDOMParseError {
//C         struct IXMLDOMParseErrorVtbl *lpVtbl;
//C       };
struct IXMLDOMParseError
{
    IXMLDOMParseErrorVtbl *lpVtbl;
}
//C       HRESULT IXMLDOMParseError_get_errorCode_Proxy(IXMLDOMParseError *This,LONG *errorCode);
HRESULT  IXMLDOMParseError_get_errorCode_Proxy(IXMLDOMParseError *This, LONG *errorCode);
//C       void IXMLDOMParseError_get_errorCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_errorCode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMParseError_get_url_Proxy(IXMLDOMParseError *This,BSTR *urlString);
HRESULT  IXMLDOMParseError_get_url_Proxy(IXMLDOMParseError *This, BSTR *urlString);
//C       void IXMLDOMParseError_get_url_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_url_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMParseError_get_reason_Proxy(IXMLDOMParseError *This,BSTR *reasonString);
HRESULT  IXMLDOMParseError_get_reason_Proxy(IXMLDOMParseError *This, BSTR *reasonString);
//C       void IXMLDOMParseError_get_reason_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_reason_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMParseError_get_srcText_Proxy(IXMLDOMParseError *This,BSTR *sourceString);
HRESULT  IXMLDOMParseError_get_srcText_Proxy(IXMLDOMParseError *This, BSTR *sourceString);
//C       void IXMLDOMParseError_get_srcText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_srcText_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMParseError_get_line_Proxy(IXMLDOMParseError *This,LONG *lineNumber);
HRESULT  IXMLDOMParseError_get_line_Proxy(IXMLDOMParseError *This, LONG *lineNumber);
//C       void IXMLDOMParseError_get_line_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_line_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMParseError_get_linepos_Proxy(IXMLDOMParseError *This,LONG *linePosition);
HRESULT  IXMLDOMParseError_get_linepos_Proxy(IXMLDOMParseError *This, LONG *linePosition);
//C       void IXMLDOMParseError_get_linepos_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_linepos_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDOMParseError_get_filepos_Proxy(IXMLDOMParseError *This,LONG *filePosition);
HRESULT  IXMLDOMParseError_get_filepos_Proxy(IXMLDOMParseError *This, LONG *filePosition);
//C       void IXMLDOMParseError_get_filepos_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDOMParseError_get_filepos_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXTLRuntime;
extern const IID IID_IXTLRuntime;
//C       typedef struct IXTLRuntimeVtbl {
//C           HRESULT ( *QueryInterface)(IXTLRuntime *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXTLRuntime *This);
//C           ULONG ( *Release)(IXTLRuntime *This);
//C           HRESULT ( *GetTypeInfoCount)(IXTLRuntime *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXTLRuntime *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXTLRuntime *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXTLRuntime *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_nodeName)(IXTLRuntime *This,BSTR *name);
//C           HRESULT ( *get_nodeValue)(IXTLRuntime *This,VARIANT *value);
//C           HRESULT ( *put_nodeValue)(IXTLRuntime *This,VARIANT value);
//C           HRESULT ( *get_nodeType)(IXTLRuntime *This,DOMNodeType *type);
//C           HRESULT ( *get_parentNode)(IXTLRuntime *This,IXMLDOMNode **parent);
//C           HRESULT ( *get_childNodes)(IXTLRuntime *This,IXMLDOMNodeList **childList);
//C           HRESULT ( *get_firstChild)(IXTLRuntime *This,IXMLDOMNode **firstChild);
//C           HRESULT ( *get_lastChild)(IXTLRuntime *This,IXMLDOMNode **lastChild);
//C           HRESULT ( *get_previousSibling)(IXTLRuntime *This,IXMLDOMNode **previousSibling);
//C           HRESULT ( *get_nextSibling)(IXTLRuntime *This,IXMLDOMNode **nextSibling);
//C           HRESULT ( *get_attributes)(IXTLRuntime *This,IXMLDOMNamedNodeMap **attributeMap);
//C           HRESULT ( *insertBefore)(IXTLRuntime *This,IXMLDOMNode *newChild,VARIANT refChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *replaceChild)(IXTLRuntime *This,IXMLDOMNode *newChild,IXMLDOMNode *oldChild,IXMLDOMNode **outOldChild);
//C           HRESULT ( *removeChild)(IXTLRuntime *This,IXMLDOMNode *childNode,IXMLDOMNode **oldChild);
//C           HRESULT ( *appendChild)(IXTLRuntime *This,IXMLDOMNode *newChild,IXMLDOMNode **outNewChild);
//C           HRESULT ( *hasChildNodes)(IXTLRuntime *This,VARIANT_BOOL *hasChild);
//C           HRESULT ( *get_ownerDocument)(IXTLRuntime *This,IXMLDOMDocument **DOMDocument);
//C           HRESULT ( *cloneNode)(IXTLRuntime *This,VARIANT_BOOL deep,IXMLDOMNode **cloneRoot);
//C           HRESULT ( *get_nodeTypeString)(IXTLRuntime *This,BSTR *nodeType);
//C           HRESULT ( *get_text)(IXTLRuntime *This,BSTR *text);
//C           HRESULT ( *put_text)(IXTLRuntime *This,BSTR text);
//C           HRESULT ( *get_specified)(IXTLRuntime *This,VARIANT_BOOL *isSpecified);
//C           HRESULT ( *get_definition)(IXTLRuntime *This,IXMLDOMNode **definitionNode);
//C           HRESULT ( *get_nodeTypedValue)(IXTLRuntime *This,VARIANT *typedValue);
//C           HRESULT ( *put_nodeTypedValue)(IXTLRuntime *This,VARIANT typedValue);
//C           HRESULT ( *get_dataType)(IXTLRuntime *This,VARIANT *dataTypeName);
//C           HRESULT ( *put_dataType)(IXTLRuntime *This,BSTR dataTypeName);
//C           HRESULT ( *get_xml)(IXTLRuntime *This,BSTR *xmlString);
//C           HRESULT ( *transformNode)(IXTLRuntime *This,IXMLDOMNode *stylesheet,BSTR *xmlString);
//C           HRESULT ( *selectNodes)(IXTLRuntime *This,BSTR queryString,IXMLDOMNodeList **resultList);
//C           HRESULT ( *selectSingleNode)(IXTLRuntime *This,BSTR queryString,IXMLDOMNode **resultNode);
//C           HRESULT ( *get_parsed)(IXTLRuntime *This,VARIANT_BOOL *isParsed);
//C           HRESULT ( *get_namespaceURI)(IXTLRuntime *This,BSTR *namespaceURI);
//C           HRESULT ( *get_prefix)(IXTLRuntime *This,BSTR *prefixString);
//C           HRESULT ( *get_baseName)(IXTLRuntime *This,BSTR *nameString);
//C           HRESULT ( *transformNodeToObject)(IXTLRuntime *This,IXMLDOMNode *stylesheet,VARIANT outputObject);
//C           HRESULT ( *uniqueID)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pID);
//C           HRESULT ( *depth)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pDepth);
//C           HRESULT ( *childNumber)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
//C           HRESULT ( *ancestorChildNumber)(IXTLRuntime *This,BSTR bstrNodeName,IXMLDOMNode *pNode,LONG *pNumber);
//C           HRESULT ( *absoluteChildNumber)(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
//C           HRESULT ( *formatIndex)(IXTLRuntime *This,LONG lIndex,BSTR bstrFormat,BSTR *pbstrFormattedString);
//C           HRESULT ( *formatNumber)(IXTLRuntime *This,double dblNumber,BSTR bstrFormat,BSTR *pbstrFormattedString);
//C           HRESULT ( *formatDate)(IXTLRuntime *This,VARIANT varDate,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
//C           HRESULT ( *formatTime)(IXTLRuntime *This,VARIANT varTime,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
//C       } IXTLRuntimeVtbl;
struct IXTLRuntimeVtbl
{
    HRESULT  function(IXTLRuntime *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXTLRuntime *This)AddRef;
    ULONG  function(IXTLRuntime *This)Release;
    HRESULT  function(IXTLRuntime *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXTLRuntime *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXTLRuntime *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXTLRuntime *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXTLRuntime *This, BSTR *name)get_nodeName;
    HRESULT  function(IXTLRuntime *This, VARIANT *value)get_nodeValue;
    HRESULT  function(IXTLRuntime *This, VARIANT value)put_nodeValue;
    HRESULT  function(IXTLRuntime *This, DOMNodeType *type)get_nodeType;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode **parent)get_parentNode;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNodeList **childList)get_childNodes;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode **firstChild)get_firstChild;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode **lastChild)get_lastChild;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode **previousSibling)get_previousSibling;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode **nextSibling)get_nextSibling;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNamedNodeMap **attributeMap)get_attributes;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild)insertBefore;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild)replaceChild;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild)removeChild;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild)appendChild;
    HRESULT  function(IXTLRuntime *This, VARIANT_BOOL *hasChild)hasChildNodes;
    HRESULT  function(IXTLRuntime *This, IXMLDOMDocument **DOMDocument)get_ownerDocument;
    HRESULT  function(IXTLRuntime *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot)cloneNode;
    HRESULT  function(IXTLRuntime *This, BSTR *nodeType)get_nodeTypeString;
    HRESULT  function(IXTLRuntime *This, BSTR *text)get_text;
    HRESULT  function(IXTLRuntime *This, BSTR text)put_text;
    HRESULT  function(IXTLRuntime *This, VARIANT_BOOL *isSpecified)get_specified;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode **definitionNode)get_definition;
    HRESULT  function(IXTLRuntime *This, VARIANT *typedValue)get_nodeTypedValue;
    HRESULT  function(IXTLRuntime *This, VARIANT typedValue)put_nodeTypedValue;
    HRESULT  function(IXTLRuntime *This, VARIANT *dataTypeName)get_dataType;
    HRESULT  function(IXTLRuntime *This, BSTR dataTypeName)put_dataType;
    HRESULT  function(IXTLRuntime *This, BSTR *xmlString)get_xml;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *stylesheet, BSTR *xmlString)transformNode;
    HRESULT  function(IXTLRuntime *This, BSTR queryString, IXMLDOMNodeList **resultList)selectNodes;
    HRESULT  function(IXTLRuntime *This, BSTR queryString, IXMLDOMNode **resultNode)selectSingleNode;
    HRESULT  function(IXTLRuntime *This, VARIANT_BOOL *isParsed)get_parsed;
    HRESULT  function(IXTLRuntime *This, BSTR *namespaceURI)get_namespaceURI;
    HRESULT  function(IXTLRuntime *This, BSTR *prefixString)get_prefix;
    HRESULT  function(IXTLRuntime *This, BSTR *nameString)get_baseName;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *stylesheet, VARIANT outputObject)transformNodeToObject;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pID)uniqueID;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pDepth)depth;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pNumber)childNumber;
    HRESULT  function(IXTLRuntime *This, BSTR bstrNodeName, IXMLDOMNode *pNode, LONG *pNumber)ancestorChildNumber;
    HRESULT  function(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pNumber)absoluteChildNumber;
    HRESULT  function(IXTLRuntime *This, LONG lIndex, BSTR bstrFormat, BSTR *pbstrFormattedString)formatIndex;
    HRESULT  function(IXTLRuntime *This, double dblNumber, BSTR bstrFormat, BSTR *pbstrFormattedString)formatNumber;
    HRESULT  function(IXTLRuntime *This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString)formatDate;
    HRESULT  function(IXTLRuntime *This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString)formatTime;
}
//C       struct IXTLRuntime {
//C         struct IXTLRuntimeVtbl *lpVtbl;
//C       };
struct IXTLRuntime
{
    IXTLRuntimeVtbl *lpVtbl;
}
//C       HRESULT IXTLRuntime_uniqueID_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pID);
HRESULT  IXTLRuntime_uniqueID_Proxy(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pID);
//C       void IXTLRuntime_uniqueID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_uniqueID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_depth_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pDepth);
HRESULT  IXTLRuntime_depth_Proxy(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pDepth);
//C       void IXTLRuntime_depth_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_depth_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_childNumber_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
HRESULT  IXTLRuntime_childNumber_Proxy(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pNumber);
//C       void IXTLRuntime_childNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_childNumber_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_ancestorChildNumber_Proxy(IXTLRuntime *This,BSTR bstrNodeName,IXMLDOMNode *pNode,LONG *pNumber);
HRESULT  IXTLRuntime_ancestorChildNumber_Proxy(IXTLRuntime *This, BSTR bstrNodeName, IXMLDOMNode *pNode, LONG *pNumber);
//C       void IXTLRuntime_ancestorChildNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_ancestorChildNumber_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_absoluteChildNumber_Proxy(IXTLRuntime *This,IXMLDOMNode *pNode,LONG *pNumber);
HRESULT  IXTLRuntime_absoluteChildNumber_Proxy(IXTLRuntime *This, IXMLDOMNode *pNode, LONG *pNumber);
//C       void IXTLRuntime_absoluteChildNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_absoluteChildNumber_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_formatIndex_Proxy(IXTLRuntime *This,LONG lIndex,BSTR bstrFormat,BSTR *pbstrFormattedString);
HRESULT  IXTLRuntime_formatIndex_Proxy(IXTLRuntime *This, LONG lIndex, BSTR bstrFormat, BSTR *pbstrFormattedString);
//C       void IXTLRuntime_formatIndex_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_formatIndex_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_formatNumber_Proxy(IXTLRuntime *This,double dblNumber,BSTR bstrFormat,BSTR *pbstrFormattedString);
HRESULT  IXTLRuntime_formatNumber_Proxy(IXTLRuntime *This, double dblNumber, BSTR bstrFormat, BSTR *pbstrFormattedString);
//C       void IXTLRuntime_formatNumber_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_formatNumber_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_formatDate_Proxy(IXTLRuntime *This,VARIANT varDate,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
HRESULT  IXTLRuntime_formatDate_Proxy(IXTLRuntime *This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);
//C       void IXTLRuntime_formatDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_formatDate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXTLRuntime_formatTime_Proxy(IXTLRuntime *This,VARIANT varTime,BSTR bstrFormat,VARIANT varDestLocale,BSTR *pbstrFormattedString);
HRESULT  IXTLRuntime_formatTime_Proxy(IXTLRuntime *This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);
//C       void IXTLRuntime_formatTime_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXTLRuntime_formatTime_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID DIID_XMLDOMDocumentEvents;
extern const IID DIID_XMLDOMDocumentEvents;
//C       typedef struct XMLDOMDocumentEventsVtbl {
//C           HRESULT ( *QueryInterface)(XMLDOMDocumentEvents *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(XMLDOMDocumentEvents *This);
//C           ULONG ( *Release)(XMLDOMDocumentEvents *This);
//C           HRESULT ( *GetTypeInfoCount)(XMLDOMDocumentEvents *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(XMLDOMDocumentEvents *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(XMLDOMDocumentEvents *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(XMLDOMDocumentEvents *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C       } XMLDOMDocumentEventsVtbl;
struct XMLDOMDocumentEventsVtbl
{
    HRESULT  function(XMLDOMDocumentEvents *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(XMLDOMDocumentEvents *This)AddRef;
    ULONG  function(XMLDOMDocumentEvents *This)Release;
    HRESULT  function(XMLDOMDocumentEvents *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(XMLDOMDocumentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(XMLDOMDocumentEvents *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(XMLDOMDocumentEvents *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
}
//C       struct XMLDOMDocumentEvents {
//C         struct XMLDOMDocumentEventsVtbl *lpVtbl;
//C       };
struct XMLDOMDocumentEvents
{
    XMLDOMDocumentEventsVtbl *lpVtbl;
}
//C       extern const CLSID CLSID_DOMDocument;
extern const CLSID CLSID_DOMDocument;
//C       extern const CLSID CLSID_DOMFreeThreadedDocument;
extern const CLSID CLSID_DOMFreeThreadedDocument;
//C       extern const IID IID_IXMLHttpRequest;
extern const IID IID_IXMLHttpRequest;
//C       typedef struct IXMLHttpRequestVtbl {
//C           HRESULT ( *QueryInterface)(IXMLHttpRequest *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLHttpRequest *This);
//C           ULONG ( *Release)(IXMLHttpRequest *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLHttpRequest *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLHttpRequest *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLHttpRequest *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLHttpRequest *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *open)(IXMLHttpRequest *This,BSTR bstrMethod,BSTR bstrUrl,VARIANT varAsync,VARIANT bstrUser,VARIANT bstrPassword);
//C           HRESULT ( *setRequestHeader)(IXMLHttpRequest *This,BSTR bstrHeader,BSTR bstrValue);
//C           HRESULT ( *getResponseHeader)(IXMLHttpRequest *This,BSTR bstrHeader,BSTR *pbstrValue);
//C           HRESULT ( *getAllResponseHeaders)(IXMLHttpRequest *This,BSTR *pbstrHeaders);
//C           HRESULT ( *send)(IXMLHttpRequest *This,VARIANT varBody);
//C           HRESULT ( *abort)(IXMLHttpRequest *This);
//C           HRESULT ( *get_status)(IXMLHttpRequest *This,LONG *plStatus);
//C           HRESULT ( *get_statusText)(IXMLHttpRequest *This,BSTR *pbstrStatus);
//C           HRESULT ( *get_responseXML)(IXMLHttpRequest *This,IDispatch **ppBody);
//C           HRESULT ( *get_responseText)(IXMLHttpRequest *This,BSTR *pbstrBody);
//C           HRESULT ( *get_responseBody)(IXMLHttpRequest *This,VARIANT *pvarBody);
//C           HRESULT ( *get_responseStream)(IXMLHttpRequest *This,VARIANT *pvarBody);
//C           HRESULT ( *get_readyState)(IXMLHttpRequest *This,LONG *plState);
//C           HRESULT ( *put_onreadystatechange)(IXMLHttpRequest *This,IDispatch *pReadyStateSink);
//C       } IXMLHttpRequestVtbl;
struct IXMLHttpRequestVtbl
{
    HRESULT  function(IXMLHttpRequest *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLHttpRequest *This)AddRef;
    ULONG  function(IXMLHttpRequest *This)Release;
    HRESULT  function(IXMLHttpRequest *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLHttpRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLHttpRequest *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLHttpRequest *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLHttpRequest *This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword)open;
    HRESULT  function(IXMLHttpRequest *This, BSTR bstrHeader, BSTR bstrValue)setRequestHeader;
    HRESULT  function(IXMLHttpRequest *This, BSTR bstrHeader, BSTR *pbstrValue)getResponseHeader;
    HRESULT  function(IXMLHttpRequest *This, BSTR *pbstrHeaders)getAllResponseHeaders;
    HRESULT  function(IXMLHttpRequest *This, VARIANT varBody)send;
    HRESULT  function(IXMLHttpRequest *This)abort;
    HRESULT  function(IXMLHttpRequest *This, LONG *plStatus)get_status;
    HRESULT  function(IXMLHttpRequest *This, BSTR *pbstrStatus)get_statusText;
    HRESULT  function(IXMLHttpRequest *This, IDispatch **ppBody)get_responseXML;
    HRESULT  function(IXMLHttpRequest *This, BSTR *pbstrBody)get_responseText;
    HRESULT  function(IXMLHttpRequest *This, VARIANT *pvarBody)get_responseBody;
    HRESULT  function(IXMLHttpRequest *This, VARIANT *pvarBody)get_responseStream;
    HRESULT  function(IXMLHttpRequest *This, LONG *plState)get_readyState;
    HRESULT  function(IXMLHttpRequest *This, IDispatch *pReadyStateSink)put_onreadystatechange;
}
//C       struct IXMLHttpRequest {
//C         struct IXMLHttpRequestVtbl *lpVtbl;
//C       };
struct IXMLHttpRequest
{
    IXMLHttpRequestVtbl *lpVtbl;
}
//C       HRESULT IXMLHttpRequest_open_Proxy(IXMLHttpRequest *This,BSTR bstrMethod,BSTR bstrUrl,VARIANT varAsync,VARIANT bstrUser,VARIANT bstrPassword);
HRESULT  IXMLHttpRequest_open_Proxy(IXMLHttpRequest *This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);
//C       void IXMLHttpRequest_open_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_open_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_setRequestHeader_Proxy(IXMLHttpRequest *This,BSTR bstrHeader,BSTR bstrValue);
HRESULT  IXMLHttpRequest_setRequestHeader_Proxy(IXMLHttpRequest *This, BSTR bstrHeader, BSTR bstrValue);
//C       void IXMLHttpRequest_setRequestHeader_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_setRequestHeader_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_getResponseHeader_Proxy(IXMLHttpRequest *This,BSTR bstrHeader,BSTR *pbstrValue);
HRESULT  IXMLHttpRequest_getResponseHeader_Proxy(IXMLHttpRequest *This, BSTR bstrHeader, BSTR *pbstrValue);
//C       void IXMLHttpRequest_getResponseHeader_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_getResponseHeader_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_getAllResponseHeaders_Proxy(IXMLHttpRequest *This,BSTR *pbstrHeaders);
HRESULT  IXMLHttpRequest_getAllResponseHeaders_Proxy(IXMLHttpRequest *This, BSTR *pbstrHeaders);
//C       void IXMLHttpRequest_getAllResponseHeaders_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_getAllResponseHeaders_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_send_Proxy(IXMLHttpRequest *This,VARIANT varBody);
HRESULT  IXMLHttpRequest_send_Proxy(IXMLHttpRequest *This, VARIANT varBody);
//C       void IXMLHttpRequest_send_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_send_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_abort_Proxy(IXMLHttpRequest *This);
HRESULT  IXMLHttpRequest_abort_Proxy(IXMLHttpRequest *This);
//C       void IXMLHttpRequest_abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_abort_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_status_Proxy(IXMLHttpRequest *This,LONG *plStatus);
HRESULT  IXMLHttpRequest_get_status_Proxy(IXMLHttpRequest *This, LONG *plStatus);
//C       void IXMLHttpRequest_get_status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_status_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_statusText_Proxy(IXMLHttpRequest *This,BSTR *pbstrStatus);
HRESULT  IXMLHttpRequest_get_statusText_Proxy(IXMLHttpRequest *This, BSTR *pbstrStatus);
//C       void IXMLHttpRequest_get_statusText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_statusText_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_responseXML_Proxy(IXMLHttpRequest *This,IDispatch **ppBody);
HRESULT  IXMLHttpRequest_get_responseXML_Proxy(IXMLHttpRequest *This, IDispatch **ppBody);
//C       void IXMLHttpRequest_get_responseXML_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_responseXML_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_responseText_Proxy(IXMLHttpRequest *This,BSTR *pbstrBody);
HRESULT  IXMLHttpRequest_get_responseText_Proxy(IXMLHttpRequest *This, BSTR *pbstrBody);
//C       void IXMLHttpRequest_get_responseText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_responseText_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_responseBody_Proxy(IXMLHttpRequest *This,VARIANT *pvarBody);
HRESULT  IXMLHttpRequest_get_responseBody_Proxy(IXMLHttpRequest *This, VARIANT *pvarBody);
//C       void IXMLHttpRequest_get_responseBody_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_responseBody_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_responseStream_Proxy(IXMLHttpRequest *This,VARIANT *pvarBody);
HRESULT  IXMLHttpRequest_get_responseStream_Proxy(IXMLHttpRequest *This, VARIANT *pvarBody);
//C       void IXMLHttpRequest_get_responseStream_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_responseStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_get_readyState_Proxy(IXMLHttpRequest *This,LONG *plState);
HRESULT  IXMLHttpRequest_get_readyState_Proxy(IXMLHttpRequest *This, LONG *plState);
//C       void IXMLHttpRequest_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_get_readyState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLHttpRequest_put_onreadystatechange_Proxy(IXMLHttpRequest *This,IDispatch *pReadyStateSink);
HRESULT  IXMLHttpRequest_put_onreadystatechange_Proxy(IXMLHttpRequest *This, IDispatch *pReadyStateSink);
//C       void IXMLHttpRequest_put_onreadystatechange_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLHttpRequest_put_onreadystatechange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const CLSID CLSID_XMLHTTPRequest;
extern const CLSID CLSID_XMLHTTPRequest;
//C       extern const IID IID_IXMLDSOControl;
extern const IID IID_IXMLDSOControl;
//C       typedef struct IXMLDSOControlVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDSOControl *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDSOControl *This);
//C           ULONG ( *Release)(IXMLDSOControl *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDSOControl *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDSOControl *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDSOControl *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDSOControl *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_XMLDocument)(IXMLDSOControl *This,IXMLDOMDocument **ppDoc);
//C           HRESULT ( *put_XMLDocument)(IXMLDSOControl *This,IXMLDOMDocument *ppDoc);
//C           HRESULT ( *get_JavaDSOCompatible)(IXMLDSOControl *This,WINBOOL *fJavaDSOCompatible);
//C           HRESULT ( *put_JavaDSOCompatible)(IXMLDSOControl *This,WINBOOL fJavaDSOCompatible);
//C           HRESULT ( *get_readyState)(IXMLDSOControl *This,LONG *state);
//C       } IXMLDSOControlVtbl;
struct IXMLDSOControlVtbl
{
    HRESULT  function(IXMLDSOControl *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDSOControl *This)AddRef;
    ULONG  function(IXMLDSOControl *This)Release;
    HRESULT  function(IXMLDSOControl *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDSOControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDSOControl *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDSOControl *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDSOControl *This, IXMLDOMDocument **ppDoc)get_XMLDocument;
    HRESULT  function(IXMLDSOControl *This, IXMLDOMDocument *ppDoc)put_XMLDocument;
    HRESULT  function(IXMLDSOControl *This, WINBOOL *fJavaDSOCompatible)get_JavaDSOCompatible;
    HRESULT  function(IXMLDSOControl *This, WINBOOL fJavaDSOCompatible)put_JavaDSOCompatible;
    HRESULT  function(IXMLDSOControl *This, LONG *state)get_readyState;
}
//C       struct IXMLDSOControl {
//C         struct IXMLDSOControlVtbl *lpVtbl;
//C       };
struct IXMLDSOControl
{
    IXMLDSOControlVtbl *lpVtbl;
}
//C       HRESULT IXMLDSOControl_get_XMLDocument_Proxy(IXMLDSOControl *This,IXMLDOMDocument **ppDoc);
HRESULT  IXMLDSOControl_get_XMLDocument_Proxy(IXMLDSOControl *This, IXMLDOMDocument **ppDoc);
//C       void IXMLDSOControl_get_XMLDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDSOControl_get_XMLDocument_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDSOControl_put_XMLDocument_Proxy(IXMLDSOControl *This,IXMLDOMDocument *ppDoc);
HRESULT  IXMLDSOControl_put_XMLDocument_Proxy(IXMLDSOControl *This, IXMLDOMDocument *ppDoc);
//C       void IXMLDSOControl_put_XMLDocument_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDSOControl_put_XMLDocument_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDSOControl_get_JavaDSOCompatible_Proxy(IXMLDSOControl *This,WINBOOL *fJavaDSOCompatible);
HRESULT  IXMLDSOControl_get_JavaDSOCompatible_Proxy(IXMLDSOControl *This, WINBOOL *fJavaDSOCompatible);
//C       void IXMLDSOControl_get_JavaDSOCompatible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDSOControl_get_JavaDSOCompatible_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDSOControl_put_JavaDSOCompatible_Proxy(IXMLDSOControl *This,WINBOOL fJavaDSOCompatible);
HRESULT  IXMLDSOControl_put_JavaDSOCompatible_Proxy(IXMLDSOControl *This, WINBOOL fJavaDSOCompatible);
//C       void IXMLDSOControl_put_JavaDSOCompatible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDSOControl_put_JavaDSOCompatible_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDSOControl_get_readyState_Proxy(IXMLDSOControl *This,LONG *state);
HRESULT  IXMLDSOControl_get_readyState_Proxy(IXMLDSOControl *This, LONG *state);
//C       void IXMLDSOControl_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDSOControl_get_readyState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const CLSID CLSID_XMLDSOControl;
extern const CLSID CLSID_XMLDSOControl;
//C       extern const IID IID_IXMLElementCollection;
extern const IID IID_IXMLElementCollection;
//C       typedef struct IXMLElementCollectionVtbl {
//C           HRESULT ( *QueryInterface)(IXMLElementCollection *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLElementCollection *This);
//C           ULONG ( *Release)(IXMLElementCollection *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLElementCollection *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLElementCollection *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLElementCollection *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLElementCollection *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *put_length)(IXMLElementCollection *This,LONG v);
//C           HRESULT ( *get_length)(IXMLElementCollection *This,LONG *p);
//C           HRESULT ( *get__newEnum)(IXMLElementCollection *This,IUnknown **ppUnk);
//C           HRESULT ( *item)(IXMLElementCollection *This,VARIANT var1,VARIANT var2,IDispatch **ppDisp);
//C       } IXMLElementCollectionVtbl;
struct IXMLElementCollectionVtbl
{
    HRESULT  function(IXMLElementCollection *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLElementCollection *This)AddRef;
    ULONG  function(IXMLElementCollection *This)Release;
    HRESULT  function(IXMLElementCollection *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLElementCollection *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLElementCollection *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLElementCollection *This, LONG v)put_length;
    HRESULT  function(IXMLElementCollection *This, LONG *p)get_length;
    HRESULT  function(IXMLElementCollection *This, IUnknown **ppUnk)get__newEnum;
    HRESULT  function(IXMLElementCollection *This, VARIANT var1, VARIANT var2, IDispatch **ppDisp)item;
}
//C       struct IXMLElementCollection {
//C         struct IXMLElementCollectionVtbl *lpVtbl;
//C       };
struct IXMLElementCollection
{
    IXMLElementCollectionVtbl *lpVtbl;
}
//C       HRESULT IXMLElementCollection_put_length_Proxy(IXMLElementCollection *This,LONG v);
HRESULT  IXMLElementCollection_put_length_Proxy(IXMLElementCollection *This, LONG v);
//C       void IXMLElementCollection_put_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElementCollection_put_length_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElementCollection_get_length_Proxy(IXMLElementCollection *This,LONG *p);
HRESULT  IXMLElementCollection_get_length_Proxy(IXMLElementCollection *This, LONG *p);
//C       void IXMLElementCollection_get_length_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElementCollection_get_length_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElementCollection_get__newEnum_Proxy(IXMLElementCollection *This,IUnknown **ppUnk);
HRESULT  IXMLElementCollection_get__newEnum_Proxy(IXMLElementCollection *This, IUnknown **ppUnk);
//C       void IXMLElementCollection_get__newEnum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElementCollection_get__newEnum_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElementCollection_item_Proxy(IXMLElementCollection *This,VARIANT var1,VARIANT var2,IDispatch **ppDisp);
HRESULT  IXMLElementCollection_item_Proxy(IXMLElementCollection *This, VARIANT var1, VARIANT var2, IDispatch **ppDisp);
//C       void IXMLElementCollection_item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElementCollection_item_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDocument;
extern const IID IID_IXMLDocument;
//C       typedef struct IXMLDocumentVtbl {
//C           HRESULT ( *QueryInterface)(IXMLDocument *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDocument *This);
//C           ULONG ( *Release)(IXMLDocument *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDocument *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDocument *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDocument *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDocument *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_root)(IXMLDocument *This,IXMLElement **p);
//C           HRESULT ( *get_fileSize)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *get_fileModifiedDate)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *get_fileUpdatedDate)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *get_URL)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *put_URL)(IXMLDocument *This,BSTR p);
//C           HRESULT ( *get_mimeType)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *get_readyState)(IXMLDocument *This,LONG *pl);
//C           HRESULT ( *get_charset)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *put_charset)(IXMLDocument *This,BSTR p);
//C           HRESULT ( *get_version)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *get_doctype)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *get_dtdURL)(IXMLDocument *This,BSTR *p);
//C           HRESULT ( *createElement)(IXMLDocument *This,VARIANT vType,VARIANT var1,IXMLElement **ppElem);
//C       } IXMLDocumentVtbl;
struct IXMLDocumentVtbl
{
    HRESULT  function(IXMLDocument *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDocument *This)AddRef;
    ULONG  function(IXMLDocument *This)Release;
    HRESULT  function(IXMLDocument *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDocument *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDocument *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDocument *This, IXMLElement **p)get_root;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_fileSize;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_fileModifiedDate;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_fileUpdatedDate;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_URL;
    HRESULT  function(IXMLDocument *This, BSTR p)put_URL;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_mimeType;
    HRESULT  function(IXMLDocument *This, LONG *pl)get_readyState;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_charset;
    HRESULT  function(IXMLDocument *This, BSTR p)put_charset;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_version;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_doctype;
    HRESULT  function(IXMLDocument *This, BSTR *p)get_dtdURL;
    HRESULT  function(IXMLDocument *This, VARIANT vType, VARIANT var1, IXMLElement **ppElem)createElement;
}
//C       struct IXMLDocument {
//C         struct IXMLDocumentVtbl *lpVtbl;
//C       };
struct IXMLDocument
{
    IXMLDocumentVtbl *lpVtbl;
}
//C       HRESULT IXMLDocument_get_root_Proxy(IXMLDocument *This,IXMLElement **p);
HRESULT  IXMLDocument_get_root_Proxy(IXMLDocument *This, IXMLElement **p);
//C       void IXMLDocument_get_root_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_root_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_fileSize_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_fileSize_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_fileSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_fileSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_fileModifiedDate_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_fileModifiedDate_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_fileModifiedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_fileModifiedDate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_fileUpdatedDate_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_fileUpdatedDate_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_fileUpdatedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_fileUpdatedDate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_URL_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_URL_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_URL_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_put_URL_Proxy(IXMLDocument *This,BSTR p);
HRESULT  IXMLDocument_put_URL_Proxy(IXMLDocument *This, BSTR p);
//C       void IXMLDocument_put_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_put_URL_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_mimeType_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_mimeType_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_mimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_mimeType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_readyState_Proxy(IXMLDocument *This,LONG *pl);
HRESULT  IXMLDocument_get_readyState_Proxy(IXMLDocument *This, LONG *pl);
//C       void IXMLDocument_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_readyState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_charset_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_charset_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_charset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_put_charset_Proxy(IXMLDocument *This,BSTR p);
HRESULT  IXMLDocument_put_charset_Proxy(IXMLDocument *This, BSTR p);
//C       void IXMLDocument_put_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_put_charset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_version_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_version_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_version_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_doctype_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_doctype_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_doctype_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_get_dtdURL_Proxy(IXMLDocument *This,BSTR *p);
HRESULT  IXMLDocument_get_dtdURL_Proxy(IXMLDocument *This, BSTR *p);
//C       void IXMLDocument_get_dtdURL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_get_dtdURL_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument_createElement_Proxy(IXMLDocument *This,VARIANT vType,VARIANT var1,IXMLElement **ppElem);
HRESULT  IXMLDocument_createElement_Proxy(IXMLDocument *This, VARIANT vType, VARIANT var1, IXMLElement **ppElem);
//C       void IXMLDocument_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument_createElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLDocument2;
extern const IID IID_IXMLDocument2;
//C       typedef struct IXMLDocument2Vtbl {
//C           HRESULT ( *QueryInterface)(IXMLDocument2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLDocument2 *This);
//C           ULONG ( *Release)(IXMLDocument2 *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLDocument2 *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLDocument2 *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLDocument2 *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLDocument2 *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_root)(IXMLDocument2 *This,IXMLElement2 **p);
//C           HRESULT ( *get_fileSize)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *get_fileModifiedDate)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *get_fileUpdatedDate)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *get_URL)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *put_URL)(IXMLDocument2 *This,BSTR p);
//C           HRESULT ( *get_mimeType)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *get_readyState)(IXMLDocument2 *This,LONG *pl);
//C           HRESULT ( *get_charset)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *put_charset)(IXMLDocument2 *This,BSTR p);
//C           HRESULT ( *get_version)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *get_doctype)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *get_dtdURL)(IXMLDocument2 *This,BSTR *p);
//C           HRESULT ( *createElement)(IXMLDocument2 *This,VARIANT vType,VARIANT var1,IXMLElement2 **ppElem);
//C           HRESULT ( *get_async)(IXMLDocument2 *This,VARIANT_BOOL *pf);
//C           HRESULT ( *put_async)(IXMLDocument2 *This,VARIANT_BOOL f);
//C       } IXMLDocument2Vtbl;
struct IXMLDocument2Vtbl
{
    HRESULT  function(IXMLDocument2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLDocument2 *This)AddRef;
    ULONG  function(IXMLDocument2 *This)Release;
    HRESULT  function(IXMLDocument2 *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLDocument2 *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLDocument2 *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLDocument2 *This, IXMLElement2 **p)get_root;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_fileSize;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_fileModifiedDate;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_fileUpdatedDate;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_URL;
    HRESULT  function(IXMLDocument2 *This, BSTR p)put_URL;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_mimeType;
    HRESULT  function(IXMLDocument2 *This, LONG *pl)get_readyState;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_charset;
    HRESULT  function(IXMLDocument2 *This, BSTR p)put_charset;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_version;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_doctype;
    HRESULT  function(IXMLDocument2 *This, BSTR *p)get_dtdURL;
    HRESULT  function(IXMLDocument2 *This, VARIANT vType, VARIANT var1, IXMLElement2 **ppElem)createElement;
    HRESULT  function(IXMLDocument2 *This, VARIANT_BOOL *pf)get_async;
    HRESULT  function(IXMLDocument2 *This, VARIANT_BOOL f)put_async;
}
//C       struct IXMLDocument2 {
//C         struct IXMLDocument2Vtbl *lpVtbl;
//C       };
struct IXMLDocument2
{
    IXMLDocument2Vtbl *lpVtbl;
}
//C       HRESULT IXMLDocument2_get_root_Proxy(IXMLDocument2 *This,IXMLElement2 **p);
HRESULT  IXMLDocument2_get_root_Proxy(IXMLDocument2 *This, IXMLElement2 **p);
//C       void IXMLDocument2_get_root_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_root_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_fileSize_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_fileSize_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_fileSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_fileSize_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_fileModifiedDate_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_fileModifiedDate_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_fileModifiedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_fileModifiedDate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_fileUpdatedDate_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_fileUpdatedDate_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_fileUpdatedDate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_fileUpdatedDate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_URL_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_URL_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_URL_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_put_URL_Proxy(IXMLDocument2 *This,BSTR p);
HRESULT  IXMLDocument2_put_URL_Proxy(IXMLDocument2 *This, BSTR p);
//C       void IXMLDocument2_put_URL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_put_URL_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_mimeType_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_mimeType_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_mimeType_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_mimeType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_readyState_Proxy(IXMLDocument2 *This,LONG *pl);
HRESULT  IXMLDocument2_get_readyState_Proxy(IXMLDocument2 *This, LONG *pl);
//C       void IXMLDocument2_get_readyState_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_readyState_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_charset_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_charset_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_charset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_put_charset_Proxy(IXMLDocument2 *This,BSTR p);
HRESULT  IXMLDocument2_put_charset_Proxy(IXMLDocument2 *This, BSTR p);
//C       void IXMLDocument2_put_charset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_put_charset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_version_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_version_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_version_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_version_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_doctype_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_doctype_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_doctype_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_doctype_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_dtdURL_Proxy(IXMLDocument2 *This,BSTR *p);
HRESULT  IXMLDocument2_get_dtdURL_Proxy(IXMLDocument2 *This, BSTR *p);
//C       void IXMLDocument2_get_dtdURL_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_dtdURL_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_createElement_Proxy(IXMLDocument2 *This,VARIANT vType,VARIANT var1,IXMLElement2 **ppElem);
HRESULT  IXMLDocument2_createElement_Proxy(IXMLDocument2 *This, VARIANT vType, VARIANT var1, IXMLElement2 **ppElem);
//C       void IXMLDocument2_createElement_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_createElement_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_get_async_Proxy(IXMLDocument2 *This,VARIANT_BOOL *pf);
HRESULT  IXMLDocument2_get_async_Proxy(IXMLDocument2 *This, VARIANT_BOOL *pf);
//C       void IXMLDocument2_get_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_get_async_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLDocument2_put_async_Proxy(IXMLDocument2 *This,VARIANT_BOOL f);
HRESULT  IXMLDocument2_put_async_Proxy(IXMLDocument2 *This, VARIANT_BOOL f);
//C       void IXMLDocument2_put_async_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLDocument2_put_async_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLElement;
extern const IID IID_IXMLElement;
//C       typedef struct IXMLElementVtbl {
//C           HRESULT ( *QueryInterface)(IXMLElement *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLElement *This);
//C           ULONG ( *Release)(IXMLElement *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLElement *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLElement *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLElement *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLElement *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_tagName)(IXMLElement *This,BSTR *p);
//C           HRESULT ( *put_tagName)(IXMLElement *This,BSTR p);
//C           HRESULT ( *get_parent)(IXMLElement *This,IXMLElement **ppParent);
//C           HRESULT ( *setAttribute)(IXMLElement *This,BSTR strPropertyName,VARIANT PropertyValue);
//C           HRESULT ( *getAttribute)(IXMLElement *This,BSTR strPropertyName,VARIANT *PropertyValue);
//C           HRESULT ( *removeAttribute)(IXMLElement *This,BSTR strPropertyName);
//C           HRESULT ( *get_children)(IXMLElement *This,IXMLElementCollection **pp);
//C           HRESULT ( *get_type)(IXMLElement *This,LONG *plType);
//C           HRESULT ( *get_text)(IXMLElement *This,BSTR *p);
//C           HRESULT ( *put_text)(IXMLElement *This,BSTR p);
//C           HRESULT ( *addChild)(IXMLElement *This,IXMLElement *pChildElem,LONG lIndex,LONG lReserved);
//C           HRESULT ( *removeChild)(IXMLElement *This,IXMLElement *pChildElem);
//C       } IXMLElementVtbl;
struct IXMLElementVtbl
{
    HRESULT  function(IXMLElement *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLElement *This)AddRef;
    ULONG  function(IXMLElement *This)Release;
    HRESULT  function(IXMLElement *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLElement *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLElement *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLElement *This, BSTR *p)get_tagName;
    HRESULT  function(IXMLElement *This, BSTR p)put_tagName;
    HRESULT  function(IXMLElement *This, IXMLElement **ppParent)get_parent;
    HRESULT  function(IXMLElement *This, BSTR strPropertyName, VARIANT PropertyValue)setAttribute;
    HRESULT  function(IXMLElement *This, BSTR strPropertyName, VARIANT *PropertyValue)getAttribute;
    HRESULT  function(IXMLElement *This, BSTR strPropertyName)removeAttribute;
    HRESULT  function(IXMLElement *This, IXMLElementCollection **pp)get_children;
    HRESULT  function(IXMLElement *This, LONG *plType)get_type;
    HRESULT  function(IXMLElement *This, BSTR *p)get_text;
    HRESULT  function(IXMLElement *This, BSTR p)put_text;
    HRESULT  function(IXMLElement *This, IXMLElement *pChildElem, LONG lIndex, LONG lReserved)addChild;
    HRESULT  function(IXMLElement *This, IXMLElement *pChildElem)removeChild;
}
//C       struct IXMLElement {
//C         struct IXMLElementVtbl *lpVtbl;
//C       };
struct IXMLElement
{
    IXMLElementVtbl *lpVtbl;
}
//C       HRESULT IXMLElement_get_tagName_Proxy(IXMLElement *This,BSTR *p);
HRESULT  IXMLElement_get_tagName_Proxy(IXMLElement *This, BSTR *p);
//C       void IXMLElement_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_get_tagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_put_tagName_Proxy(IXMLElement *This,BSTR p);
HRESULT  IXMLElement_put_tagName_Proxy(IXMLElement *This, BSTR p);
//C       void IXMLElement_put_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_put_tagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_get_parent_Proxy(IXMLElement *This,IXMLElement **ppParent);
HRESULT  IXMLElement_get_parent_Proxy(IXMLElement *This, IXMLElement **ppParent);
//C       void IXMLElement_get_parent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_get_parent_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_setAttribute_Proxy(IXMLElement *This,BSTR strPropertyName,VARIANT PropertyValue);
HRESULT  IXMLElement_setAttribute_Proxy(IXMLElement *This, BSTR strPropertyName, VARIANT PropertyValue);
//C       void IXMLElement_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_setAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_getAttribute_Proxy(IXMLElement *This,BSTR strPropertyName,VARIANT *PropertyValue);
HRESULT  IXMLElement_getAttribute_Proxy(IXMLElement *This, BSTR strPropertyName, VARIANT *PropertyValue);
//C       void IXMLElement_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_getAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_removeAttribute_Proxy(IXMLElement *This,BSTR strPropertyName);
HRESULT  IXMLElement_removeAttribute_Proxy(IXMLElement *This, BSTR strPropertyName);
//C       void IXMLElement_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_removeAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_get_children_Proxy(IXMLElement *This,IXMLElementCollection **pp);
HRESULT  IXMLElement_get_children_Proxy(IXMLElement *This, IXMLElementCollection **pp);
//C       void IXMLElement_get_children_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_get_children_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_get_type_Proxy(IXMLElement *This,LONG *plType);
HRESULT  IXMLElement_get_type_Proxy(IXMLElement *This, LONG *plType);
//C       void IXMLElement_get_type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_get_type_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_get_text_Proxy(IXMLElement *This,BSTR *p);
HRESULT  IXMLElement_get_text_Proxy(IXMLElement *This, BSTR *p);
//C       void IXMLElement_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_get_text_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_put_text_Proxy(IXMLElement *This,BSTR p);
HRESULT  IXMLElement_put_text_Proxy(IXMLElement *This, BSTR p);
//C       void IXMLElement_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_put_text_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_addChild_Proxy(IXMLElement *This,IXMLElement *pChildElem,LONG lIndex,LONG lReserved);
HRESULT  IXMLElement_addChild_Proxy(IXMLElement *This, IXMLElement *pChildElem, LONG lIndex, LONG lReserved);
//C       void IXMLElement_addChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_addChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement_removeChild_Proxy(IXMLElement *This,IXMLElement *pChildElem);
HRESULT  IXMLElement_removeChild_Proxy(IXMLElement *This, IXMLElement *pChildElem);
//C       void IXMLElement_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement_removeChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLElement2;
extern const IID IID_IXMLElement2;
//C       typedef struct IXMLElement2Vtbl {
//C           HRESULT ( *QueryInterface)(IXMLElement2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLElement2 *This);
//C           ULONG ( *Release)(IXMLElement2 *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLElement2 *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLElement2 *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLElement2 *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLElement2 *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_tagName)(IXMLElement2 *This,BSTR *p);
//C           HRESULT ( *put_tagName)(IXMLElement2 *This,BSTR p);
//C           HRESULT ( *get_parent)(IXMLElement2 *This,IXMLElement2 **ppParent);
//C           HRESULT ( *setAttribute)(IXMLElement2 *This,BSTR strPropertyName,VARIANT PropertyValue);
//C           HRESULT ( *getAttribute)(IXMLElement2 *This,BSTR strPropertyName,VARIANT *PropertyValue);
//C           HRESULT ( *removeAttribute)(IXMLElement2 *This,BSTR strPropertyName);
//C           HRESULT ( *get_children)(IXMLElement2 *This,IXMLElementCollection **pp);
//C           HRESULT ( *get_type)(IXMLElement2 *This,LONG *plType);
//C           HRESULT ( *get_text)(IXMLElement2 *This,BSTR *p);
//C           HRESULT ( *put_text)(IXMLElement2 *This,BSTR p);
//C           HRESULT ( *addChild)(IXMLElement2 *This,IXMLElement2 *pChildElem,LONG lIndex,LONG lReserved);
//C           HRESULT ( *removeChild)(IXMLElement2 *This,IXMLElement2 *pChildElem);
//C           HRESULT ( *get_attributes)(IXMLElement2 *This,IXMLElementCollection **pp);
//C       } IXMLElement2Vtbl;
struct IXMLElement2Vtbl
{
    HRESULT  function(IXMLElement2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLElement2 *This)AddRef;
    ULONG  function(IXMLElement2 *This)Release;
    HRESULT  function(IXMLElement2 *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLElement2 *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLElement2 *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLElement2 *This, BSTR *p)get_tagName;
    HRESULT  function(IXMLElement2 *This, BSTR p)put_tagName;
    HRESULT  function(IXMLElement2 *This, IXMLElement2 **ppParent)get_parent;
    HRESULT  function(IXMLElement2 *This, BSTR strPropertyName, VARIANT PropertyValue)setAttribute;
    HRESULT  function(IXMLElement2 *This, BSTR strPropertyName, VARIANT *PropertyValue)getAttribute;
    HRESULT  function(IXMLElement2 *This, BSTR strPropertyName)removeAttribute;
    HRESULT  function(IXMLElement2 *This, IXMLElementCollection **pp)get_children;
    HRESULT  function(IXMLElement2 *This, LONG *plType)get_type;
    HRESULT  function(IXMLElement2 *This, BSTR *p)get_text;
    HRESULT  function(IXMLElement2 *This, BSTR p)put_text;
    HRESULT  function(IXMLElement2 *This, IXMLElement2 *pChildElem, LONG lIndex, LONG lReserved)addChild;
    HRESULT  function(IXMLElement2 *This, IXMLElement2 *pChildElem)removeChild;
    HRESULT  function(IXMLElement2 *This, IXMLElementCollection **pp)get_attributes;
}
//C       struct IXMLElement2 {
//C         struct IXMLElement2Vtbl *lpVtbl;
//C       };
struct IXMLElement2
{
    IXMLElement2Vtbl *lpVtbl;
}
//C       HRESULT IXMLElement2_get_tagName_Proxy(IXMLElement2 *This,BSTR *p);
HRESULT  IXMLElement2_get_tagName_Proxy(IXMLElement2 *This, BSTR *p);
//C       void IXMLElement2_get_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_get_tagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_put_tagName_Proxy(IXMLElement2 *This,BSTR p);
HRESULT  IXMLElement2_put_tagName_Proxy(IXMLElement2 *This, BSTR p);
//C       void IXMLElement2_put_tagName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_put_tagName_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_get_parent_Proxy(IXMLElement2 *This,IXMLElement2 **ppParent);
HRESULT  IXMLElement2_get_parent_Proxy(IXMLElement2 *This, IXMLElement2 **ppParent);
//C       void IXMLElement2_get_parent_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_get_parent_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_setAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName,VARIANT PropertyValue);
HRESULT  IXMLElement2_setAttribute_Proxy(IXMLElement2 *This, BSTR strPropertyName, VARIANT PropertyValue);
//C       void IXMLElement2_setAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_setAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_getAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName,VARIANT *PropertyValue);
HRESULT  IXMLElement2_getAttribute_Proxy(IXMLElement2 *This, BSTR strPropertyName, VARIANT *PropertyValue);
//C       void IXMLElement2_getAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_getAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_removeAttribute_Proxy(IXMLElement2 *This,BSTR strPropertyName);
HRESULT  IXMLElement2_removeAttribute_Proxy(IXMLElement2 *This, BSTR strPropertyName);
//C       void IXMLElement2_removeAttribute_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_removeAttribute_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_get_children_Proxy(IXMLElement2 *This,IXMLElementCollection **pp);
HRESULT  IXMLElement2_get_children_Proxy(IXMLElement2 *This, IXMLElementCollection **pp);
//C       void IXMLElement2_get_children_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_get_children_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_get_type_Proxy(IXMLElement2 *This,LONG *plType);
HRESULT  IXMLElement2_get_type_Proxy(IXMLElement2 *This, LONG *plType);
//C       void IXMLElement2_get_type_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_get_type_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_get_text_Proxy(IXMLElement2 *This,BSTR *p);
HRESULT  IXMLElement2_get_text_Proxy(IXMLElement2 *This, BSTR *p);
//C       void IXMLElement2_get_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_get_text_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_put_text_Proxy(IXMLElement2 *This,BSTR p);
HRESULT  IXMLElement2_put_text_Proxy(IXMLElement2 *This, BSTR p);
//C       void IXMLElement2_put_text_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_put_text_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_addChild_Proxy(IXMLElement2 *This,IXMLElement2 *pChildElem,LONG lIndex,LONG lReserved);
HRESULT  IXMLElement2_addChild_Proxy(IXMLElement2 *This, IXMLElement2 *pChildElem, LONG lIndex, LONG lReserved);
//C       void IXMLElement2_addChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_addChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_removeChild_Proxy(IXMLElement2 *This,IXMLElement2 *pChildElem);
HRESULT  IXMLElement2_removeChild_Proxy(IXMLElement2 *This, IXMLElement2 *pChildElem);
//C       void IXMLElement2_removeChild_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_removeChild_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLElement2_get_attributes_Proxy(IXMLElement2 *This,IXMLElementCollection **pp);
HRESULT  IXMLElement2_get_attributes_Proxy(IXMLElement2 *This, IXMLElementCollection **pp);
//C       void IXMLElement2_get_attributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLElement2_get_attributes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLAttribute;
extern const IID IID_IXMLAttribute;
//C       typedef struct IXMLAttributeVtbl {
//C           HRESULT ( *QueryInterface)(IXMLAttribute *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLAttribute *This);
//C           ULONG ( *Release)(IXMLAttribute *This);
//C           HRESULT ( *GetTypeInfoCount)(IXMLAttribute *This,UINT *pctinfo);
//C           HRESULT ( *GetTypeInfo)(IXMLAttribute *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
//C           HRESULT ( *GetIDsOfNames)(IXMLAttribute *This,const IID *const riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
//C           HRESULT ( *Invoke)(IXMLAttribute *This,DISPID dispIdMember,const IID *const riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
//C           HRESULT ( *get_name)(IXMLAttribute *This,BSTR *n);
//C           HRESULT ( *get_value)(IXMLAttribute *This,BSTR *v);
//C       } IXMLAttributeVtbl;
struct IXMLAttributeVtbl
{
    HRESULT  function(IXMLAttribute *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLAttribute *This)AddRef;
    ULONG  function(IXMLAttribute *This)Release;
    HRESULT  function(IXMLAttribute *This, UINT *pctinfo)GetTypeInfoCount;
    HRESULT  function(IXMLAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)GetTypeInfo;
    HRESULT  function(IXMLAttribute *This, IID *riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)GetIDsOfNames;
    HRESULT  function(IXMLAttribute *This, DISPID dispIdMember, IID *riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)Invoke;
    HRESULT  function(IXMLAttribute *This, BSTR *n)get_name;
    HRESULT  function(IXMLAttribute *This, BSTR *v)get_value;
}
//C       struct IXMLAttribute {
//C         struct IXMLAttributeVtbl *lpVtbl;
//C       };
struct IXMLAttribute
{
    IXMLAttributeVtbl *lpVtbl;
}
//C       HRESULT IXMLAttribute_get_name_Proxy(IXMLAttribute *This,BSTR *n);
HRESULT  IXMLAttribute_get_name_Proxy(IXMLAttribute *This, BSTR *n);
//C       void IXMLAttribute_get_name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLAttribute_get_name_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IXMLAttribute_get_value_Proxy(IXMLAttribute *This,BSTR *v);
HRESULT  IXMLAttribute_get_value_Proxy(IXMLAttribute *This, BSTR *v);
//C       void IXMLAttribute_get_value_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLAttribute_get_value_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IXMLError;
extern const IID IID_IXMLError;
//C       typedef struct IXMLErrorVtbl {
//C           HRESULT ( *QueryInterface)(IXMLError *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IXMLError *This);
//C           ULONG ( *Release)(IXMLError *This);
//C           HRESULT ( *GetErrorInfo)(IXMLError *This,XML_ERROR *pErrorReturn);
//C       } IXMLErrorVtbl;
struct IXMLErrorVtbl
{
    HRESULT  function(IXMLError *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IXMLError *This)AddRef;
    ULONG  function(IXMLError *This)Release;
    HRESULT  function(IXMLError *This, XML_ERROR *pErrorReturn)GetErrorInfo;
}
//C       struct IXMLError {
//C         struct IXMLErrorVtbl *lpVtbl;
//C       };
struct IXMLError
{
    IXMLErrorVtbl *lpVtbl;
}
//C       HRESULT IXMLError_GetErrorInfo_Proxy(IXMLError *This,XML_ERROR *pErrorReturn);
HRESULT  IXMLError_GetErrorInfo_Proxy(IXMLError *This, XML_ERROR *pErrorReturn);
//C       void IXMLError_GetErrorInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IXMLError_GetErrorInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const CLSID CLSID_XMLDocument;
extern const CLSID CLSID_XMLDocument;
//C       extern const IID CLSID_SBS_StdURLMoniker;
extern const IID CLSID_SBS_StdURLMoniker;
//C       extern const IID CLSID_SBS_HttpProtocol;
extern const IID CLSID_SBS_HttpProtocol;
//C       extern const IID CLSID_SBS_FtpProtocol;
extern const IID CLSID_SBS_FtpProtocol;
//C       extern const IID CLSID_SBS_GopherProtocol;
extern const IID CLSID_SBS_GopherProtocol;
//C       extern const IID CLSID_SBS_HttpSProtocol;
extern const IID CLSID_SBS_HttpSProtocol;
//C       extern const IID CLSID_SBS_FileProtocol;
extern const IID CLSID_SBS_FileProtocol;
//C       extern const IID CLSID_SBS_MkProtocol;
extern const IID CLSID_SBS_MkProtocol;
//C       extern const IID CLSID_SBS_UrlMkBindCtx;
extern const IID CLSID_SBS_UrlMkBindCtx;
//C       extern const IID CLSID_SBS_SoftDistExt;
extern const IID CLSID_SBS_SoftDistExt;
//C       extern const IID CLSID_SBS_StdEncodingFilterFac;
extern const IID CLSID_SBS_StdEncodingFilterFac;
//C       extern const IID CLSID_SBS_DeCompMimeFilter;
extern const IID CLSID_SBS_DeCompMimeFilter;
//C       extern const IID CLSID_SBS_CdlProtocol;
extern const IID CLSID_SBS_CdlProtocol;
//C       extern const IID CLSID_SBS_ClassInstallFilter;
extern const IID CLSID_SBS_ClassInstallFilter;
//C       extern const IID CLSID_SBS_InternetSecurityManager;
extern const IID CLSID_SBS_InternetSecurityManager;
//C       extern const IID CLSID_SBS_InternetZoneManager;
extern const IID CLSID_SBS_InternetZoneManager;
//C       extern const IID IID_IAsyncMoniker;
extern const IID IID_IAsyncMoniker;
//C       extern const IID CLSID_StdURLMoniker;
extern const IID CLSID_StdURLMoniker;
//C       extern const IID CLSID_HttpProtocol;
extern const IID CLSID_HttpProtocol;
//C       extern const IID CLSID_FtpProtocol;
extern const IID CLSID_FtpProtocol;
//C       extern const IID CLSID_GopherProtocol;
extern const IID CLSID_GopherProtocol;
//C       extern const IID CLSID_HttpSProtocol;
extern const IID CLSID_HttpSProtocol;
//C       extern const IID CLSID_FileProtocol;
extern const IID CLSID_FileProtocol;
//C       extern const IID CLSID_MkProtocol;
extern const IID CLSID_MkProtocol;
//C       extern const IID CLSID_StdURLProtocol;
extern const IID CLSID_StdURLProtocol;
//C       extern const IID CLSID_UrlMkBindCtx;
extern const IID CLSID_UrlMkBindCtx;
//C       extern const IID CLSID_StdEncodingFilterFac;
extern const IID CLSID_StdEncodingFilterFac;
//C       extern const IID CLSID_DeCompMimeFilter;
extern const IID CLSID_DeCompMimeFilter;
//C       extern const IID CLSID_CdlProtocol;
extern const IID CLSID_CdlProtocol;
//C       extern const IID CLSID_ClassInstallFilter;
extern const IID CLSID_ClassInstallFilter;
//C       extern const IID IID_IAsyncBindCtx;
extern const IID IID_IAsyncBindCtx;
//C       extern HRESULT CreateURLMoniker(LPMONIKER pMkCtx,LPCWSTR szURL,LPMONIKER *ppmk);
HRESULT  CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk);
//C       extern HRESULT CreateURLMonikerEx(LPMONIKER pMkCtx,LPCWSTR szURL,LPMONIKER *ppmk,DWORD dwFlags);
HRESULT  CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER *ppmk, DWORD dwFlags);
//C       extern HRESULT GetClassURL(LPCWSTR szURL,CLSID *pClsID);
HRESULT  GetClassURL(LPCWSTR szURL, CLSID *pClsID);
//C       extern HRESULT CreateAsyncBindCtx(DWORD reserved,IBindStatusCallback *pBSCb,IEnumFORMATETC *pEFetc,IBindCtx **ppBC);
HRESULT  CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEFetc, IBindCtx **ppBC);
//C       extern HRESULT CreateAsyncBindCtxEx(IBindCtx *pbc,DWORD dwOptions,IBindStatusCallback *pBSCb,IEnumFORMATETC *pEnum,IBindCtx **ppBC,DWORD reserved);
HRESULT  CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum, IBindCtx **ppBC, DWORD reserved);
//C       extern HRESULT MkParseDisplayNameEx(IBindCtx *pbc,LPCWSTR szDisplayName,ULONG *pchEaten,LPMONIKER *ppmk);
HRESULT  MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten, LPMONIKER *ppmk);
//C       extern HRESULT RegisterBindStatusCallback(LPBC pBC,IBindStatusCallback *pBSCb,IBindStatusCallback **ppBSCBPrev,DWORD dwReserved);
HRESULT  RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb, IBindStatusCallback **ppBSCBPrev, DWORD dwReserved);
//C       extern HRESULT RevokeBindStatusCallback(LPBC pBC,IBindStatusCallback *pBSCb);
HRESULT  RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);
//C       extern HRESULT GetClassFileOrMime(LPBC pBC,LPCWSTR szFilename,LPVOID pBuffer,DWORD cbSize,LPCWSTR szMime,DWORD dwReserved,CLSID *pclsid);
HRESULT  GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
//C       extern HRESULT IsValidURL(LPBC pBC,LPCWSTR szURL,DWORD dwReserved);
HRESULT  IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
//C       extern HRESULT CoGetClassObjectFromURL(const IID *const rCLASSID,LPCWSTR szCODE,DWORD dwFileVersionMS,DWORD dwFileVersionLS,LPCWSTR szTYPE,LPBINDCTX pBindCtx,DWORD dwClsContext,LPVOID pvReserved,const IID *const riid,LPVOID *ppv);
HRESULT  CoGetClassObjectFromURL(IID *rCLASSID, LPCWSTR szCODE, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szTYPE, LPBINDCTX pBindCtx, DWORD dwClsContext, LPVOID pvReserved, IID *riid, LPVOID *ppv);
//C       extern HRESULT FaultInIEFeature(HWND hWnd,uCLSSPEC *pClassSpec,QUERYCONTEXT *pQuery,DWORD dwFlags);
HRESULT  FaultInIEFeature(HWND hWnd, uCLSSPEC *pClassSpec, QUERYCONTEXT *pQuery, DWORD dwFlags);
//C       extern HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec,LPSTR *ppszComponentID);
HRESULT  GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec, LPSTR *ppszComponentID);
//C       extern HRESULT IsAsyncMoniker(IMoniker *pmk);
HRESULT  IsAsyncMoniker(IMoniker *pmk);
//C       extern HRESULT CreateURLBinding(LPCWSTR lpszUrl,IBindCtx *pbc,IBinding **ppBdg);
HRESULT  CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);
//C       extern HRESULT RegisterMediaTypes(UINT ctypes,const LPCSTR *rgszTypes,CLIPFORMAT *rgcfTypes);
HRESULT  RegisterMediaTypes(UINT ctypes, LPCSTR *rgszTypes, CLIPFORMAT *rgcfTypes);
//C       extern HRESULT FindMediaType(LPCSTR rgszTypes,CLIPFORMAT *rgcfTypes);
HRESULT  FindMediaType(LPCSTR rgszTypes, CLIPFORMAT *rgcfTypes);
//C       extern HRESULT CreateFormatEnumerator(UINT cfmtetc,FORMATETC *rgfmtetc,IEnumFORMATETC **ppenumfmtetc);
HRESULT  CreateFormatEnumerator(UINT cfmtetc, FORMATETC *rgfmtetc, IEnumFORMATETC **ppenumfmtetc);
//C       extern HRESULT RegisterFormatEnumerator(LPBC pBC,IEnumFORMATETC *pEFetc,DWORD reserved);
HRESULT  RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
//C       extern HRESULT RevokeFormatEnumerator(LPBC pBC,IEnumFORMATETC *pEFetc);
HRESULT  RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);
//C       extern HRESULT RegisterMediaTypeClass(LPBC pBC,UINT ctypes,const LPCSTR *rgszTypes,CLSID *rgclsID,DWORD reserved);
HRESULT  RegisterMediaTypeClass(LPBC pBC, UINT ctypes, LPCSTR *rgszTypes, CLSID *rgclsID, DWORD reserved);
//C       extern HRESULT FindMediaTypeClass(LPBC pBC,LPCSTR szType,CLSID *pclsID,DWORD reserved);
HRESULT  FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
//C       extern HRESULT UrlMkSetSessionOption(DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD dwReserved);
HRESULT  UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
//C       extern HRESULT UrlMkGetSessionOption(DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD *pdwBufferLength,DWORD dwReserved);
HRESULT  UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLength, DWORD dwReserved);
//C       extern HRESULT FindMimeFromData(LPBC pBC,LPCWSTR pwzUrl,LPVOID pBuffer,DWORD cbSize,LPCWSTR pwzMimeProposed,DWORD dwMimeFlags,LPWSTR *ppwzMimeOut,DWORD dwReserved);
HRESULT  FindMimeFromData(LPBC pBC, LPCWSTR pwzUrl, LPVOID pBuffer, DWORD cbSize, LPCWSTR pwzMimeProposed, DWORD dwMimeFlags, LPWSTR *ppwzMimeOut, DWORD dwReserved);
//C       extern HRESULT ObtainUserAgentString(DWORD dwOption,LPSTR pszUAOut,DWORD *cbSize);
HRESULT  ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD *cbSize);
//C       extern HRESULT CompareSecurityIds(BYTE *pbSecurityId1,DWORD dwLen1,BYTE *pbSecurityId2,DWORD dwLen2,DWORD dwReserved);
HRESULT  CompareSecurityIds(BYTE *pbSecurityId1, DWORD dwLen1, BYTE *pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
//C       extern HRESULT CompatFlagsFromClsid(CLSID *pclsid,LPDWORD pdwCompatFlags,LPDWORD pdwMiscStatusFlags);
HRESULT  CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_s_ifspec;
//C       typedef IPersistMoniker *LPPERSISTMONIKER;
alias IPersistMoniker *LPPERSISTMONIKER;
//C       extern const IID IID_IPersistMoniker;
extern const IID IID_IPersistMoniker;
//C       typedef struct IPersistMonikerVtbl {
//C           HRESULT ( *QueryInterface)(IPersistMoniker *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPersistMoniker *This);
//C           ULONG ( *Release)(IPersistMoniker *This);
//C           HRESULT ( *GetClassID)(IPersistMoniker *This,CLSID *pClassID);
//C           HRESULT ( *IsDirty)(IPersistMoniker *This);
//C           HRESULT ( *Load)(IPersistMoniker *This,WINBOOL fFullyAvailable,IMoniker *pimkName,LPBC pibc,DWORD grfMode);
//C           HRESULT ( *Save)(IPersistMoniker *This,IMoniker *pimkName,LPBC pbc,WINBOOL fRemember);
//C           HRESULT ( *SaveCompleted)(IPersistMoniker *This,IMoniker *pimkName,LPBC pibc);
//C           HRESULT ( *GetCurMoniker)(IPersistMoniker *This,IMoniker **ppimkName);
//C       } IPersistMonikerVtbl;
struct IPersistMonikerVtbl
{
    HRESULT  function(IPersistMoniker *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPersistMoniker *This)AddRef;
    ULONG  function(IPersistMoniker *This)Release;
    HRESULT  function(IPersistMoniker *This, CLSID *pClassID)GetClassID;
    HRESULT  function(IPersistMoniker *This)IsDirty;
    HRESULT  function(IPersistMoniker *This, WINBOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode)Load;
    HRESULT  function(IPersistMoniker *This, IMoniker *pimkName, LPBC pbc, WINBOOL fRemember)Save;
    HRESULT  function(IPersistMoniker *This, IMoniker *pimkName, LPBC pibc)SaveCompleted;
    HRESULT  function(IPersistMoniker *This, IMoniker **ppimkName)GetCurMoniker;
}
//C       struct IPersistMoniker {
//C         struct IPersistMonikerVtbl *lpVtbl;
//C       };
struct IPersistMoniker
{
    IPersistMonikerVtbl *lpVtbl;
}
//C       HRESULT IPersistMoniker_GetClassID_Proxy(IPersistMoniker *This,CLSID *pClassID);
HRESULT  IPersistMoniker_GetClassID_Proxy(IPersistMoniker *This, CLSID *pClassID);
//C       void IPersistMoniker_GetClassID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistMoniker_GetClassID_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistMoniker_IsDirty_Proxy(IPersistMoniker *This);
HRESULT  IPersistMoniker_IsDirty_Proxy(IPersistMoniker *This);
//C       void IPersistMoniker_IsDirty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistMoniker_IsDirty_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistMoniker_Load_Proxy(IPersistMoniker *This,WINBOOL fFullyAvailable,IMoniker *pimkName,LPBC pibc,DWORD grfMode);
HRESULT  IPersistMoniker_Load_Proxy(IPersistMoniker *This, WINBOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);
//C       void IPersistMoniker_Load_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistMoniker_Load_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistMoniker_Save_Proxy(IPersistMoniker *This,IMoniker *pimkName,LPBC pbc,WINBOOL fRemember);
HRESULT  IPersistMoniker_Save_Proxy(IPersistMoniker *This, IMoniker *pimkName, LPBC pbc, WINBOOL fRemember);
//C       void IPersistMoniker_Save_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistMoniker_Save_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistMoniker_SaveCompleted_Proxy(IPersistMoniker *This,IMoniker *pimkName,LPBC pibc);
HRESULT  IPersistMoniker_SaveCompleted_Proxy(IPersistMoniker *This, IMoniker *pimkName, LPBC pibc);
//C       void IPersistMoniker_SaveCompleted_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistMoniker_SaveCompleted_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPersistMoniker_GetCurMoniker_Proxy(IPersistMoniker *This,IMoniker **ppimkName);
HRESULT  IPersistMoniker_GetCurMoniker_Proxy(IPersistMoniker *This, IMoniker **ppimkName);
//C       void IPersistMoniker_GetCurMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPersistMoniker_GetCurMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_s_ifspec;
//C       typedef IMonikerProp *LPMONIKERPROP;
alias IMonikerProp *LPMONIKERPROP;
//C       typedef enum __MIDL_IMonikerProp_0001 {
//C         MIMETYPEPROP = 0,USE_SRC_URL = 0x1,CLASSIDPROP = 0x2,TRUSTEDDOWNLOADPROP = 0x3,POPUPLEVELPROP = 0x4
//C       } MONIKERPROPERTY;
enum __MIDL_IMonikerProp_0001
{
    MIMETYPEPROP,
    USE_SRC_URL,
    CLASSIDPROP,
    TRUSTEDDOWNLOADPROP,
    POPUPLEVELPROP,
}
alias __MIDL_IMonikerProp_0001 MONIKERPROPERTY;
//C       extern const IID IID_IMonikerProp;
extern const IID IID_IMonikerProp;
//C       typedef struct IMonikerPropVtbl {
//C           HRESULT ( *QueryInterface)(IMonikerProp *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IMonikerProp *This);
//C           ULONG ( *Release)(IMonikerProp *This);
//C           HRESULT ( *PutProperty)(IMonikerProp *This,MONIKERPROPERTY mkp,LPCWSTR val);
//C       } IMonikerPropVtbl;
struct IMonikerPropVtbl
{
    HRESULT  function(IMonikerProp *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IMonikerProp *This)AddRef;
    ULONG  function(IMonikerProp *This)Release;
    HRESULT  function(IMonikerProp *This, MONIKERPROPERTY mkp, LPCWSTR val)PutProperty;
}
//C       struct IMonikerProp {
//C         struct IMonikerPropVtbl *lpVtbl;
//C       };
struct IMonikerProp
{
    IMonikerPropVtbl *lpVtbl;
}
//C       HRESULT IMonikerProp_PutProperty_Proxy(IMonikerProp *This,MONIKERPROPERTY mkp,LPCWSTR val);
HRESULT  IMonikerProp_PutProperty_Proxy(IMonikerProp *This, MONIKERPROPERTY mkp, LPCWSTR val);
//C       void IMonikerProp_PutProperty_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IMonikerProp_PutProperty_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_s_ifspec;
//C       typedef IBindProtocol *LPBINDPROTOCOL;
alias IBindProtocol *LPBINDPROTOCOL;
//C       extern const IID IID_IBindProtocol;
extern const IID IID_IBindProtocol;
//C       typedef struct IBindProtocolVtbl {
//C           HRESULT ( *QueryInterface)(IBindProtocol *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IBindProtocol *This);
//C           ULONG ( *Release)(IBindProtocol *This);
//C           HRESULT ( *CreateBinding)(IBindProtocol *This,LPCWSTR szUrl,IBindCtx *pbc,IBinding **ppb);
//C       } IBindProtocolVtbl;
struct IBindProtocolVtbl
{
    HRESULT  function(IBindProtocol *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IBindProtocol *This)AddRef;
    ULONG  function(IBindProtocol *This)Release;
    HRESULT  function(IBindProtocol *This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb)CreateBinding;
}
//C       struct IBindProtocol {
//C         struct IBindProtocolVtbl *lpVtbl;
//C       };
struct IBindProtocol
{
    IBindProtocolVtbl *lpVtbl;
}
//C       HRESULT IBindProtocol_CreateBinding_Proxy(IBindProtocol *This,LPCWSTR szUrl,IBindCtx *pbc,IBinding **ppb);
HRESULT  IBindProtocol_CreateBinding_Proxy(IBindProtocol *This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb);
//C       void IBindProtocol_CreateBinding_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IBindProtocol_CreateBinding_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C     typedef IBinding *LPBINDING;
alias IBinding *LPBINDING;
//C     extern const GUID IID_IBinding;
extern const GUID IID_IBinding;
//C     typedef struct IBindingVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IBinding* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IBinding* This);
//C         ULONG ( *Release)(
//C             IBinding* This);
//C         HRESULT ( *Abort)(
//C             IBinding* This);
//C         HRESULT ( *Suspend)(
//C             IBinding* This);
//C         HRESULT ( *Resume)(
//C             IBinding* This);
//C         HRESULT ( *SetPriority)(
//C             IBinding* This,
//C             LONG nPriority);
//C         HRESULT ( *GetPriority)(
//C             IBinding* This,
//C             LONG *pnPriority);
//C         HRESULT ( *GetBindResult)(
//C             IBinding* This,
//C             CLSID *pclsidProtocol,
//C             DWORD *pdwResult,
//C             LPOLESTR *pszResult,
//C             DWORD *pdwReserved);
//C     } IBindingVtbl;
struct IBindingVtbl
{
    HRESULT  function(IBinding *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IBinding *This)AddRef;
    ULONG  function(IBinding *This)Release;
    HRESULT  function(IBinding *This)Abort;
    HRESULT  function(IBinding *This)Suspend;
    HRESULT  function(IBinding *This)Resume;
    HRESULT  function(IBinding *This, LONG nPriority)SetPriority;
    HRESULT  function(IBinding *This, LONG *pnPriority)GetPriority;
    HRESULT  function(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)GetBindResult;
}
//C     struct IBinding {
//C         IBindingVtbl* lpVtbl;
//C     };
struct IBinding
{
    IBindingVtbl *lpVtbl;
}
//C     HRESULT IBinding_Abort_Proxy(
//C         IBinding* This);
HRESULT  IBinding_Abort_Proxy(IBinding *This);
//C     void IBinding_Abort_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBinding_Abort_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBinding_Suspend_Proxy(
//C         IBinding* This);
HRESULT  IBinding_Suspend_Proxy(IBinding *This);
//C     void IBinding_Suspend_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBinding_Suspend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBinding_Resume_Proxy(
//C         IBinding* This);
HRESULT  IBinding_Resume_Proxy(IBinding *This);
//C     void IBinding_Resume_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBinding_Resume_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBinding_SetPriority_Proxy(
//C         IBinding* This,
//C         LONG nPriority);
HRESULT  IBinding_SetPriority_Proxy(IBinding *This, LONG nPriority);
//C     void IBinding_SetPriority_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBinding_SetPriority_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBinding_GetPriority_Proxy(
//C         IBinding* This,
//C         LONG *pnPriority);
HRESULT  IBinding_GetPriority_Proxy(IBinding *This, LONG *pnPriority);
//C     void IBinding_GetPriority_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBinding_GetPriority_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBinding_RemoteGetBindResult_Proxy(
//C         IBinding* This,
//C         CLSID *pclsidProtocol,
//C         DWORD *pdwResult,
//C         LPOLESTR *pszResult,
//C         DWORD dwReserved);
HRESULT  IBinding_RemoteGetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved);
//C     void IBinding_RemoteGetBindResult_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBinding_GetBindResult_Proxy(
//C         IBinding* This,
//C         CLSID *pclsidProtocol,
//C         DWORD *pdwResult,
//C         LPOLESTR *pszResult,
//C         DWORD *pdwReserved);
HRESULT  IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);
//C     HRESULT IBinding_GetBindResult_Stub(
//C         IBinding* This,
//C         CLSID *pclsidProtocol,
//C         DWORD *pdwResult,
//C         LPOLESTR *pszResult,
//C         DWORD dwReserved);
HRESULT  IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved);
//C     typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;
alias IBindStatusCallback *LPBINDSTATUSCALLBACK;
//C     typedef enum __WIDL_urlmon_generated_name_00000000 {
//C         BINDVERB_GET = 0,
//C         BINDVERB_POST = 1,
//C         BINDVERB_PUT = 2,
//C         BINDVERB_CUSTOM = 3
//C     } BINDVERB;
enum __WIDL_urlmon_generated_name_00000000
{
    BINDVERB_GET,
    BINDVERB_POST,
    BINDVERB_PUT,
    BINDVERB_CUSTOM,
}
alias __WIDL_urlmon_generated_name_00000000 BINDVERB;
//C     typedef enum __WIDL_urlmon_generated_name_00000001 {
//C         BINDINFOF_URLENCODESTGMEDDATA = 0x1,
//C         BINDINFOF_URLENCODEDEXTRAINFO = 0x2
//C     } BINDINFOF;
enum __WIDL_urlmon_generated_name_00000001
{
    BINDINFOF_URLENCODESTGMEDDATA = 1,
    BINDINFOF_URLENCODEDEXTRAINFO,
}
alias __WIDL_urlmon_generated_name_00000001 BINDINFOF;
//C     typedef enum __WIDL_urlmon_generated_name_00000002 {
//C         BINDF_ASYNCHRONOUS = 0x1,
//C         BINDF_ASYNCSTORAGE = 0x2,
//C         BINDF_NOPROGRESSIVERENDERING = 0x4,
//C         BINDF_OFFLINEOPERATION = 0x8,
//C         BINDF_GETNEWESTVERSION = 0x10,
//C         BINDF_NOWRITECACHE = 0x20,
//C         BINDF_NEEDFILE = 0x40,
//C         BINDF_PULLDATA = 0x80,
//C         BINDF_IGNORESECURITYPROBLEM = 0x100,
//C         BINDF_RESYNCHRONIZE = 0x200,
//C         BINDF_HYPERLINK = 0x400,
//C         BINDF_NO_UI = 0x800,
//C         BINDF_SILENTOPERATION = 0x1000,
//C         BINDF_PRAGMA_NO_CACHE = 0x2000,
//C         BINDF_GETCLASSOBJECT = 0x4000,
//C         BINDF_RESERVED_1 = 0x8000,
//C         BINDF_FREE_THREADED = 0x10000,
//C         BINDF_DIRECT_READ = 0x20000,
//C         BINDF_FORMS_SUBMIT = 0x40000,
//C         BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
//C         BINDF_FROMURLMON = 0x100000,
//C         BINDF_FWD_BACK = 0x200000,
//C         BINDF_PREFERDEFAULTHANDLER = 0x400000,
//C         BINDF_ENFORCERESTRICTED = 0x800000
//C     } BINDF;
enum __WIDL_urlmon_generated_name_00000002
{
    BINDF_ASYNCHRONOUS = 1,
    BINDF_ASYNCSTORAGE,
    BINDF_NOPROGRESSIVERENDERING = 4,
    BINDF_OFFLINEOPERATION = 8,
    BINDF_GETNEWESTVERSION = 16,
    BINDF_NOWRITECACHE = 32,
    BINDF_NEEDFILE = 64,
    BINDF_PULLDATA = 128,
    BINDF_IGNORESECURITYPROBLEM = 256,
    BINDF_RESYNCHRONIZE = 512,
    BINDF_HYPERLINK = 1024,
    BINDF_NO_UI = 2048,
    BINDF_SILENTOPERATION = 4096,
    BINDF_PRAGMA_NO_CACHE = 8192,
    BINDF_GETCLASSOBJECT = 16384,
    BINDF_RESERVED_1 = 32768,
    BINDF_FREE_THREADED = 65536,
    BINDF_DIRECT_READ = 131072,
    BINDF_FORMS_SUBMIT = 262144,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 524288,
    BINDF_FROMURLMON = 1048576,
    BINDF_FWD_BACK = 2097152,
    BINDF_PREFERDEFAULTHANDLER = 4194304,
    BINDF_ENFORCERESTRICTED = 8388608,
}
alias __WIDL_urlmon_generated_name_00000002 BINDF;
//C     typedef enum __WIDL_urlmon_generated_name_00000003 {
//C         URL_ENCODING_NONE = 0,
//C         URL_ENCODING_ENABLE_UTF8 = 0x10000000,
//C         URL_ENCODING_DISABLE_UTF8 = 0x20000000
//C     } URL_ENCODING;
enum __WIDL_urlmon_generated_name_00000003
{
    URL_ENCODING_NONE,
    URL_ENCODING_ENABLE_UTF8 = 268435456,
    URL_ENCODING_DISABLE_UTF8 = 536870912,
}
alias __WIDL_urlmon_generated_name_00000003 URL_ENCODING;
//C     typedef struct _tagBINDINFO {
//C         ULONG cbSize;
//C         LPWSTR szExtraInfo;
//C         STGMEDIUM stgmedData;
//C         DWORD grfBindInfoF;
//C         DWORD dwBindVerb;
//C         LPWSTR szCustomVerb;
//C         DWORD cbstgmedData;
//C         DWORD dwOptions;
//C         DWORD dwOptionsFlags;
//C         DWORD dwCodePage;
//C         SECURITY_ATTRIBUTES securityAttributes;
//C         IID iid;
//C         IUnknown *pUnk;
//C         DWORD dwReserved;
//C     } BINDINFO;
struct _tagBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
}
alias _tagBINDINFO BINDINFO;
//C     typedef struct _REMSECURITY_ATTRIBUTES {
//C         DWORD nLength;
//C         DWORD lpSecurityDescriptor;
//C         WINBOOL bInheritHandle;
//C     } REMSECURITY_ATTRIBUTES;
struct _REMSECURITY_ATTRIBUTES
{
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    WINBOOL bInheritHandle;
}
alias _REMSECURITY_ATTRIBUTES REMSECURITY_ATTRIBUTES;
//C     typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
alias _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
//C     typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
alias _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
//C     typedef struct _tagRemBINDINFO {
//C         ULONG cbSize;
//C         LPWSTR szExtraInfo;
//C         DWORD grfBindInfoF;
//C         DWORD dwBindVerb;
//C         LPWSTR szCustomVerb;
//C         DWORD cbstgmedData;
//C         DWORD dwOptions;
//C         DWORD dwOptionsFlags;
//C         DWORD dwCodePage;
//C         REMSECURITY_ATTRIBUTES securityAttributes;
//C         IID iid;
//C         IUnknown *pUnk;
//C         DWORD dwReserved;
//C     } RemBINDINFO;
struct _tagRemBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
}
alias _tagRemBINDINFO RemBINDINFO;
//C     typedef struct tagRemFORMATETC {
//C         DWORD cfFormat;
//C         DWORD ptd;
//C         DWORD dwAspect;
//C         LONG lindex;
//C         DWORD tymed;
//C     } RemFORMATETC;
struct tagRemFORMATETC
{
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
}
alias tagRemFORMATETC RemFORMATETC;
//C     typedef struct tagRemFORMATETC *LPREMFORMATETC;
alias tagRemFORMATETC *LPREMFORMATETC;
//C     typedef enum __WIDL_urlmon_generated_name_00000004 {
//C         BINDINFO_OPTIONS_WININETFLAG = 0x10000,
//C         BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
//C         BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
//C         BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
//C         BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
//C         BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
//C         BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
//C         BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
//C         BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
//C         BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = 0x80000000
//C     } BINDINFO_OPTIONS;
enum __WIDL_urlmon_generated_name_00000004
{
    BINDINFO_OPTIONS_WININETFLAG = 65536,
    BINDINFO_OPTIONS_ENABLE_UTF8 = 131072,
    BINDINFO_OPTIONS_DISABLE_UTF8 = 262144,
    BINDINFO_OPTIONS_USE_IE_ENCODING = 524288,
    BINDINFO_OPTIONS_BINDTOOBJECT = 1048576,
    BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = -2147483648,
}
alias __WIDL_urlmon_generated_name_00000004 BINDINFO_OPTIONS;
//C     typedef enum __WIDL_urlmon_generated_name_00000005 {
//C         BSCF_FIRSTDATANOTIFICATION = 0x1,
//C         BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
//C         BSCF_LASTDATANOTIFICATION = 0x4,
//C         BSCF_DATAFULLYAVAILABLE = 0x8,
//C         BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10
//C     } BSCF;
enum __WIDL_urlmon_generated_name_00000005
{
    BSCF_FIRSTDATANOTIFICATION = 1,
    BSCF_INTERMEDIATEDATANOTIFICATION,
    BSCF_LASTDATANOTIFICATION = 4,
    BSCF_DATAFULLYAVAILABLE = 8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 16,
}
alias __WIDL_urlmon_generated_name_00000005 BSCF;
//C     typedef enum tagBINDSTATUS {
//C         BINDSTATUS_FINDINGRESOURCE = 1,
//C         BINDSTATUS_CONNECTING = 2,
//C         BINDSTATUS_REDIRECTING = 3,
//C         BINDSTATUS_BEGINDOWNLOADDATA = 4,
//C         BINDSTATUS_DOWNLOADINGDATA = 5,
//C         BINDSTATUS_ENDDOWNLOADDATA = 6,
//C         BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
//C         BINDSTATUS_INSTALLINGCOMPONENTS = 8,
//C         BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
//C         BINDSTATUS_USINGCACHEDCOPY = 10,
//C         BINDSTATUS_SENDINGREQUEST = 11,
//C         BINDSTATUS_CLASSIDAVAILABLE = 12,
//C         BINDSTATUS_MIMETYPEAVAILABLE = 13,
//C         BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
//C         BINDSTATUS_BEGINSYNCOPERATION = 15,
//C         BINDSTATUS_ENDSYNCOPERATION = 16,
//C         BINDSTATUS_BEGINUPLOADDATA = 17,
//C         BINDSTATUS_UPLOADINGDATA = 18,
//C         BINDSTATUS_ENDUPLOADDATA = 19,
//C         BINDSTATUS_PROTOCOLCLASSID = 20,
//C         BINDSTATUS_ENCODING = 21,
//C         BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
//C         BINDSTATUS_CLASSINSTALLLOCATION = 23,
//C         BINDSTATUS_DECODING = 24,
//C         BINDSTATUS_LOADINGMIMEHANDLER = 25,
//C         BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
//C         BINDSTATUS_FILTERREPORTMIMETYPE = 27,
//C         BINDSTATUS_CLSIDCANINSTANTIATE = 28,
//C         BINDSTATUS_IUNKNOWNAVAILABLE = 29,
//C         BINDSTATUS_DIRECTBIND = 30,
//C         BINDSTATUS_RAWMIMETYPE = 31,
//C         BINDSTATUS_PROXYDETECTING = 32,
//C         BINDSTATUS_ACCEPTRANGES = 33,
//C         BINDSTATUS_COOKIE_SENT = 34,
//C         BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
//C         BINDSTATUS_COOKIE_SUPPRESSED = 36,
//C         BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
//C         BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
//C         BINDSTATUS_COOKIE_STATE_REJECT = 39,
//C         BINDSTATUS_COOKIE_STATE_PROMPT = 40,
//C         BINDSTATUS_COOKIE_STATE_LEASH = 41,
//C         BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
//C         BINDSTATUS_POLICY_HREF = 43,
//C         BINDSTATUS_P3P_HEADER = 44,
//C         BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
//C         BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
//C         BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
//C         BINDSTATUS_CACHECONTROL = 48,
//C         BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
//C         BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
//C         BINDSTATUS_PUBLISHERAVAILABLE = 51,
//C         BINDSTATUS_DISPLAYNAMEAVAILABLE = 52
//C     } BINDSTATUS;
enum tagBINDSTATUS
{
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING,
    BINDSTATUS_REDIRECTING,
    BINDSTATUS_BEGINDOWNLOADDATA,
    BINDSTATUS_DOWNLOADINGDATA,
    BINDSTATUS_ENDDOWNLOADDATA,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS,
    BINDSTATUS_INSTALLINGCOMPONENTS,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS,
    BINDSTATUS_USINGCACHEDCOPY,
    BINDSTATUS_SENDINGREQUEST,
    BINDSTATUS_CLASSIDAVAILABLE,
    BINDSTATUS_MIMETYPEAVAILABLE,
    BINDSTATUS_CACHEFILENAMEAVAILABLE,
    BINDSTATUS_BEGINSYNCOPERATION,
    BINDSTATUS_ENDSYNCOPERATION,
    BINDSTATUS_BEGINUPLOADDATA,
    BINDSTATUS_UPLOADINGDATA,
    BINDSTATUS_ENDUPLOADDATA,
    BINDSTATUS_PROTOCOLCLASSID,
    BINDSTATUS_ENCODING,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE,
    BINDSTATUS_CLASSINSTALLLOCATION,
    BINDSTATUS_DECODING,
    BINDSTATUS_LOADINGMIMEHANDLER,
    BINDSTATUS_CONTENTDISPOSITIONATTACH,
    BINDSTATUS_FILTERREPORTMIMETYPE,
    BINDSTATUS_CLSIDCANINSTANTIATE,
    BINDSTATUS_IUNKNOWNAVAILABLE,
    BINDSTATUS_DIRECTBIND,
    BINDSTATUS_RAWMIMETYPE,
    BINDSTATUS_PROXYDETECTING,
    BINDSTATUS_ACCEPTRANGES,
    BINDSTATUS_COOKIE_SENT,
    BINDSTATUS_COMPACT_POLICY_RECEIVED,
    BINDSTATUS_COOKIE_SUPPRESSED,
    BINDSTATUS_COOKIE_STATE_UNKNOWN,
    BINDSTATUS_COOKIE_STATE_ACCEPT,
    BINDSTATUS_COOKIE_STATE_REJECT,
    BINDSTATUS_COOKIE_STATE_PROMPT,
    BINDSTATUS_COOKIE_STATE_LEASH,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE,
    BINDSTATUS_POLICY_HREF,
    BINDSTATUS_P3P_HEADER,
    BINDSTATUS_SESSION_COOKIE_RECEIVED,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED,
    BINDSTATUS_SESSION_COOKIES_ALLOWED,
    BINDSTATUS_CACHECONTROL,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME,
    BINDSTATUS_MIMETEXTPLAINMISMATCH,
    BINDSTATUS_PUBLISHERAVAILABLE,
    BINDSTATUS_DISPLAYNAMEAVAILABLE,
}
alias tagBINDSTATUS BINDSTATUS;
//C     extern const GUID IID_IBindStatusCallback;
extern const GUID IID_IBindStatusCallback;
//C     typedef struct IBindStatusCallbackVtbl {
//C         HRESULT ( *QueryInterface)(
//C             IBindStatusCallback* This,
//C             const IID *const riid,
//C             void **ppvObject);
//C         ULONG ( *AddRef)(
//C             IBindStatusCallback* This);
//C         ULONG ( *Release)(
//C             IBindStatusCallback* This);
//C         HRESULT ( *OnStartBinding)(
//C             IBindStatusCallback* This,
//C             DWORD dwReserved,
//C             IBinding *pib);
//C         HRESULT ( *GetPriority)(
//C             IBindStatusCallback* This,
//C             LONG *pnPriority);
//C         HRESULT ( *OnLowResource)(
//C             IBindStatusCallback* This,
//C             DWORD reserved);
//C         HRESULT ( *OnProgress)(
//C             IBindStatusCallback* This,
//C             ULONG ulProgress,
//C             ULONG ulProgressMax,
//C             ULONG ulStatusCode,
//C             LPCWSTR szStatusText);
//C         HRESULT ( *OnStopBinding)(
//C             IBindStatusCallback* This,
//C             HRESULT hresult,
//C             LPCWSTR szError);
//C         HRESULT ( *GetBindInfo)(
//C             IBindStatusCallback* This,
//C             DWORD *grfBINDF,
//C             BINDINFO *pbindinfo);
//C         HRESULT ( *OnDataAvailable)(
//C             IBindStatusCallback* This,
//C             DWORD grfBSCF,
//C             DWORD dwSize,
//C             FORMATETC *pformatetc,
//C             STGMEDIUM *pstgmed);
//C         HRESULT ( *OnObjectAvailable)(
//C             IBindStatusCallback* This,
//C             const IID *const riid,
//C             IUnknown *punk);
//C     } IBindStatusCallbackVtbl;
struct IBindStatusCallbackVtbl
{
    HRESULT  function(IBindStatusCallback *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IBindStatusCallback *This)AddRef;
    ULONG  function(IBindStatusCallback *This)Release;
    HRESULT  function(IBindStatusCallback *This, DWORD dwReserved, IBinding *pib)OnStartBinding;
    HRESULT  function(IBindStatusCallback *This, LONG *pnPriority)GetPriority;
    HRESULT  function(IBindStatusCallback *This, DWORD reserved)OnLowResource;
    HRESULT  function(IBindStatusCallback *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText)OnProgress;
    HRESULT  function(IBindStatusCallback *This, HRESULT hresult, LPCWSTR szError)OnStopBinding;
    HRESULT  function(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)GetBindInfo;
    HRESULT  function(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)OnDataAvailable;
    HRESULT  function(IBindStatusCallback *This, IID *riid, IUnknown *punk)OnObjectAvailable;
}
//C     struct IBindStatusCallback {
//C         IBindStatusCallbackVtbl* lpVtbl;
//C     };
struct IBindStatusCallback
{
    IBindStatusCallbackVtbl *lpVtbl;
}
//C     HRESULT IBindStatusCallback_OnStartBinding_Proxy(
//C         IBindStatusCallback* This,
//C         DWORD dwReserved,
//C         IBinding *pib);
HRESULT  IBindStatusCallback_OnStartBinding_Proxy(IBindStatusCallback *This, DWORD dwReserved, IBinding *pib);
//C     void IBindStatusCallback_OnStartBinding_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_OnStartBinding_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_GetPriority_Proxy(
//C         IBindStatusCallback* This,
//C         LONG *pnPriority);
HRESULT  IBindStatusCallback_GetPriority_Proxy(IBindStatusCallback *This, LONG *pnPriority);
//C     void IBindStatusCallback_GetPriority_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_GetPriority_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_OnLowResource_Proxy(
//C         IBindStatusCallback* This,
//C         DWORD reserved);
HRESULT  IBindStatusCallback_OnLowResource_Proxy(IBindStatusCallback *This, DWORD reserved);
//C     void IBindStatusCallback_OnLowResource_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_OnLowResource_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_OnProgress_Proxy(
//C         IBindStatusCallback* This,
//C         ULONG ulProgress,
//C         ULONG ulProgressMax,
//C         ULONG ulStatusCode,
//C         LPCWSTR szStatusText);
HRESULT  IBindStatusCallback_OnProgress_Proxy(IBindStatusCallback *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);
//C     void IBindStatusCallback_OnProgress_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_OnProgress_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_OnStopBinding_Proxy(
//C         IBindStatusCallback* This,
//C         HRESULT hresult,
//C         LPCWSTR szError);
HRESULT  IBindStatusCallback_OnStopBinding_Proxy(IBindStatusCallback *This, HRESULT hresult, LPCWSTR szError);
//C     void IBindStatusCallback_OnStopBinding_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_OnStopBinding_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_RemoteGetBindInfo_Proxy(
//C         IBindStatusCallback* This,
//C         DWORD *grfBINDF,
//C         RemBINDINFO *pbindinfo,
//C         RemSTGMEDIUM *pstgmed);
HRESULT  IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed);
//C     void IBindStatusCallback_RemoteGetBindInfo_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_RemoteOnDataAvailable_Proxy(
//C         IBindStatusCallback* This,
//C         DWORD grfBSCF,
//C         DWORD dwSize,
//C         RemFORMATETC *pformatetc,
//C         RemSTGMEDIUM *pstgmed);
HRESULT  IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed);
//C     void IBindStatusCallback_RemoteOnDataAvailable_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_OnObjectAvailable_Proxy(
//C         IBindStatusCallback* This,
//C         const IID *const riid,
//C         IUnknown *punk);
HRESULT  IBindStatusCallback_OnObjectAvailable_Proxy(IBindStatusCallback *This, IID *riid, IUnknown *punk);
//C     void IBindStatusCallback_OnObjectAvailable_Stub(
//C         IRpcStubBuffer* This,
//C         IRpcChannelBuffer* pRpcChannelBuffer,
//C         PRPC_MESSAGE pRpcMessage,
//C         DWORD* pdwStubPhase);
void  IBindStatusCallback_OnObjectAvailable_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
//C     HRESULT IBindStatusCallback_GetBindInfo_Proxy(
//C         IBindStatusCallback* This,
//C         DWORD *grfBINDF,
//C         BINDINFO *pbindinfo);
HRESULT  IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo);
//C     HRESULT IBindStatusCallback_GetBindInfo_Stub(
//C         IBindStatusCallback* This,
//C         DWORD *grfBINDF,
//C         RemBINDINFO *pbindinfo,
//C         RemSTGMEDIUM *pstgmed);
HRESULT  IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed);
//C     HRESULT IBindStatusCallback_OnDataAvailable_Proxy(
//C         IBindStatusCallback* This,
//C         DWORD grfBSCF,
//C         DWORD dwSize,
//C         FORMATETC *pformatetc,
//C         STGMEDIUM *pstgmed);
HRESULT  IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);
//C     HRESULT IBindStatusCallback_OnDataAvailable_Stub(
//C         IBindStatusCallback* This,
//C         DWORD grfBSCF,
//C         DWORD dwSize,
//C         RemFORMATETC *pformatetc,
//C         RemSTGMEDIUM *pstgmed);
HRESULT  IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_s_ifspec;
//C       typedef IAuthenticate *LPAUTHENTICATION;
alias IAuthenticate *LPAUTHENTICATION;
//C       extern const IID IID_IAuthenticate;
extern const IID IID_IAuthenticate;
//C       typedef struct IAuthenticateVtbl {
//C           HRESULT ( *QueryInterface)(IAuthenticate *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IAuthenticate *This);
//C           ULONG ( *Release)(IAuthenticate *This);
//C           HRESULT ( *Authenticate)(IAuthenticate *This,HWND *phwnd,LPWSTR *pszUsername,LPWSTR *pszPassword);
//C       } IAuthenticateVtbl;
struct IAuthenticateVtbl
{
    HRESULT  function(IAuthenticate *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IAuthenticate *This)AddRef;
    ULONG  function(IAuthenticate *This)Release;
    HRESULT  function(IAuthenticate *This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword)Authenticate;
}
//C       struct IAuthenticate {
//C         struct IAuthenticateVtbl *lpVtbl;
//C       };
struct IAuthenticate
{
    IAuthenticateVtbl *lpVtbl;
}
//C       HRESULT IAuthenticate_Authenticate_Proxy(IAuthenticate *This,HWND *phwnd,LPWSTR *pszUsername,LPWSTR *pszPassword);
HRESULT  IAuthenticate_Authenticate_Proxy(IAuthenticate *This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);
//C       void IAuthenticate_Authenticate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IAuthenticate_Authenticate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_s_ifspec;
//C       typedef IHttpNegotiate *LPHTTPNEGOTIATE;
alias IHttpNegotiate *LPHTTPNEGOTIATE;
//C       extern const IID IID_IHttpNegotiate;
extern const IID IID_IHttpNegotiate;
//C       typedef struct IHttpNegotiateVtbl {
//C           HRESULT ( *QueryInterface)(IHttpNegotiate *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IHttpNegotiate *This);
//C           ULONG ( *Release)(IHttpNegotiate *This);
//C           HRESULT ( *BeginningTransaction)(IHttpNegotiate *This,LPCWSTR szURL,LPCWSTR szHeaders,DWORD dwReserved,LPWSTR *pszAdditionalHeaders);
//C           HRESULT ( *OnResponse)(IHttpNegotiate *This,DWORD dwResponseCode,LPCWSTR szResponseHeaders,LPCWSTR szRequestHeaders,LPWSTR *pszAdditionalRequestHeaders);
//C       } IHttpNegotiateVtbl;
struct IHttpNegotiateVtbl
{
    HRESULT  function(IHttpNegotiate *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IHttpNegotiate *This)AddRef;
    ULONG  function(IHttpNegotiate *This)Release;
    HRESULT  function(IHttpNegotiate *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders)BeginningTransaction;
    HRESULT  function(IHttpNegotiate *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders)OnResponse;
}
//C       struct IHttpNegotiate {
//C         struct IHttpNegotiateVtbl *lpVtbl;
//C       };
struct IHttpNegotiate
{
    IHttpNegotiateVtbl *lpVtbl;
}
//C       HRESULT IHttpNegotiate_BeginningTransaction_Proxy(IHttpNegotiate *This,LPCWSTR szURL,LPCWSTR szHeaders,DWORD dwReserved,LPWSTR *pszAdditionalHeaders);
HRESULT  IHttpNegotiate_BeginningTransaction_Proxy(IHttpNegotiate *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);
//C       void IHttpNegotiate_BeginningTransaction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IHttpNegotiate_BeginningTransaction_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IHttpNegotiate_OnResponse_Proxy(IHttpNegotiate *This,DWORD dwResponseCode,LPCWSTR szResponseHeaders,LPCWSTR szRequestHeaders,LPWSTR *pszAdditionalRequestHeaders);
HRESULT  IHttpNegotiate_OnResponse_Proxy(IHttpNegotiate *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);
//C       void IHttpNegotiate_OnResponse_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IHttpNegotiate_OnResponse_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_s_ifspec;
//C       typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;
alias IHttpNegotiate2 *LPHTTPNEGOTIATE2;
//C       extern const IID IID_IHttpNegotiate2;
extern const IID IID_IHttpNegotiate2;
//C       typedef struct IHttpNegotiate2Vtbl {
//C           HRESULT ( *QueryInterface)(IHttpNegotiate2 *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IHttpNegotiate2 *This);
//C           ULONG ( *Release)(IHttpNegotiate2 *This);
//C           HRESULT ( *BeginningTransaction)(IHttpNegotiate2 *This,LPCWSTR szURL,LPCWSTR szHeaders,DWORD dwReserved,LPWSTR *pszAdditionalHeaders);
//C           HRESULT ( *OnResponse)(IHttpNegotiate2 *This,DWORD dwResponseCode,LPCWSTR szResponseHeaders,LPCWSTR szRequestHeaders,LPWSTR *pszAdditionalRequestHeaders);
//C           HRESULT ( *GetRootSecurityId)(IHttpNegotiate2 *This,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
//C       } IHttpNegotiate2Vtbl;
struct IHttpNegotiate2Vtbl
{
    HRESULT  function(IHttpNegotiate2 *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IHttpNegotiate2 *This)AddRef;
    ULONG  function(IHttpNegotiate2 *This)Release;
    HRESULT  function(IHttpNegotiate2 *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders)BeginningTransaction;
    HRESULT  function(IHttpNegotiate2 *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders)OnResponse;
    HRESULT  function(IHttpNegotiate2 *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved)GetRootSecurityId;
}
//C       struct IHttpNegotiate2 {
//C         struct IHttpNegotiate2Vtbl *lpVtbl;
//C       };
struct IHttpNegotiate2
{
    IHttpNegotiate2Vtbl *lpVtbl;
}
//C       HRESULT IHttpNegotiate2_GetRootSecurityId_Proxy(IHttpNegotiate2 *This,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
HRESULT  IHttpNegotiate2_GetRootSecurityId_Proxy(IHttpNegotiate2 *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
//C       void IHttpNegotiate2_GetRootSecurityId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IHttpNegotiate2_GetRootSecurityId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_s_ifspec;
//C       typedef IWinInetFileStream *LPWININETFILESTREAM;
alias IWinInetFileStream *LPWININETFILESTREAM;
//C       extern const IID IID_IWinInetFileStream;
extern const IID IID_IWinInetFileStream;
//C       typedef struct IWinInetFileStreamVtbl {
//C           HRESULT ( *QueryInterface)(IWinInetFileStream *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWinInetFileStream *This);
//C           ULONG ( *Release)(IWinInetFileStream *This);
//C           HRESULT ( *SetHandleForUnlock)(IWinInetFileStream *This,DWORD_PTR hWinInetLockHandle,DWORD_PTR dwReserved);
//C           HRESULT ( *SetDeleteFile)(IWinInetFileStream *This,DWORD_PTR dwReserved);
//C       } IWinInetFileStreamVtbl;
struct IWinInetFileStreamVtbl
{
    HRESULT  function(IWinInetFileStream *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWinInetFileStream *This)AddRef;
    ULONG  function(IWinInetFileStream *This)Release;
    HRESULT  function(IWinInetFileStream *This, DWORD_PTR hWinInetLockHandle, DWORD_PTR dwReserved)SetHandleForUnlock;
    HRESULT  function(IWinInetFileStream *This, DWORD_PTR dwReserved)SetDeleteFile;
}
//C       struct IWinInetFileStream {
//C         struct IWinInetFileStreamVtbl *lpVtbl;
//C       };
struct IWinInetFileStream
{
    IWinInetFileStreamVtbl *lpVtbl;
}
//C       HRESULT IWinInetFileStream_SetHandleForUnlock_Proxy(IWinInetFileStream *This,DWORD_PTR hWinInetLockHandle,DWORD_PTR dwReserved);
HRESULT  IWinInetFileStream_SetHandleForUnlock_Proxy(IWinInetFileStream *This, DWORD_PTR hWinInetLockHandle, DWORD_PTR dwReserved);
//C       void IWinInetFileStream_SetHandleForUnlock_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWinInetFileStream_SetHandleForUnlock_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IWinInetFileStream_SetDeleteFile_Proxy(IWinInetFileStream *This,DWORD_PTR dwReserved);
HRESULT  IWinInetFileStream_SetDeleteFile_Proxy(IWinInetFileStream *This, DWORD_PTR dwReserved);
//C       void IWinInetFileStream_SetDeleteFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWinInetFileStream_SetDeleteFile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_s_ifspec;
//C       typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;
alias IWindowForBindingUI *LPWINDOWFORBINDINGUI;
//C       extern const IID IID_IWindowForBindingUI;
extern const IID IID_IWindowForBindingUI;
//C       typedef struct IWindowForBindingUIVtbl {
//C           HRESULT ( *QueryInterface)(IWindowForBindingUI *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWindowForBindingUI *This);
//C           ULONG ( *Release)(IWindowForBindingUI *This);
//C           HRESULT ( *GetWindow)(IWindowForBindingUI *This,const GUID *const rguidReason,HWND *phwnd);
//C       } IWindowForBindingUIVtbl;
struct IWindowForBindingUIVtbl
{
    HRESULT  function(IWindowForBindingUI *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWindowForBindingUI *This)AddRef;
    ULONG  function(IWindowForBindingUI *This)Release;
    HRESULT  function(IWindowForBindingUI *This, GUID *rguidReason, HWND *phwnd)GetWindow;
}
//C       struct IWindowForBindingUI {
//C         struct IWindowForBindingUIVtbl *lpVtbl;
//C       };
struct IWindowForBindingUI
{
    IWindowForBindingUIVtbl *lpVtbl;
}
//C       HRESULT IWindowForBindingUI_GetWindow_Proxy(IWindowForBindingUI *This,const GUID *const rguidReason,HWND *phwnd);
HRESULT  IWindowForBindingUI_GetWindow_Proxy(IWindowForBindingUI *This, GUID *rguidReason, HWND *phwnd);
//C       void IWindowForBindingUI_GetWindow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWindowForBindingUI_GetWindow_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_s_ifspec;
//C       typedef ICodeInstall *LPCODEINSTALL;
alias ICodeInstall *LPCODEINSTALL;
//C       typedef enum __MIDL_ICodeInstall_0001 {
//C         CIP_DISK_FULL = 0,
//C         CIP_ACCESS_DENIED,CIP_NEWER_VERSION_EXISTS,CIP_OLDER_VERSION_EXISTS,
//C         CIP_NAME_CONFLICT,CIP_TRUST_VERIFICATION_COMPONENT_MISSING,CIP_EXE_SELF_REGISTERATION_TIMEOUT,
//C         CIP_UNSAFE_TO_ABORT,CIP_NEED_REBOOT,CIP_NEED_REBOOT_UI_PERMISSION
//C       } CIP_STATUS;
enum __MIDL_ICodeInstall_0001
{
    CIP_DISK_FULL,
    CIP_ACCESS_DENIED,
    CIP_NEWER_VERSION_EXISTS,
    CIP_OLDER_VERSION_EXISTS,
    CIP_NAME_CONFLICT,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT,
    CIP_UNSAFE_TO_ABORT,
    CIP_NEED_REBOOT,
    CIP_NEED_REBOOT_UI_PERMISSION,
}
alias __MIDL_ICodeInstall_0001 CIP_STATUS;
//C       extern const IID IID_ICodeInstall;
extern const IID IID_ICodeInstall;
//C       typedef struct ICodeInstallVtbl {
//C           HRESULT ( *QueryInterface)(ICodeInstall *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICodeInstall *This);
//C           ULONG ( *Release)(ICodeInstall *This);
//C           HRESULT ( *GetWindow)(ICodeInstall *This,const GUID *const rguidReason,HWND *phwnd);
//C           HRESULT ( *OnCodeInstallProblem)(ICodeInstall *This,ULONG ulStatusCode,LPCWSTR szDestination,LPCWSTR szSource,DWORD dwReserved);
//C       } ICodeInstallVtbl;
struct ICodeInstallVtbl
{
    HRESULT  function(ICodeInstall *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICodeInstall *This)AddRef;
    ULONG  function(ICodeInstall *This)Release;
    HRESULT  function(ICodeInstall *This, GUID *rguidReason, HWND *phwnd)GetWindow;
    HRESULT  function(ICodeInstall *This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved)OnCodeInstallProblem;
}
//C       struct ICodeInstall {
//C         struct ICodeInstallVtbl *lpVtbl;
//C       };
struct ICodeInstall
{
    ICodeInstallVtbl *lpVtbl;
}
//C       HRESULT ICodeInstall_OnCodeInstallProblem_Proxy(ICodeInstall *This,ULONG ulStatusCode,LPCWSTR szDestination,LPCWSTR szSource,DWORD dwReserved);
HRESULT  ICodeInstall_OnCodeInstallProblem_Proxy(ICodeInstall *This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);
//C       void ICodeInstall_OnCodeInstallProblem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICodeInstall_OnCodeInstallProblem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_s_ifspec;
//C       typedef IWinInetInfo *LPWININETINFO;
alias IWinInetInfo *LPWININETINFO;
//C       extern const IID IID_IWinInetInfo;
extern const IID IID_IWinInetInfo;
//C       typedef struct IWinInetInfoVtbl {
//C           HRESULT ( *QueryInterface)(IWinInetInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWinInetInfo *This);
//C           ULONG ( *Release)(IWinInetInfo *This);
//C           HRESULT ( *QueryOption)(IWinInetInfo *This,DWORD dwOption,LPVOID pBuffer,DWORD *pcbBuf);
//C       } IWinInetInfoVtbl;
struct IWinInetInfoVtbl
{
    HRESULT  function(IWinInetInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWinInetInfo *This)AddRef;
    ULONG  function(IWinInetInfo *This)Release;
    HRESULT  function(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)QueryOption;
}
//C       struct IWinInetInfo {
//C         struct IWinInetInfoVtbl *lpVtbl;
//C       };
struct IWinInetInfo
{
    IWinInetInfoVtbl *lpVtbl;
}
//C       HRESULT IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This,DWORD dwOption,BYTE *pBuffer,DWORD *pcbBuf);
HRESULT  IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf);
//C       void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_s_ifspec;
//C       typedef IHttpSecurity *LPHTTPSECURITY;
alias IHttpSecurity *LPHTTPSECURITY;
//C       extern const IID IID_IHttpSecurity;
extern const IID IID_IHttpSecurity;
//C       typedef struct IHttpSecurityVtbl {
//C           HRESULT ( *QueryInterface)(IHttpSecurity *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IHttpSecurity *This);
//C           ULONG ( *Release)(IHttpSecurity *This);
//C           HRESULT ( *GetWindow)(IHttpSecurity *This,const GUID *const rguidReason,HWND *phwnd);
//C           HRESULT ( *OnSecurityProblem)(IHttpSecurity *This,DWORD dwProblem);
//C       } IHttpSecurityVtbl;
struct IHttpSecurityVtbl
{
    HRESULT  function(IHttpSecurity *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IHttpSecurity *This)AddRef;
    ULONG  function(IHttpSecurity *This)Release;
    HRESULT  function(IHttpSecurity *This, GUID *rguidReason, HWND *phwnd)GetWindow;
    HRESULT  function(IHttpSecurity *This, DWORD dwProblem)OnSecurityProblem;
}
//C       struct IHttpSecurity {
//C         struct IHttpSecurityVtbl *lpVtbl;
//C       };
struct IHttpSecurity
{
    IHttpSecurityVtbl *lpVtbl;
}
//C       HRESULT IHttpSecurity_OnSecurityProblem_Proxy(IHttpSecurity *This,DWORD dwProblem);
HRESULT  IHttpSecurity_OnSecurityProblem_Proxy(IHttpSecurity *This, DWORD dwProblem);
//C       void IHttpSecurity_OnSecurityProblem_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IHttpSecurity_OnSecurityProblem_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_s_ifspec;
//C       typedef IWinInetHttpInfo *LPWININETHTTPINFO;
alias IWinInetHttpInfo *LPWININETHTTPINFO;
//C       extern const IID IID_IWinInetHttpInfo;
extern const IID IID_IWinInetHttpInfo;
//C       typedef struct IWinInetHttpInfoVtbl {
//C           HRESULT ( *QueryInterface)(IWinInetHttpInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWinInetHttpInfo *This);
//C           ULONG ( *Release)(IWinInetHttpInfo *This);
//C           HRESULT ( *QueryOption)(IWinInetHttpInfo *This,DWORD dwOption,LPVOID pBuffer,DWORD *pcbBuf);
//C           HRESULT ( *QueryInfo)(IWinInetHttpInfo *This,DWORD dwOption,LPVOID pBuffer,DWORD *pcbBuf,DWORD *pdwFlags,DWORD *pdwReserved);
//C       } IWinInetHttpInfoVtbl;
struct IWinInetHttpInfoVtbl
{
    HRESULT  function(IWinInetHttpInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWinInetHttpInfo *This)AddRef;
    ULONG  function(IWinInetHttpInfo *This)Release;
    HRESULT  function(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)QueryOption;
    HRESULT  function(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)QueryInfo;
}
//C       struct IWinInetHttpInfo {
//C         struct IWinInetHttpInfoVtbl *lpVtbl;
//C       };
struct IWinInetHttpInfo
{
    IWinInetHttpInfoVtbl *lpVtbl;
}
//C       HRESULT IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This,DWORD dwOption,BYTE *pBuffer,DWORD *pcbBuf,DWORD *pdwFlags,DWORD *pdwReserved);
HRESULT  IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
//C       void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_s_ifspec;
//C       typedef IWinInetCacheHints *LPWININETCACHEHINTS;
alias IWinInetCacheHints *LPWININETCACHEHINTS;
//C       extern const IID IID_IWinInetCacheHints;
extern const IID IID_IWinInetCacheHints;
//C       typedef struct IWinInetCacheHintsVtbl {
//C           HRESULT ( *QueryInterface)(IWinInetCacheHints *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWinInetCacheHints *This);
//C           ULONG ( *Release)(IWinInetCacheHints *This);
//C           HRESULT ( *SetCacheExtension)(IWinInetCacheHints *This,LPCWSTR pwzExt,LPVOID pszCacheFile,DWORD *pcbCacheFile,DWORD *pdwWinInetError,DWORD *pdwReserved);
//C       } IWinInetCacheHintsVtbl;
struct IWinInetCacheHintsVtbl
{
    HRESULT  function(IWinInetCacheHints *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWinInetCacheHints *This)AddRef;
    ULONG  function(IWinInetCacheHints *This)Release;
    HRESULT  function(IWinInetCacheHints *This, LPCWSTR pwzExt, LPVOID pszCacheFile, DWORD *pcbCacheFile, DWORD *pdwWinInetError, DWORD *pdwReserved)SetCacheExtension;
}
//C       struct IWinInetCacheHints {
//C         struct IWinInetCacheHintsVtbl *lpVtbl;
//C       };
struct IWinInetCacheHints
{
    IWinInetCacheHintsVtbl *lpVtbl;
}
//C       HRESULT IWinInetCacheHints_SetCacheExtension_Proxy(IWinInetCacheHints *This,LPCWSTR pwzExt,LPVOID pszCacheFile,DWORD *pcbCacheFile,DWORD *pdwWinInetError,DWORD *pdwReserved);
HRESULT  IWinInetCacheHints_SetCacheExtension_Proxy(IWinInetCacheHints *This, LPCWSTR pwzExt, LPVOID pszCacheFile, DWORD *pcbCacheFile, DWORD *pdwWinInetError, DWORD *pdwReserved);
//C       void IWinInetCacheHints_SetCacheExtension_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWinInetCacheHints_SetCacheExtension_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const GUID SID_BindHost;
extern const GUID SID_BindHost;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_s_ifspec;
//C       typedef IBindHost *LPBINDHOST;
alias IBindHost *LPBINDHOST;
//C       extern const IID IID_IBindHost;
extern const IID IID_IBindHost;
//C       typedef struct IBindHostVtbl {
//C           HRESULT ( *QueryInterface)(IBindHost *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IBindHost *This);
//C           ULONG ( *Release)(IBindHost *This);
//C           HRESULT ( *CreateMoniker)(IBindHost *This,LPOLESTR szName,IBindCtx *pBC,IMoniker **ppmk,DWORD dwReserved);
//C           HRESULT ( *MonikerBindToStorage)(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,void **ppvObj);
//C           HRESULT ( *MonikerBindToObject)(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,void **ppvObj);
//C       } IBindHostVtbl;
struct IBindHostVtbl
{
    HRESULT  function(IBindHost *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IBindHost *This)AddRef;
    ULONG  function(IBindHost *This)Release;
    HRESULT  function(IBindHost *This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved)CreateMoniker;
    HRESULT  function(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, void **ppvObj)MonikerBindToStorage;
    HRESULT  function(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, void **ppvObj)MonikerBindToObject;
}
//C       struct IBindHost {
//C         struct IBindHostVtbl *lpVtbl;
//C       };
struct IBindHost
{
    IBindHostVtbl *lpVtbl;
}
//C       HRESULT IBindHost_CreateMoniker_Proxy(IBindHost *This,LPOLESTR szName,IBindCtx *pBC,IMoniker **ppmk,DWORD dwReserved);
HRESULT  IBindHost_CreateMoniker_Proxy(IBindHost *This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved);
//C       void IBindHost_CreateMoniker_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IBindHost_CreateMoniker_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,IUnknown **ppvObj);
HRESULT  IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, IUnknown **ppvObj);
//C       void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,IUnknown **ppvObj);
HRESULT  IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, IUnknown **ppvObj);
//C       void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       struct IBindStatusCallback;
//C       extern HRESULT HlinkSimpleNavigateToString(LPCWSTR szTarget,LPCWSTR szLocation,LPCWSTR szTargetFrameName,IUnknown *pUnk,IBindCtx *pbc,IBindStatusCallback *,DWORD grfHLNF,DWORD dwReserved);
HRESULT  HlinkSimpleNavigateToString(LPCWSTR szTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved);
//C       extern HRESULT HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget,LPCWSTR szLocation,LPCWSTR szTargetFrameName,IUnknown *pUnk,IBindCtx *pbc,IBindStatusCallback *,DWORD grfHLNF,DWORD dwReserved);
HRESULT  HlinkSimpleNavigateToMoniker(IMoniker *pmkTarget, LPCWSTR szLocation, LPCWSTR szTargetFrameName, IUnknown *pUnk, IBindCtx *pbc, IBindStatusCallback *, DWORD grfHLNF, DWORD dwReserved);
//C       extern HRESULT URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLOpenStreamA(LPUNKNOWN , LPCSTR , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLOpenStreamW(LPUNKNOWN , LPCWSTR , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLOpenPullStreamA(LPUNKNOWN , LPCSTR , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLOpenPullStreamW(LPUNKNOWN , LPCWSTR , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLDownloadToFileA(LPUNKNOWN , LPCSTR , LPCSTR , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLDownloadToFileW(LPUNKNOWN , LPCWSTR , LPCWSTR , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLDownloadToCacheFileA(LPUNKNOWN,LPCSTR,LPTSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLDownloadToCacheFileA(LPUNKNOWN , LPCSTR , LPTSTR , DWORD , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLDownloadToCacheFileW(LPUNKNOWN,LPCWSTR,LPWSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLDownloadToCacheFileW(LPUNKNOWN , LPCWSTR , LPWSTR , DWORD , DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLOpenBlockingStreamA(LPUNKNOWN , LPCSTR , LPSTREAM *, DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);
HRESULT  URLOpenBlockingStreamW(LPUNKNOWN , LPCWSTR , LPSTREAM *, DWORD , LPBINDSTATUSCALLBACK );
//C       extern HRESULT HlinkGoBack(IUnknown *pUnk);
HRESULT  HlinkGoBack(IUnknown *pUnk);
//C       extern HRESULT HlinkGoForward(IUnknown *pUnk);
HRESULT  HlinkGoForward(IUnknown *pUnk);
//C       extern HRESULT HlinkNavigateString(IUnknown *pUnk,LPCWSTR szTarget);
HRESULT  HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);
//C       extern HRESULT HlinkNavigateMoniker(IUnknown *pUnk,IMoniker *pmkTarget);
HRESULT  HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_s_ifspec;
//C       typedef IInternet *LPIINTERNET;
alias IInternet *LPIINTERNET;
//C       extern const IID IID_IInternet;
extern const IID IID_IInternet;
//C       typedef struct IInternetVtbl {
//C           HRESULT ( *QueryInterface)(IInternet *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternet *This);
//C           ULONG ( *Release)(IInternet *This);
//C       } IInternetVtbl;
struct IInternetVtbl
{
    HRESULT  function(IInternet *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternet *This)AddRef;
    ULONG  function(IInternet *This)Release;
}
//C       struct IInternet {
//C         struct IInternetVtbl *lpVtbl;
//C       };
struct IInternet
{
    IInternetVtbl *lpVtbl;
}
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_s_ifspec;
//C       typedef IInternetBindInfo *LPIINTERNETBINDINFO;
alias IInternetBindInfo *LPIINTERNETBINDINFO;
//C       typedef enum tagBINDSTRING {
//C         BINDSTRING_HEADERS = 1,
//C         BINDSTRING_ACCEPT_MIMES,BINDSTRING_EXTRA_URL,BINDSTRING_LANGUAGE,BINDSTRING_USERNAME,
//C         BINDSTRING_PASSWORD,BINDSTRING_UA_PIXELS,BINDSTRING_UA_COLOR,BINDSTRING_OS,
//C         BINDSTRING_USER_AGENT,BINDSTRING_ACCEPT_ENCODINGS,BINDSTRING_POST_COOKIE,
//C         BINDSTRING_POST_DATA_MIME,BINDSTRING_URL,BINDSTRING_IID,BINDSTRING_FLAG_BIND_TO_OBJECT,
//C         BINDSTRING_PTR_BIND_CONTEXT
//C       } BINDSTRING;
enum tagBINDSTRING
{
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES,
    BINDSTRING_EXTRA_URL,
    BINDSTRING_LANGUAGE,
    BINDSTRING_USERNAME,
    BINDSTRING_PASSWORD,
    BINDSTRING_UA_PIXELS,
    BINDSTRING_UA_COLOR,
    BINDSTRING_OS,
    BINDSTRING_USER_AGENT,
    BINDSTRING_ACCEPT_ENCODINGS,
    BINDSTRING_POST_COOKIE,
    BINDSTRING_POST_DATA_MIME,
    BINDSTRING_URL,
    BINDSTRING_IID,
    BINDSTRING_FLAG_BIND_TO_OBJECT,
    BINDSTRING_PTR_BIND_CONTEXT,
}
alias tagBINDSTRING BINDSTRING;
//C       extern const IID IID_IInternetBindInfo;
extern const IID IID_IInternetBindInfo;
//C       typedef struct IInternetBindInfoVtbl {
//C           HRESULT ( *QueryInterface)(IInternetBindInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetBindInfo *This);
//C           ULONG ( *Release)(IInternetBindInfo *This);
//C           HRESULT ( *GetBindInfo)(IInternetBindInfo *This,DWORD *grfBINDF,BINDINFO *pbindinfo);
//C           HRESULT ( *GetBindString)(IInternetBindInfo *This,ULONG ulStringType,LPOLESTR *ppwzStr,ULONG cEl,ULONG *pcElFetched);
//C       } IInternetBindInfoVtbl;
struct IInternetBindInfoVtbl
{
    HRESULT  function(IInternetBindInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetBindInfo *This)AddRef;
    ULONG  function(IInternetBindInfo *This)Release;
    HRESULT  function(IInternetBindInfo *This, DWORD *grfBINDF, BINDINFO *pbindinfo)GetBindInfo;
    HRESULT  function(IInternetBindInfo *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched)GetBindString;
}
//C       struct IInternetBindInfo {
//C         struct IInternetBindInfoVtbl *lpVtbl;
//C       };
struct IInternetBindInfo
{
    IInternetBindInfoVtbl *lpVtbl;
}
//C       HRESULT IInternetBindInfo_GetBindInfo_Proxy(IInternetBindInfo *This,DWORD *grfBINDF,BINDINFO *pbindinfo);
HRESULT  IInternetBindInfo_GetBindInfo_Proxy(IInternetBindInfo *This, DWORD *grfBINDF, BINDINFO *pbindinfo);
//C       void IInternetBindInfo_GetBindInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetBindInfo_GetBindInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetBindInfo_GetBindString_Proxy(IInternetBindInfo *This,ULONG ulStringType,LPOLESTR *ppwzStr,ULONG cEl,ULONG *pcElFetched);
HRESULT  IInternetBindInfo_GetBindString_Proxy(IInternetBindInfo *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);
//C       void IInternetBindInfo_GetBindString_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetBindInfo_GetBindString_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_s_ifspec;
//C       typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
alias IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
//C       typedef enum _tagPI_FLAGS {
//C         PI_PARSE_URL = 0x1,PI_FILTER_MODE = 0x2,PI_FORCE_ASYNC = 0x4,PI_USE_WORKERTHREAD = 0x8,PI_MIMEVERIFICATION = 0x10,PI_CLSIDLOOKUP = 0x20,
//C         PI_DATAPROGRESS = 0x40,PI_SYNCHRONOUS = 0x80,PI_APARTMENTTHREADED = 0x100,PI_CLASSINSTALL = 0x200,PI_PASSONBINDCTX = 0x2000,
//C         PI_NOMIMEHANDLER = 0x8000,PI_LOADAPPDIRECT = 0x4000,PD_FORCE_SWITCH = 0x10000,PI_PREFERDEFAULTHANDLER = 0x20000
//C       } PI_FLAGS;
enum _tagPI_FLAGS
{
    PI_PARSE_URL = 1,
    PI_FILTER_MODE,
    PI_FORCE_ASYNC = 4,
    PI_USE_WORKERTHREAD = 8,
    PI_MIMEVERIFICATION = 16,
    PI_CLSIDLOOKUP = 32,
    PI_DATAPROGRESS = 64,
    PI_SYNCHRONOUS = 128,
    PI_APARTMENTTHREADED = 256,
    PI_CLASSINSTALL = 512,
    PI_PASSONBINDCTX = 8192,
    PI_NOMIMEHANDLER = 32768,
    PI_LOADAPPDIRECT = 16384,
    PD_FORCE_SWITCH = 65536,
    PI_PREFERDEFAULTHANDLER = 131072,
}
alias _tagPI_FLAGS PI_FLAGS;
//C       typedef struct _tagPROTOCOLDATA {
//C         DWORD grfFlags;
//C         DWORD dwState;
//C         LPVOID pData;
//C         ULONG cbData;
//C       } PROTOCOLDATA;
struct _tagPROTOCOLDATA
{
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
}
alias _tagPROTOCOLDATA PROTOCOLDATA;
//C       typedef struct _tagStartParam {
//C         IID iid;
//C         IBindCtx *pIBindCtx;
//C         IUnknown *pItf;
//C       } StartParam;
struct _tagStartParam
{
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
}
alias _tagStartParam StartParam;
//C       extern const IID IID_IInternetProtocolRoot;
extern const IID IID_IInternetProtocolRoot;
//C       typedef struct IInternetProtocolRootVtbl {
//C           HRESULT ( *QueryInterface)(IInternetProtocolRoot *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetProtocolRoot *This);
//C           ULONG ( *Release)(IInternetProtocolRoot *This);
//C           HRESULT ( *Start)(IInternetProtocolRoot *This,LPCWSTR szUrl,IInternetProtocolSink *pOIProtSink,IInternetBindInfo *pOIBindInfo,DWORD grfPI,HANDLE_PTR dwReserved);
//C           HRESULT ( *Continue)(IInternetProtocolRoot *This,PROTOCOLDATA *pProtocolData);
//C           HRESULT ( *Abort)(IInternetProtocolRoot *This,HRESULT hrReason,DWORD dwOptions);
//C           HRESULT ( *Terminate)(IInternetProtocolRoot *This,DWORD dwOptions);
//C           HRESULT ( *Suspend)(IInternetProtocolRoot *This);
//C           HRESULT ( *Resume)(IInternetProtocolRoot *This);
//C       } IInternetProtocolRootVtbl;
struct IInternetProtocolRootVtbl
{
    HRESULT  function(IInternetProtocolRoot *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetProtocolRoot *This)AddRef;
    ULONG  function(IInternetProtocolRoot *This)Release;
    HRESULT  function(IInternetProtocolRoot *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved)Start;
    HRESULT  function(IInternetProtocolRoot *This, PROTOCOLDATA *pProtocolData)Continue;
    HRESULT  function(IInternetProtocolRoot *This, HRESULT hrReason, DWORD dwOptions)Abort;
    HRESULT  function(IInternetProtocolRoot *This, DWORD dwOptions)Terminate;
    HRESULT  function(IInternetProtocolRoot *This)Suspend;
    HRESULT  function(IInternetProtocolRoot *This)Resume;
}
//C       struct IInternetProtocolRoot {
//C         struct IInternetProtocolRootVtbl *lpVtbl;
//C       };
struct IInternetProtocolRoot
{
    IInternetProtocolRootVtbl *lpVtbl;
}
//C       HRESULT IInternetProtocolRoot_Start_Proxy(IInternetProtocolRoot *This,LPCWSTR szUrl,IInternetProtocolSink *pOIProtSink,IInternetBindInfo *pOIBindInfo,DWORD grfPI,HANDLE_PTR dwReserved);
HRESULT  IInternetProtocolRoot_Start_Proxy(IInternetProtocolRoot *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);
//C       void IInternetProtocolRoot_Start_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolRoot_Start_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolRoot_Continue_Proxy(IInternetProtocolRoot *This,PROTOCOLDATA *pProtocolData);
HRESULT  IInternetProtocolRoot_Continue_Proxy(IInternetProtocolRoot *This, PROTOCOLDATA *pProtocolData);
//C       void IInternetProtocolRoot_Continue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolRoot_Continue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolRoot_Abort_Proxy(IInternetProtocolRoot *This,HRESULT hrReason,DWORD dwOptions);
HRESULT  IInternetProtocolRoot_Abort_Proxy(IInternetProtocolRoot *This, HRESULT hrReason, DWORD dwOptions);
//C       void IInternetProtocolRoot_Abort_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolRoot_Abort_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolRoot_Terminate_Proxy(IInternetProtocolRoot *This,DWORD dwOptions);
HRESULT  IInternetProtocolRoot_Terminate_Proxy(IInternetProtocolRoot *This, DWORD dwOptions);
//C       void IInternetProtocolRoot_Terminate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolRoot_Terminate_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolRoot_Suspend_Proxy(IInternetProtocolRoot *This);
HRESULT  IInternetProtocolRoot_Suspend_Proxy(IInternetProtocolRoot *This);
//C       void IInternetProtocolRoot_Suspend_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolRoot_Suspend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolRoot_Resume_Proxy(IInternetProtocolRoot *This);
HRESULT  IInternetProtocolRoot_Resume_Proxy(IInternetProtocolRoot *This);
//C       void IInternetProtocolRoot_Resume_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolRoot_Resume_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_s_ifspec;
//C       typedef IInternetProtocol *LPIINTERNETPROTOCOL;
alias IInternetProtocol *LPIINTERNETPROTOCOL;
//C       extern const IID IID_IInternetProtocol;
extern const IID IID_IInternetProtocol;
//C       typedef struct IInternetProtocolVtbl {
//C           HRESULT ( *QueryInterface)(IInternetProtocol *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetProtocol *This);
//C           ULONG ( *Release)(IInternetProtocol *This);
//C           HRESULT ( *Start)(IInternetProtocol *This,LPCWSTR szUrl,IInternetProtocolSink *pOIProtSink,IInternetBindInfo *pOIBindInfo,DWORD grfPI,HANDLE_PTR dwReserved);
//C           HRESULT ( *Continue)(IInternetProtocol *This,PROTOCOLDATA *pProtocolData);
//C           HRESULT ( *Abort)(IInternetProtocol *This,HRESULT hrReason,DWORD dwOptions);
//C           HRESULT ( *Terminate)(IInternetProtocol *This,DWORD dwOptions);
//C           HRESULT ( *Suspend)(IInternetProtocol *This);
//C           HRESULT ( *Resume)(IInternetProtocol *This);
//C           HRESULT ( *Read)(IInternetProtocol *This,void *pv,ULONG cb,ULONG *pcbRead);
//C           HRESULT ( *Seek)(IInternetProtocol *This,LARGE_INTEGER dlibMove,DWORD dwOrigin,ULARGE_INTEGER *plibNewPosition);
//C           HRESULT ( *LockRequest)(IInternetProtocol *This,DWORD dwOptions);
//C           HRESULT ( *UnlockRequest)(IInternetProtocol *This);
//C       } IInternetProtocolVtbl;
struct IInternetProtocolVtbl
{
    HRESULT  function(IInternetProtocol *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetProtocol *This)AddRef;
    ULONG  function(IInternetProtocol *This)Release;
    HRESULT  function(IInternetProtocol *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved)Start;
    HRESULT  function(IInternetProtocol *This, PROTOCOLDATA *pProtocolData)Continue;
    HRESULT  function(IInternetProtocol *This, HRESULT hrReason, DWORD dwOptions)Abort;
    HRESULT  function(IInternetProtocol *This, DWORD dwOptions)Terminate;
    HRESULT  function(IInternetProtocol *This)Suspend;
    HRESULT  function(IInternetProtocol *This)Resume;
    HRESULT  function(IInternetProtocol *This, void *pv, ULONG cb, ULONG *pcbRead)Read;
    HRESULT  function(IInternetProtocol *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)Seek;
    HRESULT  function(IInternetProtocol *This, DWORD dwOptions)LockRequest;
    HRESULT  function(IInternetProtocol *This)UnlockRequest;
}
//C       struct IInternetProtocol {
//C         struct IInternetProtocolVtbl *lpVtbl;
//C       };
struct IInternetProtocol
{
    IInternetProtocolVtbl *lpVtbl;
}
//C       HRESULT IInternetProtocol_Read_Proxy(IInternetProtocol *This,void *pv,ULONG cb,ULONG *pcbRead);
HRESULT  IInternetProtocol_Read_Proxy(IInternetProtocol *This, void *pv, ULONG cb, ULONG *pcbRead);
//C       void IInternetProtocol_Read_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocol_Read_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocol_Seek_Proxy(IInternetProtocol *This,LARGE_INTEGER dlibMove,DWORD dwOrigin,ULARGE_INTEGER *plibNewPosition);
HRESULT  IInternetProtocol_Seek_Proxy(IInternetProtocol *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
//C       void IInternetProtocol_Seek_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocol_Seek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocol_LockRequest_Proxy(IInternetProtocol *This,DWORD dwOptions);
HRESULT  IInternetProtocol_LockRequest_Proxy(IInternetProtocol *This, DWORD dwOptions);
//C       void IInternetProtocol_LockRequest_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocol_LockRequest_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocol_UnlockRequest_Proxy(IInternetProtocol *This);
HRESULT  IInternetProtocol_UnlockRequest_Proxy(IInternetProtocol *This);
//C       void IInternetProtocol_UnlockRequest_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocol_UnlockRequest_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_s_ifspec;
//C       typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
alias IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
//C       extern const IID IID_IInternetProtocolSink;
extern const IID IID_IInternetProtocolSink;
//C       typedef struct IInternetProtocolSinkVtbl {
//C           HRESULT ( *QueryInterface)(IInternetProtocolSink *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetProtocolSink *This);
//C           ULONG ( *Release)(IInternetProtocolSink *This);
//C           HRESULT ( *Switch)(IInternetProtocolSink *This,PROTOCOLDATA *pProtocolData);
//C           HRESULT ( *ReportProgress)(IInternetProtocolSink *This,ULONG ulStatusCode,LPCWSTR szStatusText);
//C           HRESULT ( *ReportData)(IInternetProtocolSink *This,DWORD grfBSCF,ULONG ulProgress,ULONG ulProgressMax);
//C           HRESULT ( *ReportResult)(IInternetProtocolSink *This,HRESULT hrResult,DWORD dwError,LPCWSTR szResult);
//C       } IInternetProtocolSinkVtbl;
struct IInternetProtocolSinkVtbl
{
    HRESULT  function(IInternetProtocolSink *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetProtocolSink *This)AddRef;
    ULONG  function(IInternetProtocolSink *This)Release;
    HRESULT  function(IInternetProtocolSink *This, PROTOCOLDATA *pProtocolData)Switch;
    HRESULT  function(IInternetProtocolSink *This, ULONG ulStatusCode, LPCWSTR szStatusText)ReportProgress;
    HRESULT  function(IInternetProtocolSink *This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax)ReportData;
    HRESULT  function(IInternetProtocolSink *This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult)ReportResult;
}
//C       struct IInternetProtocolSink {
//C         struct IInternetProtocolSinkVtbl *lpVtbl;
//C       };
struct IInternetProtocolSink
{
    IInternetProtocolSinkVtbl *lpVtbl;
}
//C       HRESULT IInternetProtocolSink_Switch_Proxy(IInternetProtocolSink *This,PROTOCOLDATA *pProtocolData);
HRESULT  IInternetProtocolSink_Switch_Proxy(IInternetProtocolSink *This, PROTOCOLDATA *pProtocolData);
//C       void IInternetProtocolSink_Switch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSink_Switch_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolSink_ReportProgress_Proxy(IInternetProtocolSink *This,ULONG ulStatusCode,LPCWSTR szStatusText);
HRESULT  IInternetProtocolSink_ReportProgress_Proxy(IInternetProtocolSink *This, ULONG ulStatusCode, LPCWSTR szStatusText);
//C       void IInternetProtocolSink_ReportProgress_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSink_ReportProgress_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolSink_ReportData_Proxy(IInternetProtocolSink *This,DWORD grfBSCF,ULONG ulProgress,ULONG ulProgressMax);
HRESULT  IInternetProtocolSink_ReportData_Proxy(IInternetProtocolSink *This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);
//C       void IInternetProtocolSink_ReportData_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSink_ReportData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolSink_ReportResult_Proxy(IInternetProtocolSink *This,HRESULT hrResult,DWORD dwError,LPCWSTR szResult);
HRESULT  IInternetProtocolSink_ReportResult_Proxy(IInternetProtocolSink *This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);
//C       void IInternetProtocolSink_ReportResult_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSink_ReportResult_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_s_ifspec;
//C       typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
alias IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
//C       extern const IID IID_IInternetProtocolSinkStackable;
extern const IID IID_IInternetProtocolSinkStackable;
//C       typedef struct IInternetProtocolSinkStackableVtbl {
//C           HRESULT ( *QueryInterface)(IInternetProtocolSinkStackable *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetProtocolSinkStackable *This);
//C           ULONG ( *Release)(IInternetProtocolSinkStackable *This);
//C           HRESULT ( *SwitchSink)(IInternetProtocolSinkStackable *This,IInternetProtocolSink *pOIProtSink);
//C           HRESULT ( *CommitSwitch)(IInternetProtocolSinkStackable *This);
//C           HRESULT ( *RollbackSwitch)(IInternetProtocolSinkStackable *This);
//C       } IInternetProtocolSinkStackableVtbl;
struct IInternetProtocolSinkStackableVtbl
{
    HRESULT  function(IInternetProtocolSinkStackable *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetProtocolSinkStackable *This)AddRef;
    ULONG  function(IInternetProtocolSinkStackable *This)Release;
    HRESULT  function(IInternetProtocolSinkStackable *This, IInternetProtocolSink *pOIProtSink)SwitchSink;
    HRESULT  function(IInternetProtocolSinkStackable *This)CommitSwitch;
    HRESULT  function(IInternetProtocolSinkStackable *This)RollbackSwitch;
}
//C       struct IInternetProtocolSinkStackable {
//C         struct IInternetProtocolSinkStackableVtbl *lpVtbl;
//C       };
struct IInternetProtocolSinkStackable
{
    IInternetProtocolSinkStackableVtbl *lpVtbl;
}
//C       HRESULT IInternetProtocolSinkStackable_SwitchSink_Proxy(IInternetProtocolSinkStackable *This,IInternetProtocolSink *pOIProtSink);
HRESULT  IInternetProtocolSinkStackable_SwitchSink_Proxy(IInternetProtocolSinkStackable *This, IInternetProtocolSink *pOIProtSink);
//C       void IInternetProtocolSinkStackable_SwitchSink_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSinkStackable_SwitchSink_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolSinkStackable_CommitSwitch_Proxy(IInternetProtocolSinkStackable *This);
HRESULT  IInternetProtocolSinkStackable_CommitSwitch_Proxy(IInternetProtocolSinkStackable *This);
//C       void IInternetProtocolSinkStackable_CommitSwitch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSinkStackable_CommitSwitch_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolSinkStackable_RollbackSwitch_Proxy(IInternetProtocolSinkStackable *This);
HRESULT  IInternetProtocolSinkStackable_RollbackSwitch_Proxy(IInternetProtocolSinkStackable *This);
//C       void IInternetProtocolSinkStackable_RollbackSwitch_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolSinkStackable_RollbackSwitch_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_s_ifspec;
//C       typedef IInternetSession *LPIINTERNETSESSION;
alias IInternetSession *LPIINTERNETSESSION;
//C       typedef enum _tagOIBDG_FLAGS {
//C         OIBDG_APARTMENTTHREADED = 0x100,OIBDG_DATAONLY = 0x1000
//C       } OIBDG_FLAGS;
enum _tagOIBDG_FLAGS
{
    OIBDG_APARTMENTTHREADED = 256,
    OIBDG_DATAONLY = 4096,
}
alias _tagOIBDG_FLAGS OIBDG_FLAGS;
//C       extern const IID IID_IInternetSession;
extern const IID IID_IInternetSession;
//C       typedef struct IInternetSessionVtbl {
//C           HRESULT ( *QueryInterface)(IInternetSession *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetSession *This);
//C           ULONG ( *Release)(IInternetSession *This);
//C           HRESULT ( *RegisterNameSpace)(IInternetSession *This,IClassFactory *pCF,const IID *const rclsid,LPCWSTR pwzProtocol,ULONG cPatterns,const LPCWSTR *ppwzPatterns,DWORD dwReserved);
//C           HRESULT ( *UnregisterNameSpace)(IInternetSession *This,IClassFactory *pCF,LPCWSTR pszProtocol);
//C           HRESULT ( *RegisterMimeFilter)(IInternetSession *This,IClassFactory *pCF,const IID *const rclsid,LPCWSTR pwzType);
//C           HRESULT ( *UnregisterMimeFilter)(IInternetSession *This,IClassFactory *pCF,LPCWSTR pwzType);
//C           HRESULT ( *CreateBinding)(IInternetSession *This,LPBC pBC,LPCWSTR szUrl,IUnknown *pUnkOuter,IUnknown **ppUnk,IInternetProtocol **ppOInetProt,DWORD dwOption);
//C           HRESULT ( *SetSessionOption)(IInternetSession *This,DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD dwReserved);
//C           HRESULT ( *GetSessionOption)(IInternetSession *This,DWORD dwOption,LPVOID pBuffer,DWORD *pdwBufferLength,DWORD dwReserved);
//C       } IInternetSessionVtbl;
struct IInternetSessionVtbl
{
    HRESULT  function(IInternetSession *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetSession *This)AddRef;
    ULONG  function(IInternetSession *This)Release;
    HRESULT  function(IInternetSession *This, IClassFactory *pCF, IID *rclsid, LPCWSTR pwzProtocol, ULONG cPatterns, LPCWSTR *ppwzPatterns, DWORD dwReserved)RegisterNameSpace;
    HRESULT  function(IInternetSession *This, IClassFactory *pCF, LPCWSTR pszProtocol)UnregisterNameSpace;
    HRESULT  function(IInternetSession *This, IClassFactory *pCF, IID *rclsid, LPCWSTR pwzType)RegisterMimeFilter;
    HRESULT  function(IInternetSession *This, IClassFactory *pCF, LPCWSTR pwzType)UnregisterMimeFilter;
    HRESULT  function(IInternetSession *This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption)CreateBinding;
    HRESULT  function(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved)SetSessionOption;
    HRESULT  function(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved)GetSessionOption;
}
//C       struct IInternetSession {
//C         struct IInternetSessionVtbl *lpVtbl;
//C       };
struct IInternetSession
{
    IInternetSessionVtbl *lpVtbl;
}
//C       HRESULT IInternetSession_RegisterNameSpace_Proxy(IInternetSession *This,IClassFactory *pCF,const IID *const rclsid,LPCWSTR pwzProtocol,ULONG cPatterns,const LPCWSTR *ppwzPatterns,DWORD dwReserved);
HRESULT  IInternetSession_RegisterNameSpace_Proxy(IInternetSession *This, IClassFactory *pCF, IID *rclsid, LPCWSTR pwzProtocol, ULONG cPatterns, LPCWSTR *ppwzPatterns, DWORD dwReserved);
//C       void IInternetSession_RegisterNameSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_RegisterNameSpace_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSession_UnregisterNameSpace_Proxy(IInternetSession *This,IClassFactory *pCF,LPCWSTR pszProtocol);
HRESULT  IInternetSession_UnregisterNameSpace_Proxy(IInternetSession *This, IClassFactory *pCF, LPCWSTR pszProtocol);
//C       void IInternetSession_UnregisterNameSpace_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_UnregisterNameSpace_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSession_RegisterMimeFilter_Proxy(IInternetSession *This,IClassFactory *pCF,const IID *const rclsid,LPCWSTR pwzType);
HRESULT  IInternetSession_RegisterMimeFilter_Proxy(IInternetSession *This, IClassFactory *pCF, IID *rclsid, LPCWSTR pwzType);
//C       void IInternetSession_RegisterMimeFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_RegisterMimeFilter_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSession_UnregisterMimeFilter_Proxy(IInternetSession *This,IClassFactory *pCF,LPCWSTR pwzType);
HRESULT  IInternetSession_UnregisterMimeFilter_Proxy(IInternetSession *This, IClassFactory *pCF, LPCWSTR pwzType);
//C       void IInternetSession_UnregisterMimeFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_UnregisterMimeFilter_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSession_CreateBinding_Proxy(IInternetSession *This,LPBC pBC,LPCWSTR szUrl,IUnknown *pUnkOuter,IUnknown **ppUnk,IInternetProtocol **ppOInetProt,DWORD dwOption);
HRESULT  IInternetSession_CreateBinding_Proxy(IInternetSession *This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption);
//C       void IInternetSession_CreateBinding_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_CreateBinding_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSession_SetSessionOption_Proxy(IInternetSession *This,DWORD dwOption,LPVOID pBuffer,DWORD dwBufferLength,DWORD dwReserved);
HRESULT  IInternetSession_SetSessionOption_Proxy(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
//C       void IInternetSession_SetSessionOption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_SetSessionOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSession_GetSessionOption_Proxy(IInternetSession *This,DWORD dwOption,LPVOID pBuffer,DWORD *pdwBufferLength,DWORD dwReserved);
HRESULT  IInternetSession_GetSessionOption_Proxy(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved);
//C       void IInternetSession_GetSessionOption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSession_GetSessionOption_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_s_ifspec;
//C       typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
alias IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
//C       extern const IID IID_IInternetThreadSwitch;
extern const IID IID_IInternetThreadSwitch;
//C       typedef struct IInternetThreadSwitchVtbl {
//C           HRESULT ( *QueryInterface)(IInternetThreadSwitch *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetThreadSwitch *This);
//C           ULONG ( *Release)(IInternetThreadSwitch *This);
//C           HRESULT ( *Prepare)(IInternetThreadSwitch *This);
//C           HRESULT ( *Continue)(IInternetThreadSwitch *This);
//C       } IInternetThreadSwitchVtbl;
struct IInternetThreadSwitchVtbl
{
    HRESULT  function(IInternetThreadSwitch *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetThreadSwitch *This)AddRef;
    ULONG  function(IInternetThreadSwitch *This)Release;
    HRESULT  function(IInternetThreadSwitch *This)Prepare;
    HRESULT  function(IInternetThreadSwitch *This)Continue;
}
//C       struct IInternetThreadSwitch {
//C         struct IInternetThreadSwitchVtbl *lpVtbl;
//C       };
struct IInternetThreadSwitch
{
    IInternetThreadSwitchVtbl *lpVtbl;
}
//C       HRESULT IInternetThreadSwitch_Prepare_Proxy(IInternetThreadSwitch *This);
HRESULT  IInternetThreadSwitch_Prepare_Proxy(IInternetThreadSwitch *This);
//C       void IInternetThreadSwitch_Prepare_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetThreadSwitch_Prepare_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetThreadSwitch_Continue_Proxy(IInternetThreadSwitch *This);
HRESULT  IInternetThreadSwitch_Continue_Proxy(IInternetThreadSwitch *This);
//C       void IInternetThreadSwitch_Continue_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetThreadSwitch_Continue_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_s_ifspec;
//C       typedef IInternetPriority *LPIINTERNETPRIORITY;
alias IInternetPriority *LPIINTERNETPRIORITY;
//C       extern const IID IID_IInternetPriority;
extern const IID IID_IInternetPriority;
//C       typedef struct IInternetPriorityVtbl {
//C           HRESULT ( *QueryInterface)(IInternetPriority *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetPriority *This);
//C           ULONG ( *Release)(IInternetPriority *This);
//C           HRESULT ( *SetPriority)(IInternetPriority *This,LONG nPriority);
//C           HRESULT ( *GetPriority)(IInternetPriority *This,LONG *pnPriority);
//C       } IInternetPriorityVtbl;
struct IInternetPriorityVtbl
{
    HRESULT  function(IInternetPriority *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetPriority *This)AddRef;
    ULONG  function(IInternetPriority *This)Release;
    HRESULT  function(IInternetPriority *This, LONG nPriority)SetPriority;
    HRESULT  function(IInternetPriority *This, LONG *pnPriority)GetPriority;
}
//C       struct IInternetPriority {
//C         struct IInternetPriorityVtbl *lpVtbl;
//C       };
struct IInternetPriority
{
    IInternetPriorityVtbl *lpVtbl;
}
//C       HRESULT IInternetPriority_SetPriority_Proxy(IInternetPriority *This,LONG nPriority);
HRESULT  IInternetPriority_SetPriority_Proxy(IInternetPriority *This, LONG nPriority);
//C       void IInternetPriority_SetPriority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetPriority_SetPriority_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetPriority_GetPriority_Proxy(IInternetPriority *This,LONG *pnPriority);
HRESULT  IInternetPriority_GetPriority_Proxy(IInternetPriority *This, LONG *pnPriority);
//C       void IInternetPriority_GetPriority_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetPriority_GetPriority_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_s_ifspec;
//C       typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
alias IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
//C       typedef enum _tagPARSEACTION {
//C         PARSE_CANONICALIZE = 1,
//C         PARSE_FRIENDLY,PARSE_SECURITY_URL,PARSE_ROOTDOCUMENT,PARSE_DOCUMENT,PARSE_ANCHOR,
//C         PARSE_ENCODE,PARSE_DECODE,PARSE_PATH_FROM_URL,PARSE_URL_FROM_PATH,PARSE_MIME,
//C         PARSE_SERVER,PARSE_SCHEMA,PARSE_SITE,PARSE_DOMAIN,PARSE_LOCATION,PARSE_SECURITY_DOMAIN,
//C         PARSE_ESCAPE,PARSE_UNESCAPE
//C       } PARSEACTION;
enum _tagPARSEACTION
{
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY,
    PARSE_SECURITY_URL,
    PARSE_ROOTDOCUMENT,
    PARSE_DOCUMENT,
    PARSE_ANCHOR,
    PARSE_ENCODE,
    PARSE_DECODE,
    PARSE_PATH_FROM_URL,
    PARSE_URL_FROM_PATH,
    PARSE_MIME,
    PARSE_SERVER,
    PARSE_SCHEMA,
    PARSE_SITE,
    PARSE_DOMAIN,
    PARSE_LOCATION,
    PARSE_SECURITY_DOMAIN,
    PARSE_ESCAPE,
    PARSE_UNESCAPE,
}
alias _tagPARSEACTION PARSEACTION;
//C       typedef enum _tagPSUACTION {
//C         PSU_DEFAULT = 1,
//C         PSU_SECURITY_URL_ONLY
//C       } PSUACTION;
enum _tagPSUACTION
{
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY,
}
alias _tagPSUACTION PSUACTION;
//C       typedef enum _tagQUERYOPTION {
//C         QUERY_EXPIRATION_DATE = 1,
//C         QUERY_TIME_OF_LAST_CHANGE,QUERY_CONTENT_ENCODING,QUERY_CONTENT_TYPE,QUERY_REFRESH,
//C         QUERY_RECOMBINE,QUERY_CAN_NAVIGATE,QUERY_USES_NETWORK,QUERY_IS_CACHED,QUERY_IS_INSTALLEDENTRY,
//C         QUERY_IS_CACHED_OR_MAPPED,QUERY_USES_CACHE,QUERY_IS_SECURE,QUERY_IS_SAFE
//C       } QUERYOPTION;
enum _tagQUERYOPTION
{
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE,
    QUERY_CONTENT_ENCODING,
    QUERY_CONTENT_TYPE,
    QUERY_REFRESH,
    QUERY_RECOMBINE,
    QUERY_CAN_NAVIGATE,
    QUERY_USES_NETWORK,
    QUERY_IS_CACHED,
    QUERY_IS_INSTALLEDENTRY,
    QUERY_IS_CACHED_OR_MAPPED,
    QUERY_USES_CACHE,
    QUERY_IS_SECURE,
    QUERY_IS_SAFE,
}
alias _tagQUERYOPTION QUERYOPTION;
//C       extern const IID IID_IInternetProtocolInfo;
extern const IID IID_IInternetProtocolInfo;
//C       typedef struct IInternetProtocolInfoVtbl {
//C           HRESULT ( *QueryInterface)(IInternetProtocolInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetProtocolInfo *This);
//C           ULONG ( *Release)(IInternetProtocolInfo *This);
//C           HRESULT ( *ParseUrl)(IInternetProtocolInfo *This,LPCWSTR pwzUrl,PARSEACTION ParseAction,DWORD dwParseFlags,LPWSTR pwzResult,DWORD cchResult,DWORD *pcchResult,DWORD dwReserved);
//C           HRESULT ( *CombineUrl)(IInternetProtocolInfo *This,LPCWSTR pwzBaseUrl,LPCWSTR pwzRelativeUrl,DWORD dwCombineFlags,LPWSTR pwzResult,DWORD cchResult,DWORD *pcchResult,DWORD dwReserved);
//C           HRESULT ( *CompareUrl)(IInternetProtocolInfo *This,LPCWSTR pwzUrl1,LPCWSTR pwzUrl2,DWORD dwCompareFlags);
//C           HRESULT ( *QueryInfo)(IInternetProtocolInfo *This,LPCWSTR pwzUrl,QUERYOPTION OueryOption,DWORD dwQueryFlags,LPVOID pBuffer,DWORD cbBuffer,DWORD *pcbBuf,DWORD dwReserved);
//C       } IInternetProtocolInfoVtbl;
struct IInternetProtocolInfoVtbl
{
    HRESULT  function(IInternetProtocolInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetProtocolInfo *This)AddRef;
    ULONG  function(IInternetProtocolInfo *This)Release;
    HRESULT  function(IInternetProtocolInfo *This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)ParseUrl;
    HRESULT  function(IInternetProtocolInfo *This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)CombineUrl;
    HRESULT  function(IInternetProtocolInfo *This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags)CompareUrl;
    HRESULT  function(IInternetProtocolInfo *This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved)QueryInfo;
}
//C       struct IInternetProtocolInfo {
//C         struct IInternetProtocolInfoVtbl *lpVtbl;
//C       };
struct IInternetProtocolInfo
{
    IInternetProtocolInfoVtbl *lpVtbl;
}
//C       HRESULT IInternetProtocolInfo_ParseUrl_Proxy(IInternetProtocolInfo *This,LPCWSTR pwzUrl,PARSEACTION ParseAction,DWORD dwParseFlags,LPWSTR pwzResult,DWORD cchResult,DWORD *pcchResult,DWORD dwReserved);
HRESULT  IInternetProtocolInfo_ParseUrl_Proxy(IInternetProtocolInfo *This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);
//C       void IInternetProtocolInfo_ParseUrl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolInfo_ParseUrl_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolInfo_CombineUrl_Proxy(IInternetProtocolInfo *This,LPCWSTR pwzBaseUrl,LPCWSTR pwzRelativeUrl,DWORD dwCombineFlags,LPWSTR pwzResult,DWORD cchResult,DWORD *pcchResult,DWORD dwReserved);
HRESULT  IInternetProtocolInfo_CombineUrl_Proxy(IInternetProtocolInfo *This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);
//C       void IInternetProtocolInfo_CombineUrl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolInfo_CombineUrl_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolInfo_CompareUrl_Proxy(IInternetProtocolInfo *This,LPCWSTR pwzUrl1,LPCWSTR pwzUrl2,DWORD dwCompareFlags);
HRESULT  IInternetProtocolInfo_CompareUrl_Proxy(IInternetProtocolInfo *This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);
//C       void IInternetProtocolInfo_CompareUrl_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolInfo_CompareUrl_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetProtocolInfo_QueryInfo_Proxy(IInternetProtocolInfo *This,LPCWSTR pwzUrl,QUERYOPTION OueryOption,DWORD dwQueryFlags,LPVOID pBuffer,DWORD cbBuffer,DWORD *pcbBuf,DWORD dwReserved);
HRESULT  IInternetProtocolInfo_QueryInfo_Proxy(IInternetProtocolInfo *This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved);
//C       void IInternetProtocolInfo_QueryInfo_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetProtocolInfo_QueryInfo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl,PARSEACTION ParseAction,DWORD dwFlags,LPWSTR pszResult,DWORD cchResult,DWORD *pcchResult,DWORD dwReserved);
HRESULT  CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);
//C       extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl,LPCWSTR pwzRelativeUrl,DWORD dwCombineFlags,LPWSTR pszResult,DWORD cchResult,DWORD *pcchResult,DWORD dwReserved);
HRESULT  CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);
//C       extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1,LPCWSTR pwzUrl2,DWORD dwFlags);
HRESULT  CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags);
//C       extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl,DWORD *pdwFlags,DWORD dwReserved);
HRESULT  CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved);
//C       extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl,QUERYOPTION QueryOptions,DWORD dwQueryFlags,LPVOID pvBuffer,DWORD cbBuffer,DWORD *pcbBuffer,DWORD dwReserved);
HRESULT  CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved);
//C       extern HRESULT CoInternetGetSession(DWORD dwSessionMode,IInternetSession **ppIInternetSession,DWORD dwReserved);
HRESULT  CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved);
//C       extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwzUrl,LPWSTR *ppwzSecUrl,PSUACTION psuAction,DWORD dwReserved);
HRESULT  CoInternetGetSecurityUrl(LPCWSTR pwzUrl, LPWSTR *ppwzSecUrl, PSUACTION psuAction, DWORD dwReserved);
//C       extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit,LPCWSTR szTYPE,LPCWSTR szExt,DWORD dwFileVersionMS,DWORD dwFileVersionLS,LPCWSTR szURL,IBindCtx *pbc,LPVOID pvReserved,DWORD flags);
HRESULT  AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags);
//C       typedef enum _tagINTERNETFEATURELIST {
//C         FEATURE_OBJECT_CACHING = 0,
//C         FEATURE_ZONE_ELEVATION,FEATURE_MIME_HANDLING,FEATURE_MIME_SNIFFING,
//C         FEATURE_WINDOW_RESTRICTIONS,FEATURE_WEBOC_POPUPMANAGEMENT,
//C         FEATURE_BEHAVIORS,FEATURE_DISABLE_MK_PROTOCOL,FEATURE_LOCALMACHINE_LOCKDOWN,
//C         FEATURE_SECURITYBAND,FEATURE_RESTRICT_ACTIVEXINSTALL,FEATURE_VALIDATE_NAVIGATE_URL,
//C         FEATURE_RESTRICT_FILEDOWNLOAD,FEATURE_ADDON_MANAGEMENT,FEATURE_PROTOCOL_LOCKDOWN,
//C         FEATURE_HTTP_USERNAME_PASSWORD_DISABLE,FEATURE_SAFE_BINDTOOBJECT,
//C         FEATURE_UNC_SAVEDFILECHECK,FEATURE_GET_URL_DOM_FILEPATH_UNENCODED,
//C         FEATURE_ENTRY_COUNT
//C       } INTERNETFEATURELIST;
enum _tagINTERNETFEATURELIST
{
    FEATURE_OBJECT_CACHING,
    FEATURE_ZONE_ELEVATION,
    FEATURE_MIME_HANDLING,
    FEATURE_MIME_SNIFFING,
    FEATURE_WINDOW_RESTRICTIONS,
    FEATURE_WEBOC_POPUPMANAGEMENT,
    FEATURE_BEHAVIORS,
    FEATURE_DISABLE_MK_PROTOCOL,
    FEATURE_LOCALMACHINE_LOCKDOWN,
    FEATURE_SECURITYBAND,
    FEATURE_RESTRICT_ACTIVEXINSTALL,
    FEATURE_VALIDATE_NAVIGATE_URL,
    FEATURE_RESTRICT_FILEDOWNLOAD,
    FEATURE_ADDON_MANAGEMENT,
    FEATURE_PROTOCOL_LOCKDOWN,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE,
    FEATURE_SAFE_BINDTOOBJECT,
    FEATURE_UNC_SAVEDFILECHECK,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED,
    FEATURE_ENTRY_COUNT,
}
alias _tagINTERNETFEATURELIST INTERNETFEATURELIST;
//C       extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags,WINBOOL fEnable);
HRESULT  CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, WINBOOL fEnable);
//C       extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags);
HRESULT  CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags);
//C       extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry,DWORD dwFlags,LPCWSTR szURL,IInternetSecurityManager *pSecMgr);
HRESULT  CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr);
//C       extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL,LPCWSTR szToURL,IInternetSecurityManager *pSecMgr,DWORD dwFlags);
HRESULT  CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags);
//C       extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc,STGMEDIUM *pstgmedDest);
HRESULT  CopyStgMedium(STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest);
//C       extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc,BINDINFO *pbiDest);
HRESULT  CopyBindInfo(BINDINFO *pcbiSrc, BINDINFO *pbiDest);
//C       extern void ReleaseBindInfo(BINDINFO *pbindinfo);
void  ReleaseBindInfo(BINDINFO *pbindinfo);
//C       extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP,IInternetSecurityManager **ppSM,DWORD dwReserved);
HRESULT  CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);
//C       extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP,IInternetZoneManager **ppZM,DWORD dwReserved);
HRESULT  CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);
//C       extern const IID CLSID_InternetSecurityManager;
extern const IID CLSID_InternetSecurityManager;
//C       extern const IID CLSID_InternetZoneManager;
extern const IID CLSID_InternetZoneManager;
//C       extern const IID CLSID_PersistentZoneIdentifier;
extern const IID CLSID_PersistentZoneIdentifier;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_s_ifspec;
//C       extern const IID IID_IInternetSecurityMgrSite;
extern const IID IID_IInternetSecurityMgrSite;
//C       typedef struct IInternetSecurityMgrSiteVtbl {
//C           HRESULT ( *QueryInterface)(IInternetSecurityMgrSite *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetSecurityMgrSite *This);
//C           ULONG ( *Release)(IInternetSecurityMgrSite *This);
//C           HRESULT ( *GetWindow)(IInternetSecurityMgrSite *This,HWND *phwnd);
//C           HRESULT ( *EnableModeless)(IInternetSecurityMgrSite *This,WINBOOL fEnable);
//C       } IInternetSecurityMgrSiteVtbl;
struct IInternetSecurityMgrSiteVtbl
{
    HRESULT  function(IInternetSecurityMgrSite *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetSecurityMgrSite *This)AddRef;
    ULONG  function(IInternetSecurityMgrSite *This)Release;
    HRESULT  function(IInternetSecurityMgrSite *This, HWND *phwnd)GetWindow;
    HRESULT  function(IInternetSecurityMgrSite *This, WINBOOL fEnable)EnableModeless;
}
//C       struct IInternetSecurityMgrSite {
//C         struct IInternetSecurityMgrSiteVtbl *lpVtbl;
//C       };
struct IInternetSecurityMgrSite
{
    IInternetSecurityMgrSiteVtbl *lpVtbl;
}
//C       HRESULT IInternetSecurityMgrSite_GetWindow_Proxy(IInternetSecurityMgrSite *This,HWND *phwnd);
HRESULT  IInternetSecurityMgrSite_GetWindow_Proxy(IInternetSecurityMgrSite *This, HWND *phwnd);
//C       void IInternetSecurityMgrSite_GetWindow_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityMgrSite_GetWindow_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityMgrSite_EnableModeless_Proxy(IInternetSecurityMgrSite *This,WINBOOL fEnable);
HRESULT  IInternetSecurityMgrSite_EnableModeless_Proxy(IInternetSecurityMgrSite *This, WINBOOL fEnable);
//C       void IInternetSecurityMgrSite_EnableModeless_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityMgrSite_EnableModeless_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_s_ifspec;
//C       typedef enum __MIDL_IInternetSecurityManager_0001 {
//C         PUAF_DEFAULT = 0,PUAF_NOUI = 0x1,PUAF_ISFILE = 0x2,PUAF_WARN_IF_DENIED = 0x4,PUAF_FORCEUI_FOREGROUND = 0x8,PUAF_CHECK_TIFS = 0x10,
//C         PUAF_DONTCHECKBOXINDIALOG = 0x20,PUAF_TRUSTED = 0x40,PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,PUAF_ENFORCERESTRICTED = 0x100,
//C         PUAF_NOSAVEDFILECHECK = 0x200,PUAF_REQUIRESAVEDFILECHECK = 0x400,PUAF_LMZ_UNLOCKED = 0x10000,PUAF_LMZ_LOCKED = 0x20000,
//C         PUAF_DEFAULTZONEPOL = 0x40000,PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,PUAF_NOUIIFLOCKED = 0x100000,PUAF_DRAGPROTOCOLCHECK = 0x200000
//C       } PUAF;
enum __MIDL_IInternetSecurityManager_0001
{
    PUAF_DEFAULT,
    PUAF_NOUI,
    PUAF_ISFILE,
    PUAF_WARN_IF_DENIED = 4,
    PUAF_FORCEUI_FOREGROUND = 8,
    PUAF_CHECK_TIFS = 16,
    PUAF_DONTCHECKBOXINDIALOG = 32,
    PUAF_TRUSTED = 64,
    PUAF_ACCEPT_WILDCARD_SCHEME = 128,
    PUAF_ENFORCERESTRICTED = 256,
    PUAF_NOSAVEDFILECHECK = 512,
    PUAF_REQUIRESAVEDFILECHECK = 1024,
    PUAF_LMZ_UNLOCKED = 65536,
    PUAF_LMZ_LOCKED = 131072,
    PUAF_DEFAULTZONEPOL = 262144,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288,
    PUAF_NOUIIFLOCKED = 1048576,
    PUAF_DRAGPROTOCOLCHECK = 2097152,
}
alias __MIDL_IInternetSecurityManager_0001 PUAF;
//C       typedef enum __MIDL_IInternetSecurityManager_0002 {
//C         PUAFOUT_DEFAULT = 0,PUAFOUT_ISLOCKZONEPOLICY = 0x1
//C       } PUAFOUT;
enum __MIDL_IInternetSecurityManager_0002
{
    PUAFOUT_DEFAULT,
    PUAFOUT_ISLOCKZONEPOLICY,
}
alias __MIDL_IInternetSecurityManager_0002 PUAFOUT;
//C       typedef enum __MIDL_IInternetSecurityManager_0003 {
//C         SZM_CREATE = 0,SZM_DELETE = 0x1
//C       } SZM_FLAGS;
enum __MIDL_IInternetSecurityManager_0003
{
    SZM_CREATE,
    SZM_DELETE,
}
alias __MIDL_IInternetSecurityManager_0003 SZM_FLAGS;
//C       extern const IID IID_IInternetSecurityManager;
extern const IID IID_IInternetSecurityManager;
//C       typedef struct IInternetSecurityManagerVtbl {
//C           HRESULT ( *QueryInterface)(IInternetSecurityManager *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetSecurityManager *This);
//C           ULONG ( *Release)(IInternetSecurityManager *This);
//C           HRESULT ( *SetSecuritySite)(IInternetSecurityManager *This,IInternetSecurityMgrSite *pSite);
//C           HRESULT ( *GetSecuritySite)(IInternetSecurityManager *This,IInternetSecurityMgrSite **ppSite);
//C           HRESULT ( *MapUrlToZone)(IInternetSecurityManager *This,LPCWSTR pwszUrl,DWORD *pdwZone,DWORD dwFlags);
//C           HRESULT ( *GetSecurityId)(IInternetSecurityManager *This,LPCWSTR pwszUrl,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
//C           HRESULT ( *ProcessUrlAction)(IInternetSecurityManager *This,LPCWSTR pwszUrl,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved);
//C           HRESULT ( *QueryCustomPolicy)(IInternetSecurityManager *This,LPCWSTR pwszUrl,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwReserved);
//C           HRESULT ( *SetZoneMapping)(IInternetSecurityManager *This,DWORD dwZone,LPCWSTR lpszPattern,DWORD dwFlags);
//C           HRESULT ( *GetZoneMappings)(IInternetSecurityManager *This,DWORD dwZone,IEnumString **ppenumString,DWORD dwFlags);
//C       } IInternetSecurityManagerVtbl;
struct IInternetSecurityManagerVtbl
{
    HRESULT  function(IInternetSecurityManager *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetSecurityManager *This)AddRef;
    ULONG  function(IInternetSecurityManager *This)Release;
    HRESULT  function(IInternetSecurityManager *This, IInternetSecurityMgrSite *pSite)SetSecuritySite;
    HRESULT  function(IInternetSecurityManager *This, IInternetSecurityMgrSite **ppSite)GetSecuritySite;
    HRESULT  function(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags)MapUrlToZone;
    HRESULT  function(IInternetSecurityManager *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved)GetSecurityId;
    HRESULT  function(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved)ProcessUrlAction;
    HRESULT  function(IInternetSecurityManager *This, LPCWSTR pwszUrl, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved)QueryCustomPolicy;
    HRESULT  function(IInternetSecurityManager *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags)SetZoneMapping;
    HRESULT  function(IInternetSecurityManager *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags)GetZoneMappings;
}
//C       struct IInternetSecurityManager {
//C         struct IInternetSecurityManagerVtbl *lpVtbl;
//C       };
struct IInternetSecurityManager
{
    IInternetSecurityManagerVtbl *lpVtbl;
}
//C       HRESULT IInternetSecurityManager_SetSecuritySite_Proxy(IInternetSecurityManager *This,IInternetSecurityMgrSite *pSite);
HRESULT  IInternetSecurityManager_SetSecuritySite_Proxy(IInternetSecurityManager *This, IInternetSecurityMgrSite *pSite);
//C       void IInternetSecurityManager_SetSecuritySite_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_SetSecuritySite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_GetSecuritySite_Proxy(IInternetSecurityManager *This,IInternetSecurityMgrSite **ppSite);
HRESULT  IInternetSecurityManager_GetSecuritySite_Proxy(IInternetSecurityManager *This, IInternetSecurityMgrSite **ppSite);
//C       void IInternetSecurityManager_GetSecuritySite_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_GetSecuritySite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_MapUrlToZone_Proxy(IInternetSecurityManager *This,LPCWSTR pwszUrl,DWORD *pdwZone,DWORD dwFlags);
HRESULT  IInternetSecurityManager_MapUrlToZone_Proxy(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);
//C       void IInternetSecurityManager_MapUrlToZone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_MapUrlToZone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_GetSecurityId_Proxy(IInternetSecurityManager *This,LPCWSTR pwszUrl,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
HRESULT  IInternetSecurityManager_GetSecurityId_Proxy(IInternetSecurityManager *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
//C       void IInternetSecurityManager_GetSecurityId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_GetSecurityId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_ProcessUrlAction_Proxy(IInternetSecurityManager *This,LPCWSTR pwszUrl,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved);
HRESULT  IInternetSecurityManager_ProcessUrlAction_Proxy(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
//C       void IInternetSecurityManager_ProcessUrlAction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_ProcessUrlAction_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_QueryCustomPolicy_Proxy(IInternetSecurityManager *This,LPCWSTR pwszUrl,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwReserved);
HRESULT  IInternetSecurityManager_QueryCustomPolicy_Proxy(IInternetSecurityManager *This, LPCWSTR pwszUrl, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);
//C       void IInternetSecurityManager_QueryCustomPolicy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_QueryCustomPolicy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_SetZoneMapping_Proxy(IInternetSecurityManager *This,DWORD dwZone,LPCWSTR lpszPattern,DWORD dwFlags);
HRESULT  IInternetSecurityManager_SetZoneMapping_Proxy(IInternetSecurityManager *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);
//C       void IInternetSecurityManager_SetZoneMapping_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_SetZoneMapping_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetSecurityManager_GetZoneMappings_Proxy(IInternetSecurityManager *This,DWORD dwZone,IEnumString **ppenumString,DWORD dwFlags);
HRESULT  IInternetSecurityManager_GetZoneMappings_Proxy(IInternetSecurityManager *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);
//C       void IInternetSecurityManager_GetZoneMappings_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManager_GetZoneMappings_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID IID_IInternetSecurityManagerEx;
extern const IID IID_IInternetSecurityManagerEx;
//C       typedef struct IInternetSecurityManagerExVtbl {
//C           HRESULT ( *QueryInterface)(IInternetSecurityManagerEx *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetSecurityManagerEx *This);
//C           ULONG ( *Release)(IInternetSecurityManagerEx *This);
//C           HRESULT ( *SetSecuritySite)(IInternetSecurityManagerEx *This,IInternetSecurityMgrSite *pSite);
//C           HRESULT ( *GetSecuritySite)(IInternetSecurityManagerEx *This,IInternetSecurityMgrSite **ppSite);
//C           HRESULT ( *MapUrlToZone)(IInternetSecurityManagerEx *This,LPCWSTR pwszUrl,DWORD *pdwZone,DWORD dwFlags);
//C           HRESULT ( *GetSecurityId)(IInternetSecurityManagerEx *This,LPCWSTR pwszUrl,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
//C           HRESULT ( *ProcessUrlAction)(IInternetSecurityManagerEx *This,LPCWSTR pwszUrl,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved);
//C           HRESULT ( *QueryCustomPolicy)(IInternetSecurityManagerEx *This,LPCWSTR pwszUrl,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwReserved);
//C           HRESULT ( *SetZoneMapping)(IInternetSecurityManagerEx *This,DWORD dwZone,LPCWSTR lpszPattern,DWORD dwFlags);
//C           HRESULT ( *GetZoneMappings)(IInternetSecurityManagerEx *This,DWORD dwZone,IEnumString **ppenumString,DWORD dwFlags);
//C           HRESULT ( *ProcessUrlActionEx)(IInternetSecurityManagerEx *This,LPCWSTR pwszUrl,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved,DWORD *pdwOutFlags);
//C       } IInternetSecurityManagerExVtbl;
struct IInternetSecurityManagerExVtbl
{
    HRESULT  function(IInternetSecurityManagerEx *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetSecurityManagerEx *This)AddRef;
    ULONG  function(IInternetSecurityManagerEx *This)Release;
    HRESULT  function(IInternetSecurityManagerEx *This, IInternetSecurityMgrSite *pSite)SetSecuritySite;
    HRESULT  function(IInternetSecurityManagerEx *This, IInternetSecurityMgrSite **ppSite)GetSecuritySite;
    HRESULT  function(IInternetSecurityManagerEx *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags)MapUrlToZone;
    HRESULT  function(IInternetSecurityManagerEx *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved)GetSecurityId;
    HRESULT  function(IInternetSecurityManagerEx *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved)ProcessUrlAction;
    HRESULT  function(IInternetSecurityManagerEx *This, LPCWSTR pwszUrl, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved)QueryCustomPolicy;
    HRESULT  function(IInternetSecurityManagerEx *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags)SetZoneMapping;
    HRESULT  function(IInternetSecurityManagerEx *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags)GetZoneMappings;
    HRESULT  function(IInternetSecurityManagerEx *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved, DWORD *pdwOutFlags)ProcessUrlActionEx;
}
//C       struct IInternetSecurityManagerEx {
//C         struct IInternetSecurityManagerExVtbl *lpVtbl;
//C       };
struct IInternetSecurityManagerEx
{
    IInternetSecurityManagerExVtbl *lpVtbl;
}
//C       HRESULT IInternetSecurityManagerEx_ProcessUrlActionEx_Proxy(IInternetSecurityManagerEx *This,LPCWSTR pwszUrl,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved,DWORD *pdwOutFlags);
HRESULT  IInternetSecurityManagerEx_ProcessUrlActionEx_Proxy(IInternetSecurityManagerEx *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved, DWORD *pdwOutFlags);
//C       void IInternetSecurityManagerEx_ProcessUrlActionEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetSecurityManagerEx_ProcessUrlActionEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_s_ifspec;
//C       extern const IID IID_IZoneIdentifier;
extern const IID IID_IZoneIdentifier;
//C       typedef struct IZoneIdentifierVtbl {
//C           HRESULT ( *QueryInterface)(IZoneIdentifier *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IZoneIdentifier *This);
//C           ULONG ( *Release)(IZoneIdentifier *This);
//C           HRESULT ( *GetId)(IZoneIdentifier *This,DWORD *pdwZone);
//C           HRESULT ( *SetId)(IZoneIdentifier *This,DWORD dwZone);
//C           HRESULT ( *Remove)(IZoneIdentifier *This);
//C       } IZoneIdentifierVtbl;
struct IZoneIdentifierVtbl
{
    HRESULT  function(IZoneIdentifier *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IZoneIdentifier *This)AddRef;
    ULONG  function(IZoneIdentifier *This)Release;
    HRESULT  function(IZoneIdentifier *This, DWORD *pdwZone)GetId;
    HRESULT  function(IZoneIdentifier *This, DWORD dwZone)SetId;
    HRESULT  function(IZoneIdentifier *This)Remove;
}
//C       struct IZoneIdentifier {
//C         struct IZoneIdentifierVtbl *lpVtbl;
//C       };
struct IZoneIdentifier
{
    IZoneIdentifierVtbl *lpVtbl;
}
//C       HRESULT IZoneIdentifier_GetId_Proxy(IZoneIdentifier *This,DWORD *pdwZone);
HRESULT  IZoneIdentifier_GetId_Proxy(IZoneIdentifier *This, DWORD *pdwZone);
//C       void IZoneIdentifier_GetId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IZoneIdentifier_GetId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IZoneIdentifier_SetId_Proxy(IZoneIdentifier *This,DWORD dwZone);
HRESULT  IZoneIdentifier_SetId_Proxy(IZoneIdentifier *This, DWORD dwZone);
//C       void IZoneIdentifier_SetId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IZoneIdentifier_SetId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IZoneIdentifier_Remove_Proxy(IZoneIdentifier *This);
HRESULT  IZoneIdentifier_Remove_Proxy(IZoneIdentifier *This);
//C       void IZoneIdentifier_Remove_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IZoneIdentifier_Remove_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0207_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0207_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0207_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0207_v0_0_s_ifspec;
//C       extern const IID IID_IInternetHostSecurityManager;
extern const IID IID_IInternetHostSecurityManager;
//C       typedef struct IInternetHostSecurityManagerVtbl {
//C           HRESULT ( *QueryInterface)(IInternetHostSecurityManager *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetHostSecurityManager *This);
//C           ULONG ( *Release)(IInternetHostSecurityManager *This);
//C           HRESULT ( *GetSecurityId)(IInternetHostSecurityManager *This,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
//C           HRESULT ( *ProcessUrlAction)(IInternetHostSecurityManager *This,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved);
//C           HRESULT ( *QueryCustomPolicy)(IInternetHostSecurityManager *This,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwReserved);
//C       } IInternetHostSecurityManagerVtbl;
struct IInternetHostSecurityManagerVtbl
{
    HRESULT  function(IInternetHostSecurityManager *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetHostSecurityManager *This)AddRef;
    ULONG  function(IInternetHostSecurityManager *This)Release;
    HRESULT  function(IInternetHostSecurityManager *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved)GetSecurityId;
    HRESULT  function(IInternetHostSecurityManager *This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved)ProcessUrlAction;
    HRESULT  function(IInternetHostSecurityManager *This, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved)QueryCustomPolicy;
}
//C       struct IInternetHostSecurityManager {
//C         struct IInternetHostSecurityManagerVtbl *lpVtbl;
//C       };
struct IInternetHostSecurityManager
{
    IInternetHostSecurityManagerVtbl *lpVtbl;
}
//C       HRESULT IInternetHostSecurityManager_GetSecurityId_Proxy(IInternetHostSecurityManager *This,BYTE *pbSecurityId,DWORD *pcbSecurityId,DWORD_PTR dwReserved);
HRESULT  IInternetHostSecurityManager_GetSecurityId_Proxy(IInternetHostSecurityManager *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);
//C       void IInternetHostSecurityManager_GetSecurityId_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetHostSecurityManager_GetSecurityId_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetHostSecurityManager_ProcessUrlAction_Proxy(IInternetHostSecurityManager *This,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwFlags,DWORD dwReserved);
HRESULT  IInternetHostSecurityManager_ProcessUrlAction_Proxy(IInternetHostSecurityManager *This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);
//C       void IInternetHostSecurityManager_ProcessUrlAction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetHostSecurityManager_ProcessUrlAction_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetHostSecurityManager_QueryCustomPolicy_Proxy(IInternetHostSecurityManager *This,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,BYTE *pContext,DWORD cbContext,DWORD dwReserved);
HRESULT  IInternetHostSecurityManager_QueryCustomPolicy_Proxy(IInternetHostSecurityManager *This, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);
//C       void IInternetHostSecurityManager_QueryCustomPolicy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetHostSecurityManager_QueryCustomPolicy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;
extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0208_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0208_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0208_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0208_v0_0_s_ifspec;
//C       typedef IInternetZoneManager *LPURLZONEMANAGER;
alias IInternetZoneManager *LPURLZONEMANAGER;
//C       typedef enum tagURLZONE {
//C         URLZONE_PREDEFINED_MIN = 0,URLZONE_LOCAL_MACHINE = 0,
//C         URLZONE_INTRANET,URLZONE_TRUSTED,URLZONE_INTERNET,URLZONE_UNTRUSTED,
//C         URLZONE_PREDEFINED_MAX = 999,URLZONE_USER_MIN = 1000,
//C         URLZONE_USER_MAX = 10000
//C       } URLZONE;
enum tagURLZONE
{
    URLZONE_PREDEFINED_MIN,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET,
    URLZONE_TRUSTED,
    URLZONE_INTERNET,
    URLZONE_UNTRUSTED,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN,
    URLZONE_USER_MAX = 10000,
}
alias tagURLZONE URLZONE;
//C       typedef enum tagURLTEMPLATE {
//C         URLTEMPLATE_CUSTOM = 0,
//C         URLTEMPLATE_PREDEFINED_MIN = 0x10000,
//C         URLTEMPLATE_LOW = 0x10000,
//C         URLTEMPLATE_MEDLOW = 0x10500,
//C         URLTEMPLATE_MEDIUM = 0x11000,
//C         URLTEMPLATE_HIGH = 0x12000,
//C         URLTEMPLATE_PREDEFINED_MAX = 0x20000
//C       } URLTEMPLATE;
enum tagURLTEMPLATE
{
    URLTEMPLATE_CUSTOM,
    URLTEMPLATE_PREDEFINED_MIN = 65536,
    URLTEMPLATE_LOW = 65536,
    URLTEMPLATE_MEDLOW = 66816,
    URLTEMPLATE_MEDIUM = 69632,
    URLTEMPLATE_HIGH = 73728,
    URLTEMPLATE_PREDEFINED_MAX = 131072,
}
alias tagURLTEMPLATE URLTEMPLATE;
//C       enum __MIDL_IInternetZoneManager_0001 {
//C         MAX_ZONE_PATH = 260,MAX_ZONE_DESCRIPTION = 200
//C       };
enum __MIDL_IInternetZoneManager_0001
{
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200,
}
//C       typedef enum __MIDL_IInternetZoneManager_0002 {
//C         ZAFLAGS_CUSTOM_EDIT = 0x1,ZAFLAGS_ADD_SITES = 0x2,ZAFLAGS_REQUIRE_VERIFICATION = 0x4,ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
//C         ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,ZAFLAGS_NO_UI = 0x20,ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,ZAFLAGS_UNC_AS_INTRANET = 0x80,
//C         ZAFLAGS_USE_LOCKED_ZONES = 0x10000
//C       } ZAFLAGS;
enum __MIDL_IInternetZoneManager_0002
{
    ZAFLAGS_CUSTOM_EDIT = 1,
    ZAFLAGS_ADD_SITES,
    ZAFLAGS_REQUIRE_VERIFICATION = 4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 16,
    ZAFLAGS_NO_UI = 32,
    ZAFLAGS_SUPPORTS_VERIFICATION = 64,
    ZAFLAGS_UNC_AS_INTRANET = 128,
    ZAFLAGS_USE_LOCKED_ZONES = 65536,
}
alias __MIDL_IInternetZoneManager_0002 ZAFLAGS;
//C       typedef struct _ZONEATTRIBUTES {
//C         ULONG cbSize;
//C         WCHAR szDisplayName[260 ];
//C         WCHAR szDescription[200 ];
//C         WCHAR szIconPath[260 ];
//C         DWORD dwTemplateMinLevel;
//C         DWORD dwTemplateRecommended;
//C         DWORD dwTemplateCurrentLevel;
//C         DWORD dwFlags;
//C       } ZONEATTRIBUTES;
struct _ZONEATTRIBUTES
{
    ULONG cbSize;
    WCHAR [260]szDisplayName;
    WCHAR [200]szDescription;
    WCHAR [260]szIconPath;
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
}
alias _ZONEATTRIBUTES ZONEATTRIBUTES;
//C       typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
alias _ZONEATTRIBUTES *LPZONEATTRIBUTES;
//C       typedef enum _URLZONEREG {
//C         URLZONEREG_DEFAULT = 0,
//C         URLZONEREG_HKLM,URLZONEREG_HKCU
//C       } URLZONEREG;
enum _URLZONEREG
{
    URLZONEREG_DEFAULT,
    URLZONEREG_HKLM,
    URLZONEREG_HKCU,
}
alias _URLZONEREG URLZONEREG;
//C       extern const IID IID_IInternetZoneManager;
extern const IID IID_IInternetZoneManager;
//C       typedef struct IInternetZoneManagerVtbl {
//C           HRESULT ( *QueryInterface)(IInternetZoneManager *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetZoneManager *This);
//C           ULONG ( *Release)(IInternetZoneManager *This);
//C           HRESULT ( *GetZoneAttributes)(IInternetZoneManager *This,DWORD dwZone,ZONEATTRIBUTES *pZoneAttributes);
//C           HRESULT ( *SetZoneAttributes)(IInternetZoneManager *This,DWORD dwZone,ZONEATTRIBUTES *pZoneAttributes);
//C           HRESULT ( *GetZoneCustomPolicy)(IInternetZoneManager *This,DWORD dwZone,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *SetZoneCustomPolicy)(IInternetZoneManager *This,DWORD dwZone,const GUID *const guidKey,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *GetZoneActionPolicy)(IInternetZoneManager *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *SetZoneActionPolicy)(IInternetZoneManager *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *PromptAction)(IInternetZoneManager *This,DWORD dwAction,HWND hwndParent,LPCWSTR pwszUrl,LPCWSTR pwszText,DWORD dwPromptFlags);
//C           HRESULT ( *LogAction)(IInternetZoneManager *This,DWORD dwAction,LPCWSTR pwszUrl,LPCWSTR pwszText,DWORD dwLogFlags);
//C           HRESULT ( *CreateZoneEnumerator)(IInternetZoneManager *This,DWORD *pdwEnum,DWORD *pdwCount,DWORD dwFlags);
//C           HRESULT ( *GetZoneAt)(IInternetZoneManager *This,DWORD dwEnum,DWORD dwIndex,DWORD *pdwZone);
//C           HRESULT ( *DestroyZoneEnumerator)(IInternetZoneManager *This,DWORD dwEnum);
//C           HRESULT ( *CopyTemplatePoliciesToZone)(IInternetZoneManager *This,DWORD dwTemplate,DWORD dwZone,DWORD dwReserved);
//C       } IInternetZoneManagerVtbl;
struct IInternetZoneManagerVtbl
{
    HRESULT  function(IInternetZoneManager *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetZoneManager *This)AddRef;
    ULONG  function(IInternetZoneManager *This)Release;
    HRESULT  function(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes)GetZoneAttributes;
    HRESULT  function(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes)SetZoneAttributes;
    HRESULT  function(IInternetZoneManager *This, DWORD dwZone, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg)GetZoneCustomPolicy;
    HRESULT  function(IInternetZoneManager *This, DWORD dwZone, GUID *guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg)SetZoneCustomPolicy;
    HRESULT  function(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg)GetZoneActionPolicy;
    HRESULT  function(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg)SetZoneActionPolicy;
    HRESULT  function(IInternetZoneManager *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags)PromptAction;
    HRESULT  function(IInternetZoneManager *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags)LogAction;
    HRESULT  function(IInternetZoneManager *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags)CreateZoneEnumerator;
    HRESULT  function(IInternetZoneManager *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone)GetZoneAt;
    HRESULT  function(IInternetZoneManager *This, DWORD dwEnum)DestroyZoneEnumerator;
    HRESULT  function(IInternetZoneManager *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved)CopyTemplatePoliciesToZone;
}
//C       struct IInternetZoneManager {
//C         struct IInternetZoneManagerVtbl *lpVtbl;
//C       };
struct IInternetZoneManager
{
    IInternetZoneManagerVtbl *lpVtbl;
}
//C       HRESULT IInternetZoneManager_GetZoneAttributes_Proxy(IInternetZoneManager *This,DWORD dwZone,ZONEATTRIBUTES *pZoneAttributes);
HRESULT  IInternetZoneManager_GetZoneAttributes_Proxy(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
//C       void IInternetZoneManager_GetZoneAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_GetZoneAttributes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_SetZoneAttributes_Proxy(IInternetZoneManager *This,DWORD dwZone,ZONEATTRIBUTES *pZoneAttributes);
HRESULT  IInternetZoneManager_SetZoneAttributes_Proxy(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);
//C       void IInternetZoneManager_SetZoneAttributes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_SetZoneAttributes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_GetZoneCustomPolicy_Proxy(IInternetZoneManager *This,DWORD dwZone,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,URLZONEREG urlZoneReg);
HRESULT  IInternetZoneManager_GetZoneCustomPolicy_Proxy(IInternetZoneManager *This, DWORD dwZone, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);
//C       void IInternetZoneManager_GetZoneCustomPolicy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_GetZoneCustomPolicy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_SetZoneCustomPolicy_Proxy(IInternetZoneManager *This,DWORD dwZone,const GUID *const guidKey,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
HRESULT  IInternetZoneManager_SetZoneCustomPolicy_Proxy(IInternetZoneManager *This, DWORD dwZone, GUID *guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
//C       void IInternetZoneManager_SetZoneCustomPolicy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_SetZoneCustomPolicy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_GetZoneActionPolicy_Proxy(IInternetZoneManager *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
HRESULT  IInternetZoneManager_GetZoneActionPolicy_Proxy(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
//C       void IInternetZoneManager_GetZoneActionPolicy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_GetZoneActionPolicy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_SetZoneActionPolicy_Proxy(IInternetZoneManager *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
HRESULT  IInternetZoneManager_SetZoneActionPolicy_Proxy(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);
//C       void IInternetZoneManager_SetZoneActionPolicy_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_SetZoneActionPolicy_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_PromptAction_Proxy(IInternetZoneManager *This,DWORD dwAction,HWND hwndParent,LPCWSTR pwszUrl,LPCWSTR pwszText,DWORD dwPromptFlags);
HRESULT  IInternetZoneManager_PromptAction_Proxy(IInternetZoneManager *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);
//C       void IInternetZoneManager_PromptAction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_PromptAction_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_LogAction_Proxy(IInternetZoneManager *This,DWORD dwAction,LPCWSTR pwszUrl,LPCWSTR pwszText,DWORD dwLogFlags);
HRESULT  IInternetZoneManager_LogAction_Proxy(IInternetZoneManager *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);
//C       void IInternetZoneManager_LogAction_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_LogAction_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_CreateZoneEnumerator_Proxy(IInternetZoneManager *This,DWORD *pdwEnum,DWORD *pdwCount,DWORD dwFlags);
HRESULT  IInternetZoneManager_CreateZoneEnumerator_Proxy(IInternetZoneManager *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);
//C       void IInternetZoneManager_CreateZoneEnumerator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_CreateZoneEnumerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_GetZoneAt_Proxy(IInternetZoneManager *This,DWORD dwEnum,DWORD dwIndex,DWORD *pdwZone);
HRESULT  IInternetZoneManager_GetZoneAt_Proxy(IInternetZoneManager *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);
//C       void IInternetZoneManager_GetZoneAt_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_GetZoneAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_DestroyZoneEnumerator_Proxy(IInternetZoneManager *This,DWORD dwEnum);
HRESULT  IInternetZoneManager_DestroyZoneEnumerator_Proxy(IInternetZoneManager *This, DWORD dwEnum);
//C       void IInternetZoneManager_DestroyZoneEnumerator_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_DestroyZoneEnumerator_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(IInternetZoneManager *This,DWORD dwTemplate,DWORD dwZone,DWORD dwReserved);
HRESULT  IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy(IInternetZoneManager *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);
//C       void IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0209_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0209_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0209_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0209_v0_0_s_ifspec;
//C       extern const IID IID_IInternetZoneManagerEx;
extern const IID IID_IInternetZoneManagerEx;
//C       typedef struct IInternetZoneManagerExVtbl {
//C           HRESULT ( *QueryInterface)(IInternetZoneManagerEx *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IInternetZoneManagerEx *This);
//C           ULONG ( *Release)(IInternetZoneManagerEx *This);
//C           HRESULT ( *GetZoneAttributes)(IInternetZoneManagerEx *This,DWORD dwZone,ZONEATTRIBUTES *pZoneAttributes);
//C           HRESULT ( *SetZoneAttributes)(IInternetZoneManagerEx *This,DWORD dwZone,ZONEATTRIBUTES *pZoneAttributes);
//C           HRESULT ( *GetZoneCustomPolicy)(IInternetZoneManagerEx *This,DWORD dwZone,const GUID *const guidKey,BYTE **ppPolicy,DWORD *pcbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *SetZoneCustomPolicy)(IInternetZoneManagerEx *This,DWORD dwZone,const GUID *const guidKey,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *GetZoneActionPolicy)(IInternetZoneManagerEx *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *SetZoneActionPolicy)(IInternetZoneManagerEx *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg);
//C           HRESULT ( *PromptAction)(IInternetZoneManagerEx *This,DWORD dwAction,HWND hwndParent,LPCWSTR pwszUrl,LPCWSTR pwszText,DWORD dwPromptFlags);
//C           HRESULT ( *LogAction)(IInternetZoneManagerEx *This,DWORD dwAction,LPCWSTR pwszUrl,LPCWSTR pwszText,DWORD dwLogFlags);
//C           HRESULT ( *CreateZoneEnumerator)(IInternetZoneManagerEx *This,DWORD *pdwEnum,DWORD *pdwCount,DWORD dwFlags);
//C           HRESULT ( *GetZoneAt)(IInternetZoneManagerEx *This,DWORD dwEnum,DWORD dwIndex,DWORD *pdwZone);
//C           HRESULT ( *DestroyZoneEnumerator)(IInternetZoneManagerEx *This,DWORD dwEnum);
//C           HRESULT ( *CopyTemplatePoliciesToZone)(IInternetZoneManagerEx *This,DWORD dwTemplate,DWORD dwZone,DWORD dwReserved);
//C           HRESULT ( *GetZoneActionPolicyEx)(IInternetZoneManagerEx *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg,DWORD dwFlags);
//C           HRESULT ( *SetZoneActionPolicyEx)(IInternetZoneManagerEx *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg,DWORD dwFlags);
//C       } IInternetZoneManagerExVtbl;
struct IInternetZoneManagerExVtbl
{
    HRESULT  function(IInternetZoneManagerEx *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IInternetZoneManagerEx *This)AddRef;
    ULONG  function(IInternetZoneManagerEx *This)Release;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes)GetZoneAttributes;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes)SetZoneAttributes;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, GUID *guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg)GetZoneCustomPolicy;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, GUID *guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg)SetZoneCustomPolicy;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg)GetZoneActionPolicy;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg)SetZoneActionPolicy;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags)PromptAction;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags)LogAction;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags)CreateZoneEnumerator;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone)GetZoneAt;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwEnum)DestroyZoneEnumerator;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved)CopyTemplatePoliciesToZone;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags)GetZoneActionPolicyEx;
    HRESULT  function(IInternetZoneManagerEx *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags)SetZoneActionPolicyEx;
}
//C       struct IInternetZoneManagerEx {
//C         struct IInternetZoneManagerExVtbl *lpVtbl;
//C       };
struct IInternetZoneManagerEx
{
    IInternetZoneManagerExVtbl *lpVtbl;
}
//C       HRESULT IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy(IInternetZoneManagerEx *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg,DWORD dwFlags);
HRESULT  IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy(IInternetZoneManagerEx *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags);
//C       void IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy(IInternetZoneManagerEx *This,DWORD dwZone,DWORD dwAction,BYTE *pPolicy,DWORD cbPolicy,URLZONEREG urlZoneReg,DWORD dwFlags);
HRESULT  IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy(IInternetZoneManagerEx *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg, DWORD dwFlags);
//C       void IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern const IID CLSID_SoftDistExt;
extern const IID CLSID_SoftDistExt;
//C       typedef struct _tagCODEBASEHOLD {
//C         ULONG cbSize;
//C         LPWSTR szDistUnit;
//C         LPWSTR szCodeBase;
//C         DWORD dwVersionMS;
//C         DWORD dwVersionLS;
//C         DWORD dwStyle;
//C       } CODEBASEHOLD;
struct _tagCODEBASEHOLD
{
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
}
alias _tagCODEBASEHOLD CODEBASEHOLD;
//C       typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
alias _tagCODEBASEHOLD *LPCODEBASEHOLD;
//C       typedef struct _tagSOFTDISTINFO {
//C         ULONG cbSize;
//C         DWORD dwFlags;
//C         DWORD dwAdState;
//C         LPWSTR szTitle;
//C         LPWSTR szAbstract;
//C         LPWSTR szHREF;
//C         DWORD dwInstalledVersionMS;
//C         DWORD dwInstalledVersionLS;
//C         DWORD dwUpdateVersionMS;
//C         DWORD dwUpdateVersionLS;
//C         DWORD dwAdvertisedVersionMS;
//C         DWORD dwAdvertisedVersionLS;
//C         DWORD dwReserved;
//C       } SOFTDISTINFO;
struct _tagSOFTDISTINFO
{
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
}
alias _tagSOFTDISTINFO SOFTDISTINFO;
//C       typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
alias _tagSOFTDISTINFO *LPSOFTDISTINFO;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0210_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0210_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0210_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0210_v0_0_s_ifspec;
//C       extern const IID IID_ISoftDistExt;
extern const IID IID_ISoftDistExt;
//C       typedef struct ISoftDistExtVtbl {
//C           HRESULT ( *QueryInterface)(ISoftDistExt *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ISoftDistExt *This);
//C           ULONG ( *Release)(ISoftDistExt *This);
//C           HRESULT ( *ProcessSoftDist)(ISoftDistExt *This,LPCWSTR szCDFURL,IXMLElement *pSoftDistElement,LPSOFTDISTINFO lpsdi);
//C           HRESULT ( *GetFirstCodeBase)(ISoftDistExt *This,LPWSTR *szCodeBase,LPDWORD dwMaxSize);
//C           HRESULT ( *GetNextCodeBase)(ISoftDistExt *This,LPWSTR *szCodeBase,LPDWORD dwMaxSize);
//C           HRESULT ( *AsyncInstallDistributionUnit)(ISoftDistExt *This,IBindCtx *pbc,LPVOID pvReserved,DWORD flags,LPCODEBASEHOLD lpcbh);
//C       } ISoftDistExtVtbl;
struct ISoftDistExtVtbl
{
    HRESULT  function(ISoftDistExt *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ISoftDistExt *This)AddRef;
    ULONG  function(ISoftDistExt *This)Release;
    HRESULT  function(ISoftDistExt *This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi)ProcessSoftDist;
    HRESULT  function(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize)GetFirstCodeBase;
    HRESULT  function(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize)GetNextCodeBase;
    HRESULT  function(ISoftDistExt *This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh)AsyncInstallDistributionUnit;
}
//C       struct ISoftDistExt {
//C         struct ISoftDistExtVtbl *lpVtbl;
//C       };
struct ISoftDistExt
{
    ISoftDistExtVtbl *lpVtbl;
}
//C       HRESULT ISoftDistExt_ProcessSoftDist_Proxy(ISoftDistExt *This,LPCWSTR szCDFURL,IXMLElement *pSoftDistElement,LPSOFTDISTINFO lpsdi);
HRESULT  ISoftDistExt_ProcessSoftDist_Proxy(ISoftDistExt *This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi);
//C       void ISoftDistExt_ProcessSoftDist_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISoftDistExt_ProcessSoftDist_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISoftDistExt_GetFirstCodeBase_Proxy(ISoftDistExt *This,LPWSTR *szCodeBase,LPDWORD dwMaxSize);
HRESULT  ISoftDistExt_GetFirstCodeBase_Proxy(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);
//C       void ISoftDistExt_GetFirstCodeBase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISoftDistExt_GetFirstCodeBase_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISoftDistExt_GetNextCodeBase_Proxy(ISoftDistExt *This,LPWSTR *szCodeBase,LPDWORD dwMaxSize);
HRESULT  ISoftDistExt_GetNextCodeBase_Proxy(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);
//C       void ISoftDistExt_GetNextCodeBase_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISoftDistExt_GetNextCodeBase_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ISoftDistExt_AsyncInstallDistributionUnit_Proxy(ISoftDistExt *This,IBindCtx *pbc,LPVOID pvReserved,DWORD flags,LPCODEBASEHOLD lpcbh);
HRESULT  ISoftDistExt_AsyncInstallDistributionUnit_Proxy(ISoftDistExt *This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);
//C       void ISoftDistExt_AsyncInstallDistributionUnit_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ISoftDistExt_AsyncInstallDistributionUnit_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit,LPSOFTDISTINFO psdi);
HRESULT  GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi);
//C       extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit,DWORD dwAdState,DWORD dwAdvertisedVersionMS,DWORD dwAdvertisedVersionLS);
HRESULT  SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0211_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0211_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0211_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0211_v0_0_s_ifspec;
//C       typedef ICatalogFileInfo *LPCATALOGFILEINFO;
alias ICatalogFileInfo *LPCATALOGFILEINFO;
//C       extern const IID IID_ICatalogFileInfo;
extern const IID IID_ICatalogFileInfo;
//C       typedef struct ICatalogFileInfoVtbl {
//C           HRESULT ( *QueryInterface)(ICatalogFileInfo *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(ICatalogFileInfo *This);
//C           ULONG ( *Release)(ICatalogFileInfo *This);
//C           HRESULT ( *GetCatalogFile)(ICatalogFileInfo *This,LPSTR *ppszCatalogFile);
//C           HRESULT ( *GetJavaTrust)(ICatalogFileInfo *This,void **ppJavaTrust);
//C       } ICatalogFileInfoVtbl;
struct ICatalogFileInfoVtbl
{
    HRESULT  function(ICatalogFileInfo *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(ICatalogFileInfo *This)AddRef;
    ULONG  function(ICatalogFileInfo *This)Release;
    HRESULT  function(ICatalogFileInfo *This, LPSTR *ppszCatalogFile)GetCatalogFile;
    HRESULT  function(ICatalogFileInfo *This, void **ppJavaTrust)GetJavaTrust;
}
//C       struct ICatalogFileInfo {
//C         struct ICatalogFileInfoVtbl *lpVtbl;
//C       };
struct ICatalogFileInfo
{
    ICatalogFileInfoVtbl *lpVtbl;
}
//C       HRESULT ICatalogFileInfo_GetCatalogFile_Proxy(ICatalogFileInfo *This,LPSTR *ppszCatalogFile);
HRESULT  ICatalogFileInfo_GetCatalogFile_Proxy(ICatalogFileInfo *This, LPSTR *ppszCatalogFile);
//C       void ICatalogFileInfo_GetCatalogFile_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICatalogFileInfo_GetCatalogFile_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT ICatalogFileInfo_GetJavaTrust_Proxy(ICatalogFileInfo *This,void **ppJavaTrust);
HRESULT  ICatalogFileInfo_GetJavaTrust_Proxy(ICatalogFileInfo *This, void **ppJavaTrust);
//C       void ICatalogFileInfo_GetJavaTrust_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  ICatalogFileInfo_GetJavaTrust_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0212_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0212_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0212_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0212_v0_0_s_ifspec;
//C       typedef IDataFilter *LPDATAFILTER;
alias IDataFilter *LPDATAFILTER;
//C       extern const IID IID_IDataFilter;
extern const IID IID_IDataFilter;
//C       typedef struct IDataFilterVtbl {
//C           HRESULT ( *QueryInterface)(IDataFilter *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IDataFilter *This);
//C           ULONG ( *Release)(IDataFilter *This);
//C           HRESULT ( *DoEncode)(IDataFilter *This,DWORD dwFlags,LONG lInBufferSize,BYTE *pbInBuffer,LONG lOutBufferSize,BYTE *pbOutBuffer,LONG lInBytesAvailable,LONG *plInBytesRead,LONG *plOutBytesWritten,DWORD dwReserved);
//C           HRESULT ( *DoDecode)(IDataFilter *This,DWORD dwFlags,LONG lInBufferSize,BYTE *pbInBuffer,LONG lOutBufferSize,BYTE *pbOutBuffer,LONG lInBytesAvailable,LONG *plInBytesRead,LONG *plOutBytesWritten,DWORD dwReserved);
//C           HRESULT ( *SetEncodingLevel)(IDataFilter *This,DWORD dwEncLevel);
//C       } IDataFilterVtbl;
struct IDataFilterVtbl
{
    HRESULT  function(IDataFilter *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IDataFilter *This)AddRef;
    ULONG  function(IDataFilter *This)Release;
    HRESULT  function(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved)DoEncode;
    HRESULT  function(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved)DoDecode;
    HRESULT  function(IDataFilter *This, DWORD dwEncLevel)SetEncodingLevel;
}
//C       struct IDataFilter {
//C         struct IDataFilterVtbl *lpVtbl;
//C       };
struct IDataFilter
{
    IDataFilterVtbl *lpVtbl;
}
//C       HRESULT IDataFilter_DoEncode_Proxy(IDataFilter *This,DWORD dwFlags,LONG lInBufferSize,BYTE *pbInBuffer,LONG lOutBufferSize,BYTE *pbOutBuffer,LONG lInBytesAvailable,LONG *plInBytesRead,LONG *plOutBytesWritten,DWORD dwReserved);
HRESULT  IDataFilter_DoEncode_Proxy(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);
//C       void IDataFilter_DoEncode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataFilter_DoEncode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDataFilter_DoDecode_Proxy(IDataFilter *This,DWORD dwFlags,LONG lInBufferSize,BYTE *pbInBuffer,LONG lOutBufferSize,BYTE *pbOutBuffer,LONG lInBytesAvailable,LONG *plInBytesRead,LONG *plOutBytesWritten,DWORD dwReserved);
HRESULT  IDataFilter_DoDecode_Proxy(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);
//C       void IDataFilter_DoDecode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataFilter_DoDecode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IDataFilter_SetEncodingLevel_Proxy(IDataFilter *This,DWORD dwEncLevel);
HRESULT  IDataFilter_SetEncodingLevel_Proxy(IDataFilter *This, DWORD dwEncLevel);
//C       void IDataFilter_SetEncodingLevel_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IDataFilter_SetEncodingLevel_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef struct _tagPROTOCOLFILTERDATA {
//C         DWORD cbSize;
//C         IInternetProtocolSink *pProtocolSink;
//C         IInternetProtocol *pProtocol;
//C         IUnknown *pUnk;
//C         DWORD dwFilterFlags;
//C       } PROTOCOLFILTERDATA;
struct _tagPROTOCOLFILTERDATA
{
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
}
alias _tagPROTOCOLFILTERDATA PROTOCOLFILTERDATA;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0213_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0213_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0213_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0213_v0_0_s_ifspec;
//C       typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;
alias IEncodingFilterFactory *LPENCODINGFILTERFACTORY;
//C       typedef struct _tagDATAINFO {
//C         ULONG ulTotalSize;
//C         ULONG ulavrPacketSize;
//C         ULONG ulConnectSpeed;
//C         ULONG ulProcessorSpeed;
//C       } DATAINFO;
struct _tagDATAINFO
{
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
}
alias _tagDATAINFO DATAINFO;
//C       extern const IID IID_IEncodingFilterFactory;
extern const IID IID_IEncodingFilterFactory;
//C       typedef struct IEncodingFilterFactoryVtbl {
//C           HRESULT ( *QueryInterface)(IEncodingFilterFactory *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IEncodingFilterFactory *This);
//C           ULONG ( *Release)(IEncodingFilterFactory *This);
//C           HRESULT ( *FindBestFilter)(IEncodingFilterFactory *This,LPCWSTR pwzCodeIn,LPCWSTR pwzCodeOut,DATAINFO info,IDataFilter **ppDF);
//C           HRESULT ( *GetDefaultFilter)(IEncodingFilterFactory *This,LPCWSTR pwzCodeIn,LPCWSTR pwzCodeOut,IDataFilter **ppDF);
//C       } IEncodingFilterFactoryVtbl;
struct IEncodingFilterFactoryVtbl
{
    HRESULT  function(IEncodingFilterFactory *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEncodingFilterFactory *This)AddRef;
    ULONG  function(IEncodingFilterFactory *This)Release;
    HRESULT  function(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF)FindBestFilter;
    HRESULT  function(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF)GetDefaultFilter;
}
//C       struct IEncodingFilterFactory {
//C         struct IEncodingFilterFactoryVtbl *lpVtbl;
//C       };
struct IEncodingFilterFactory
{
    IEncodingFilterFactoryVtbl *lpVtbl;
}
//C       HRESULT IEncodingFilterFactory_FindBestFilter_Proxy(IEncodingFilterFactory *This,LPCWSTR pwzCodeIn,LPCWSTR pwzCodeOut,DATAINFO info,IDataFilter **ppDF);
HRESULT  IEncodingFilterFactory_FindBestFilter_Proxy(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF);
//C       void IEncodingFilterFactory_FindBestFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEncodingFilterFactory_FindBestFilter_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEncodingFilterFactory_GetDefaultFilter_Proxy(IEncodingFilterFactory *This,LPCWSTR pwzCodeIn,LPCWSTR pwzCodeOut,IDataFilter **ppDF);
HRESULT  IEncodingFilterFactory_GetDefaultFilter_Proxy(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF);
//C       void IEncodingFilterFactory_GetDefaultFilter_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEncodingFilterFactory_GetDefaultFilter_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       WINBOOL IsLoggingEnabledA(LPCSTR pszUrl);
WINBOOL  IsLoggingEnabledA(LPCSTR pszUrl);
//C       WINBOOL IsLoggingEnabledW(LPCWSTR pwszUrl);
WINBOOL  IsLoggingEnabledW(LPCWSTR pwszUrl);
//C       typedef struct _tagHIT_LOGGING_INFO {
//C         DWORD dwStructSize;
//C         LPSTR lpszLoggedUrlName;
//C         SYSTEMTIME StartTime;
//C         SYSTEMTIME EndTime;
//C         LPSTR lpszExtendedInfo;
//C       } HIT_LOGGING_INFO;
struct _tagHIT_LOGGING_INFO
{
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
}
alias _tagHIT_LOGGING_INFO HIT_LOGGING_INFO;
//C       typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
alias _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
//C       WINBOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo);
WINBOOL  WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo);
//C       struct CONFIRMSAFETY {
//C         CLSID clsid;
//C         IUnknown *pUnk;
//C         DWORD dwFlags;
//C       };
struct CONFIRMSAFETY
{
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
}
//C       extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;
extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0214_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0214_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0214_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0214_v0_0_s_ifspec;
//C       typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;
alias IWrappedProtocol *LPIWRAPPEDPROTOCOL;
//C       extern const IID IID_IWrappedProtocol;
extern const IID IID_IWrappedProtocol;
//C       typedef struct IWrappedProtocolVtbl {
//C           HRESULT ( *QueryInterface)(IWrappedProtocol *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IWrappedProtocol *This);
//C           ULONG ( *Release)(IWrappedProtocol *This);
//C           HRESULT ( *GetWrapperCode)(IWrappedProtocol *This,LONG *pnCode,DWORD_PTR dwReserved);
//C       } IWrappedProtocolVtbl;
struct IWrappedProtocolVtbl
{
    HRESULT  function(IWrappedProtocol *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IWrappedProtocol *This)AddRef;
    ULONG  function(IWrappedProtocol *This)Release;
    HRESULT  function(IWrappedProtocol *This, LONG *pnCode, DWORD_PTR dwReserved)GetWrapperCode;
}
//C       struct IWrappedProtocol {
//C         struct IWrappedProtocolVtbl *lpVtbl;
//C       };
struct IWrappedProtocol
{
    IWrappedProtocolVtbl *lpVtbl;
}
//C       HRESULT IWrappedProtocol_GetWrapperCode_Proxy(IWrappedProtocol *This,LONG *pnCode,DWORD_PTR dwReserved);
HRESULT  IWrappedProtocol_GetWrapperCode_Proxy(IWrappedProtocol *This, LONG *pnCode, DWORD_PTR dwReserved);
//C       void IWrappedProtocol_GetWrapperCode_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IWrappedProtocol_GetWrapperCode_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0215_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0215_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_urlmon_0215_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0215_v0_0_s_ifspec;
//C       ULONG HWND_UserSize(ULONG *,ULONG,HWND *);
ULONG  HWND_UserSize(ULONG *, ULONG , HWND *);
//C       unsigned char * HWND_UserMarshal(ULONG *,unsigned char *,HWND *);
ubyte * HWND_UserMarshal(ULONG *, ubyte *, HWND *);
//C       unsigned char * HWND_UserUnmarshal(ULONG *,unsigned char *,HWND *);
ubyte * HWND_UserUnmarshal(ULONG *, ubyte *, HWND *);
//C       void HWND_UserFree(ULONG *,HWND *);
void  HWND_UserFree(ULONG *, HWND *);
//C       HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This,DWORD dwOption,LPVOID pBuffer,DWORD *pcbBuf);
HRESULT  IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);
//C       HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This,DWORD dwOption,BYTE *pBuffer,DWORD *pcbBuf);
HRESULT  IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf);
//C       HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This,DWORD dwOption,LPVOID pBuffer,DWORD *pcbBuf,DWORD *pdwFlags,DWORD *pdwReserved);
HRESULT  IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
//C       HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This,DWORD dwOption,BYTE *pBuffer,DWORD *pcbBuf,DWORD *pdwFlags,DWORD *pdwReserved);
HRESULT  IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);
//C       HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,void **ppvObj);
HRESULT  IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, void **ppvObj);
//C       HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,IUnknown **ppvObj);
HRESULT  IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, IUnknown **ppvObj);
//C       HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,void **ppvObj);
HRESULT  IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, void **ppvObj);
//C       HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This,IMoniker *pMk,IBindCtx *pBC,IBindStatusCallback *pBSC,const IID *const riid,IUnknown **ppvObj);
HRESULT  IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, IID *riid, IUnknown **ppvObj);
//C     ULONG STGMEDIUM_UserSize (ULONG *,ULONG,STGMEDIUM *);
ULONG  STGMEDIUM_UserSize(ULONG *, ULONG , STGMEDIUM *);
//C     unsigned char * STGMEDIUM_UserMarshal (ULONG *,unsigned char *,STGMEDIUM *);
ubyte * STGMEDIUM_UserMarshal(ULONG *, ubyte *, STGMEDIUM *);
//C     unsigned char * STGMEDIUM_UserUnmarshal(ULONG *,unsigned char *,STGMEDIUM *);
ubyte * STGMEDIUM_UserUnmarshal(ULONG *, ubyte *, STGMEDIUM *);
//C     void STGMEDIUM_UserFree (ULONG *,STGMEDIUM *);
void  STGMEDIUM_UserFree(ULONG *, STGMEDIUM *);
//C     ULONG CLIPFORMAT_UserSize (ULONG *,ULONG,CLIPFORMAT *);
ULONG  CLIPFORMAT_UserSize(ULONG *, ULONG , CLIPFORMAT *);
//C     unsigned char * CLIPFORMAT_UserMarshal (ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserMarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C     unsigned char * CLIPFORMAT_UserUnmarshal(ULONG *,unsigned char *,CLIPFORMAT *);
ubyte * CLIPFORMAT_UserUnmarshal(ULONG *, ubyte *, CLIPFORMAT *);
//C     void CLIPFORMAT_UserFree (ULONG *,CLIPFORMAT *);
void  CLIPFORMAT_UserFree(ULONG *, CLIPFORMAT *);
//C     typedef struct IPropertyStorage IPropertyStorage;
//C     typedef struct IPropertySetStorage IPropertySetStorage;
//C     typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
//C     typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
//C     typedef struct tagVersionedStream {
//C         GUID guidVersion;
//C         IStream *pStream;
//C     } VERSIONEDSTREAM;
struct tagVersionedStream
{
    GUID guidVersion;
    IStream *pStream;
}
alias tagVersionedStream VERSIONEDSTREAM;
//C     typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
alias tagVersionedStream *LPVERSIONEDSTREAM;
//C     typedef struct tagPROPVARIANT PROPVARIANT;
alias tagPROPVARIANT PROPVARIANT;
//C     typedef struct tagCAC {
//C         ULONG cElems;
//C         CHAR *pElems;
//C     } CAC;
struct tagCAC
{
    ULONG cElems;
    CHAR *pElems;
}
alias tagCAC CAC;
//C     typedef struct tagCAUB {
//C         ULONG cElems;
//C         UCHAR *pElems;
//C     } CAUB;
struct tagCAUB
{
    ULONG cElems;
    UCHAR *pElems;
}
alias tagCAUB CAUB;
//C     typedef struct tagCAI {
//C         ULONG cElems;
//C         SHORT *pElems;
//C     } CAI;
struct tagCAI
{
    ULONG cElems;
    SHORT *pElems;
}
alias tagCAI CAI;
//C     typedef struct tagCAUI {
//C         ULONG cElems;
//C         USHORT *pElems;
//C     } CAUI;
struct tagCAUI
{
    ULONG cElems;
    USHORT *pElems;
}
alias tagCAUI CAUI;
//C     typedef struct tagCAL {
//C         ULONG cElems;
//C         LONG *pElems;
//C     } CAL;
struct tagCAL
{
    ULONG cElems;
    LONG *pElems;
}
alias tagCAL CAL;
//C     typedef struct tagCAUL {
//C         ULONG cElems;
//C         ULONG *pElems;
//C     } CAUL;
struct tagCAUL
{
    ULONG cElems;
    ULONG *pElems;
}
alias tagCAUL CAUL;
//C     typedef struct tagCAFLT {
//C         ULONG cElems;
//C         FLOAT *pElems;
//C     } CAFLT;
struct tagCAFLT
{
    ULONG cElems;
    FLOAT *pElems;
}
alias tagCAFLT CAFLT;
//C     typedef struct tagCADBL {
//C         ULONG cElems;
//C         DOUBLE *pElems;
//C     } CADBL;
struct tagCADBL
{
    ULONG cElems;
    DOUBLE *pElems;
}
alias tagCADBL CADBL;
//C     typedef struct tagCACY {
//C         ULONG cElems;
//C         CY *pElems;
//C     } CACY;
struct tagCACY
{
    ULONG cElems;
    CY *pElems;
}
alias tagCACY CACY;
//C     typedef struct tagCADATE {
//C         ULONG cElems;
//C         DATE *pElems;
//C     } CADATE;
struct tagCADATE
{
    ULONG cElems;
    DATE *pElems;
}
alias tagCADATE CADATE;
//C     typedef struct tagCABSTR {
//C         ULONG cElems;
//C         BSTR *pElems;
//C     } CABSTR;
struct tagCABSTR
{
    ULONG cElems;
    BSTR *pElems;
}
alias tagCABSTR CABSTR;
//C     typedef struct tagCABSTRBLOB {
//C         ULONG cElems;
//C         BSTRBLOB *pElems;
//C     } CABSTRBLOB;
struct tagCABSTRBLOB
{
    ULONG cElems;
    BSTRBLOB *pElems;
}
alias tagCABSTRBLOB CABSTRBLOB;
//C     typedef struct tagCABOOL {
//C         ULONG cElems;
//C         VARIANT_BOOL *pElems;
//C     } CABOOL;
struct tagCABOOL
{
    ULONG cElems;
    VARIANT_BOOL *pElems;
}
alias tagCABOOL CABOOL;
//C     typedef struct tagCASCODE {
//C         ULONG cElems;
//C         SCODE *pElems;
//C     } CASCODE;
struct tagCASCODE
{
    ULONG cElems;
    SCODE *pElems;
}
alias tagCASCODE CASCODE;
//C     typedef struct tagCAPROPVARIANT {
//C         ULONG cElems;
//C         PROPVARIANT *pElems;
//C     } CAPROPVARIANT;
struct tagCAPROPVARIANT
{
    ULONG cElems;
    PROPVARIANT *pElems;
}
alias tagCAPROPVARIANT CAPROPVARIANT;
//C     typedef struct tagCAH {
//C         ULONG cElems;
//C         LARGE_INTEGER *pElems;
//C     } CAH;
struct tagCAH
{
    ULONG cElems;
    LARGE_INTEGER *pElems;
}
alias tagCAH CAH;
//C     typedef struct tagCAUH {
//C         ULONG cElems;
//C         ULARGE_INTEGER *pElems;
//C     } CAUH;
struct tagCAUH
{
    ULONG cElems;
    ULARGE_INTEGER *pElems;
}
alias tagCAUH CAUH;
//C     typedef struct tagCALPSTR {
//C         ULONG cElems;
//C         LPSTR *pElems;
//C     } CALPSTR;
struct tagCALPSTR
{
    ULONG cElems;
    LPSTR *pElems;
}
alias tagCALPSTR CALPSTR;
//C     typedef struct tagCALPWSTR {
//C         ULONG cElems;
//C         LPWSTR *pElems;
//C     } CALPWSTR;
struct tagCALPWSTR
{
    ULONG cElems;
    LPWSTR *pElems;
}
alias tagCALPWSTR CALPWSTR;
//C     typedef struct tagCAFILETIME {
//C         ULONG cElems;
//C         FILETIME *pElems;
//C     } CAFILETIME;
struct tagCAFILETIME
{
    ULONG cElems;
    FILETIME *pElems;
}
alias tagCAFILETIME CAFILETIME;
//C     typedef struct tagCACLIPDATA {
//C         ULONG cElems;
//C         CLIPDATA *pElems;
//C     } CACLIPDATA;
struct tagCACLIPDATA
{
    ULONG cElems;
    CLIPDATA *pElems;
}
alias tagCACLIPDATA CACLIPDATA;
//C     typedef struct tagCACLSID {
//C         ULONG cElems;
//C         CLSID *pElems;
//C     } CACLSID;
struct tagCACLSID
{
    ULONG cElems;
    CLSID *pElems;
}
alias tagCACLSID CACLSID;
//C       typedef WORD PROPVAR_PAD1;
alias WORD PROPVAR_PAD1;
//C       typedef WORD PROPVAR_PAD2;
alias WORD PROPVAR_PAD2;
//C       typedef WORD PROPVAR_PAD3;
alias WORD PROPVAR_PAD3;
//C     struct tagPROPVARIANT {
//C          union {
//C     struct {
//C         VARTYPE vt;
//C         PROPVAR_PAD1 wReserved1;
//C         PROPVAR_PAD2 wReserved2;
//C         PROPVAR_PAD3 wReserved3;
//C          union {
//C             CHAR cVal;
//C             UCHAR bVal;
//C             SHORT iVal;
//C             USHORT uiVal;
//C             LONG lVal;
//C             ULONG ulVal;
//C             INT intVal;
//C             UINT uintVal;
//C             LARGE_INTEGER hVal;
//C             ULARGE_INTEGER uhVal;
//C             FLOAT fltVal;
//C             DOUBLE dblVal;
//C             VARIANT_BOOL boolVal;
//C             SCODE scode;
//C             CY cyVal;
//C             DATE date;
//C             FILETIME filetime;
//C             CLSID *puuid;
//C             CLIPDATA *pclipdata;
//C             BSTR bstrVal;
//C             BSTRBLOB bstrblobVal;
//C             BLOB blob;
//C             LPSTR pszVal;
//C             LPWSTR pwszVal;
//C             IUnknown *punkVal;
//C             IDispatch *pdispVal;
//C             IStream *pStream;
//C             IStorage *pStorage;
//C             LPVERSIONEDSTREAM pVersionedStream;
//C             LPSAFEARRAY parray;
//C             CAC cac;
//C             CAUB caub;
//C             CAI cai;
//C             CAUI caui;
//C             CAL cal;
//C             CAUL caul;
//C             CAH cah;
//C             CAUH cauh;
//C             CAFLT caflt;
//C             CADBL cadbl;
//C             CABOOL cabool;
//C             CASCODE cascode;
//C             CACY cacy;
//C             CADATE cadate;
//C             CAFILETIME cafiletime;
//C             CACLSID cauuid;
//C             CACLIPDATA caclipdata;
//C             CABSTR cabstr;
//C             CABSTRBLOB cabstrblob;
//C             CALPSTR calpstr;
//C             CALPWSTR calpwstr;
//C             CAPROPVARIANT capropvar;
//C             CHAR *pcVal;
//C             UCHAR *pbVal;
//C             SHORT *piVal;
//C             USHORT *puiVal;
//C             LONG *plVal;
//C             ULONG *pulVal;
//C             INT *pintVal;
//C             UINT *puintVal;
//C             FLOAT *pfltVal;
//C             DOUBLE *pdblVal;
//C             VARIANT_BOOL *pboolVal;
//C             DECIMAL *pdecVal;
//C             SCODE *pscode;
//C             CY *pcyVal;
//C             DATE *pdate;
//C             BSTR *pbstrVal;
//C             IUnknown **ppunkVal;
//C             IDispatch **ppdispVal;
//C             LPSAFEARRAY *pparray;
//C             PROPVARIANT *pvarVal;
//C         } ;
union _N197
{
    CHAR cVal;
    UCHAR bVal;
    SHORT iVal;
    USHORT uiVal;
    LONG lVal;
    ULONG ulVal;
    INT intVal;
    UINT uintVal;
    LARGE_INTEGER hVal;
    ULARGE_INTEGER uhVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    FILETIME filetime;
    CLSID *puuid;
    CLIPDATA *pclipdata;
    BSTR bstrVal;
    BSTRBLOB bstrblobVal;
    BLOB blob;
    LPSTR pszVal;
    LPWSTR pwszVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    IStream *pStream;
    IStorage *pStorage;
    LPVERSIONEDSTREAM pVersionedStream;
    LPSAFEARRAY parray;
    CAC cac;
    CAUB caub;
    CAI cai;
    CAUI caui;
    CAL cal;
    CAUL caul;
    CAH cah;
    CAUH cauh;
    CAFLT caflt;
    CADBL cadbl;
    CABOOL cabool;
    CASCODE cascode;
    CACY cacy;
    CADATE cadate;
    CAFILETIME cafiletime;
    CACLSID cauuid;
    CACLIPDATA caclipdata;
    CABSTR cabstr;
    CABSTRBLOB cabstrblob;
    CALPSTR calpstr;
    CALPWSTR calpwstr;
    CAPROPVARIANT capropvar;
    CHAR *pcVal;
    UCHAR *pbVal;
    SHORT *piVal;
    USHORT *puiVal;
    LONG *plVal;
    ULONG *pulVal;
    INT *pintVal;
    UINT *puintVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    DECIMAL *pdecVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    LPSAFEARRAY *pparray;
    PROPVARIANT *pvarVal;
}
//C     };
struct _N196
{
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
    CHAR cVal;
    UCHAR bVal;
    SHORT iVal;
    USHORT uiVal;
    LONG lVal;
    ULONG ulVal;
    INT intVal;
    UINT uintVal;
    LARGE_INTEGER hVal;
    ULARGE_INTEGER uhVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    FILETIME filetime;
    CLSID *puuid;
    CLIPDATA *pclipdata;
    BSTR bstrVal;
    BSTRBLOB bstrblobVal;
    BLOB blob;
    LPSTR pszVal;
    LPWSTR pwszVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    IStream *pStream;
    IStorage *pStorage;
    LPVERSIONEDSTREAM pVersionedStream;
    LPSAFEARRAY parray;
    CAC cac;
    CAUB caub;
    CAI cai;
    CAUI caui;
    CAL cal;
    CAUL caul;
    CAH cah;
    CAUH cauh;
    CAFLT caflt;
    CADBL cadbl;
    CABOOL cabool;
    CASCODE cascode;
    CACY cacy;
    CADATE cadate;
    CAFILETIME cafiletime;
    CACLSID cauuid;
    CACLIPDATA caclipdata;
    CABSTR cabstr;
    CABSTRBLOB cabstrblob;
    CALPSTR calpstr;
    CALPWSTR calpwstr;
    CAPROPVARIANT capropvar;
    CHAR *pcVal;
    UCHAR *pbVal;
    SHORT *piVal;
    USHORT *puiVal;
    LONG *plVal;
    ULONG *pulVal;
    INT *pintVal;
    UINT *puintVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    DECIMAL *pdecVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    LPSAFEARRAY *pparray;
    PROPVARIANT *pvarVal;
}
//C           DECIMAL decVal;
//C         };
union _N195
{
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
    CHAR cVal;
    UCHAR bVal;
    SHORT iVal;
    USHORT uiVal;
    LONG lVal;
    ULONG ulVal;
    INT intVal;
    UINT uintVal;
    LARGE_INTEGER hVal;
    ULARGE_INTEGER uhVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    FILETIME filetime;
    CLSID *puuid;
    CLIPDATA *pclipdata;
    BSTR bstrVal;
    BSTRBLOB bstrblobVal;
    BLOB blob;
    LPSTR pszVal;
    LPWSTR pwszVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    IStream *pStream;
    IStorage *pStorage;
    LPVERSIONEDSTREAM pVersionedStream;
    LPSAFEARRAY parray;
    CAC cac;
    CAUB caub;
    CAI cai;
    CAUI caui;
    CAL cal;
    CAUL caul;
    CAH cah;
    CAUH cauh;
    CAFLT caflt;
    CADBL cadbl;
    CABOOL cabool;
    CASCODE cascode;
    CACY cacy;
    CADATE cadate;
    CAFILETIME cafiletime;
    CACLSID cauuid;
    CACLIPDATA caclipdata;
    CABSTR cabstr;
    CABSTRBLOB cabstrblob;
    CALPSTR calpstr;
    CALPWSTR calpwstr;
    CAPROPVARIANT capropvar;
    CHAR *pcVal;
    UCHAR *pbVal;
    SHORT *piVal;
    USHORT *puiVal;
    LONG *plVal;
    ULONG *pulVal;
    INT *pintVal;
    UINT *puintVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    DECIMAL *pdecVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    LPSAFEARRAY *pparray;
    PROPVARIANT *pvarVal;
    DECIMAL decVal;
}
//C       };
struct tagPROPVARIANT
{
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
    CHAR cVal;
    UCHAR bVal;
    SHORT iVal;
    USHORT uiVal;
    LONG lVal;
    ULONG ulVal;
    INT intVal;
    UINT uintVal;
    LARGE_INTEGER hVal;
    ULARGE_INTEGER uhVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    FILETIME filetime;
    CLSID *puuid;
    CLIPDATA *pclipdata;
    BSTR bstrVal;
    BSTRBLOB bstrblobVal;
    BLOB blob;
    LPSTR pszVal;
    LPWSTR pwszVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    IStream *pStream;
    IStorage *pStorage;
    LPVERSIONEDSTREAM pVersionedStream;
    LPSAFEARRAY parray;
    CAC cac;
    CAUB caub;
    CAI cai;
    CAUI caui;
    CAL cal;
    CAUL caul;
    CAH cah;
    CAUH cauh;
    CAFLT caflt;
    CADBL cadbl;
    CABOOL cabool;
    CASCODE cascode;
    CACY cacy;
    CADATE cadate;
    CAFILETIME cafiletime;
    CACLSID cauuid;
    CACLIPDATA caclipdata;
    CABSTR cabstr;
    CABSTRBLOB cabstrblob;
    CALPSTR calpstr;
    CALPWSTR calpwstr;
    CAPROPVARIANT capropvar;
    CHAR *pcVal;
    UCHAR *pbVal;
    SHORT *piVal;
    USHORT *puiVal;
    LONG *plVal;
    ULONG *pulVal;
    INT *pintVal;
    UINT *puintVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    DECIMAL *pdecVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    LPSAFEARRAY *pparray;
    PROPVARIANT *pvarVal;
    DECIMAL decVal;
}
//C       typedef struct tagPROPVARIANT *LPPROPVARIANT;
alias tagPROPVARIANT *LPPROPVARIANT;
//C       enum PIDMSI_STATUS_VALUE {
//C         PIDMSI_STATUS_NORMAL = 0,PIDMSI_STATUS_NEW,PIDMSI_STATUS_PRELIM,
//C         PIDMSI_STATUS_DRAFT,PIDMSI_STATUS_INPROGRESS,PIDMSI_STATUS_EDIT,
//C         PIDMSI_STATUS_REVIEW,PIDMSI_STATUS_PROOF,PIDMSI_STATUS_FINAL,
//C         PIDMSI_STATUS_OTHER = 0x7fff
//C       };
enum PIDMSI_STATUS_VALUE
{
    PIDMSI_STATUS_NORMAL,
    PIDMSI_STATUS_NEW,
    PIDMSI_STATUS_PRELIM,
    PIDMSI_STATUS_DRAFT,
    PIDMSI_STATUS_INPROGRESS,
    PIDMSI_STATUS_EDIT,
    PIDMSI_STATUS_REVIEW,
    PIDMSI_STATUS_PROOF,
    PIDMSI_STATUS_FINAL,
    PIDMSI_STATUS_OTHER = 32767,
}
//C       typedef struct tagPROPSPEC {
//C         ULONG ulKind;
//C          union {
//C           PROPID propid;
//C           LPOLESTR lpwstr;
//C         } ;
union _N198
{
    PROPID propid;
    LPOLESTR lpwstr;
}
//C       } PROPSPEC;
struct tagPROPSPEC
{
    ULONG ulKind;
    PROPID propid;
    LPOLESTR lpwstr;
}
alias tagPROPSPEC PROPSPEC;
//C       typedef struct tagSTATPROPSTG {
//C         LPOLESTR lpwstrName;
//C         PROPID propid;
//C         VARTYPE vt;
//C       } STATPROPSTG;
struct tagSTATPROPSTG
{
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
}
alias tagSTATPROPSTG STATPROPSTG;
//C       typedef struct tagSTATPROPSETSTG {
//C         FMTID fmtid;
//C         CLSID clsid;
//C         DWORD grfFlags;
//C         FILETIME mtime;
//C         FILETIME ctime;
//C         FILETIME atime;
//C         DWORD dwOSVersion;
//C       } STATPROPSETSTG;
struct tagSTATPROPSETSTG
{
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
}
alias tagSTATPROPSETSTG STATPROPSETSTG;
//C       extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_s_ifspec;
//C       extern const IID IID_IPropertyStorage;
extern const IID IID_IPropertyStorage;
//C       typedef struct IPropertyStorageVtbl {
//C           HRESULT ( *QueryInterface)(IPropertyStorage *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPropertyStorage *This);
//C           ULONG ( *Release)(IPropertyStorage *This);
//C           HRESULT ( *ReadMultiple)(IPropertyStorage *This,ULONG cpspec,const PROPSPEC rgpspec[],PROPVARIANT rgpropvar[]);
//C           HRESULT ( *WriteMultiple)(IPropertyStorage *This,ULONG cpspec,const PROPSPEC rgpspec[],const PROPVARIANT rgpropvar[],PROPID propidNameFirst);
//C           HRESULT ( *DeleteMultiple)(IPropertyStorage *This,ULONG cpspec,const PROPSPEC rgpspec[]);
//C           HRESULT ( *ReadPropertyNames)(IPropertyStorage *This,ULONG cpropid,const PROPID rgpropid[],LPOLESTR rglpwstrName[]);
//C           HRESULT ( *WritePropertyNames)(IPropertyStorage *This,ULONG cpropid,const PROPID rgpropid[],const LPOLESTR rglpwstrName[]);
//C           HRESULT ( *DeletePropertyNames)(IPropertyStorage *This,ULONG cpropid,const PROPID rgpropid[]);
//C           HRESULT ( *Commit)(IPropertyStorage *This,DWORD grfCommitFlags);
//C           HRESULT ( *Revert)(IPropertyStorage *This);
//C           HRESULT ( *Enum)(IPropertyStorage *This,IEnumSTATPROPSTG **ppenum);
//C           HRESULT ( *SetTimes)(IPropertyStorage *This,const FILETIME *pctime,const FILETIME *patime,const FILETIME *pmtime);
//C           HRESULT ( *SetClass)(IPropertyStorage *This,const IID *const clsid);
//C           HRESULT ( *Stat)(IPropertyStorage *This,STATPROPSETSTG *pstatpsstg);
//C       } IPropertyStorageVtbl;
struct IPropertyStorageVtbl
{
    HRESULT  function(IPropertyStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPropertyStorage *This)AddRef;
    ULONG  function(IPropertyStorage *This)Release;
    HRESULT  function(IPropertyStorage *This, ULONG cpspec, PROPSPEC *rgpspec, PROPVARIANT *rgpropvar)ReadMultiple;
    HRESULT  function(IPropertyStorage *This, ULONG cpspec, PROPSPEC *rgpspec, PROPVARIANT *rgpropvar, PROPID propidNameFirst)WriteMultiple;
    HRESULT  function(IPropertyStorage *This, ULONG cpspec, PROPSPEC *rgpspec)DeleteMultiple;
    HRESULT  function(IPropertyStorage *This, ULONG cpropid, PROPID *rgpropid, LPOLESTR *rglpwstrName)ReadPropertyNames;
    HRESULT  function(IPropertyStorage *This, ULONG cpropid, PROPID *rgpropid, LPOLESTR *rglpwstrName)WritePropertyNames;
    HRESULT  function(IPropertyStorage *This, ULONG cpropid, PROPID *rgpropid)DeletePropertyNames;
    HRESULT  function(IPropertyStorage *This, DWORD grfCommitFlags)Commit;
    HRESULT  function(IPropertyStorage *This)Revert;
    HRESULT  function(IPropertyStorage *This, IEnumSTATPROPSTG **ppenum)Enum;
    HRESULT  function(IPropertyStorage *This, FILETIME *pctime, FILETIME *patime, FILETIME *pmtime)SetTimes;
    HRESULT  function(IPropertyStorage *This, IID *clsid)SetClass;
    HRESULT  function(IPropertyStorage *This, STATPROPSETSTG *pstatpsstg)Stat;
}
//C       struct IPropertyStorage {
//C         struct IPropertyStorageVtbl *lpVtbl;
//C       };
struct IPropertyStorage
{
    IPropertyStorageVtbl *lpVtbl;
}
//C       HRESULT IPropertyStorage_ReadMultiple_Proxy(IPropertyStorage *This,ULONG cpspec,const PROPSPEC rgpspec[],PROPVARIANT rgpropvar[]);
HRESULT  IPropertyStorage_ReadMultiple_Proxy(IPropertyStorage *This, ULONG cpspec, PROPSPEC *rgpspec, PROPVARIANT *rgpropvar);
//C       void IPropertyStorage_ReadMultiple_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_ReadMultiple_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_WriteMultiple_Proxy(IPropertyStorage *This,ULONG cpspec,const PROPSPEC rgpspec[],const PROPVARIANT rgpropvar[],PROPID propidNameFirst);
HRESULT  IPropertyStorage_WriteMultiple_Proxy(IPropertyStorage *This, ULONG cpspec, PROPSPEC *rgpspec, PROPVARIANT *rgpropvar, PROPID propidNameFirst);
//C       void IPropertyStorage_WriteMultiple_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_WriteMultiple_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_DeleteMultiple_Proxy(IPropertyStorage *This,ULONG cpspec,const PROPSPEC rgpspec[]);
HRESULT  IPropertyStorage_DeleteMultiple_Proxy(IPropertyStorage *This, ULONG cpspec, PROPSPEC *rgpspec);
//C       void IPropertyStorage_DeleteMultiple_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_DeleteMultiple_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_ReadPropertyNames_Proxy(IPropertyStorage *This,ULONG cpropid,const PROPID rgpropid[],LPOLESTR rglpwstrName[]);
HRESULT  IPropertyStorage_ReadPropertyNames_Proxy(IPropertyStorage *This, ULONG cpropid, PROPID *rgpropid, LPOLESTR *rglpwstrName);
//C       void IPropertyStorage_ReadPropertyNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_ReadPropertyNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_WritePropertyNames_Proxy(IPropertyStorage *This,ULONG cpropid,const PROPID rgpropid[],const LPOLESTR rglpwstrName[]);
HRESULT  IPropertyStorage_WritePropertyNames_Proxy(IPropertyStorage *This, ULONG cpropid, PROPID *rgpropid, LPOLESTR *rglpwstrName);
//C       void IPropertyStorage_WritePropertyNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_WritePropertyNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_DeletePropertyNames_Proxy(IPropertyStorage *This,ULONG cpropid,const PROPID rgpropid[]);
HRESULT  IPropertyStorage_DeletePropertyNames_Proxy(IPropertyStorage *This, ULONG cpropid, PROPID *rgpropid);
//C       void IPropertyStorage_DeletePropertyNames_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_DeletePropertyNames_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_Commit_Proxy(IPropertyStorage *This,DWORD grfCommitFlags);
HRESULT  IPropertyStorage_Commit_Proxy(IPropertyStorage *This, DWORD grfCommitFlags);
//C       void IPropertyStorage_Commit_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_Commit_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_Revert_Proxy(IPropertyStorage *This);
HRESULT  IPropertyStorage_Revert_Proxy(IPropertyStorage *This);
//C       void IPropertyStorage_Revert_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_Revert_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_Enum_Proxy(IPropertyStorage *This,IEnumSTATPROPSTG **ppenum);
HRESULT  IPropertyStorage_Enum_Proxy(IPropertyStorage *This, IEnumSTATPROPSTG **ppenum);
//C       void IPropertyStorage_Enum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_Enum_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_SetTimes_Proxy(IPropertyStorage *This,const FILETIME *pctime,const FILETIME *patime,const FILETIME *pmtime);
HRESULT  IPropertyStorage_SetTimes_Proxy(IPropertyStorage *This, FILETIME *pctime, FILETIME *patime, FILETIME *pmtime);
//C       void IPropertyStorage_SetTimes_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_SetTimes_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_SetClass_Proxy(IPropertyStorage *This,const IID *const clsid);
HRESULT  IPropertyStorage_SetClass_Proxy(IPropertyStorage *This, IID *clsid);
//C       void IPropertyStorage_SetClass_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_SetClass_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertyStorage_Stat_Proxy(IPropertyStorage *This,STATPROPSETSTG *pstatpsstg);
HRESULT  IPropertyStorage_Stat_Proxy(IPropertyStorage *This, STATPROPSETSTG *pstatpsstg);
//C       void IPropertyStorage_Stat_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertyStorage_Stat_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
alias IPropertySetStorage *LPPROPERTYSETSTORAGE;
//C       extern const IID IID_IPropertySetStorage;
extern const IID IID_IPropertySetStorage;
//C       typedef struct IPropertySetStorageVtbl {
//C           HRESULT ( *QueryInterface)(IPropertySetStorage *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IPropertySetStorage *This);
//C           ULONG ( *Release)(IPropertySetStorage *This);
//C           HRESULT ( *Create)(IPropertySetStorage *This,const IID *const rfmtid,const CLSID *pclsid,DWORD grfFlags,DWORD grfMode,IPropertyStorage **ppprstg);
//C           HRESULT ( *Open)(IPropertySetStorage *This,const IID *const rfmtid,DWORD grfMode,IPropertyStorage **ppprstg);
//C           HRESULT ( *Delete)(IPropertySetStorage *This,const IID *const rfmtid);
//C           HRESULT ( *Enum)(IPropertySetStorage *This,IEnumSTATPROPSETSTG **ppenum);
//C       } IPropertySetStorageVtbl;
struct IPropertySetStorageVtbl
{
    HRESULT  function(IPropertySetStorage *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IPropertySetStorage *This)AddRef;
    ULONG  function(IPropertySetStorage *This)Release;
    HRESULT  function(IPropertySetStorage *This, IID *rfmtid, CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg)Create;
    HRESULT  function(IPropertySetStorage *This, IID *rfmtid, DWORD grfMode, IPropertyStorage **ppprstg)Open;
    HRESULT  function(IPropertySetStorage *This, IID *rfmtid)Delete;
    HRESULT  function(IPropertySetStorage *This, IEnumSTATPROPSETSTG **ppenum)Enum;
}
//C       struct IPropertySetStorage {
//C         struct IPropertySetStorageVtbl *lpVtbl;
//C       };
struct IPropertySetStorage
{
    IPropertySetStorageVtbl *lpVtbl;
}
//C       HRESULT IPropertySetStorage_Create_Proxy(IPropertySetStorage *This,const IID *const rfmtid,const CLSID *pclsid,DWORD grfFlags,DWORD grfMode,IPropertyStorage **ppprstg);
HRESULT  IPropertySetStorage_Create_Proxy(IPropertySetStorage *This, IID *rfmtid, CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg);
//C       void IPropertySetStorage_Create_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertySetStorage_Create_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertySetStorage_Open_Proxy(IPropertySetStorage *This,const IID *const rfmtid,DWORD grfMode,IPropertyStorage **ppprstg);
HRESULT  IPropertySetStorage_Open_Proxy(IPropertySetStorage *This, IID *rfmtid, DWORD grfMode, IPropertyStorage **ppprstg);
//C       void IPropertySetStorage_Open_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertySetStorage_Open_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertySetStorage_Delete_Proxy(IPropertySetStorage *This,const IID *const rfmtid);
HRESULT  IPropertySetStorage_Delete_Proxy(IPropertySetStorage *This, IID *rfmtid);
//C       void IPropertySetStorage_Delete_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertySetStorage_Delete_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IPropertySetStorage_Enum_Proxy(IPropertySetStorage *This,IEnumSTATPROPSETSTG **ppenum);
HRESULT  IPropertySetStorage_Enum_Proxy(IPropertySetStorage *This, IEnumSTATPROPSETSTG **ppenum);
//C       void IPropertySetStorage_Enum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IPropertySetStorage_Enum_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
alias IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
//C       extern const IID IID_IEnumSTATPROPSTG;
extern const IID IID_IEnumSTATPROPSTG;
//C       typedef struct IEnumSTATPROPSTGVtbl {
//C           HRESULT ( *QueryInterface)(IEnumSTATPROPSTG *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IEnumSTATPROPSTG *This);
//C           ULONG ( *Release)(IEnumSTATPROPSTG *This);
//C           HRESULT ( *Next)(IEnumSTATPROPSTG *This,ULONG celt,STATPROPSTG *rgelt,ULONG *pceltFetched);
//C           HRESULT ( *Skip)(IEnumSTATPROPSTG *This,ULONG celt);
//C           HRESULT ( *Reset)(IEnumSTATPROPSTG *This);
//C           HRESULT ( *Clone)(IEnumSTATPROPSTG *This,IEnumSTATPROPSTG **ppenum);
//C       } IEnumSTATPROPSTGVtbl;
struct IEnumSTATPROPSTGVtbl
{
    HRESULT  function(IEnumSTATPROPSTG *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumSTATPROPSTG *This)AddRef;
    ULONG  function(IEnumSTATPROPSTG *This)Release;
    HRESULT  function(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumSTATPROPSTG *This, ULONG celt)Skip;
    HRESULT  function(IEnumSTATPROPSTG *This)Reset;
    HRESULT  function(IEnumSTATPROPSTG *This, IEnumSTATPROPSTG **ppenum)Clone;
}
//C       struct IEnumSTATPROPSTG {
//C         struct IEnumSTATPROPSTGVtbl *lpVtbl;
//C       };
struct IEnumSTATPROPSTG
{
    IEnumSTATPROPSTGVtbl *lpVtbl;
}
//C       HRESULT IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This,ULONG celt,STATPROPSTG *rgelt,ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
//C       void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumSTATPROPSTG_Skip_Proxy(IEnumSTATPROPSTG *This,ULONG celt);
HRESULT  IEnumSTATPROPSTG_Skip_Proxy(IEnumSTATPROPSTG *This, ULONG celt);
//C       void IEnumSTATPROPSTG_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSTG_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumSTATPROPSTG_Reset_Proxy(IEnumSTATPROPSTG *This);
HRESULT  IEnumSTATPROPSTG_Reset_Proxy(IEnumSTATPROPSTG *This);
//C       void IEnumSTATPROPSTG_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSTG_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumSTATPROPSTG_Clone_Proxy(IEnumSTATPROPSTG *This,IEnumSTATPROPSTG **ppenum);
HRESULT  IEnumSTATPROPSTG_Clone_Proxy(IEnumSTATPROPSTG *This, IEnumSTATPROPSTG **ppenum);
//C       void IEnumSTATPROPSTG_Clone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSTG_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
alias IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
//C       extern const IID IID_IEnumSTATPROPSETSTG;
extern const IID IID_IEnumSTATPROPSETSTG;
//C       typedef struct IEnumSTATPROPSETSTGVtbl {
//C           HRESULT ( *QueryInterface)(IEnumSTATPROPSETSTG *This,const IID *const riid,void **ppvObject);
//C           ULONG ( *AddRef)(IEnumSTATPROPSETSTG *This);
//C           ULONG ( *Release)(IEnumSTATPROPSETSTG *This);
//C           HRESULT ( *Next)(IEnumSTATPROPSETSTG *This,ULONG celt,STATPROPSETSTG *rgelt,ULONG *pceltFetched);
//C           HRESULT ( *Skip)(IEnumSTATPROPSETSTG *This,ULONG celt);
//C           HRESULT ( *Reset)(IEnumSTATPROPSETSTG *This);
//C           HRESULT ( *Clone)(IEnumSTATPROPSETSTG *This,IEnumSTATPROPSETSTG **ppenum);
//C       } IEnumSTATPROPSETSTGVtbl;
struct IEnumSTATPROPSETSTGVtbl
{
    HRESULT  function(IEnumSTATPROPSETSTG *This, IID *riid, void **ppvObject)QueryInterface;
    ULONG  function(IEnumSTATPROPSETSTG *This)AddRef;
    ULONG  function(IEnumSTATPROPSETSTG *This)Release;
    HRESULT  function(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched)Next;
    HRESULT  function(IEnumSTATPROPSETSTG *This, ULONG celt)Skip;
    HRESULT  function(IEnumSTATPROPSETSTG *This)Reset;
    HRESULT  function(IEnumSTATPROPSETSTG *This, IEnumSTATPROPSETSTG **ppenum)Clone;
}
//C       struct IEnumSTATPROPSETSTG {
//C         struct IEnumSTATPROPSETSTGVtbl *lpVtbl;
//C       };
struct IEnumSTATPROPSETSTG
{
    IEnumSTATPROPSETSTGVtbl *lpVtbl;
}
//C       HRESULT IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This,ULONG celt,STATPROPSETSTG *rgelt,ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
//C       void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumSTATPROPSETSTG_Skip_Proxy(IEnumSTATPROPSETSTG *This,ULONG celt);
HRESULT  IEnumSTATPROPSETSTG_Skip_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt);
//C       void IEnumSTATPROPSETSTG_Skip_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSETSTG_Skip_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumSTATPROPSETSTG_Reset_Proxy(IEnumSTATPROPSETSTG *This);
HRESULT  IEnumSTATPROPSETSTG_Reset_Proxy(IEnumSTATPROPSETSTG *This);
//C       void IEnumSTATPROPSETSTG_Reset_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSETSTG_Reset_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       HRESULT IEnumSTATPROPSETSTG_Clone_Proxy(IEnumSTATPROPSETSTG *This,IEnumSTATPROPSETSTG **ppenum);
HRESULT  IEnumSTATPROPSETSTG_Clone_Proxy(IEnumSTATPROPSETSTG *This, IEnumSTATPROPSETSTG **ppenum);
//C       void IEnumSTATPROPSETSTG_Clone_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
void  IEnumSTATPROPSETSTG_Clone_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase);
//C       typedef IPropertyStorage *LPPROPERTYSTORAGE;
alias IPropertyStorage *LPPROPERTYSTORAGE;
//C       extern  HRESULT PropVariantCopy (PROPVARIANT *pvarDest,const PROPVARIANT *pvarSrc);
HRESULT  PropVariantCopy(PROPVARIANT *pvarDest, PROPVARIANT *pvarSrc);
//C       extern  HRESULT PropVariantClear (PROPVARIANT *pvar);
HRESULT  PropVariantClear(PROPVARIANT *pvar);
//C       extern  HRESULT FreePropVariantArray (ULONG cVariants,PROPVARIANT *rgvars);
HRESULT  FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars);
//C       extern  HRESULT StgCreatePropStg(IUnknown *pUnk,const IID *const fmtid,const CLSID *pclsid,DWORD grfFlags,DWORD dwReserved,IPropertyStorage **ppPropStg);
HRESULT  StgCreatePropStg(IUnknown *pUnk, IID *fmtid, CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg);
//C       extern  HRESULT StgOpenPropStg(IUnknown *pUnk,const IID *const fmtid,DWORD grfFlags,DWORD dwReserved,IPropertyStorage **ppPropStg);
HRESULT  StgOpenPropStg(IUnknown *pUnk, IID *fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg);
//C       extern  HRESULT StgCreatePropSetStg(IStorage *pStorage,DWORD dwReserved,IPropertySetStorage **ppPropSetStg);
HRESULT  StgCreatePropSetStg(IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);
//C       extern  HRESULT FmtIdToPropStgName(const FMTID *pfmtid,LPOLESTR oszName);
HRESULT  FmtIdToPropStgName(FMTID *pfmtid, LPOLESTR oszName);
//C       extern  HRESULT PropStgNameToFmtId(const LPOLESTR oszName,FMTID *pfmtid);
HRESULT  PropStgNameToFmtId(LPOLESTR oszName, FMTID *pfmtid);
//C       extern RPC_IF_HANDLE __MIDL_itf_propidl_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0120_v0_0_c_ifspec;
//C       extern RPC_IF_HANDLE __MIDL_itf_propidl_0120_v0_0_s_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0120_v0_0_s_ifspec;
//C       ULONG BSTR_UserSize(ULONG *,ULONG,BSTR *);
ULONG  BSTR_UserSize(ULONG *, ULONG , BSTR *);
//C       unsigned char * BSTR_UserMarshal(ULONG *,unsigned char *,BSTR *);
ubyte * BSTR_UserMarshal(ULONG *, ubyte *, BSTR *);
//C       unsigned char * BSTR_UserUnmarshal(ULONG *,unsigned char *,BSTR *);
ubyte * BSTR_UserUnmarshal(ULONG *, ubyte *, BSTR *);
//C       void BSTR_UserFree(ULONG *,BSTR *);
void  BSTR_UserFree(ULONG *, BSTR *);
//C       ULONG LPSAFEARRAY_UserSize(ULONG *,ULONG,LPSAFEARRAY *);
ULONG  LPSAFEARRAY_UserSize(ULONG *, ULONG , LPSAFEARRAY *);
//C       unsigned char * LPSAFEARRAY_UserMarshal(ULONG *,unsigned char *,LPSAFEARRAY *);
ubyte * LPSAFEARRAY_UserMarshal(ULONG *, ubyte *, LPSAFEARRAY *);
//C       unsigned char * LPSAFEARRAY_UserUnmarshal(ULONG *,unsigned char *,LPSAFEARRAY *);
ubyte * LPSAFEARRAY_UserUnmarshal(ULONG *, ubyte *, LPSAFEARRAY *);
//C       void LPSAFEARRAY_UserFree(ULONG *,LPSAFEARRAY *);
void  LPSAFEARRAY_UserFree(ULONG *, LPSAFEARRAY *);
//C       HRESULT IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This,ULONG celt,STATPROPSTG *rgelt,ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This,ULONG celt,STATPROPSTG *rgelt,ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This,ULONG celt,STATPROPSETSTG *rgelt,ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
//C       HRESULT IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This,ULONG celt,STATPROPSETSTG *rgelt,ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);
//C     extern  HRESULT CreateStdProgressIndicator(HWND hwndParent,LPCOLESTR pszTitle,IBindStatusCallback *pIbscCaller,IBindStatusCallback **ppIbsc);
HRESULT  CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc);
//C     extern const IID IID_StdOle;
extern const IID IID_StdOle;
//C     extern  BSTR SysAllocString(const OLECHAR *);
BSTR  SysAllocString(OLECHAR *);
//C     extern  INT SysReAllocString(BSTR *,const OLECHAR *);
INT  SysReAllocString(BSTR *, OLECHAR *);
//C     extern  BSTR SysAllocStringLen(const OLECHAR *,UINT);
BSTR  SysAllocStringLen(OLECHAR *, UINT );
//C     extern  INT SysReAllocStringLen(BSTR *,const OLECHAR *,UINT);
INT  SysReAllocStringLen(BSTR *, OLECHAR *, UINT );
//C     extern  void SysFreeString(BSTR);
void  SysFreeString(BSTR );
//C     extern  UINT SysStringLen(BSTR);
UINT  SysStringLen(BSTR );
//C     extern  UINT SysStringByteLen(BSTR bstr);
UINT  SysStringByteLen(BSTR bstr);
//C     extern  BSTR SysAllocStringByteLen(LPCSTR psz,UINT len);
BSTR  SysAllocStringByteLen(LPCSTR psz, UINT len);
//C     extern  INT DosDateTimeToVariantTime(USHORT wDosDate,USHORT wDosTime,DOUBLE *pvtime);
INT  DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime);
//C     extern  INT VariantTimeToDosDateTime(DOUBLE vtime,USHORT *pwDosDate,USHORT *pwDosTime);
INT  VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime);
//C     extern  INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime,DOUBLE *pvtime);
INT  SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
//C     extern  INT VariantTimeToSystemTime(DOUBLE vtime,LPSYSTEMTIME lpSystemTime);
INT  VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
//C     extern  HRESULT SafeArrayAllocDescriptor(UINT cDims,SAFEARRAY **ppsaOut);
HRESULT  SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut);
//C     extern  HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt,UINT cDims,SAFEARRAY **ppsaOut);
HRESULT  SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut);
//C     extern  HRESULT SafeArrayAllocData(SAFEARRAY *psa);
HRESULT  SafeArrayAllocData(SAFEARRAY *psa);
//C     extern  SAFEARRAY * SafeArrayCreate(VARTYPE vt,UINT cDims,SAFEARRAYBOUND *rgsabound);
SAFEARRAY * SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound);
//C     extern  SAFEARRAY * SafeArrayCreateEx(VARTYPE vt,UINT cDims,SAFEARRAYBOUND *rgsabound,PVOID pvExtra);
SAFEARRAY * SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra);
//C     extern  HRESULT SafeArrayCopyData(SAFEARRAY *psaSource,SAFEARRAY *psaTarget);
HRESULT  SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
//C     extern  HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa);
HRESULT  SafeArrayDestroyDescriptor(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayDestroyData(SAFEARRAY *psa);
HRESULT  SafeArrayDestroyData(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayDestroy(SAFEARRAY *psa);
HRESULT  SafeArrayDestroy(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayRedim(SAFEARRAY *psa,SAFEARRAYBOUND *psaboundNew);
HRESULT  SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew);
//C     extern  UINT SafeArrayGetDim(SAFEARRAY *psa);
UINT  SafeArrayGetDim(SAFEARRAY *psa);
//C     extern  UINT SafeArrayGetElemsize(SAFEARRAY *psa);
UINT  SafeArrayGetElemsize(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayGetUBound(SAFEARRAY *psa,UINT nDim,LONG *plUbound);
HRESULT  SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound);
//C     extern  HRESULT SafeArrayGetLBound(SAFEARRAY *psa,UINT nDim,LONG *plLbound);
HRESULT  SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound);
//C     extern  HRESULT SafeArrayLock(SAFEARRAY *psa);
HRESULT  SafeArrayLock(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayUnlock(SAFEARRAY *psa);
HRESULT  SafeArrayUnlock(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayAccessData(SAFEARRAY *psa,void **ppvData);
HRESULT  SafeArrayAccessData(SAFEARRAY *psa, void **ppvData);
//C     extern  HRESULT SafeArrayUnaccessData(SAFEARRAY *psa);
HRESULT  SafeArrayUnaccessData(SAFEARRAY *psa);
//C     extern  HRESULT SafeArrayGetElement(SAFEARRAY *psa,LONG *rgIndices,void *pv);
HRESULT  SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv);
//C     extern  HRESULT SafeArrayPutElement(SAFEARRAY *psa,LONG *rgIndices,void *pv);
HRESULT  SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv);
//C     extern  HRESULT SafeArrayCopy(SAFEARRAY *psa,SAFEARRAY **ppsaOut);
HRESULT  SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut);
//C     extern  HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa,LONG *rgIndices,void **ppvData);
HRESULT  SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData);
//C     extern  HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa,IRecordInfo *prinfo);
HRESULT  SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo);
//C     extern  HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa,IRecordInfo **prinfo);
HRESULT  SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo);
//C     extern  HRESULT SafeArraySetIID(SAFEARRAY *psa,const GUID *const guid);
HRESULT  SafeArraySetIID(SAFEARRAY *psa, GUID *guid);
//C     extern  HRESULT SafeArrayGetIID(SAFEARRAY *psa,GUID *pguid);
HRESULT  SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid);
//C     extern  HRESULT SafeArrayGetVartype(SAFEARRAY *psa,VARTYPE *pvt);
HRESULT  SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt);
//C     extern  SAFEARRAY * SafeArrayCreateVector(VARTYPE vt,LONG lLbound,ULONG cElements);
SAFEARRAY * SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
//C     extern  SAFEARRAY * SafeArrayCreateVectorEx(VARTYPE vt,LONG lLbound,ULONG cElements,PVOID pvExtra);
SAFEARRAY * SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
//C     extern  void VariantInit(VARIANTARG *pvarg);
void  VariantInit(VARIANTARG *pvarg);
//C     extern  HRESULT VariantClear(VARIANTARG *pvarg);
HRESULT  VariantClear(VARIANTARG *pvarg);
//C     extern  HRESULT VariantCopy(VARIANTARG *pvargDest,VARIANTARG *pvargSrc);
HRESULT  VariantCopy(VARIANTARG *pvargDest, VARIANTARG *pvargSrc);
//C     extern  HRESULT VariantCopyInd(VARIANT *pvarDest,VARIANTARG *pvargSrc);
HRESULT  VariantCopyInd(VARIANT *pvarDest, VARIANTARG *pvargSrc);
//C     extern  HRESULT VariantChangeType(VARIANTARG *pvargDest,VARIANTARG *pvarSrc,USHORT wFlags,VARTYPE vt);
HRESULT  VariantChangeType(VARIANTARG *pvargDest, VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt);
//C     extern  HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest,VARIANTARG *pvarSrc,LCID lcid,USHORT wFlags,VARTYPE vt);
HRESULT  VariantChangeTypeEx(VARIANTARG *pvargDest, VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
//C     extern  HRESULT VectorFromBstr (BSTR bstr,SAFEARRAY **ppsa);
HRESULT  VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa);
//C     extern  HRESULT BstrFromVector (SAFEARRAY *psa,BSTR *pbstr);
HRESULT  BstrFromVector(SAFEARRAY *psa, BSTR *pbstr);
//C     extern  HRESULT VarUI1FromI2(SHORT sIn,BYTE *pbOut);
HRESULT  VarUI1FromI2(SHORT sIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromI4(LONG lIn,BYTE *pbOut);
HRESULT  VarUI1FromI4(LONG lIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromI8(LONG64 i64In,BYTE *pbOut);
HRESULT  VarUI1FromI8(LONG64 i64In, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromR4(FLOAT fltIn,BYTE *pbOut);
HRESULT  VarUI1FromR4(FLOAT fltIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromR8(DOUBLE dblIn,BYTE *pbOut);
HRESULT  VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromCy(CY cyIn,BYTE *pbOut);
HRESULT  VarUI1FromCy(CY cyIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromDate(DATE dateIn,BYTE *pbOut);
HRESULT  VarUI1FromDate(DATE dateIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,BYTE *pbOut);
HRESULT  VarUI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromDisp(IDispatch *pdispIn,LCID lcid,BYTE *pbOut);
HRESULT  VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromBool(VARIANT_BOOL boolIn,BYTE *pbOut);
HRESULT  VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromI1(CHAR cIn,BYTE *pbOut);
HRESULT  VarUI1FromI1(CHAR cIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromUI2(USHORT uiIn,BYTE *pbOut);
HRESULT  VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromUI4(ULONG ulIn,BYTE *pbOut);
HRESULT  VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromUI8(ULONG64 ui64In,BYTE *pbOut);
HRESULT  VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut);
//C     extern  HRESULT VarUI1FromDec(DECIMAL *pdecIn,BYTE *pbOut);
HRESULT  VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);
//C     extern  HRESULT VarI2FromUI1(BYTE bIn,SHORT *psOut);
HRESULT  VarI2FromUI1(BYTE bIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromI4(LONG lIn,SHORT *psOut);
HRESULT  VarI2FromI4(LONG lIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromI8(LONG64 i64In,SHORT *psOut);
HRESULT  VarI2FromI8(LONG64 i64In, SHORT *psOut);
//C     extern  HRESULT VarI2FromR4(FLOAT fltIn,SHORT *psOut);
HRESULT  VarI2FromR4(FLOAT fltIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromR8(DOUBLE dblIn,SHORT *psOut);
HRESULT  VarI2FromR8(DOUBLE dblIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromCy(CY cyIn,SHORT *psOut);
HRESULT  VarI2FromCy(CY cyIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromDate(DATE dateIn,SHORT *psOut);
HRESULT  VarI2FromDate(DATE dateIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,SHORT *psOut);
HRESULT  VarI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, SHORT *psOut);
//C     extern  HRESULT VarI2FromDisp(IDispatch *pdispIn,LCID lcid,SHORT *psOut);
HRESULT  VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut);
//C     extern  HRESULT VarI2FromBool(VARIANT_BOOL boolIn,SHORT *psOut);
HRESULT  VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromI1(CHAR cIn,SHORT *psOut);
HRESULT  VarI2FromI1(CHAR cIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromUI2(USHORT uiIn,SHORT *psOut);
HRESULT  VarI2FromUI2(USHORT uiIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromUI4(ULONG ulIn,SHORT *psOut);
HRESULT  VarI2FromUI4(ULONG ulIn, SHORT *psOut);
//C     extern  HRESULT VarI2FromUI8(ULONG64 ui64In,SHORT *psOut);
HRESULT  VarI2FromUI8(ULONG64 ui64In, SHORT *psOut);
//C     extern  HRESULT VarI2FromDec(DECIMAL *pdecIn,SHORT *psOut);
HRESULT  VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);
//C     extern  HRESULT VarI4FromUI1(BYTE bIn,LONG *plOut);
HRESULT  VarI4FromUI1(BYTE bIn, LONG *plOut);
//C     extern  HRESULT VarI4FromI2(SHORT sIn,LONG *plOut);
HRESULT  VarI4FromI2(SHORT sIn, LONG *plOut);
//C     extern  HRESULT VarI4FromI8(LONG64 i64In,LONG *plOut);
HRESULT  VarI4FromI8(LONG64 i64In, LONG *plOut);
//C     extern  HRESULT VarI4FromR4(FLOAT fltIn,LONG *plOut);
HRESULT  VarI4FromR4(FLOAT fltIn, LONG *plOut);
//C     extern  HRESULT VarI4FromR8(DOUBLE dblIn,LONG *plOut);
HRESULT  VarI4FromR8(DOUBLE dblIn, LONG *plOut);
//C     extern  HRESULT VarI4FromCy(CY cyIn,LONG *plOut);
HRESULT  VarI4FromCy(CY cyIn, LONG *plOut);
//C     extern  HRESULT VarI4FromDate(DATE dateIn,LONG *plOut);
HRESULT  VarI4FromDate(DATE dateIn, LONG *plOut);
//C     extern  HRESULT VarI4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,LONG *plOut);
HRESULT  VarI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, LONG *plOut);
//C     extern  HRESULT VarI4FromDisp(IDispatch *pdispIn,LCID lcid,LONG *plOut);
HRESULT  VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut);
//C     extern  HRESULT VarI4FromBool(VARIANT_BOOL boolIn,LONG *plOut);
HRESULT  VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut);
//C     extern  HRESULT VarI4FromI1(CHAR cIn,LONG *plOut);
HRESULT  VarI4FromI1(CHAR cIn, LONG *plOut);
//C     extern  HRESULT VarI4FromUI2(USHORT uiIn,LONG *plOut);
HRESULT  VarI4FromUI2(USHORT uiIn, LONG *plOut);
//C     extern  HRESULT VarI4FromUI4(ULONG ulIn,LONG *plOut);
HRESULT  VarI4FromUI4(ULONG ulIn, LONG *plOut);
//C     extern  HRESULT VarI4FromUI8(ULONG64 ui64In,LONG *plOut);
HRESULT  VarI4FromUI8(ULONG64 ui64In, LONG *plOut);
//C     extern  HRESULT VarI4FromDec(DECIMAL *pdecIn,LONG *plOut);
HRESULT  VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
//C     extern  HRESULT VarI4FromInt(INT intIn,LONG *plOut);
HRESULT  VarI4FromInt(INT intIn, LONG *plOut);
//C     extern  HRESULT VarI8FromUI1(BYTE bIn,LONG64 *pi64Out);
HRESULT  VarI8FromUI1(BYTE bIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromI2(SHORT sIn,LONG64 *pi64Out);
HRESULT  VarI8FromI2(SHORT sIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromI4(LONG lIn,LONG64 *pi64Out);
HRESULT  VarI8FromI4(LONG lIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromR4(FLOAT fltIn,LONG64 *pi64Out);
HRESULT  VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromR8(DOUBLE dblIn,LONG64 *pi64Out);
HRESULT  VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromCy(CY cyIn,LONG64 *pi64Out);
HRESULT  VarI8FromCy(CY cyIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromDate(DATE dateIn,LONG64 *pi64Out);
HRESULT  VarI8FromDate(DATE dateIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromStr(OLECHAR *strIn,LCID lcid,unsigned long dwFlags,LONG64 *pi64Out);
HRESULT  VarI8FromStr(OLECHAR *strIn, LCID lcid, uint dwFlags, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromDisp(IDispatch *pdispIn,LCID lcid,LONG64 *pi64Out);
HRESULT  VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromBool(VARIANT_BOOL boolIn,LONG64 *pi64Out);
HRESULT  VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromI1(CHAR cIn,LONG64 *pi64Out);
HRESULT  VarI8FromI1(CHAR cIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromUI2(USHORT uiIn,LONG64 *pi64Out);
HRESULT  VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromUI4(ULONG ulIn,LONG64 *pi64Out);
HRESULT  VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromUI8(ULONG64 ui64In,LONG64 *pi64Out);
HRESULT  VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromDec(DECIMAL *pdecIn,LONG64 *pi64Out);
HRESULT  VarI8FromDec(DECIMAL *pdecIn, LONG64 *pi64Out);
//C     extern  HRESULT VarI8FromInt(INT intIn,LONG64 *pi64Out);
HRESULT  VarI8FromInt(INT intIn, LONG64 *pi64Out);
//C     extern  HRESULT VarR4FromUI1(BYTE bIn,FLOAT *pfltOut);
HRESULT  VarR4FromUI1(BYTE bIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromI2(SHORT sIn,FLOAT *pfltOut);
HRESULT  VarR4FromI2(SHORT sIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromI4(LONG lIn,FLOAT *pfltOut);
HRESULT  VarR4FromI4(LONG lIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromI8(LONG64 i64In,FLOAT *pfltOut);
HRESULT  VarR4FromI8(LONG64 i64In, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromR8(DOUBLE dblIn,FLOAT *pfltOut);
HRESULT  VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromCy(CY cyIn,FLOAT *pfltOut);
HRESULT  VarR4FromCy(CY cyIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromDate(DATE dateIn,FLOAT *pfltOut);
HRESULT  VarR4FromDate(DATE dateIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,FLOAT *pfltOut);
HRESULT  VarR4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromDisp(IDispatch *pdispIn,LCID lcid,FLOAT *pfltOut);
HRESULT  VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromBool(VARIANT_BOOL boolIn,FLOAT *pfltOut);
HRESULT  VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromI1(CHAR cIn,FLOAT *pfltOut);
HRESULT  VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromUI2(USHORT uiIn,FLOAT *pfltOut);
HRESULT  VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromUI4(ULONG ulIn,FLOAT *pfltOut);
HRESULT  VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromUI8(ULONG64 ui64In,FLOAT *pfltOut);
HRESULT  VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut);
//C     extern  HRESULT VarR4FromDec(DECIMAL *pdecIn,FLOAT *pfltOut);
HRESULT  VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);
//C     extern  HRESULT VarR8FromUI1(BYTE bIn,DOUBLE *pdblOut);
HRESULT  VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromI2(SHORT sIn,DOUBLE *pdblOut);
HRESULT  VarR8FromI2(SHORT sIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromI4(LONG lIn,DOUBLE *pdblOut);
HRESULT  VarR8FromI4(LONG lIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromI8(LONG64 i64In,DOUBLE *pdblOut);
HRESULT  VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromR4(FLOAT fltIn,DOUBLE *pdblOut);
HRESULT  VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromCy(CY cyIn,DOUBLE *pdblOut);
HRESULT  VarR8FromCy(CY cyIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromDate(DATE dateIn,DOUBLE *pdblOut);
HRESULT  VarR8FromDate(DATE dateIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DOUBLE *pdblOut);
HRESULT  VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromDisp(IDispatch *pdispIn,LCID lcid,DOUBLE *pdblOut);
HRESULT  VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromBool(VARIANT_BOOL boolIn,DOUBLE *pdblOut);
HRESULT  VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromI1(CHAR cIn,DOUBLE *pdblOut);
HRESULT  VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromUI2(USHORT uiIn,DOUBLE *pdblOut);
HRESULT  VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromUI4(ULONG ulIn,DOUBLE *pdblOut);
HRESULT  VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromUI8(ULONG64 ui64In,DOUBLE *pdblOut);
HRESULT  VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut);
//C     extern  HRESULT VarR8FromDec(DECIMAL *pdecIn,DOUBLE *pdblOut);
HRESULT  VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);
//C     extern  HRESULT VarDateFromUI1(BYTE bIn,DATE *pdateOut);
HRESULT  VarDateFromUI1(BYTE bIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromI2(SHORT sIn,DATE *pdateOut);
HRESULT  VarDateFromI2(SHORT sIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromI4(LONG lIn,DATE *pdateOut);
HRESULT  VarDateFromI4(LONG lIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromI8(LONG64 i64In,DATE *pdateOut);
HRESULT  VarDateFromI8(LONG64 i64In, DATE *pdateOut);
//C     extern  HRESULT VarDateFromR4(FLOAT fltIn,DATE *pdateOut);
HRESULT  VarDateFromR4(FLOAT fltIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromR8(DOUBLE dblIn,DATE *pdateOut);
HRESULT  VarDateFromR8(DOUBLE dblIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromCy(CY cyIn,DATE *pdateOut);
HRESULT  VarDateFromCy(CY cyIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DATE *pdateOut);
HRESULT  VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
//C     extern  HRESULT VarDateFromDisp(IDispatch *pdispIn,LCID lcid,DATE *pdateOut);
HRESULT  VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut);
//C     extern  HRESULT VarDateFromBool(VARIANT_BOOL boolIn,DATE *pdateOut);
HRESULT  VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromI1(CHAR cIn,DATE *pdateOut);
HRESULT  VarDateFromI1(CHAR cIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromUI2(USHORT uiIn,DATE *pdateOut);
HRESULT  VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromUI4(ULONG ulIn,DATE *pdateOut);
HRESULT  VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
//C     extern  HRESULT VarDateFromUI8(ULONG64 ui64In,DATE *pdateOut);
HRESULT  VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut);
//C     extern  HRESULT VarDateFromDec(DECIMAL *pdecIn,DATE *pdateOut);
HRESULT  VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);
//C     extern  HRESULT VarCyFromUI1(BYTE bIn,CY *pcyOut);
HRESULT  VarCyFromUI1(BYTE bIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromI2(SHORT sIn,CY *pcyOut);
HRESULT  VarCyFromI2(SHORT sIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromI4(LONG lIn,CY *pcyOut);
HRESULT  VarCyFromI4(LONG lIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromI8(LONG64 i64In,CY *pcyOut);
HRESULT  VarCyFromI8(LONG64 i64In, CY *pcyOut);
//C     extern  HRESULT VarCyFromR4(FLOAT fltIn,CY *pcyOut);
HRESULT  VarCyFromR4(FLOAT fltIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromR8(DOUBLE dblIn,CY *pcyOut);
HRESULT  VarCyFromR8(DOUBLE dblIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromDate(DATE dateIn,CY *pcyOut);
HRESULT  VarCyFromDate(DATE dateIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,CY *pcyOut);
HRESULT  VarCyFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CY *pcyOut);
//C     extern  HRESULT VarCyFromDisp(IDispatch *pdispIn,LCID lcid,CY *pcyOut);
HRESULT  VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut);
//C     extern  HRESULT VarCyFromBool(VARIANT_BOOL boolIn,CY *pcyOut);
HRESULT  VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromI1(CHAR cIn,CY *pcyOut);
HRESULT  VarCyFromI1(CHAR cIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromUI2(USHORT uiIn,CY *pcyOut);
HRESULT  VarCyFromUI2(USHORT uiIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromUI4(ULONG ulIn,CY *pcyOut);
HRESULT  VarCyFromUI4(ULONG ulIn, CY *pcyOut);
//C     extern  HRESULT VarCyFromUI8(ULONG64 ui64In,CY *pcyOut);
HRESULT  VarCyFromUI8(ULONG64 ui64In, CY *pcyOut);
//C     extern  HRESULT VarCyFromDec(DECIMAL *pdecIn,CY *pcyOut);
HRESULT  VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);
//C     extern  HRESULT VarBstrFromUI1(BYTE bVal,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromI2(SHORT iVal,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromI4(LONG lIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromI8(LONG64 i64In,LCID lcid,unsigned long dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromI8(LONG64 i64In, LCID lcid, uint dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromR4(FLOAT fltIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromR8(DOUBLE dblIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromCy(CY cyIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromDate(DATE dateIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromDisp(IDispatch *pdispIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromBool(VARIANT_BOOL boolIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromI1(CHAR cIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromUI2(USHORT uiIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromUI4(ULONG ulIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromUI8(ULONG64 ui64In,LCID lcid,unsigned long dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromUI8(ULONG64 ui64In, LCID lcid, uint dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBstrFromDec(DECIMAL *pdecIn,LCID lcid,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarBoolFromUI1(BYTE bIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromI2(SHORT sIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromI4(LONG lIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromI8(LONG64 i64In,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromR4(FLOAT fltIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromR8(DOUBLE dblIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromDate(DATE dateIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromCy(CY cyIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromDisp(IDispatch *pdispIn,LCID lcid,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromI1(CHAR cIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromUI2(USHORT uiIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromUI4(ULONG ulIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromUI8(ULONG64 i64In,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarBoolFromDec(DECIMAL *pdecIn,VARIANT_BOOL *pboolOut);
HRESULT  VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);
//C     extern  HRESULT VarI1FromUI1(BYTE bIn,CHAR *pcOut);
HRESULT  VarI1FromUI1(BYTE bIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromI2(SHORT uiIn,CHAR *pcOut);
HRESULT  VarI1FromI2(SHORT uiIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromI4(LONG lIn,CHAR *pcOut);
HRESULT  VarI1FromI4(LONG lIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromI8(LONG64 i64In,CHAR *pcOut);
HRESULT  VarI1FromI8(LONG64 i64In, CHAR *pcOut);
//C     extern  HRESULT VarI1FromR4(FLOAT fltIn,CHAR *pcOut);
HRESULT  VarI1FromR4(FLOAT fltIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromR8(DOUBLE dblIn,CHAR *pcOut);
HRESULT  VarI1FromR8(DOUBLE dblIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromDate(DATE dateIn,CHAR *pcOut);
HRESULT  VarI1FromDate(DATE dateIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromCy(CY cyIn,CHAR *pcOut);
HRESULT  VarI1FromCy(CY cyIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,CHAR *pcOut);
HRESULT  VarI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut);
//C     extern  HRESULT VarI1FromDisp(IDispatch *pdispIn,LCID lcid,CHAR *pcOut);
HRESULT  VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut);
//C     extern  HRESULT VarI1FromBool(VARIANT_BOOL boolIn,CHAR *pcOut);
HRESULT  VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromUI2(USHORT uiIn,CHAR *pcOut);
HRESULT  VarI1FromUI2(USHORT uiIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromUI4(ULONG ulIn,CHAR *pcOut);
HRESULT  VarI1FromUI4(ULONG ulIn, CHAR *pcOut);
//C     extern  HRESULT VarI1FromUI8(ULONG64 i64In,CHAR *pcOut);
HRESULT  VarI1FromUI8(ULONG64 i64In, CHAR *pcOut);
//C     extern  HRESULT VarI1FromDec(DECIMAL *pdecIn,CHAR *pcOut);
HRESULT  VarI1FromDec(DECIMAL *pdecIn, CHAR *pcOut);
//C     extern  HRESULT VarUI2FromUI1(BYTE bIn,USHORT *puiOut);
HRESULT  VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromI2(SHORT uiIn,USHORT *puiOut);
HRESULT  VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromI4(LONG lIn,USHORT *puiOut);
HRESULT  VarUI2FromI4(LONG lIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromI8(LONG64 i64In,USHORT *puiOut);
HRESULT  VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromR4(FLOAT fltIn,USHORT *puiOut);
HRESULT  VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromR8(DOUBLE dblIn,USHORT *puiOut);
HRESULT  VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromDate(DATE dateIn,USHORT *puiOut);
HRESULT  VarUI2FromDate(DATE dateIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromCy(CY cyIn,USHORT *puiOut);
HRESULT  VarUI2FromCy(CY cyIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,USHORT *puiOut);
HRESULT  VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromDisp(IDispatch *pdispIn,LCID lcid,USHORT *puiOut);
HRESULT  VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromBool(VARIANT_BOOL boolIn,USHORT *puiOut);
HRESULT  VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromI1(CHAR cIn,USHORT *puiOut);
HRESULT  VarUI2FromI1(CHAR cIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromUI4(ULONG ulIn,USHORT *puiOut);
HRESULT  VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromUI8(ULONG64 i64In,USHORT *puiOut);
HRESULT  VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
//C     extern  HRESULT VarUI2FromDec(DECIMAL *pdecIn,USHORT *puiOut);
HRESULT  VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);
//C     extern  HRESULT VarUI4FromUI1(BYTE bIn,ULONG *pulOut);
HRESULT  VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromI2(SHORT uiIn,ULONG *pulOut);
HRESULT  VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromI4(LONG lIn,ULONG *pulOut);
HRESULT  VarUI4FromI4(LONG lIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromI8(LONG64 i64In,ULONG *plOut);
HRESULT  VarUI4FromI8(LONG64 i64In, ULONG *plOut);
//C     extern  HRESULT VarUI4FromR4(FLOAT fltIn,ULONG *pulOut);
HRESULT  VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromR8(DOUBLE dblIn,ULONG *pulOut);
HRESULT  VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromDate(DATE dateIn,ULONG *pulOut);
HRESULT  VarUI4FromDate(DATE dateIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromCy(CY cyIn,ULONG *pulOut);
HRESULT  VarUI4FromCy(CY cyIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,ULONG *pulOut);
HRESULT  VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromDisp(IDispatch *pdispIn,LCID lcid,ULONG *pulOut);
HRESULT  VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromBool(VARIANT_BOOL boolIn,ULONG *pulOut);
HRESULT  VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromI1(CHAR cIn,ULONG *pulOut);
HRESULT  VarUI4FromI1(CHAR cIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromUI2(USHORT uiIn,ULONG *pulOut);
HRESULT  VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
//C     extern  HRESULT VarUI4FromUI8(ULONG64 ui64In,ULONG *plOut);
HRESULT  VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
//C     extern  HRESULT VarUI4FromDec(DECIMAL *pdecIn,ULONG *pulOut);
HRESULT  VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);
//C     extern  HRESULT VarUI8FromUI1(BYTE bIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromI2(SHORT sIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromI4(LONG lIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromI4(LONG lIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromI8(LONG64 ui64In,ULONG64 *pi64Out);
HRESULT  VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromR4(FLOAT fltIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromR8(DOUBLE dblIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromCy(CY cyIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromCy(CY cyIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromDate(DATE dateIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromStr(OLECHAR *strIn,LCID lcid,unsigned long dwFlags,ULONG64 *pi64Out);
HRESULT  VarUI8FromStr(OLECHAR *strIn, LCID lcid, uint dwFlags, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromDisp(IDispatch *pdispIn,LCID lcid,ULONG64 *pi64Out);
HRESULT  VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromBool(VARIANT_BOOL boolIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromI1(CHAR cIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromUI2(USHORT uiIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromUI4(ULONG ulIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromDec(DECIMAL *pdecIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromDec(DECIMAL *pdecIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarUI8FromInt(INT intIn,ULONG64 *pi64Out);
HRESULT  VarUI8FromInt(INT intIn, ULONG64 *pi64Out);
//C     extern  HRESULT VarDecFromUI1(BYTE bIn,DECIMAL *pdecOut);
HRESULT  VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromI2(SHORT uiIn,DECIMAL *pdecOut);
HRESULT  VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromI4(LONG lIn,DECIMAL *pdecOut);
HRESULT  VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromI8(LONG64 i64In,DECIMAL *pdecOut);
HRESULT  VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromR4(FLOAT fltIn,DECIMAL *pdecOut);
HRESULT  VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromR8(DOUBLE dblIn,DECIMAL *pdecOut);
HRESULT  VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromDate(DATE dateIn,DECIMAL *pdecOut);
HRESULT  VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromCy(CY cyIn,DECIMAL *pdecOut);
HRESULT  VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,DECIMAL *pdecOut);
HRESULT  VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromDisp(IDispatch *pdispIn,LCID lcid,DECIMAL *pdecOut);
HRESULT  VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromBool(VARIANT_BOOL boolIn,DECIMAL *pdecOut);
HRESULT  VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromI1(CHAR cIn,DECIMAL *pdecOut);
HRESULT  VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromUI2(USHORT uiIn,DECIMAL *pdecOut);
HRESULT  VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromUI4(ULONG ulIn,DECIMAL *pdecOut);
HRESULT  VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);
//C     extern  HRESULT VarDecFromUI8(ULONG64 ui64In,DECIMAL *pdecOut);
HRESULT  VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);
//C     extern  HRESULT VarI4FromI8(LONG64 i64In,LONG *plOut);
HRESULT  VarI4FromI8(LONG64 i64In, LONG *plOut);
//C     extern  HRESULT VarI4FromUI8(ULONG64 ui64In,LONG *plOut);
HRESULT  VarI4FromUI8(ULONG64 ui64In, LONG *plOut);
//C     typedef struct {
//C       INT cDig;
//C       ULONG dwInFlags;
//C       ULONG dwOutFlags;
//C       INT cchUsed;
//C       INT nBaseShift;
//C       INT nPwr10;
//C     } NUMPARSE;
struct _N199
{
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
}
alias _N199 NUMPARSE;
//C     extern  HRESULT VarParseNumFromStr(OLECHAR *strIn,LCID lcid,ULONG dwFlags,NUMPARSE *pnumprs,BYTE *rgbDig);
HRESULT  VarParseNumFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig);
//C     extern  HRESULT VarNumFromParseNum(NUMPARSE *pnumprs,BYTE *rgbDig,ULONG dwVtBits,VARIANT *pvar);
HRESULT  VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar);
//C     extern HRESULT VarAdd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarAnd(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarCat(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarDiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarEqv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarIdiv(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarImp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarMod(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarMul(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarOr(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarPow(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarSub(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarXor(LPVARIANT pvarLeft,LPVARIANT pvarRight,LPVARIANT pvarResult);
HRESULT  VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
//C     extern HRESULT VarAbs(LPVARIANT pvarIn,LPVARIANT pvarResult);
HRESULT  VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult);
//C     extern HRESULT VarFix(LPVARIANT pvarIn,LPVARIANT pvarResult);
HRESULT  VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult);
//C     extern HRESULT VarInt(LPVARIANT pvarIn,LPVARIANT pvarResult);
HRESULT  VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult);
//C     extern HRESULT VarNeg(LPVARIANT pvarIn,LPVARIANT pvarResult);
HRESULT  VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult);
//C     extern HRESULT VarNot(LPVARIANT pvarIn,LPVARIANT pvarResult);
HRESULT  VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult);
//C     extern HRESULT VarRound(LPVARIANT pvarIn,int cDecimals,LPVARIANT pvarResult);
HRESULT  VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);
//C     extern HRESULT VarCmp(LPVARIANT pvarLeft,LPVARIANT pvarRight,LCID lcid,ULONG dwFlags);
HRESULT  VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);
//C     extern HRESULT VarDecAdd(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
HRESULT  VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecDiv(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
HRESULT  VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecMul(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
HRESULT  VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecSub(LPDECIMAL pdecLeft,LPDECIMAL pdecRight,LPDECIMAL pdecResult);
HRESULT  VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecAbs(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
HRESULT  VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecFix(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
HRESULT  VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecInt(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
HRESULT  VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecNeg(LPDECIMAL pdecIn,LPDECIMAL pdecResult);
HRESULT  VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecRound(LPDECIMAL pdecIn,int cDecimals,LPDECIMAL pdecResult);
HRESULT  VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);
//C     extern HRESULT VarDecCmp(LPDECIMAL pdecLeft,LPDECIMAL pdecRight);
HRESULT  VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
//C     extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft,double dblRight);
HRESULT  VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight);
//C     extern HRESULT VarCyAdd(CY cyLeft,CY cyRight,LPCY pcyResult);
HRESULT  VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult);
//C     extern HRESULT VarCyMul(CY cyLeft,CY cyRight,LPCY pcyResult);
HRESULT  VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult);
//C     extern HRESULT VarCyMulI4(CY cyLeft,long lRight,LPCY pcyResult);
HRESULT  VarCyMulI4(CY cyLeft, int lRight, LPCY pcyResult);
//C     extern HRESULT VarCyMulI8(CY cyLeft,LONG64 lRight,LPCY pcyResult);
HRESULT  VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult);
//C     extern HRESULT VarCySub(CY cyLeft,CY cyRight,LPCY pcyResult);
HRESULT  VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult);
//C     extern HRESULT VarCyAbs(CY cyIn,LPCY pcyResult);
HRESULT  VarCyAbs(CY cyIn, LPCY pcyResult);
//C     extern HRESULT VarCyFix(CY cyIn,LPCY pcyResult);
HRESULT  VarCyFix(CY cyIn, LPCY pcyResult);
//C     extern HRESULT VarCyInt(CY cyIn,LPCY pcyResult);
HRESULT  VarCyInt(CY cyIn, LPCY pcyResult);
//C     extern HRESULT VarCyNeg(CY cyIn,LPCY pcyResult);
HRESULT  VarCyNeg(CY cyIn, LPCY pcyResult);
//C     extern HRESULT VarCyRound(CY cyIn,int cDecimals,LPCY pcyResult);
HRESULT  VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult);
//C     extern HRESULT VarCyCmp(CY cyLeft,CY cyRight);
HRESULT  VarCyCmp(CY cyLeft, CY cyRight);
//C     extern HRESULT VarCyCmpR8(CY cyLeft,double dblRight);
HRESULT  VarCyCmpR8(CY cyLeft, double dblRight);
//C     extern HRESULT VarBstrCat(BSTR bstrLeft,BSTR bstrRight,LPBSTR pbstrResult);
HRESULT  VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
//C     extern HRESULT VarBstrCmp(BSTR bstrLeft,BSTR bstrRight,LCID lcid,ULONG dwFlags);
HRESULT  VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
//C     extern HRESULT VarR8Pow(double dblLeft,double dblRight,double *pdblResult);
HRESULT  VarR8Pow(double dblLeft, double dblRight, double *pdblResult);
//C     extern HRESULT VarR4CmpR8(float fltLeft,double dblRight);
HRESULT  VarR4CmpR8(float fltLeft, double dblRight);
//C     extern HRESULT VarR8Round(double dblIn,int cDecimals,double *pdblResult);
HRESULT  VarR8Round(double dblIn, int cDecimals, double *pdblResult);
//C     typedef struct {
//C       SYSTEMTIME st;
//C       USHORT wDayOfYear;
//C     } UDATE;
struct _N200
{
    SYSTEMTIME st;
    USHORT wDayOfYear;
}
alias _N200 UDATE;
//C     extern  HRESULT VarDateFromUdate(UDATE *pudateIn,ULONG dwFlags,DATE *pdateOut);
HRESULT  VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
//C     extern  HRESULT VarDateFromUdateEx(UDATE *pudateIn,LCID lcid,ULONG dwFlags,DATE *pdateOut);
HRESULT  VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
//C     extern  HRESULT VarUdateFromDate(DATE dateIn,ULONG dwFlags,UDATE *pudateOut);
HRESULT  VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);
//C     extern  HRESULT GetAltMonthNames(LCID lcid,LPOLESTR **prgp);
HRESULT  GetAltMonthNames(LCID lcid, LPOLESTR **prgp);
//C     extern  HRESULT VarFormat(LPVARIANT pvarIn,LPOLESTR pstrFormat,int iFirstDay,int iFirstWeek,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarFormatDateTime(LPVARIANT pvarIn,int iNamedFormat,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarFormatNumber(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarFormatPercent(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarFormatCurrency(LPVARIANT pvarIn,int iNumDig,int iIncLead,int iUseParens,int iGroup,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarWeekdayName(int iWeekday,int fAbbrev,int iFirstDay,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarMonthName(int iMonth,int fAbbrev,ULONG dwFlags,BSTR *pbstrOut);
HRESULT  VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut);
//C     extern  HRESULT VarFormatFromTokens(LPVARIANT pvarIn,LPOLESTR pstrFormat,LPBYTE pbTokCur,ULONG dwFlags,BSTR *pbstrOut,LCID lcid);
HRESULT  VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid);
//C     extern  HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat,LPBYTE rgbTok,int cbTok,int iFirstDay,int iFirstWeek,LCID lcid,int *pcbActual);
HRESULT  VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual);
//C     typedef ITypeLib *LPTYPELIB;

//C     typedef ITypeInfo *LPTYPEINFO;

//C     typedef ITypeComp *LPTYPECOMP;

//C     extern  ULONG LHashValOfNameSysA(SYSKIND syskind,LCID lcid,LPCSTR szName);
ULONG  LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName);
//C     extern  ULONG LHashValOfNameSys(SYSKIND syskind,LCID lcid,const OLECHAR *szName);
ULONG  LHashValOfNameSys(SYSKIND syskind, LCID lcid, OLECHAR *szName);
//C     extern  HRESULT LoadTypeLib(const OLECHAR *szFile,ITypeLib **pptlib);
HRESULT  LoadTypeLib(OLECHAR *szFile, ITypeLib **pptlib);
//C     typedef enum tagREGKIND {
//C       REGKIND_DEFAULT,REGKIND_REGISTER,REGKIND_NONE
//C     } REGKIND;
enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE,
}
alias tagREGKIND REGKIND;
//C     extern  HRESULT LoadTypeLibEx(LPCOLESTR szFile,REGKIND regkind,ITypeLib **pptlib);
HRESULT  LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib);
//C     extern  HRESULT LoadRegTypeLib(const GUID *const rguid,WORD wVerMajor,WORD wVerMinor,LCID lcid,ITypeLib **pptlib);
HRESULT  LoadRegTypeLib(GUID *rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib);
//C     extern  HRESULT QueryPathOfRegTypeLib(const GUID *const guid,USHORT wMaj,USHORT wMin,LCID lcid,LPBSTR lpbstrPathName);
HRESULT  QueryPathOfRegTypeLib(GUID *guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName);
//C     extern  HRESULT RegisterTypeLib(ITypeLib *ptlib,OLECHAR *szFullPath,OLECHAR *szHelpDir);
HRESULT  RegisterTypeLib(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir);
//C     extern  HRESULT UnRegisterTypeLib(const GUID *const libID,WORD wVerMajor,WORD wVerMinor,LCID lcid,SYSKIND syskind);
HRESULT  UnRegisterTypeLib(GUID *libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind);
//C     extern  HRESULT CreateTypeLib(SYSKIND syskind,const OLECHAR *szFile,ICreateTypeLib **ppctlib);
HRESULT  CreateTypeLib(SYSKIND syskind, OLECHAR *szFile, ICreateTypeLib **ppctlib);
//C     extern  HRESULT CreateTypeLib2(SYSKIND syskind,LPCOLESTR szFile,ICreateTypeLib2 **ppctlib);
HRESULT  CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib);
//C     typedef IDispatch *LPDISPATCH;

//C     typedef struct tagPARAMDATA {
//C       OLECHAR *szName;
//C       VARTYPE vt;
//C     } PARAMDATA,*LPPARAMDATA;
struct tagPARAMDATA
{
    OLECHAR *szName;
    VARTYPE vt;
}
alias tagPARAMDATA PARAMDATA;
alias tagPARAMDATA *LPPARAMDATA;
//C     typedef struct tagMETHODDATA {
//C       OLECHAR *szName;
//C       PARAMDATA *ppdata;
//C       DISPID dispid;
//C       UINT iMeth;
//C       CALLCONV cc;
//C       UINT cArgs;
//C       WORD wFlags;
//C       VARTYPE vtReturn;
//C     } METHODDATA,*LPMETHODDATA;
struct tagMETHODDATA
{
    OLECHAR *szName;
    PARAMDATA *ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
}
alias tagMETHODDATA METHODDATA;
alias tagMETHODDATA *LPMETHODDATA;
//C     typedef struct tagINTERFACEDATA {
//C       METHODDATA *pmethdata;
//C       UINT cMembers;
//C     } INTERFACEDATA,*LPINTERFACEDATA;
struct tagINTERFACEDATA
{
    METHODDATA *pmethdata;
    UINT cMembers;
}
alias tagINTERFACEDATA INTERFACEDATA;
alias tagINTERFACEDATA *LPINTERFACEDATA;
//C     extern  HRESULT DispGetParam(DISPPARAMS *pdispparams,UINT position,VARTYPE vtTarg,VARIANT *pvarResult,UINT *puArgErr);
HRESULT  DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr);
//C     extern  HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo,OLECHAR **rgszNames,UINT cNames,DISPID *rgdispid);
HRESULT  DispGetIDsOfNames(ITypeInfo *ptinfo, OLECHAR **rgszNames, UINT cNames, DISPID *rgdispid);
//C     extern  HRESULT DispInvoke(void *_this,ITypeInfo *ptinfo,DISPID dispidMember,WORD wFlags,DISPPARAMS *pparams,VARIANT *pvarResult,EXCEPINFO *pexcepinfo,UINT *puArgErr);
HRESULT  DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);
//C     extern  HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata,LCID lcid,ITypeInfo **pptinfo);
HRESULT  CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo);
//C     extern  HRESULT CreateStdDispatch(IUnknown *punkOuter,void *pvThis,ITypeInfo *ptinfo,IUnknown **ppunkStdDisp);
HRESULT  CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp);
//C     extern  HRESULT DispCallFunc(void *pvInstance,ULONG_PTR oVft,CALLCONV cc,VARTYPE vtReturn,UINT cActuals,VARTYPE *prgvt,VARIANTARG **prgpvarg,VARIANT *pvargResult);
HRESULT  DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult);
//C     extern  HRESULT RegisterActiveObject(IUnknown *punk,const IID *const rclsid,DWORD dwFlags,DWORD *pdwRegister);
HRESULT  RegisterActiveObject(IUnknown *punk, IID *rclsid, DWORD dwFlags, DWORD *pdwRegister);
//C     extern  HRESULT RevokeActiveObject(DWORD dwRegister,void *pvReserved);
HRESULT  RevokeActiveObject(DWORD dwRegister, void *pvReserved);
//C     extern  HRESULT GetActiveObject(const IID *const rclsid,void *pvReserved,IUnknown **ppunk);
HRESULT  GetActiveObject(IID *rclsid, void *pvReserved, IUnknown **ppunk);
//C     extern  HRESULT SetErrorInfo(ULONG dwReserved,IErrorInfo *perrinfo);
HRESULT  SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo);
//C     extern  HRESULT GetErrorInfo(ULONG dwReserved,IErrorInfo **pperrinfo);
HRESULT  GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo);
//C     extern  HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo);
HRESULT  CreateErrorInfo(ICreateErrorInfo **pperrinfo);
//C     extern  HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo,IRecordInfo **ppRecInfo);
HRESULT  GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo);
//C     extern  HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib,ULONG uVerMajor,ULONG uVerMinor,LCID lcid,const GUID *const rGuidTypeInfo,IRecordInfo **ppRecInfo);
HRESULT  GetRecordInfoFromGuids(GUID *rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, GUID *rGuidTypeInfo, IRecordInfo **ppRecInfo);
//C     extern  ULONG OaBuildVersion(void);
ULONG  OaBuildVersion();
//C     extern  void ClearCustData(LPCUSTDATA pCustData);
void  ClearCustData(LPCUSTDATA pCustData);
//C     extern  HRESULT CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder);
HRESULT  CreateDataAdviseHolder(LPDATAADVISEHOLDER *ppDAHolder);
//C     extern  DWORD OleBuildVersion(void);
DWORD  OleBuildVersion();
//C     extern  HRESULT ReadClassStg(LPSTORAGE pStg,CLSID *pclsid);
HRESULT  ReadClassStg(LPSTORAGE pStg, CLSID *pclsid);
//C     extern  HRESULT WriteClassStg(LPSTORAGE pStg,const IID *const rclsid);
HRESULT  WriteClassStg(LPSTORAGE pStg, IID *rclsid);
//C     extern  HRESULT ReadClassStm(LPSTREAM pStm,CLSID *pclsid);
HRESULT  ReadClassStm(LPSTREAM pStm, CLSID *pclsid);
//C     extern  HRESULT WriteClassStm(LPSTREAM pStm,const IID *const rclsid);
HRESULT  WriteClassStm(LPSTREAM pStm, IID *rclsid);
//C     extern  HRESULT WriteFmtUserTypeStg (LPSTORAGE pstg,CLIPFORMAT cf,LPOLESTR lpszUserType);
HRESULT  WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
//C     extern  HRESULT ReadFmtUserTypeStg (LPSTORAGE pstg,CLIPFORMAT *pcf,LPOLESTR *lplpszUserType);
HRESULT  ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType);
//C     extern  HRESULT OleInitialize(LPVOID pvReserved);
HRESULT  OleInitialize(LPVOID pvReserved);
//C     extern  void OleUninitialize(void);
void  OleUninitialize();
//C     extern  HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
HRESULT  OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
//C     extern  HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);
HRESULT  OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);
//C     extern  HRESULT OleCreate(const IID *const rclsid,const IID *const riid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreate(IID *rclsid, IID *riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateEx(const IID *const rclsid,const IID *const riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD *rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink *lpAdviseSink,DWORD *rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateEx(IID *rclsid, IID *riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj,const IID *const riid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateFromData(LPDATAOBJECT pSrcDataObj, IID *riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj,const IID *const riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD *rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink *lpAdviseSink,DWORD *rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, IID *riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj,const IID *const riid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, IID *riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj,const IID *const riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD *rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink *lpAdviseSink,DWORD *rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, IID *riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj,const IID *const iid,DWORD renderopt,LPFORMATETC pFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, IID *iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateLink(LPMONIKER pmkLinkSrc,const IID *const riid,DWORD renderopt,LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateLink(LPMONIKER pmkLinkSrc, IID *riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc,const IID *const riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD *rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink *lpAdviseSink,DWORD *rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateLinkEx(LPMONIKER pmkLinkSrc, IID *riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName,const IID *const riid,DWORD renderopt,LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateLinkToFile(LPCOLESTR lpszFileName, IID *riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName,const IID *const riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD *rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink *lpAdviseSink,DWORD *rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateLinkToFileEx(LPCOLESTR lpszFileName, IID *riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateFromFile(const IID *const rclsid,LPCOLESTR lpszFileName,const IID *const riid,DWORD renderopt,LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateFromFile(IID *rclsid, LPCOLESTR lpszFileName, IID *riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleCreateFromFileEx(const IID *const rclsid,LPCOLESTR lpszFileName,const IID *const riid,DWORD dwFlags,DWORD renderopt,ULONG cFormats,DWORD *rgAdvf,LPFORMATETC rgFormatEtc,IAdviseSink *lpAdviseSink,DWORD *rgdwConnection,LPOLECLIENTSITE pClientSite,LPSTORAGE pStg,LPVOID *ppvObj);
HRESULT  OleCreateFromFileEx(IID *rclsid, LPCOLESTR lpszFileName, IID *riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj);
//C     extern  HRESULT OleLoad(LPSTORAGE pStg,const IID *const riid,LPOLECLIENTSITE pClientSite,LPVOID *ppvObj);
HRESULT  OleLoad(LPSTORAGE pStg, IID *riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj);
//C     extern  HRESULT OleSave(LPPERSISTSTORAGE pPS,LPSTORAGE pStg,WINBOOL fSameAsLoad);
HRESULT  OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, WINBOOL fSameAsLoad);
//C     extern  HRESULT OleLoadFromStream(LPSTREAM pStm,const IID *const iidInterface,LPVOID *ppvObj);
HRESULT  OleLoadFromStream(LPSTREAM pStm, IID *iidInterface, LPVOID *ppvObj);
//C     extern  HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm,LPSTREAM pStm);
HRESULT  OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm);
//C     extern  HRESULT OleSetContainedObject(LPUNKNOWN pUnknown,WINBOOL fContained);
HRESULT  OleSetContainedObject(LPUNKNOWN pUnknown, WINBOOL fContained);
//C     extern  HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown,WINBOOL fVisible);
HRESULT  OleNoteObjectVisible(LPUNKNOWN pUnknown, WINBOOL fVisible);
//C     extern  HRESULT RegisterDragDrop(HWND hwnd,LPDROPTARGET pDropTarget);
HRESULT  RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
//C     extern  HRESULT RevokeDragDrop(HWND hwnd);
HRESULT  RevokeDragDrop(HWND hwnd);
//C     extern  HRESULT DoDragDrop(LPDATAOBJECT pDataObj,LPDROPSOURCE pDropSource,DWORD dwOKEffects,LPDWORD pdwEffect);
HRESULT  DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect);
//C     extern  HRESULT OleSetClipboard(LPDATAOBJECT pDataObj);
HRESULT  OleSetClipboard(LPDATAOBJECT pDataObj);
//C     extern  HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj);
HRESULT  OleGetClipboard(LPDATAOBJECT *ppDataObj);
//C     extern  HRESULT OleFlushClipboard(void);
HRESULT  OleFlushClipboard();
//C     extern  HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj);
HRESULT  OleIsCurrentClipboard(LPDATAOBJECT pDataObj);
//C     extern  HOLEMENU OleCreateMenuDescriptor (HMENU hmenuCombined,LPOLEMENUGROUPWIDTHS lpMenuWidths);
HOLEMENU  OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths);
//C     extern  HRESULT OleSetMenuDescriptor (HOLEMENU holemenu,HWND hwndFrame,HWND hwndActiveObject,LPOLEINPLACEFRAME lpFrame,LPOLEINPLACEACTIVEOBJECT lpActiveObj);
HRESULT  OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj);
//C     extern  HRESULT OleDestroyMenuDescriptor (HOLEMENU holemenu);
HRESULT  OleDestroyMenuDescriptor(HOLEMENU holemenu);
//C     extern  HRESULT OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame,LPOLEINPLACEFRAMEINFO lpFrameInfo,LPMSG lpmsg);
HRESULT  OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);
//C     extern  HANDLE OleDuplicateData (HANDLE hSrc,CLIPFORMAT cfFormat,UINT uiFlags);
HANDLE  OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
//C     extern  HRESULT OleDraw (LPUNKNOWN pUnknown,DWORD dwAspect,HDC hdcDraw,LPCRECT lprcBounds);
HRESULT  OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
//C     extern  HRESULT OleRun(LPUNKNOWN pUnknown);
HRESULT  OleRun(LPUNKNOWN pUnknown);
//C     extern  WINBOOL OleIsRunning(LPOLEOBJECT pObject);
WINBOOL  OleIsRunning(LPOLEOBJECT pObject);
//C     extern  HRESULT OleLockRunning(LPUNKNOWN pUnknown,WINBOOL fLock,WINBOOL fLastUnlockCloses);
HRESULT  OleLockRunning(LPUNKNOWN pUnknown, WINBOOL fLock, WINBOOL fLastUnlockCloses);
//C     extern  void ReleaseStgMedium(LPSTGMEDIUM);
void  ReleaseStgMedium(LPSTGMEDIUM );
//C     extern  HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder);
HRESULT  CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder);
//C     extern  HRESULT OleCreateDefaultHandler(const IID *const clsid,LPUNKNOWN pUnkOuter,const IID *const riid,LPVOID *lplpObj);
HRESULT  OleCreateDefaultHandler(IID *clsid, LPUNKNOWN pUnkOuter, IID *riid, LPVOID *lplpObj);
//C     extern  HRESULT OleCreateEmbeddingHelper(const IID *const clsid,LPUNKNOWN pUnkOuter,DWORD flags,LPCLASSFACTORY pCF,const IID *const riid,LPVOID *lplpObj);
HRESULT  OleCreateEmbeddingHelper(IID *clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, IID *riid, LPVOID *lplpObj);
//C     extern  WINBOOL IsAccelerator(HACCEL hAccel,int cAccelEntries,LPMSG lpMsg,WORD *lpwCmd);
WINBOOL  IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd);
//C     extern  HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath,WINBOOL fUseFileAsLabel);
HGLOBAL  OleGetIconOfFile(LPOLESTR lpszPath, WINBOOL fUseFileAsLabel);
//C     extern  HGLOBAL OleGetIconOfClass(const IID *const rclsid,LPOLESTR lpszLabel,WINBOOL fUseTypeAsLabel);
HGLOBAL  OleGetIconOfClass(IID *rclsid, LPOLESTR lpszLabel, WINBOOL fUseTypeAsLabel);
//C     extern  HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon,LPOLESTR lpszLabel,LPOLESTR lpszSourceFile,UINT iIconIndex);
HGLOBAL  OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
//C     extern  HRESULT OleRegGetUserType (const IID *const clsid,DWORD dwFormOfType,LPOLESTR *pszUserType);
HRESULT  OleRegGetUserType(IID *clsid, DWORD dwFormOfType, LPOLESTR *pszUserType);
//C     extern  HRESULT OleRegGetMiscStatus (const IID *const clsid,DWORD dwAspect,DWORD *pdwStatus);
HRESULT  OleRegGetMiscStatus(IID *clsid, DWORD dwAspect, DWORD *pdwStatus);
//C     extern  HRESULT OleRegEnumFormatEtc (const IID *const clsid,DWORD dwDirection,LPENUMFORMATETC *ppenum);
HRESULT  OleRegEnumFormatEtc(IID *clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum);
//C     extern  HRESULT OleRegEnumVerbs (const IID *const clsid,LPENUMOLEVERB *ppenum);
HRESULT  OleRegEnumVerbs(IID *clsid, LPENUMOLEVERB *ppenum);
//C     typedef struct _OLESTREAM *LPOLESTREAM;
alias _OLESTREAM *LPOLESTREAM;
//C     typedef struct _OLESTREAMVTBL {
//C       DWORD ( *Get)(LPOLESTREAM,void *,DWORD);
//C       DWORD ( *Put)(LPOLESTREAM,const void *,DWORD);
//C     } OLESTREAMVTBL;
struct _OLESTREAMVTBL
{
    DWORD  function(LPOLESTREAM , void *, DWORD )Get;
    DWORD  function(LPOLESTREAM , void *, DWORD )Put;
}
alias _OLESTREAMVTBL OLESTREAMVTBL;
//C     typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
alias OLESTREAMVTBL *LPOLESTREAMVTBL;
//C     typedef struct _OLESTREAM {
//C       LPOLESTREAMVTBL lpstbl;
//C     } OLESTREAM;
struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
}
alias _OLESTREAM OLESTREAM;
//C     extern  HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream,LPSTORAGE pstg,const DVTARGETDEVICE *ptd);
HRESULT  OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, DVTARGETDEVICE *ptd);
//C     extern  HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg,LPOLESTREAM lpolestream);
HRESULT  OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream);
//C     extern  HRESULT GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt,HGLOBAL *phglobal);
HRESULT  GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL *phglobal);
//C     extern  HRESULT CreateILockBytesOnHGlobal (HGLOBAL hGlobal,WINBOOL fDeleteOnRelease,LPLOCKBYTES *pplkbyt);
HRESULT  CreateILockBytesOnHGlobal(HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt);
//C     extern  HRESULT GetHGlobalFromStream (LPSTREAM pstm,HGLOBAL *phglobal);
HRESULT  GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal);
//C     extern  HRESULT CreateStreamOnHGlobal (HGLOBAL hGlobal,WINBOOL fDeleteOnRelease,LPSTREAM *ppstm);
HRESULT  CreateStreamOnHGlobal(HGLOBAL hGlobal, WINBOOL fDeleteOnRelease, LPSTREAM *ppstm);
//C     extern  HRESULT OleDoAutoConvert(LPSTORAGE pStg,LPCLSID pClsidNew);
HRESULT  OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
//C     extern  HRESULT OleGetAutoConvert(const IID *const clsidOld,LPCLSID pClsidNew);
HRESULT  OleGetAutoConvert(IID *clsidOld, LPCLSID pClsidNew);
//C     extern  HRESULT OleSetAutoConvert(const IID *const clsidOld,const IID *const clsidNew);
HRESULT  OleSetAutoConvert(IID *clsidOld, IID *clsidNew);
//C     extern  HRESULT GetConvertStg(LPSTORAGE pStg);
HRESULT  GetConvertStg(LPSTORAGE pStg);
//C     extern  HRESULT SetConvertStg(LPSTORAGE pStg,WINBOOL fConvert);
HRESULT  SetConvertStg(LPSTORAGE pStg, WINBOOL fConvert);
//C     extern  HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg,CLIPFORMAT cfFormat,LONG lWidth,LONG lHeight,DWORD dwSize,LPSTGMEDIUM pmedium,LPOLESTREAM polestm);
HRESULT  OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm);
//C     extern  HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm,LPSTORAGE pstg,CLIPFORMAT *pcfFormat,LONG *plwWidth,LONG *plHeight,DWORD *pdwSize,LPSTGMEDIUM pmedium);
HRESULT  OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium);
//C     extern const GUID GUID_DEVINTERFACE_DISK;
extern const GUID GUID_DEVINTERFACE_DISK;
//C     extern const GUID GUID_DEVINTERFACE_CDROM;
extern const GUID GUID_DEVINTERFACE_CDROM;
//C     extern const GUID GUID_DEVINTERFACE_PARTITION;
extern const GUID GUID_DEVINTERFACE_PARTITION;
//C     extern const GUID GUID_DEVINTERFACE_TAPE;
extern const GUID GUID_DEVINTERFACE_TAPE;
//C     extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
//C     extern const GUID GUID_DEVINTERFACE_VOLUME;
extern const GUID GUID_DEVINTERFACE_VOLUME;
//C     extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
//C     extern const GUID GUID_DEVINTERFACE_FLOPPY;
extern const GUID GUID_DEVINTERFACE_FLOPPY;
//C     extern const GUID GUID_DEVINTERFACE_CDCHANGER;
extern const GUID GUID_DEVINTERFACE_CDCHANGER;
//C     extern const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern const GUID GUID_DEVINTERFACE_STORAGEPORT;
//C     extern const GUID GUID_DEVINTERFACE_COMPORT;
extern const GUID GUID_DEVINTERFACE_COMPORT;
//C     extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
extern const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
//C       typedef struct _STORAGE_HOTPLUG_INFO {
//C         DWORD Size;
//C         BOOLEAN MediaRemovable;
//C         BOOLEAN MediaHotplug;
//C         BOOLEAN DeviceHotplug;
//C         BOOLEAN WriteCacheEnableOverride;
//C       } STORAGE_HOTPLUG_INFO,*PSTORAGE_HOTPLUG_INFO;
struct _STORAGE_HOTPLUG_INFO
{
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
}
alias _STORAGE_HOTPLUG_INFO STORAGE_HOTPLUG_INFO;
alias _STORAGE_HOTPLUG_INFO *PSTORAGE_HOTPLUG_INFO;
//C       typedef struct _STORAGE_DEVICE_NUMBER {
//C         DWORD DeviceType;
//C         DWORD DeviceNumber;
//C         DWORD PartitionNumber;
//C       } STORAGE_DEVICE_NUMBER,*PSTORAGE_DEVICE_NUMBER;
struct _STORAGE_DEVICE_NUMBER
{
    DWORD DeviceType;
    DWORD DeviceNumber;
    DWORD PartitionNumber;
}
alias _STORAGE_DEVICE_NUMBER STORAGE_DEVICE_NUMBER;
alias _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER;
//C       typedef struct _STORAGE_BUS_RESET_REQUEST {
//C         BYTE PathId;
//C       } STORAGE_BUS_RESET_REQUEST,*PSTORAGE_BUS_RESET_REQUEST;
struct _STORAGE_BUS_RESET_REQUEST
{
    BYTE PathId;
}
alias _STORAGE_BUS_RESET_REQUEST STORAGE_BUS_RESET_REQUEST;
alias _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST;
//C       typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
//C         DWORD Length;
//C         BYTE _unused;
//C         BYTE PathId;
//C         BYTE TargetId;
//C         BYTE Lun;
//C       } STORAGE_BREAK_RESERVATION_REQUEST,*PSTORAGE_BREAK_RESERVATION_REQUEST;
struct STORAGE_BREAK_RESERVATION_REQUEST
{
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
}
alias STORAGE_BREAK_RESERVATION_REQUEST *PSTORAGE_BREAK_RESERVATION_REQUEST;
//C       typedef struct _PREVENT_MEDIA_REMOVAL {
//C         BOOLEAN PreventMediaRemoval;
//C       } PREVENT_MEDIA_REMOVAL,*PPREVENT_MEDIA_REMOVAL;
struct _PREVENT_MEDIA_REMOVAL
{
    BOOLEAN PreventMediaRemoval;
}
alias _PREVENT_MEDIA_REMOVAL PREVENT_MEDIA_REMOVAL;
alias _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL;
//C       typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
//C         DWORD MediaChangeCount;
//C         DWORD NewState;
//C       } CLASS_MEDIA_CHANGE_CONTEXT,*PCLASS_MEDIA_CHANGE_CONTEXT;
struct _CLASS_MEDIA_CHANGE_CONTEXT
{
    DWORD MediaChangeCount;
    DWORD NewState;
}
alias _CLASS_MEDIA_CHANGE_CONTEXT CLASS_MEDIA_CHANGE_CONTEXT;
alias _CLASS_MEDIA_CHANGE_CONTEXT *PCLASS_MEDIA_CHANGE_CONTEXT;
//C       typedef struct _TAPE_STATISTICS {
//C         DWORD Version;
//C         DWORD Flags;
//C         LARGE_INTEGER RecoveredWrites;
//C         LARGE_INTEGER UnrecoveredWrites;
//C         LARGE_INTEGER RecoveredReads;
//C         LARGE_INTEGER UnrecoveredReads;
//C         BYTE CompressionRatioReads;
//C         BYTE CompressionRatioWrites;
//C       } TAPE_STATISTICS,*PTAPE_STATISTICS;
struct _TAPE_STATISTICS
{
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
}
alias _TAPE_STATISTICS TAPE_STATISTICS;
alias _TAPE_STATISTICS *PTAPE_STATISTICS;
//C       typedef struct _TAPE_GET_STATISTICS {
//C         DWORD Operation;
//C       } TAPE_GET_STATISTICS,*PTAPE_GET_STATISTICS;
struct _TAPE_GET_STATISTICS
{
    DWORD Operation;
}
alias _TAPE_GET_STATISTICS TAPE_GET_STATISTICS;
alias _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS;
//C       typedef enum _STORAGE_MEDIA_TYPE {
//C         DDS_4mm = 0x20,
//C         MiniQic,
//C         Travan,
//C         QIC,
//C         MP_8mm,
//C         AME_8mm,
//C         AIT1_8mm,
//C         DLT,
//C         NCTP,
//C         IBM_3480,
//C         IBM_3490E,
//C         IBM_Magstar_3590,
//C         IBM_Magstar_MP,
//C         STK_DATA_D3,
//C         SONY_DTF,
//C         DV_6mm,
//C         DMI,
//C         SONY_D2,
//C         CLEANER_CARTRIDGE,
//C         CD_ROM,
//C         CD_R,
//C         CD_RW,
//C         DVD_ROM,
//C         DVD_R,
//C         DVD_RW,
//C         MO_3_RW,
//C         MO_5_WO,
//C         MO_5_RW,
//C         MO_5_LIMDOW,
//C         PC_5_WO,
//C         PC_5_RW,
//C         PD_5_RW,
//C         ABL_5_WO,
//C         PINNACLE_APEX_5_RW,
//C         SONY_12_WO,
//C         PHILIPS_12_WO,
//C         HITACHI_12_WO,
//C         CYGNET_12_WO,
//C         KODAK_14_WO,
//C         MO_NFR_525,
//C         NIKON_12_RW,
//C         IOMEGA_ZIP,
//C         IOMEGA_JAZ,
//C         SYQUEST_EZ135,
//C         SYQUEST_EZFLYER,
//C         SYQUEST_SYJET,
//C         AVATAR_F2,
//C         MP2_8mm,
//C         DST_S,
//C         DST_M,
//C         DST_L,
//C         VXATape_1,
//C         VXATape_2,
//C         STK_9840,
//C         LTO_Ultrium,
//C         LTO_Accelis,
//C         DVD_RAM,
//C         AIT_8mm,
//C         ADR_1,
//C         ADR_2,
//C         STK_9940,
//C         SAIT,
//C         VXATape
//C       } STORAGE_MEDIA_TYPE,*PSTORAGE_MEDIA_TYPE;
enum _STORAGE_MEDIA_TYPE
{
    DDS_4mm = 32,
    MiniQic,
    Travan,
    QIC,
    MP_8mm,
    AME_8mm,
    AIT1_8mm,
    DLT,
    NCTP,
    IBM_3480,
    IBM_3490E,
    IBM_Magstar_3590,
    IBM_Magstar_MP,
    STK_DATA_D3,
    SONY_DTF,
    DV_6mm,
    DMI,
    SONY_D2,
    CLEANER_CARTRIDGE,
    CD_ROM,
    CD_R,
    CD_RW,
    DVD_ROM,
    DVD_R,
    DVD_RW,
    MO_3_RW,
    MO_5_WO,
    MO_5_RW,
    MO_5_LIMDOW,
    PC_5_WO,
    PC_5_RW,
    PD_5_RW,
    ABL_5_WO,
    PINNACLE_APEX_5_RW,
    SONY_12_WO,
    PHILIPS_12_WO,
    HITACHI_12_WO,
    CYGNET_12_WO,
    KODAK_14_WO,
    MO_NFR_525,
    NIKON_12_RW,
    IOMEGA_ZIP,
    IOMEGA_JAZ,
    SYQUEST_EZ135,
    SYQUEST_EZFLYER,
    SYQUEST_SYJET,
    AVATAR_F2,
    MP2_8mm,
    DST_S,
    DST_M,
    DST_L,
    VXATape_1,
    VXATape_2,
    STK_9840,
    LTO_Ultrium,
    LTO_Accelis,
    DVD_RAM,
    AIT_8mm,
    ADR_1,
    ADR_2,
    STK_9940,
    SAIT,
    VXATape,
}
alias _STORAGE_MEDIA_TYPE STORAGE_MEDIA_TYPE;
alias _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE;
//C       typedef enum _STORAGE_BUS_TYPE {
//C         BusTypeUnknown = 0x00,
//C         BusTypeScsi = 0x1,
//C         BusTypeAtapi = 0x2,
//C         BusTypeAta = 0x3,
//C         BusType1394 = 0x4,
//C         BusTypeSsa = 0x5,
//C         BusTypeFibre = 0x6,
//C         BusTypeUsb = 0x7,
//C         BusTypeRAID = 0x8,
//C         BusTypeMax,
//C         BusTypeMaxReserved = 0x7F
//C       } STORAGE_BUS_TYPE,*PSTORAGE_BUS_TYPE;
enum _STORAGE_BUS_TYPE
{
    BusTypeUnknown,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeMax,
    BusTypeMaxReserved = 127,
}
alias _STORAGE_BUS_TYPE STORAGE_BUS_TYPE;
alias _STORAGE_BUS_TYPE *PSTORAGE_BUS_TYPE;
//C       typedef struct _DEVICE_MEDIA_INFO {
//C         union {
//C           struct {
//C      LARGE_INTEGER Cylinders;
//C      STORAGE_MEDIA_TYPE MediaType;
//C      DWORD TracksPerCylinder;
//C      DWORD SectorsPerTrack;
//C      DWORD BytesPerSector;
//C      DWORD NumberMediaSides;
//C      DWORD MediaCharacteristics;
//C           } DiskInfo;
struct _N202
{
    LARGE_INTEGER Cylinders;
    STORAGE_MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
    DWORD NumberMediaSides;
    DWORD MediaCharacteristics;
}
//C           struct {
//C      LARGE_INTEGER Cylinders;
//C      STORAGE_MEDIA_TYPE MediaType;
//C      DWORD TracksPerCylinder;
//C      DWORD SectorsPerTrack;
//C      DWORD BytesPerSector;
//C      DWORD NumberMediaSides;
//C      DWORD MediaCharacteristics;
//C           } RemovableDiskInfo;
struct _N203
{
    LARGE_INTEGER Cylinders;
    STORAGE_MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
    DWORD NumberMediaSides;
    DWORD MediaCharacteristics;
}
//C           struct {
//C      STORAGE_MEDIA_TYPE MediaType;
//C      DWORD MediaCharacteristics;
//C      DWORD CurrentBlockSize;
//C      STORAGE_BUS_TYPE BusType;
//C      union {
//C        struct {
//C          BYTE MediumType;
//C          BYTE DensityCode;
//C        } ScsiInformation;
struct _N206
{
    BYTE MediumType;
    BYTE DensityCode;
}
//C      } BusSpecificData;
union _N205
{
    _N206 ScsiInformation;
}
//C           } TapeInfo;
struct _N204
{
    STORAGE_MEDIA_TYPE MediaType;
    DWORD MediaCharacteristics;
    DWORD CurrentBlockSize;
    STORAGE_BUS_TYPE BusType;
    _N205 BusSpecificData;
}
//C         } DeviceSpecific;
union _N201
{
    _N202 DiskInfo;
    _N203 RemovableDiskInfo;
    _N204 TapeInfo;
}
//C       } DEVICE_MEDIA_INFO,*PDEVICE_MEDIA_INFO;
struct _DEVICE_MEDIA_INFO
{
    _N201 DeviceSpecific;
}
alias _DEVICE_MEDIA_INFO DEVICE_MEDIA_INFO;
alias _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO;
//C       typedef struct _GET_MEDIA_TYPES {
//C         DWORD DeviceType;
//C         DWORD MediaInfoCount;
//C         DEVICE_MEDIA_INFO MediaInfo[1];
//C       } GET_MEDIA_TYPES,*PGET_MEDIA_TYPES;
struct _GET_MEDIA_TYPES
{
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO [1]MediaInfo;
}
alias _GET_MEDIA_TYPES GET_MEDIA_TYPES;
alias _GET_MEDIA_TYPES *PGET_MEDIA_TYPES;
//C       typedef struct _STORAGE_PREDICT_FAILURE {
//C         DWORD PredictFailure;
//C         BYTE VendorSpecific[512];
//C       } STORAGE_PREDICT_FAILURE,*PSTORAGE_PREDICT_FAILURE;
struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE [512]VendorSpecific;
}
alias _STORAGE_PREDICT_FAILURE STORAGE_PREDICT_FAILURE;
alias _STORAGE_PREDICT_FAILURE *PSTORAGE_PREDICT_FAILURE;
//C     typedef enum _MEDIA_TYPE {
//C       Unknown,F5_1Pt2_512,F3_1Pt44_512,F3_2Pt88_512,F3_20Pt8_512,F3_720_512,F5_360_512,F5_320_512,F5_320_1024,F5_180_512,F5_160_512,
//C       RemovableMedia,FixedMedia,F3_120M_512,F3_640_512,F5_640_512,F5_720_512,F3_1Pt2_512,F3_1Pt23_1024,F5_1Pt23_1024,F3_128Mb_512,
//C       F3_230Mb_512,F8_256_128,F3_200Mb_512,F3_240M_512,F3_32M_512
//C     } MEDIA_TYPE,*PMEDIA_TYPE;
enum _MEDIA_TYPE
{
    Unknown,
    F5_1Pt2_512,
    F3_1Pt44_512,
    F3_2Pt88_512,
    F3_20Pt8_512,
    F3_720_512,
    F5_360_512,
    F5_320_512,
    F5_320_1024,
    F5_180_512,
    F5_160_512,
    RemovableMedia,
    FixedMedia,
    F3_120M_512,
    F3_640_512,
    F5_640_512,
    F5_720_512,
    F3_1Pt2_512,
    F3_1Pt23_1024,
    F5_1Pt23_1024,
    F3_128Mb_512,
    F3_230Mb_512,
    F8_256_128,
    F3_200Mb_512,
    F3_240M_512,
    F3_32M_512,
}
alias _MEDIA_TYPE MEDIA_TYPE;
alias _MEDIA_TYPE *PMEDIA_TYPE;
//C     typedef struct _FORMAT_PARAMETERS {
//C       MEDIA_TYPE MediaType;
//C       DWORD StartCylinderNumber;
//C       DWORD EndCylinderNumber;
//C       DWORD StartHeadNumber;
//C       DWORD EndHeadNumber;
//C     } FORMAT_PARAMETERS,*PFORMAT_PARAMETERS;
struct _FORMAT_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
}
alias _FORMAT_PARAMETERS FORMAT_PARAMETERS;
alias _FORMAT_PARAMETERS *PFORMAT_PARAMETERS;
//C     typedef WORD BAD_TRACK_NUMBER;
alias WORD BAD_TRACK_NUMBER;
//C     typedef WORD *PBAD_TRACK_NUMBER;
alias WORD *PBAD_TRACK_NUMBER;
//C     typedef struct _FORMAT_EX_PARAMETERS {
//C       MEDIA_TYPE MediaType;
//C       DWORD StartCylinderNumber;
//C       DWORD EndCylinderNumber;
//C       DWORD StartHeadNumber;
//C       DWORD EndHeadNumber;
//C       WORD FormatGapLength;
//C       WORD SectorsPerTrack;
//C       WORD SectorNumber[1];
//C     } FORMAT_EX_PARAMETERS,*PFORMAT_EX_PARAMETERS;
struct _FORMAT_EX_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
    WORD FormatGapLength;
    WORD SectorsPerTrack;
    WORD [1]SectorNumber;
}
alias _FORMAT_EX_PARAMETERS FORMAT_EX_PARAMETERS;
alias _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS;
//C     typedef struct _DISK_GEOMETRY {
//C       LARGE_INTEGER Cylinders;
//C       MEDIA_TYPE MediaType;
//C       DWORD TracksPerCylinder;
//C       DWORD SectorsPerTrack;
//C       DWORD BytesPerSector;
//C     } DISK_GEOMETRY,*PDISK_GEOMETRY;
struct _DISK_GEOMETRY
{
    LARGE_INTEGER Cylinders;
    MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
}
alias _DISK_GEOMETRY DISK_GEOMETRY;
alias _DISK_GEOMETRY *PDISK_GEOMETRY;
//C     typedef struct _PARTITION_INFORMATION {
//C       LARGE_INTEGER StartingOffset;
//C       LARGE_INTEGER PartitionLength;
//C       DWORD HiddenSectors;
//C       DWORD PartitionNumber;
//C       BYTE PartitionType;
//C       BOOLEAN BootIndicator;
//C       BOOLEAN RecognizedPartition;
//C       BOOLEAN RewritePartition;
//C     } PARTITION_INFORMATION,*PPARTITION_INFORMATION;
struct _PARTITION_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
}
alias _PARTITION_INFORMATION PARTITION_INFORMATION;
alias _PARTITION_INFORMATION *PPARTITION_INFORMATION;
//C     typedef struct _SET_PARTITION_INFORMATION {
//C       BYTE PartitionType;
//C     } SET_PARTITION_INFORMATION,*PSET_PARTITION_INFORMATION;
struct _SET_PARTITION_INFORMATION
{
    BYTE PartitionType;
}
alias _SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION;
alias _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION;
//C     typedef struct _DRIVE_LAYOUT_INFORMATION {
//C       DWORD PartitionCount;
//C       DWORD Signature;
//C       PARTITION_INFORMATION PartitionEntry[1];
//C     } DRIVE_LAYOUT_INFORMATION,*PDRIVE_LAYOUT_INFORMATION;
struct _DRIVE_LAYOUT_INFORMATION
{
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION [1]PartitionEntry;
}
alias _DRIVE_LAYOUT_INFORMATION DRIVE_LAYOUT_INFORMATION;
alias _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION;
//C     typedef struct _VERIFY_INFORMATION {
//C       LARGE_INTEGER StartingOffset;
//C       DWORD Length;
//C     } VERIFY_INFORMATION,*PVERIFY_INFORMATION;
struct _VERIFY_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    DWORD Length;
}
alias _VERIFY_INFORMATION VERIFY_INFORMATION;
alias _VERIFY_INFORMATION *PVERIFY_INFORMATION;
//C     typedef struct _REASSIGN_BLOCKS {
//C       WORD Reserved;
//C       WORD Count;
//C       DWORD BlockNumber[1];
//C     } REASSIGN_BLOCKS,*PREASSIGN_BLOCKS;
struct _REASSIGN_BLOCKS
{
    WORD Reserved;
    WORD Count;
    DWORD [1]BlockNumber;
}
alias _REASSIGN_BLOCKS REASSIGN_BLOCKS;
alias _REASSIGN_BLOCKS *PREASSIGN_BLOCKS;
//C     typedef struct _REASSIGN_BLOCKS_EX {
//C       WORD Reserved;
//C       WORD Count;
//C       LARGE_INTEGER BlockNumber[1];
//C     } REASSIGN_BLOCKS_EX,*PREASSIGN_BLOCKS_EX;
struct _REASSIGN_BLOCKS_EX
{
    WORD Reserved;
    WORD Count;
    LARGE_INTEGER [1]BlockNumber;
}
alias _REASSIGN_BLOCKS_EX REASSIGN_BLOCKS_EX;
alias _REASSIGN_BLOCKS_EX *PREASSIGN_BLOCKS_EX;
//C     typedef enum _PARTITION_STYLE {
//C       PARTITION_STYLE_MBR,PARTITION_STYLE_GPT,PARTITION_STYLE_RAW
//C     } PARTITION_STYLE;
enum _PARTITION_STYLE
{
    PARTITION_STYLE_MBR,
    PARTITION_STYLE_GPT,
    PARTITION_STYLE_RAW,
}
alias _PARTITION_STYLE PARTITION_STYLE;
//C     typedef struct _PARTITION_INFORMATION_GPT {
//C       GUID PartitionType;
//C       GUID PartitionId;
//C       DWORD64 Attributes;
//C       WCHAR Name [36];
//C     } PARTITION_INFORMATION_GPT,*PPARTITION_INFORMATION_GPT;
struct _PARTITION_INFORMATION_GPT
{
    GUID PartitionType;
    GUID PartitionId;
    DWORD64 Attributes;
    WCHAR [36]Name;
}
alias _PARTITION_INFORMATION_GPT PARTITION_INFORMATION_GPT;
alias _PARTITION_INFORMATION_GPT *PPARTITION_INFORMATION_GPT;
//C     typedef struct _PARTITION_INFORMATION_MBR {
//C       BYTE PartitionType;
//C       BOOLEAN BootIndicator;
//C       BOOLEAN RecognizedPartition;
//C       DWORD HiddenSectors;
//C     } PARTITION_INFORMATION_MBR,*PPARTITION_INFORMATION_MBR;
struct _PARTITION_INFORMATION_MBR
{
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    DWORD HiddenSectors;
}
alias _PARTITION_INFORMATION_MBR PARTITION_INFORMATION_MBR;
alias _PARTITION_INFORMATION_MBR *PPARTITION_INFORMATION_MBR;
//C     typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
alias SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
//C     typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;
alias PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;
//C     typedef struct _SET_PARTITION_INFORMATION_EX {
//C       PARTITION_STYLE PartitionStyle;
//C        union {
//C         SET_PARTITION_INFORMATION_MBR Mbr;
//C         SET_PARTITION_INFORMATION_GPT Gpt;
//C       } ;
union _N207
{
    SET_PARTITION_INFORMATION_MBR Mbr;
    SET_PARTITION_INFORMATION_GPT Gpt;
}
//C     } SET_PARTITION_INFORMATION_EX,*PSET_PARTITION_INFORMATION_EX;
struct _SET_PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;
    SET_PARTITION_INFORMATION_MBR Mbr;
    SET_PARTITION_INFORMATION_GPT Gpt;
}
alias _SET_PARTITION_INFORMATION_EX SET_PARTITION_INFORMATION_EX;
alias _SET_PARTITION_INFORMATION_EX *PSET_PARTITION_INFORMATION_EX;
//C     typedef struct _CREATE_DISK_GPT {
//C       GUID DiskId;
//C       DWORD MaxPartitionCount;
//C     } CREATE_DISK_GPT,*PCREATE_DISK_GPT;
struct _CREATE_DISK_GPT
{
    GUID DiskId;
    DWORD MaxPartitionCount;
}
alias _CREATE_DISK_GPT CREATE_DISK_GPT;
alias _CREATE_DISK_GPT *PCREATE_DISK_GPT;
//C     typedef struct _CREATE_DISK_MBR {
//C       DWORD Signature;
//C     } CREATE_DISK_MBR,*PCREATE_DISK_MBR;
struct _CREATE_DISK_MBR
{
    DWORD Signature;
}
alias _CREATE_DISK_MBR CREATE_DISK_MBR;
alias _CREATE_DISK_MBR *PCREATE_DISK_MBR;
//C     typedef struct _CREATE_DISK {
//C       PARTITION_STYLE PartitionStyle;
//C        union {
//C         CREATE_DISK_MBR Mbr;
//C         CREATE_DISK_GPT Gpt;
//C       } ;
union _N208
{
    CREATE_DISK_MBR Mbr;
    CREATE_DISK_GPT Gpt;
}
//C     } CREATE_DISK,*PCREATE_DISK;
struct _CREATE_DISK
{
    PARTITION_STYLE PartitionStyle;
    CREATE_DISK_MBR Mbr;
    CREATE_DISK_GPT Gpt;
}
alias _CREATE_DISK CREATE_DISK;
alias _CREATE_DISK *PCREATE_DISK;
//C     typedef struct _GET_LENGTH_INFORMATION {
//C       LARGE_INTEGER Length;
//C     } GET_LENGTH_INFORMATION,*PGET_LENGTH_INFORMATION;
struct _GET_LENGTH_INFORMATION
{
    LARGE_INTEGER Length;
}
alias _GET_LENGTH_INFORMATION GET_LENGTH_INFORMATION;
alias _GET_LENGTH_INFORMATION *PGET_LENGTH_INFORMATION;
//C     typedef struct _PARTITION_INFORMATION_EX {
//C       PARTITION_STYLE PartitionStyle;
//C       LARGE_INTEGER StartingOffset;
//C       LARGE_INTEGER PartitionLength;
//C       DWORD PartitionNumber;
//C       BOOLEAN RewritePartition;
//C        union {
//C         PARTITION_INFORMATION_MBR Mbr;
//C         PARTITION_INFORMATION_GPT Gpt;
//C       } ;
union _N209
{
    PARTITION_INFORMATION_MBR Mbr;
    PARTITION_INFORMATION_GPT Gpt;
}
//C     } PARTITION_INFORMATION_EX,*PPARTITION_INFORMATION_EX;
struct _PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD PartitionNumber;
    BOOLEAN RewritePartition;
    PARTITION_INFORMATION_MBR Mbr;
    PARTITION_INFORMATION_GPT Gpt;
}
alias _PARTITION_INFORMATION_EX PARTITION_INFORMATION_EX;
alias _PARTITION_INFORMATION_EX *PPARTITION_INFORMATION_EX;
//C     typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
//C       GUID DiskId;
//C       LARGE_INTEGER StartingUsableOffset;
//C       LARGE_INTEGER UsableLength;
//C       DWORD MaxPartitionCount;
//C     } DRIVE_LAYOUT_INFORMATION_GPT,*PDRIVE_LAYOUT_INFORMATION_GPT;
struct _DRIVE_LAYOUT_INFORMATION_GPT
{
    GUID DiskId;
    LARGE_INTEGER StartingUsableOffset;
    LARGE_INTEGER UsableLength;
    DWORD MaxPartitionCount;
}
alias _DRIVE_LAYOUT_INFORMATION_GPT DRIVE_LAYOUT_INFORMATION_GPT;
alias _DRIVE_LAYOUT_INFORMATION_GPT *PDRIVE_LAYOUT_INFORMATION_GPT;
//C     typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
//C       DWORD Signature;
//C     } DRIVE_LAYOUT_INFORMATION_MBR,*PDRIVE_LAYOUT_INFORMATION_MBR;
struct _DRIVE_LAYOUT_INFORMATION_MBR
{
    DWORD Signature;
}
alias _DRIVE_LAYOUT_INFORMATION_MBR DRIVE_LAYOUT_INFORMATION_MBR;
alias _DRIVE_LAYOUT_INFORMATION_MBR *PDRIVE_LAYOUT_INFORMATION_MBR;
//C     typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
//C       DWORD PartitionStyle;
//C       DWORD PartitionCount;
//C        union {
//C         DRIVE_LAYOUT_INFORMATION_MBR Mbr;
//C         DRIVE_LAYOUT_INFORMATION_GPT Gpt;
//C       } ;
union _N210
{
    DRIVE_LAYOUT_INFORMATION_MBR Mbr;
    DRIVE_LAYOUT_INFORMATION_GPT Gpt;
}
//C       PARTITION_INFORMATION_EX PartitionEntry[1];
//C     } DRIVE_LAYOUT_INFORMATION_EX,*PDRIVE_LAYOUT_INFORMATION_EX;
struct _DRIVE_LAYOUT_INFORMATION_EX
{
    DWORD PartitionStyle;
    DWORD PartitionCount;
    DRIVE_LAYOUT_INFORMATION_MBR Mbr;
    DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    PARTITION_INFORMATION_EX [1]PartitionEntry;
}
alias _DRIVE_LAYOUT_INFORMATION_EX DRIVE_LAYOUT_INFORMATION_EX;
alias _DRIVE_LAYOUT_INFORMATION_EX *PDRIVE_LAYOUT_INFORMATION_EX;
//C     typedef enum _DETECTION_TYPE {
//C       DetectNone,DetectInt13,DetectExInt13
//C     } DETECTION_TYPE;
enum _DETECTION_TYPE
{
    DetectNone,
    DetectInt13,
    DetectExInt13,
}
alias _DETECTION_TYPE DETECTION_TYPE;
//C     typedef struct _DISK_INT13_INFO {
//C       WORD DriveSelect;
//C       DWORD MaxCylinders;
//C       WORD SectorsPerTrack;
//C       WORD MaxHeads;
//C       WORD NumberDrives;
//C     } DISK_INT13_INFO,*PDISK_INT13_INFO;
struct _DISK_INT13_INFO
{
    WORD DriveSelect;
    DWORD MaxCylinders;
    WORD SectorsPerTrack;
    WORD MaxHeads;
    WORD NumberDrives;
}
alias _DISK_INT13_INFO DISK_INT13_INFO;
alias _DISK_INT13_INFO *PDISK_INT13_INFO;
//C     typedef struct _DISK_EX_INT13_INFO {
//C       WORD ExBufferSize;
//C       WORD ExFlags;
//C       DWORD ExCylinders;
//C       DWORD ExHeads;
//C       DWORD ExSectorsPerTrack;
//C       DWORD64 ExSectorsPerDrive;
//C       WORD ExSectorSize;
//C       WORD ExReserved;
//C     } DISK_EX_INT13_INFO,*PDISK_EX_INT13_INFO;
struct _DISK_EX_INT13_INFO
{
    WORD ExBufferSize;
    WORD ExFlags;
    DWORD ExCylinders;
    DWORD ExHeads;
    DWORD ExSectorsPerTrack;
    DWORD64 ExSectorsPerDrive;
    WORD ExSectorSize;
    WORD ExReserved;
}
alias _DISK_EX_INT13_INFO DISK_EX_INT13_INFO;
alias _DISK_EX_INT13_INFO *PDISK_EX_INT13_INFO;
//C     typedef struct _DISK_DETECTION_INFO {
//C       DWORD SizeOfDetectInfo;
//C       DETECTION_TYPE DetectionType;
//C        union {
//C          struct {
//C           DISK_INT13_INFO Int13;
//C           DISK_EX_INT13_INFO ExInt13;
//C         } ;
struct _N212
{
    DISK_INT13_INFO Int13;
    DISK_EX_INT13_INFO ExInt13;
}
//C       } ;
union _N211
{
    DISK_INT13_INFO Int13;
    DISK_EX_INT13_INFO ExInt13;
}
//C     } DISK_DETECTION_INFO,*PDISK_DETECTION_INFO;
struct _DISK_DETECTION_INFO
{
    DWORD SizeOfDetectInfo;
    DETECTION_TYPE DetectionType;
    DISK_INT13_INFO Int13;
    DISK_EX_INT13_INFO ExInt13;
}
alias _DISK_DETECTION_INFO DISK_DETECTION_INFO;
alias _DISK_DETECTION_INFO *PDISK_DETECTION_INFO;
//C     typedef struct _DISK_PARTITION_INFO {
//C       DWORD SizeOfPartitionInfo;
//C       PARTITION_STYLE PartitionStyle;
//C        union {
//C         struct {
//C           DWORD Signature;
//C           DWORD CheckSum;
//C         } Mbr;
struct _N214
{
    DWORD Signature;
    DWORD CheckSum;
}
//C         struct {
//C           GUID DiskId;
//C         } Gpt;
struct _N215
{
    GUID DiskId;
}
//C       } ;
union _N213
{
    _N214 Mbr;
    _N215 Gpt;
}
//C     } DISK_PARTITION_INFO,*PDISK_PARTITION_INFO;
struct _DISK_PARTITION_INFO
{
    DWORD SizeOfPartitionInfo;
    PARTITION_STYLE PartitionStyle;
    _N214 Mbr;
    _N215 Gpt;
}
alias _DISK_PARTITION_INFO DISK_PARTITION_INFO;
alias _DISK_PARTITION_INFO *PDISK_PARTITION_INFO;
//C     typedef struct _DISK_GEOMETRY_EX {
//C       DISK_GEOMETRY Geometry;
//C       LARGE_INTEGER DiskSize;
//C       BYTE Data[1];
//C     } DISK_GEOMETRY_EX,*PDISK_GEOMETRY_EX;
struct _DISK_GEOMETRY_EX
{
    DISK_GEOMETRY Geometry;
    LARGE_INTEGER DiskSize;
    BYTE [1]Data;
}
alias _DISK_GEOMETRY_EX DISK_GEOMETRY_EX;
alias _DISK_GEOMETRY_EX *PDISK_GEOMETRY_EX;
//C     typedef struct _DISK_CONTROLLER_NUMBER {
//C       DWORD ControllerNumber;
//C       DWORD DiskNumber;
//C     } DISK_CONTROLLER_NUMBER,*PDISK_CONTROLLER_NUMBER;
struct _DISK_CONTROLLER_NUMBER
{
    DWORD ControllerNumber;
    DWORD DiskNumber;
}
alias _DISK_CONTROLLER_NUMBER DISK_CONTROLLER_NUMBER;
alias _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER;
//C     typedef enum {
//C       EqualPriority,KeepPrefetchedData,KeepReadData
//C     } DISK_CACHE_RETENTION_PRIORITY;
enum
{
    EqualPriority,
    KeepPrefetchedData,
    KeepReadData,
}
alias int DISK_CACHE_RETENTION_PRIORITY;
//C     typedef struct _DISK_CACHE_INFORMATION {
//C       BOOLEAN ParametersSavable;
//C       BOOLEAN ReadCacheEnabled;
//C       BOOLEAN WriteCacheEnabled;
//C       DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
//C       DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
//C       WORD DisablePrefetchTransferLength;
//C       BOOLEAN PrefetchScalar;
//C        union {
//C         struct {
//C           WORD Minimum;
//C           WORD Maximum;
//C           WORD MaximumBlocks;
//C         } ScalarPrefetch;
struct _N218
{
    WORD Minimum;
    WORD Maximum;
    WORD MaximumBlocks;
}
//C         struct {
//C           WORD Minimum;
//C           WORD Maximum;
//C         } BlockPrefetch;
struct _N219
{
    WORD Minimum;
    WORD Maximum;
}
//C       } ;
union _N217
{
    _N218 ScalarPrefetch;
    _N219 BlockPrefetch;
}
//C     } DISK_CACHE_INFORMATION,*PDISK_CACHE_INFORMATION;
struct _DISK_CACHE_INFORMATION
{
    BOOLEAN ParametersSavable;
    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;
    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
    WORD DisablePrefetchTransferLength;
    BOOLEAN PrefetchScalar;
    _N218 ScalarPrefetch;
    _N219 BlockPrefetch;
}
alias _DISK_CACHE_INFORMATION DISK_CACHE_INFORMATION;
alias _DISK_CACHE_INFORMATION *PDISK_CACHE_INFORMATION;
//C     typedef struct _DISK_GROW_PARTITION {
//C       DWORD PartitionNumber;
//C       LARGE_INTEGER BytesToGrow;
//C     } DISK_GROW_PARTITION,*PDISK_GROW_PARTITION;
struct _DISK_GROW_PARTITION
{
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
}
alias _DISK_GROW_PARTITION DISK_GROW_PARTITION;
alias _DISK_GROW_PARTITION *PDISK_GROW_PARTITION;
//C     typedef struct _HISTOGRAM_BUCKET {
//C       DWORD Reads;
//C       DWORD Writes;
//C     } HISTOGRAM_BUCKET,*PHISTOGRAM_BUCKET;
struct _HISTOGRAM_BUCKET
{
    DWORD Reads;
    DWORD Writes;
}
alias _HISTOGRAM_BUCKET HISTOGRAM_BUCKET;
alias _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET;
//C     typedef struct _DISK_HISTOGRAM {
//C       LARGE_INTEGER DiskSize;
//C       LARGE_INTEGER Start;
//C       LARGE_INTEGER End;
//C       LARGE_INTEGER Average;
//C       LARGE_INTEGER AverageRead;
//C       LARGE_INTEGER AverageWrite;
//C       DWORD Granularity;
//C       DWORD Size;
//C       DWORD ReadCount;
//C       DWORD WriteCount;
//C       PHISTOGRAM_BUCKET Histogram;
//C     } DISK_HISTOGRAM,*PDISK_HISTOGRAM;
struct _DISK_HISTOGRAM
{
    LARGE_INTEGER DiskSize;
    LARGE_INTEGER Start;
    LARGE_INTEGER End;
    LARGE_INTEGER Average;
    LARGE_INTEGER AverageRead;
    LARGE_INTEGER AverageWrite;
    DWORD Granularity;
    DWORD Size;
    DWORD ReadCount;
    DWORD WriteCount;
    PHISTOGRAM_BUCKET Histogram;
}
alias _DISK_HISTOGRAM DISK_HISTOGRAM;
alias _DISK_HISTOGRAM *PDISK_HISTOGRAM;
//C     typedef struct _DISK_PERFORMANCE {
//C       LARGE_INTEGER BytesRead;
//C       LARGE_INTEGER BytesWritten;
//C       LARGE_INTEGER ReadTime;
//C       LARGE_INTEGER WriteTime;
//C       LARGE_INTEGER IdleTime;
//C       DWORD ReadCount;
//C       DWORD WriteCount;
//C       DWORD QueueDepth;
//C       DWORD SplitCount;
//C       LARGE_INTEGER QueryTime;
//C       DWORD StorageDeviceNumber;
//C       WCHAR StorageManagerName[8];
//C     } DISK_PERFORMANCE,*PDISK_PERFORMANCE;
struct _DISK_PERFORMANCE
{
    LARGE_INTEGER BytesRead;
    LARGE_INTEGER BytesWritten;
    LARGE_INTEGER ReadTime;
    LARGE_INTEGER WriteTime;
    LARGE_INTEGER IdleTime;
    DWORD ReadCount;
    DWORD WriteCount;
    DWORD QueueDepth;
    DWORD SplitCount;
    LARGE_INTEGER QueryTime;
    DWORD StorageDeviceNumber;
    WCHAR [8]StorageManagerName;
}
alias _DISK_PERFORMANCE DISK_PERFORMANCE;
alias _DISK_PERFORMANCE *PDISK_PERFORMANCE;
//C     typedef struct _DISK_RECORD {
//C       LARGE_INTEGER ByteOffset;
//C       LARGE_INTEGER StartTime;
//C       LARGE_INTEGER EndTime;
//C       PVOID VirtualAddress;
//C       DWORD NumberOfBytes;
//C       BYTE DeviceNumber;
//C       BOOLEAN ReadRequest;
//C     } DISK_RECORD,*PDISK_RECORD;
struct _DISK_RECORD
{
    LARGE_INTEGER ByteOffset;
    LARGE_INTEGER StartTime;
    LARGE_INTEGER EndTime;
    PVOID VirtualAddress;
    DWORD NumberOfBytes;
    BYTE DeviceNumber;
    BOOLEAN ReadRequest;
}
alias _DISK_RECORD DISK_RECORD;
alias _DISK_RECORD *PDISK_RECORD;
//C     typedef struct _DISK_LOGGING {
//C       BYTE Function;
//C       PVOID BufferAddress;
//C       DWORD BufferSize;
//C     } DISK_LOGGING,*PDISK_LOGGING;
struct _DISK_LOGGING
{
    BYTE Function;
    PVOID BufferAddress;
    DWORD BufferSize;
}
alias _DISK_LOGGING DISK_LOGGING;
alias _DISK_LOGGING *PDISK_LOGGING;
//C     typedef enum _BIN_TYPES {
//C       RequestSize,RequestLocation
//C     } BIN_TYPES;
enum _BIN_TYPES
{
    RequestSize,
    RequestLocation,
}
alias _BIN_TYPES BIN_TYPES;
//C     typedef struct _BIN_RANGE {
//C       LARGE_INTEGER StartValue;
//C       LARGE_INTEGER Length;
//C     } BIN_RANGE,*PBIN_RANGE;
struct _BIN_RANGE
{
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
}
alias _BIN_RANGE BIN_RANGE;
alias _BIN_RANGE *PBIN_RANGE;
//C     typedef struct _PERF_BIN {
//C       DWORD NumberOfBins;
//C       DWORD TypeOfBin;
//C       BIN_RANGE BinsRanges[1];
//C     } PERF_BIN,*PPERF_BIN;
struct _PERF_BIN
{
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE [1]BinsRanges;
}
alias _PERF_BIN PERF_BIN;
alias _PERF_BIN *PPERF_BIN;
//C     typedef struct _BIN_COUNT {
//C       BIN_RANGE BinRange;
//C       DWORD BinCount;
//C     } BIN_COUNT,*PBIN_COUNT;
struct _BIN_COUNT
{
    BIN_RANGE BinRange;
    DWORD BinCount;
}
alias _BIN_COUNT BIN_COUNT;
alias _BIN_COUNT *PBIN_COUNT;
//C     typedef struct _BIN_RESULTS {
//C       DWORD NumberOfBins;
//C       BIN_COUNT BinCounts[1];
//C     } BIN_RESULTS,*PBIN_RESULTS;
struct _BIN_RESULTS
{
    DWORD NumberOfBins;
    BIN_COUNT [1]BinCounts;
}
alias _BIN_RESULTS BIN_RESULTS;
alias _BIN_RESULTS *PBIN_RESULTS;
//C     typedef struct _GETVERSIONINPARAMS {
//C       BYTE bVersion;
//C       BYTE bRevision;
//C       BYTE bReserved;
//C       BYTE bIDEDeviceMap;
//C       DWORD fCapabilities;
//C       DWORD dwReserved[4];
//C     } GETVERSIONINPARAMS,*PGETVERSIONINPARAMS,*LPGETVERSIONINPARAMS;
struct _GETVERSIONINPARAMS
{
    BYTE bVersion;
    BYTE bRevision;
    BYTE bReserved;
    BYTE bIDEDeviceMap;
    DWORD fCapabilities;
    DWORD [4]dwReserved;
}
alias _GETVERSIONINPARAMS GETVERSIONINPARAMS;
alias _GETVERSIONINPARAMS *PGETVERSIONINPARAMS;
alias _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS;
//C     typedef struct _IDEREGS {
//C       BYTE bFeaturesReg;
//C       BYTE bSectorCountReg;
//C       BYTE bSectorNumberReg;
//C       BYTE bCylLowReg;
//C       BYTE bCylHighReg;
//C       BYTE bDriveHeadReg;
//C       BYTE bCommandReg;
//C       BYTE bReserved;
//C     } IDEREGS,*PIDEREGS,*LPIDEREGS;
struct _IDEREGS
{
    BYTE bFeaturesReg;
    BYTE bSectorCountReg;
    BYTE bSectorNumberReg;
    BYTE bCylLowReg;
    BYTE bCylHighReg;
    BYTE bDriveHeadReg;
    BYTE bCommandReg;
    BYTE bReserved;
}
alias _IDEREGS IDEREGS;
alias _IDEREGS *PIDEREGS;
alias _IDEREGS *LPIDEREGS;
//C     typedef struct _SENDCMDINPARAMS {
//C       DWORD cBufferSize;
//C       IDEREGS irDriveRegs;
//C       BYTE bDriveNumber;
//C       BYTE bReserved[3];
//C       DWORD dwReserved[4];
//C       BYTE bBuffer[1];
//C     } SENDCMDINPARAMS,*PSENDCMDINPARAMS,*LPSENDCMDINPARAMS;
struct _SENDCMDINPARAMS
{
    DWORD cBufferSize;
    IDEREGS irDriveRegs;
    BYTE bDriveNumber;
    BYTE [3]bReserved;
    DWORD [4]dwReserved;
    BYTE [1]bBuffer;
}
alias _SENDCMDINPARAMS SENDCMDINPARAMS;
alias _SENDCMDINPARAMS *PSENDCMDINPARAMS;
alias _SENDCMDINPARAMS *LPSENDCMDINPARAMS;
//C     typedef struct _DRIVERSTATUS {
//C       BYTE bDriverError;
//C       BYTE bIDEError;
//C       BYTE bReserved[2];
//C       DWORD dwReserved[2];
//C     } DRIVERSTATUS,*PDRIVERSTATUS,*LPDRIVERSTATUS;
struct _DRIVERSTATUS
{
    BYTE bDriverError;
    BYTE bIDEError;
    BYTE [2]bReserved;
    DWORD [2]dwReserved;
}
alias _DRIVERSTATUS DRIVERSTATUS;
alias _DRIVERSTATUS *PDRIVERSTATUS;
alias _DRIVERSTATUS *LPDRIVERSTATUS;
//C     typedef struct _SENDCMDOUTPARAMS {
//C       DWORD cBufferSize;
//C       DRIVERSTATUS DriverStatus;
//C       BYTE bBuffer[1];
//C     } SENDCMDOUTPARAMS,*PSENDCMDOUTPARAMS,*LPSENDCMDOUTPARAMS;
struct _SENDCMDOUTPARAMS
{
    DWORD cBufferSize;
    DRIVERSTATUS DriverStatus;
    BYTE [1]bBuffer;
}
alias _SENDCMDOUTPARAMS SENDCMDOUTPARAMS;
alias _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS;
alias _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS;
//C     typedef enum _ELEMENT_TYPE {
//C       AllElements,ChangerTransport,ChangerSlot,ChangerIEPort,ChangerDrive,ChangerDoor,ChangerKeypad,ChangerMaxElement
//C     } ELEMENT_TYPE,*PELEMENT_TYPE;
enum _ELEMENT_TYPE
{
    AllElements,
    ChangerTransport,
    ChangerSlot,
    ChangerIEPort,
    ChangerDrive,
    ChangerDoor,
    ChangerKeypad,
    ChangerMaxElement,
}
alias _ELEMENT_TYPE ELEMENT_TYPE;
alias _ELEMENT_TYPE *PELEMENT_TYPE;
//C     typedef struct _CHANGER_ELEMENT {
//C       ELEMENT_TYPE ElementType;
//C       DWORD ElementAddress;
//C     } CHANGER_ELEMENT,*PCHANGER_ELEMENT;
struct _CHANGER_ELEMENT
{
    ELEMENT_TYPE ElementType;
    DWORD ElementAddress;
}
alias _CHANGER_ELEMENT CHANGER_ELEMENT;
alias _CHANGER_ELEMENT *PCHANGER_ELEMENT;
//C     typedef struct _CHANGER_ELEMENT_LIST {
//C       CHANGER_ELEMENT Element;
//C       DWORD NumberOfElements;
//C     } CHANGER_ELEMENT_LIST ,*PCHANGER_ELEMENT_LIST;
struct _CHANGER_ELEMENT_LIST
{
    CHANGER_ELEMENT Element;
    DWORD NumberOfElements;
}
alias _CHANGER_ELEMENT_LIST CHANGER_ELEMENT_LIST;
alias _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST;
//C     typedef struct _GET_CHANGER_PARAMETERS {
//C       DWORD Size;
//C       WORD NumberTransportElements;
//C       WORD NumberStorageElements;
//C       WORD NumberCleanerSlots;
//C       WORD NumberIEElements;
//C       WORD NumberDataTransferElements;
//C       WORD NumberOfDoors;
//C       WORD FirstSlotNumber;
//C       WORD FirstDriveNumber;
//C       WORD FirstTransportNumber;
//C       WORD FirstIEPortNumber;
//C       WORD FirstCleanerSlotAddress;
//C       WORD MagazineSize;
//C       DWORD DriveCleanTimeout;
//C       DWORD Features0;
//C       DWORD Features1;
//C       BYTE MoveFromTransport;
//C       BYTE MoveFromSlot;
//C       BYTE MoveFromIePort;
//C       BYTE MoveFromDrive;
//C       BYTE ExchangeFromTransport;
//C       BYTE ExchangeFromSlot;
//C       BYTE ExchangeFromIePort;
//C       BYTE ExchangeFromDrive;
//C       BYTE LockUnlockCapabilities;
//C       BYTE PositionCapabilities;
//C       BYTE Reserved1[2];
//C       DWORD Reserved2[2];
//C     } GET_CHANGER_PARAMETERS,*PGET_CHANGER_PARAMETERS;
struct _GET_CHANGER_PARAMETERS
{
    DWORD Size;
    WORD NumberTransportElements;
    WORD NumberStorageElements;
    WORD NumberCleanerSlots;
    WORD NumberIEElements;
    WORD NumberDataTransferElements;
    WORD NumberOfDoors;
    WORD FirstSlotNumber;
    WORD FirstDriveNumber;
    WORD FirstTransportNumber;
    WORD FirstIEPortNumber;
    WORD FirstCleanerSlotAddress;
    WORD MagazineSize;
    DWORD DriveCleanTimeout;
    DWORD Features0;
    DWORD Features1;
    BYTE MoveFromTransport;
    BYTE MoveFromSlot;
    BYTE MoveFromIePort;
    BYTE MoveFromDrive;
    BYTE ExchangeFromTransport;
    BYTE ExchangeFromSlot;
    BYTE ExchangeFromIePort;
    BYTE ExchangeFromDrive;
    BYTE LockUnlockCapabilities;
    BYTE PositionCapabilities;
    BYTE [2]Reserved1;
    DWORD [2]Reserved2;
}
alias _GET_CHANGER_PARAMETERS GET_CHANGER_PARAMETERS;
alias _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS;
//C     typedef struct _CHANGER_PRODUCT_DATA {
//C       BYTE VendorId[8];
//C       BYTE ProductId[16];
//C       BYTE Revision[4];
//C       BYTE SerialNumber[32];
//C       BYTE DeviceType;
//C     } CHANGER_PRODUCT_DATA,*PCHANGER_PRODUCT_DATA;
struct _CHANGER_PRODUCT_DATA
{
    BYTE [8]VendorId;
    BYTE [16]ProductId;
    BYTE [4]Revision;
    BYTE [32]SerialNumber;
    BYTE DeviceType;
}
alias _CHANGER_PRODUCT_DATA CHANGER_PRODUCT_DATA;
alias _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA;
//C     typedef struct _CHANGER_SET_ACCESS {
//C       CHANGER_ELEMENT Element;
//C       DWORD Control;
//C     } CHANGER_SET_ACCESS,*PCHANGER_SET_ACCESS;
struct _CHANGER_SET_ACCESS
{
    CHANGER_ELEMENT Element;
    DWORD Control;
}
alias _CHANGER_SET_ACCESS CHANGER_SET_ACCESS;
alias _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS;
//C     typedef struct _CHANGER_READ_ELEMENT_STATUS {
//C       CHANGER_ELEMENT_LIST ElementList;
//C       BOOLEAN VolumeTagInfo;
//C     } CHANGER_READ_ELEMENT_STATUS,*PCHANGER_READ_ELEMENT_STATUS;
struct _CHANGER_READ_ELEMENT_STATUS
{
    CHANGER_ELEMENT_LIST ElementList;
    BOOLEAN VolumeTagInfo;
}
alias _CHANGER_READ_ELEMENT_STATUS CHANGER_READ_ELEMENT_STATUS;
alias _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS;
//C     typedef struct _CHANGER_ELEMENT_STATUS {
//C       CHANGER_ELEMENT Element;
//C       CHANGER_ELEMENT SrcElementAddress;
//C       DWORD Flags;
//C       DWORD ExceptionCode;
//C       BYTE TargetId;
//C       BYTE Lun;
//C       WORD Reserved;
//C       BYTE PrimaryVolumeID[36];
//C       BYTE AlternateVolumeID[36];
//C     } CHANGER_ELEMENT_STATUS,*PCHANGER_ELEMENT_STATUS;
struct _CHANGER_ELEMENT_STATUS
{
    CHANGER_ELEMENT Element;
    CHANGER_ELEMENT SrcElementAddress;
    DWORD Flags;
    DWORD ExceptionCode;
    BYTE TargetId;
    BYTE Lun;
    WORD Reserved;
    BYTE [36]PrimaryVolumeID;
    BYTE [36]AlternateVolumeID;
}
alias _CHANGER_ELEMENT_STATUS CHANGER_ELEMENT_STATUS;
alias _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS;
//C     typedef struct _CHANGER_ELEMENT_STATUS_EX {
//C       CHANGER_ELEMENT Element;
//C       CHANGER_ELEMENT SrcElementAddress;
//C       DWORD Flags;
//C       DWORD ExceptionCode;
//C       BYTE TargetId;
//C       BYTE Lun;
//C       WORD Reserved;
//C       BYTE PrimaryVolumeID[36];
//C       BYTE AlternateVolumeID[36];
//C       BYTE VendorIdentification[8];
//C       BYTE ProductIdentification[16];
//C       BYTE SerialNumber[32];
//C     } CHANGER_ELEMENT_STATUS_EX,*PCHANGER_ELEMENT_STATUS_EX;
struct _CHANGER_ELEMENT_STATUS_EX
{
    CHANGER_ELEMENT Element;
    CHANGER_ELEMENT SrcElementAddress;
    DWORD Flags;
    DWORD ExceptionCode;
    BYTE TargetId;
    BYTE Lun;
    WORD Reserved;
    BYTE [36]PrimaryVolumeID;
    BYTE [36]AlternateVolumeID;
    BYTE [8]VendorIdentification;
    BYTE [16]ProductIdentification;
    BYTE [32]SerialNumber;
}
alias _CHANGER_ELEMENT_STATUS_EX CHANGER_ELEMENT_STATUS_EX;
alias _CHANGER_ELEMENT_STATUS_EX *PCHANGER_ELEMENT_STATUS_EX;
//C     typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
//C       CHANGER_ELEMENT_LIST ElementList;
//C       BOOLEAN BarCodeScan;
//C     } CHANGER_INITIALIZE_ELEMENT_STATUS,*PCHANGER_INITIALIZE_ELEMENT_STATUS;
struct _CHANGER_INITIALIZE_ELEMENT_STATUS
{
    CHANGER_ELEMENT_LIST ElementList;
    BOOLEAN BarCodeScan;
}
alias _CHANGER_INITIALIZE_ELEMENT_STATUS CHANGER_INITIALIZE_ELEMENT_STATUS;
alias _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS;
//C     typedef struct _CHANGER_SET_POSITION {
//C       CHANGER_ELEMENT Transport;
//C       CHANGER_ELEMENT Destination;
//C       BOOLEAN Flip;
//C     } CHANGER_SET_POSITION,*PCHANGER_SET_POSITION;
struct _CHANGER_SET_POSITION
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Destination;
    BOOLEAN Flip;
}
alias _CHANGER_SET_POSITION CHANGER_SET_POSITION;
alias _CHANGER_SET_POSITION *PCHANGER_SET_POSITION;
//C     typedef struct _CHANGER_EXCHANGE_MEDIUM {
//C       CHANGER_ELEMENT Transport;
//C       CHANGER_ELEMENT Source;
//C       CHANGER_ELEMENT Destination1;
//C       CHANGER_ELEMENT Destination2;
//C       BOOLEAN Flip1;
//C       BOOLEAN Flip2;
//C     } CHANGER_EXCHANGE_MEDIUM,*PCHANGER_EXCHANGE_MEDIUM;
struct _CHANGER_EXCHANGE_MEDIUM
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Source;
    CHANGER_ELEMENT Destination1;
    CHANGER_ELEMENT Destination2;
    BOOLEAN Flip1;
    BOOLEAN Flip2;
}
alias _CHANGER_EXCHANGE_MEDIUM CHANGER_EXCHANGE_MEDIUM;
alias _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM;
//C     typedef struct _CHANGER_MOVE_MEDIUM {
//C       CHANGER_ELEMENT Transport;
//C       CHANGER_ELEMENT Source;
//C       CHANGER_ELEMENT Destination;
//C       BOOLEAN Flip;
//C     } CHANGER_MOVE_MEDIUM,*PCHANGER_MOVE_MEDIUM;
struct _CHANGER_MOVE_MEDIUM
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Source;
    CHANGER_ELEMENT Destination;
    BOOLEAN Flip;
}
alias _CHANGER_MOVE_MEDIUM CHANGER_MOVE_MEDIUM;
alias _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM;
//C     typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
//C       CHANGER_ELEMENT StartingElement;
//C       DWORD ActionCode;
//C       BYTE VolumeIDTemplate[40];
//C     } CHANGER_SEND_VOLUME_TAG_INFORMATION,*PCHANGER_SEND_VOLUME_TAG_INFORMATION;
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION
{
    CHANGER_ELEMENT StartingElement;
    DWORD ActionCode;
    BYTE [40]VolumeIDTemplate;
}
alias _CHANGER_SEND_VOLUME_TAG_INFORMATION CHANGER_SEND_VOLUME_TAG_INFORMATION;
alias _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION;
//C     typedef struct _READ_ELEMENT_ADDRESS_INFO {
//C       DWORD NumberOfElements;
//C       CHANGER_ELEMENT_STATUS ElementStatus[1];
//C     } READ_ELEMENT_ADDRESS_INFO,*PREAD_ELEMENT_ADDRESS_INFO;
struct _READ_ELEMENT_ADDRESS_INFO
{
    DWORD NumberOfElements;
    CHANGER_ELEMENT_STATUS [1]ElementStatus;
}
alias _READ_ELEMENT_ADDRESS_INFO READ_ELEMENT_ADDRESS_INFO;
alias _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO;
//C     typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
//C       DeviceProblemNone,DeviceProblemHardware,DeviceProblemCHMError,DeviceProblemDoorOpen,DeviceProblemCalibrationError,DeviceProblemTargetFailure,
//C       DeviceProblemCHMMoveError,DeviceProblemCHMZeroError,DeviceProblemCartridgeInsertError,DeviceProblemPositionError,DeviceProblemSensorError,
//C       DeviceProblemCartridgeEjectError,DeviceProblemGripperError,DeviceProblemDriveError
//C     } CHANGER_DEVICE_PROBLEM_TYPE,*PCHANGER_DEVICE_PROBLEM_TYPE;
enum _CHANGER_DEVICE_PROBLEM_TYPE
{
    DeviceProblemNone,
    DeviceProblemHardware,
    DeviceProblemCHMError,
    DeviceProblemDoorOpen,
    DeviceProblemCalibrationError,
    DeviceProblemTargetFailure,
    DeviceProblemCHMMoveError,
    DeviceProblemCHMZeroError,
    DeviceProblemCartridgeInsertError,
    DeviceProblemPositionError,
    DeviceProblemSensorError,
    DeviceProblemCartridgeEjectError,
    DeviceProblemGripperError,
    DeviceProblemDriveError,
}
alias _CHANGER_DEVICE_PROBLEM_TYPE CHANGER_DEVICE_PROBLEM_TYPE;
alias _CHANGER_DEVICE_PROBLEM_TYPE *PCHANGER_DEVICE_PROBLEM_TYPE;
//C     typedef struct _PATHNAME_BUFFER {
//C       DWORD PathNameLength;
//C       WCHAR Name[1];
//C     } PATHNAME_BUFFER,*PPATHNAME_BUFFER;
struct _PATHNAME_BUFFER
{
    DWORD PathNameLength;
    WCHAR [1]Name;
}
alias _PATHNAME_BUFFER PATHNAME_BUFFER;
alias _PATHNAME_BUFFER *PPATHNAME_BUFFER;
//C     typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
//C       BYTE First0x24BytesOfBootSector[0x24];
//C     } FSCTL_QUERY_FAT_BPB_BUFFER,*PFSCTL_QUERY_FAT_BPB_BUFFER;
struct _FSCTL_QUERY_FAT_BPB_BUFFER
{
    BYTE [36]First0x24BytesOfBootSector;
}
alias _FSCTL_QUERY_FAT_BPB_BUFFER FSCTL_QUERY_FAT_BPB_BUFFER;
alias _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER;
//C     typedef struct {
//C       LARGE_INTEGER VolumeSerialNumber;
//C       LARGE_INTEGER NumberSectors;
//C       LARGE_INTEGER TotalClusters;
//C       LARGE_INTEGER FreeClusters;
//C       LARGE_INTEGER TotalReserved;
//C       DWORD BytesPerSector;
//C       DWORD BytesPerCluster;
//C       DWORD BytesPerFileRecordSegment;
//C       DWORD ClustersPerFileRecordSegment;
//C       LARGE_INTEGER MftValidDataLength;
//C       LARGE_INTEGER MftStartLcn;
//C       LARGE_INTEGER Mft2StartLcn;
//C       LARGE_INTEGER MftZoneStart;
//C       LARGE_INTEGER MftZoneEnd;
//C     } NTFS_VOLUME_DATA_BUFFER,*PNTFS_VOLUME_DATA_BUFFER;
struct _N220
{
    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;
}
alias _N220 NTFS_VOLUME_DATA_BUFFER;
alias _N220 *PNTFS_VOLUME_DATA_BUFFER;
//C     typedef struct {
//C       DWORD ByteCount;
//C       WORD MajorVersion;
//C       WORD MinorVersion;
//C     } NTFS_EXTENDED_VOLUME_DATA,*PNTFS_EXTENDED_VOLUME_DATA;
struct _N221
{
    DWORD ByteCount;
    WORD MajorVersion;
    WORD MinorVersion;
}
alias _N221 NTFS_EXTENDED_VOLUME_DATA;
alias _N221 *PNTFS_EXTENDED_VOLUME_DATA;
//C     typedef struct {
//C       LARGE_INTEGER StartingLcn;
//C     } STARTING_LCN_INPUT_BUFFER,*PSTARTING_LCN_INPUT_BUFFER;
struct _N222
{
    LARGE_INTEGER StartingLcn;
}
alias _N222 STARTING_LCN_INPUT_BUFFER;
alias _N222 *PSTARTING_LCN_INPUT_BUFFER;
//C     typedef struct {
//C       LARGE_INTEGER StartingLcn;
//C       LARGE_INTEGER BitmapSize;
//C       BYTE Buffer[1];
//C     } VOLUME_BITMAP_BUFFER,*PVOLUME_BITMAP_BUFFER;
struct _N223
{
    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE [1]Buffer;
}
alias _N223 VOLUME_BITMAP_BUFFER;
alias _N223 *PVOLUME_BITMAP_BUFFER;
//C     typedef struct {
//C       LARGE_INTEGER StartingVcn;
//C     } STARTING_VCN_INPUT_BUFFER,*PSTARTING_VCN_INPUT_BUFFER;
struct _N224
{
    LARGE_INTEGER StartingVcn;
}
alias _N224 STARTING_VCN_INPUT_BUFFER;
alias _N224 *PSTARTING_VCN_INPUT_BUFFER;
//C     typedef struct RETRIEVAL_POINTERS_BUFFER {
//C       DWORD ExtentCount;
//C       LARGE_INTEGER StartingVcn;
//C       struct {
//C         LARGE_INTEGER NextVcn;
//C         LARGE_INTEGER Lcn;
//C       } Extents[1];
struct _N225
{
    LARGE_INTEGER NextVcn;
    LARGE_INTEGER Lcn;
}
//C     } RETRIEVAL_POINTERS_BUFFER,*PRETRIEVAL_POINTERS_BUFFER;
struct RETRIEVAL_POINTERS_BUFFER
{
    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    _N225 [1]Extents;
}
alias RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER;
//C     typedef struct {
//C       LARGE_INTEGER FileReferenceNumber;
//C     } NTFS_FILE_RECORD_INPUT_BUFFER,*PNTFS_FILE_RECORD_INPUT_BUFFER;
struct _N226
{
    LARGE_INTEGER FileReferenceNumber;
}
alias _N226 NTFS_FILE_RECORD_INPUT_BUFFER;
alias _N226 *PNTFS_FILE_RECORD_INPUT_BUFFER;
//C     typedef struct {
//C       LARGE_INTEGER FileReferenceNumber;
//C       DWORD FileRecordLength;
//C       BYTE FileRecordBuffer[1];
//C     } NTFS_FILE_RECORD_OUTPUT_BUFFER,*PNTFS_FILE_RECORD_OUTPUT_BUFFER;
struct _N227
{
    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE [1]FileRecordBuffer;
}
alias _N227 NTFS_FILE_RECORD_OUTPUT_BUFFER;
alias _N227 *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
//C     typedef struct {
//C       HANDLE FileHandle;
//C       LARGE_INTEGER StartingVcn;
//C       LARGE_INTEGER StartingLcn;
//C       DWORD ClusterCount;
//C     } MOVE_FILE_DATA,*PMOVE_FILE_DATA;
struct _N228
{
    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;
}
alias _N228 MOVE_FILE_DATA;
alias _N228 *PMOVE_FILE_DATA;
//C     typedef struct _MOVE_FILE_DATA32 {
//C       UINT32 FileHandle;
//C       LARGE_INTEGER StartingVcn;
//C       LARGE_INTEGER StartingLcn;
//C       DWORD ClusterCount;
//C     } MOVE_FILE_DATA32,*PMOVE_FILE_DATA32;
struct _MOVE_FILE_DATA32
{
    UINT32 FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;
}
alias _MOVE_FILE_DATA32 MOVE_FILE_DATA32;
alias _MOVE_FILE_DATA32 *PMOVE_FILE_DATA32;
//C     typedef struct {
//C       DWORD Restart;
//C       SID Sid;
//C     } FIND_BY_SID_DATA,*PFIND_BY_SID_DATA;
struct _N229
{
    DWORD Restart;
    SID Sid;
}
alias _N229 FIND_BY_SID_DATA;
alias _N229 *PFIND_BY_SID_DATA;
//C     typedef struct {
//C       DWORD NextEntryOffset;
//C       DWORD FileIndex;
//C       DWORD FileNameLength;
//C       WCHAR FileName[1];
//C     } FIND_BY_SID_OUTPUT,*PFIND_BY_SID_OUTPUT;
struct _N230
{
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR [1]FileName;
}
alias _N230 FIND_BY_SID_OUTPUT;
alias _N230 *PFIND_BY_SID_OUTPUT;
//C     typedef struct {
//C       DWORDLONG StartFileReferenceNumber;
//C       USN LowUsn;
//C       USN HighUsn;
//C     } MFT_ENUM_DATA,*PMFT_ENUM_DATA;
struct _N231
{
    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
}
alias _N231 MFT_ENUM_DATA;
alias _N231 *PMFT_ENUM_DATA;
//C     typedef struct {
//C       DWORDLONG MaximumSize;
//C       DWORDLONG AllocationDelta;
//C     } CREATE_USN_JOURNAL_DATA,*PCREATE_USN_JOURNAL_DATA;
struct _N232
{
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
}
alias _N232 CREATE_USN_JOURNAL_DATA;
alias _N232 *PCREATE_USN_JOURNAL_DATA;
//C     typedef struct {
//C       USN StartUsn;
//C       DWORD ReasonMask;
//C       DWORD ReturnOnlyOnClose;
//C       DWORDLONG Timeout;
//C       DWORDLONG BytesToWaitFor;
//C       DWORDLONG UsnJournalID;
//C     } READ_USN_JOURNAL_DATA,*PREAD_USN_JOURNAL_DATA;
struct _N233
{
    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
}
alias _N233 READ_USN_JOURNAL_DATA;
alias _N233 *PREAD_USN_JOURNAL_DATA;
//C     typedef struct {
//C       DWORD RecordLength;
//C       WORD MajorVersion;
//C       WORD MinorVersion;
//C       DWORDLONG FileReferenceNumber;
//C       DWORDLONG ParentFileReferenceNumber;
//C       USN Usn;
//C       LARGE_INTEGER TimeStamp;
//C       DWORD Reason;
//C       DWORD SourceInfo;
//C       DWORD SecurityId;
//C       DWORD FileAttributes;
//C       WORD FileNameLength;
//C       WORD FileNameOffset;
//C       WCHAR FileName[1];
//C     } USN_RECORD,*PUSN_RECORD;
struct _N234
{
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR [1]FileName;
}
alias _N234 USN_RECORD;
alias _N234 *PUSN_RECORD;
//C     typedef struct {
//C       DWORDLONG UsnJournalID;
//C       USN FirstUsn;
//C       USN NextUsn;
//C       USN LowestValidUsn;
//C       USN MaxUsn;
//C       DWORDLONG MaximumSize;
//C       DWORDLONG AllocationDelta;
//C     } USN_JOURNAL_DATA,*PUSN_JOURNAL_DATA;
struct _N235
{
    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
}
alias _N235 USN_JOURNAL_DATA;
alias _N235 *PUSN_JOURNAL_DATA;
//C     typedef struct {
//C       DWORDLONG UsnJournalID;
//C       DWORD DeleteFlags;
//C     } DELETE_USN_JOURNAL_DATA,*PDELETE_USN_JOURNAL_DATA;
struct _N236
{
    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;
}
alias _N236 DELETE_USN_JOURNAL_DATA;
alias _N236 *PDELETE_USN_JOURNAL_DATA;
//C     typedef struct {
//C       DWORD UsnSourceInfo;
//C       HANDLE VolumeHandle;
//C       DWORD HandleInfo;
//C     } MARK_HANDLE_INFO,*PMARK_HANDLE_INFO;
struct _N237
{
    DWORD UsnSourceInfo;
    HANDLE VolumeHandle;
    DWORD HandleInfo;
}
alias _N237 MARK_HANDLE_INFO;
alias _N237 *PMARK_HANDLE_INFO;
//C     typedef struct {
//C       DWORD UsnSourceInfo;
//C       UINT32 VolumeHandle;
//C       DWORD HandleInfo;
//C     } MARK_HANDLE_INFO32,*PMARK_HANDLE_INFO32;
struct _N238
{
    DWORD UsnSourceInfo;
    UINT32 VolumeHandle;
    DWORD HandleInfo;
}
alias _N238 MARK_HANDLE_INFO32;
alias _N238 *PMARK_HANDLE_INFO32;
//C     typedef struct {
//C       ACCESS_MASK DesiredAccess;
//C       DWORD SecurityIds[1];
//C     } BULK_SECURITY_TEST_DATA,*PBULK_SECURITY_TEST_DATA;
struct _N239
{
    ACCESS_MASK DesiredAccess;
    DWORD [1]SecurityIds;
}
alias _N239 BULK_SECURITY_TEST_DATA;
alias _N239 *PBULK_SECURITY_TEST_DATA;
//C     typedef struct _FILE_PREFETCH {
//C       DWORD Type;
//C       DWORD Count;
//C       DWORDLONG Prefetch[1];
//C     } FILE_PREFETCH,*PFILE_PREFETCH;
struct _FILE_PREFETCH
{
    DWORD Type;
    DWORD Count;
    DWORDLONG [1]Prefetch;
}
alias _FILE_PREFETCH FILE_PREFETCH;
alias _FILE_PREFETCH *PFILE_PREFETCH;
//C     typedef struct _FILESYSTEM_STATISTICS {
//C       WORD FileSystemType;
//C       WORD Version;
//C       DWORD SizeOfCompleteStructure;
//C       DWORD UserFileReads;
//C       DWORD UserFileReadBytes;
//C       DWORD UserDiskReads;
//C       DWORD UserFileWrites;
//C       DWORD UserFileWriteBytes;
//C       DWORD UserDiskWrites;
//C       DWORD MetaDataReads;
//C       DWORD MetaDataReadBytes;
//C       DWORD MetaDataDiskReads;
//C       DWORD MetaDataWrites;
//C       DWORD MetaDataWriteBytes;
//C       DWORD MetaDataDiskWrites;
//C     } FILESYSTEM_STATISTICS,*PFILESYSTEM_STATISTICS;
struct _FILESYSTEM_STATISTICS
{
    WORD FileSystemType;
    WORD Version;
    DWORD SizeOfCompleteStructure;
    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;
    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;
}
alias _FILESYSTEM_STATISTICS FILESYSTEM_STATISTICS;
alias _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS;
//C     typedef struct _FAT_STATISTICS {
//C       DWORD CreateHits;
//C       DWORD SuccessfulCreates;
//C       DWORD FailedCreates;
//C       DWORD NonCachedReads;
//C       DWORD NonCachedReadBytes;
//C       DWORD NonCachedWrites;
//C       DWORD NonCachedWriteBytes;
//C       DWORD NonCachedDiskReads;
//C       DWORD NonCachedDiskWrites;
//C     } FAT_STATISTICS,*PFAT_STATISTICS;
struct _FAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;
    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;
    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
}
alias _FAT_STATISTICS FAT_STATISTICS;
alias _FAT_STATISTICS *PFAT_STATISTICS;
//C     typedef struct _EXFAT_STATISTICS {
//C       DWORD CreateHits;
//C       DWORD SuccessfulCreates;
//C       DWORD FailedCreates;
//C       DWORD NonCachedReads;
//C       DWORD NonCachedReadBytes;
//C       DWORD NonCachedWrites;
//C       DWORD NonCachedWriteBytes;
//C       DWORD NonCachedDiskReads;
//C       DWORD NonCachedDiskWrites;
//C     } EXFAT_STATISTICS,*PEXFAT_STATISTICS;
struct _EXFAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;
    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;
    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
}
alias _EXFAT_STATISTICS EXFAT_STATISTICS;
alias _EXFAT_STATISTICS *PEXFAT_STATISTICS;
//C     typedef struct _NTFS_STATISTICS {
//C       DWORD LogFileFullExceptions;
//C       DWORD OtherExceptions;
//C       DWORD MftReads;
//C       DWORD MftReadBytes;
//C       DWORD MftWrites;
//C       DWORD MftWriteBytes;
//C       struct {
//C         WORD Write;
//C         WORD Create;
//C         WORD SetInfo;
//C         WORD Flush;
//C       } MftWritesUserLevel;
struct _N240
{
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
}
//C       WORD MftWritesFlushForLogFileFull;
//C       WORD MftWritesLazyWriter;
//C       WORD MftWritesUserRequest;
//C       DWORD Mft2Writes;
//C       DWORD Mft2WriteBytes;
//C       struct {
//C         WORD Write;
//C         WORD Create;
//C         WORD SetInfo;
//C         WORD Flush;
//C       } Mft2WritesUserLevel;
struct _N241
{
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
}
//C       WORD Mft2WritesFlushForLogFileFull;
//C       WORD Mft2WritesLazyWriter;
//C       WORD Mft2WritesUserRequest;
//C       DWORD RootIndexReads;
//C       DWORD RootIndexReadBytes;
//C       DWORD RootIndexWrites;
//C       DWORD RootIndexWriteBytes;
//C       DWORD BitmapReads;
//C       DWORD BitmapReadBytes;
//C       DWORD BitmapWrites;
//C       DWORD BitmapWriteBytes;
//C       WORD BitmapWritesFlushForLogFileFull;
//C       WORD BitmapWritesLazyWriter;
//C       WORD BitmapWritesUserRequest;
//C       struct {
//C         WORD Write;
//C         WORD Create;
//C         WORD SetInfo;
//C       } BitmapWritesUserLevel;
struct _N242
{
    WORD Write;
    WORD Create;
    WORD SetInfo;
}
//C       DWORD MftBitmapReads;
//C       DWORD MftBitmapReadBytes;
//C       DWORD MftBitmapWrites;
//C       DWORD MftBitmapWriteBytes;
//C       WORD MftBitmapWritesFlushForLogFileFull;
//C       WORD MftBitmapWritesLazyWriter;
//C       WORD MftBitmapWritesUserRequest;
//C       struct {
//C         WORD Write;
//C         WORD Create;
//C         WORD SetInfo;
//C         WORD Flush;
//C       } MftBitmapWritesUserLevel;
struct _N243
{
    WORD Write;
    WORD Create;
    WORD SetInfo;
    WORD Flush;
}
//C       DWORD UserIndexReads;
//C       DWORD UserIndexReadBytes;
//C       DWORD UserIndexWrites;
//C       DWORD UserIndexWriteBytes;
//C       DWORD LogFileReads;
//C       DWORD LogFileReadBytes;
//C       DWORD LogFileWrites;
//C       DWORD LogFileWriteBytes;
//C       struct {
//C         DWORD Calls;
//C         DWORD Clusters;
//C         DWORD Hints;
//C         DWORD RunsReturned;
//C         DWORD HintsHonored;
//C         DWORD HintsClusters;
//C         DWORD Cache;
//C         DWORD CacheClusters;
//C         DWORD CacheMiss;
//C         DWORD CacheMissClusters;
//C       } Allocate;
struct _N244
{
    DWORD Calls;
    DWORD Clusters;
    DWORD Hints;
    DWORD RunsReturned;
    DWORD HintsHonored;
    DWORD HintsClusters;
    DWORD Cache;
    DWORD CacheClusters;
    DWORD CacheMiss;
    DWORD CacheMissClusters;
}
//C     } NTFS_STATISTICS,*PNTFS_STATISTICS;
struct _NTFS_STATISTICS
{
    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;
    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    _N240 MftWritesUserLevel;
    WORD MftWritesFlushForLogFileFull;
    WORD MftWritesLazyWriter;
    WORD MftWritesUserRequest;
    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    _N241 Mft2WritesUserLevel;
    WORD Mft2WritesFlushForLogFileFull;
    WORD Mft2WritesLazyWriter;
    WORD Mft2WritesUserRequest;
    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;
    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;
    WORD BitmapWritesFlushForLogFileFull;
    WORD BitmapWritesLazyWriter;
    WORD BitmapWritesUserRequest;
    _N242 BitmapWritesUserLevel;
    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;
    WORD MftBitmapWritesFlushForLogFileFull;
    WORD MftBitmapWritesLazyWriter;
    WORD MftBitmapWritesUserRequest;
    _N243 MftBitmapWritesUserLevel;
    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;
    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;
    _N244 Allocate;
}
alias _NTFS_STATISTICS NTFS_STATISTICS;
alias _NTFS_STATISTICS *PNTFS_STATISTICS;
//C     typedef struct _FILE_OBJECTID_BUFFER {
//C       BYTE ObjectId[16];
//C        union {
//C          struct {
//C           BYTE BirthVolumeId[16];
//C           BYTE BirthObjectId[16];
//C           BYTE DomainId[16];
//C         } ;
struct _N246
{
    BYTE [16]BirthVolumeId;
    BYTE [16]BirthObjectId;
    BYTE [16]DomainId;
}
//C         BYTE ExtendedInfo[48];
//C       } ;
union _N245
{
    BYTE [16]BirthVolumeId;
    BYTE [16]BirthObjectId;
    BYTE [16]DomainId;
    BYTE [48]ExtendedInfo;
}
//C     } FILE_OBJECTID_BUFFER,*PFILE_OBJECTID_BUFFER;
struct _FILE_OBJECTID_BUFFER
{
    BYTE [16]ObjectId;
    BYTE [16]BirthVolumeId;
    BYTE [16]BirthObjectId;
    BYTE [16]DomainId;
    BYTE [48]ExtendedInfo;
}
alias _FILE_OBJECTID_BUFFER FILE_OBJECTID_BUFFER;
alias _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER;
//C     typedef struct _FILE_SET_SPARSE_BUFFER {
//C       BOOLEAN SetSparse;
//C     } FILE_SET_SPARSE_BUFFER,*PFILE_SET_SPARSE_BUFFER;
struct _FILE_SET_SPARSE_BUFFER
{
    BOOLEAN SetSparse;
}
alias _FILE_SET_SPARSE_BUFFER FILE_SET_SPARSE_BUFFER;
alias _FILE_SET_SPARSE_BUFFER *PFILE_SET_SPARSE_BUFFER;
//C     typedef struct _FILE_ZERO_DATA_INFORMATION {
//C       LARGE_INTEGER FileOffset;
//C       LARGE_INTEGER BeyondFinalZero;
//C     } FILE_ZERO_DATA_INFORMATION,*PFILE_ZERO_DATA_INFORMATION;
struct _FILE_ZERO_DATA_INFORMATION
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;
}
alias _FILE_ZERO_DATA_INFORMATION FILE_ZERO_DATA_INFORMATION;
alias _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION;
//C     typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
//C       LARGE_INTEGER FileOffset;
//C       LARGE_INTEGER Length;
//C     } FILE_ALLOCATED_RANGE_BUFFER,*PFILE_ALLOCATED_RANGE_BUFFER;
struct _FILE_ALLOCATED_RANGE_BUFFER
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;
}
alias _FILE_ALLOCATED_RANGE_BUFFER FILE_ALLOCATED_RANGE_BUFFER;
alias _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER;
//C     typedef struct _ENCRYPTION_BUFFER {
//C       DWORD EncryptionOperation;
//C       BYTE Private[1];
//C     } ENCRYPTION_BUFFER,*PENCRYPTION_BUFFER;
struct _ENCRYPTION_BUFFER
{
    DWORD EncryptionOperation;
    BYTE [1]Private;
}
alias _ENCRYPTION_BUFFER ENCRYPTION_BUFFER;
alias _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER;
//C     typedef struct _DECRYPTION_STATUS_BUFFER {
//C       BOOLEAN NoEncryptedStreams;
//C     } DECRYPTION_STATUS_BUFFER,*PDECRYPTION_STATUS_BUFFER;
struct _DECRYPTION_STATUS_BUFFER
{
    BOOLEAN NoEncryptedStreams;
}
alias _DECRYPTION_STATUS_BUFFER DECRYPTION_STATUS_BUFFER;
alias _DECRYPTION_STATUS_BUFFER *PDECRYPTION_STATUS_BUFFER;
//C     typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
//C       LONGLONG FileOffset;
//C       DWORD Length;
//C     } REQUEST_RAW_ENCRYPTED_DATA,*PREQUEST_RAW_ENCRYPTED_DATA;
struct _REQUEST_RAW_ENCRYPTED_DATA
{
    LONGLONG FileOffset;
    DWORD Length;
}
alias _REQUEST_RAW_ENCRYPTED_DATA REQUEST_RAW_ENCRYPTED_DATA;
alias _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA;
//C     typedef struct _ENCRYPTED_DATA_INFO {
//C       DWORDLONG StartingFileOffset;
//C       DWORD OutputBufferOffset;
//C       DWORD BytesWithinFileSize;
//C       DWORD BytesWithinValidDataLength;
//C       WORD CompressionFormat;
//C       BYTE DataUnitShift;
//C       BYTE ChunkShift;
//C       BYTE ClusterShift;
//C       BYTE EncryptionFormat;
//C       WORD NumberOfDataBlocks;
//C       DWORD DataBlockSize[1];
//C     } ENCRYPTED_DATA_INFO;
struct _ENCRYPTED_DATA_INFO
{
    DWORDLONG StartingFileOffset;
    DWORD OutputBufferOffset;
    DWORD BytesWithinFileSize;
    DWORD BytesWithinValidDataLength;
    WORD CompressionFormat;
    BYTE DataUnitShift;
    BYTE ChunkShift;
    BYTE ClusterShift;
    BYTE EncryptionFormat;
    WORD NumberOfDataBlocks;
    DWORD [1]DataBlockSize;
}
alias _ENCRYPTED_DATA_INFO ENCRYPTED_DATA_INFO;
//C     typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;
alias ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;
//C     typedef struct _PLEX_READ_DATA_REQUEST {
//C       LARGE_INTEGER ByteOffset;
//C       DWORD ByteLength;
//C       DWORD PlexNumber;
//C     } PLEX_READ_DATA_REQUEST,*PPLEX_READ_DATA_REQUEST;
struct _PLEX_READ_DATA_REQUEST
{
    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;
}
alias _PLEX_READ_DATA_REQUEST PLEX_READ_DATA_REQUEST;
alias _PLEX_READ_DATA_REQUEST *PPLEX_READ_DATA_REQUEST;
//C     typedef struct _SI_COPYFILE {
//C       DWORD SourceFileNameLength;
//C       DWORD DestinationFileNameLength;
//C       DWORD Flags;
//C       WCHAR FileNameBuffer[1];
//C     } SI_COPYFILE,*PSI_COPYFILE;
struct _SI_COPYFILE
{
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR [1]FileNameBuffer;
}
alias _SI_COPYFILE SI_COPYFILE;
alias _SI_COPYFILE *PSI_COPYFILE;
//C     typedef struct _STORAGE_DESCRIPTOR_HEADER {
//C       DWORD Version;
//C       DWORD Size;
//C     } STORAGE_DESCRIPTOR_HEADER,*PSTORAGE_DESCRIPTOR_HEADER;
struct _STORAGE_DESCRIPTOR_HEADER
{
    DWORD Version;
    DWORD Size;
}
alias _STORAGE_DESCRIPTOR_HEADER STORAGE_DESCRIPTOR_HEADER;
alias _STORAGE_DESCRIPTOR_HEADER *PSTORAGE_DESCRIPTOR_HEADER;
//C     typedef enum _STORAGE_PROPERTY_ID {
//C       StorageDeviceProperty = 0,
//C       StorageAdapterProperty = 1,
//C       StorageDeviceIdProperty = 2,
//C       StorageDeviceUniqueIdProperty = 3,
//C       StorageDeviceWriteCacheProperty = 4,
//C       StorageMiniportProperty = 5,
//C       StorageAccessAlignmentProperty = 6,
//C       StorageDeviceSeekPenaltyProperty = 7,
//C       StorageDeviceTrimProperty = 8
//C     } STORAGE_PROPERTY_ID,*PSTORAGE_PROPERTY_ID;
enum _STORAGE_PROPERTY_ID
{
    StorageDeviceProperty,
    StorageAdapterProperty,
    StorageDeviceIdProperty,
    StorageDeviceUniqueIdProperty,
    StorageDeviceWriteCacheProperty,
    StorageMiniportProperty,
    StorageAccessAlignmentProperty,
    StorageDeviceSeekPenaltyProperty,
    StorageDeviceTrimProperty,
}
alias _STORAGE_PROPERTY_ID STORAGE_PROPERTY_ID;
alias _STORAGE_PROPERTY_ID *PSTORAGE_PROPERTY_ID;
//C     typedef enum _STORAGE_QUERY_TYPE {
//C       PropertyStandardQuery = 0,
//C       PropertyExistsQuery = 1,
//C       PropertyMaskQuery = 2,
//C       PropertyQueryMaxDefined = 3
//C     } STORAGE_QUERY_TYPE,*PSTORAGE_QUERY_TYPE;
enum _STORAGE_QUERY_TYPE
{
    PropertyStandardQuery,
    PropertyExistsQuery,
    PropertyMaskQuery,
    PropertyQueryMaxDefined,
}
alias _STORAGE_QUERY_TYPE STORAGE_QUERY_TYPE;
alias _STORAGE_QUERY_TYPE *PSTORAGE_QUERY_TYPE;
//C     typedef struct _STORAGE_PROPERTY_QUERY {
//C       STORAGE_PROPERTY_ID PropertyId;
//C       STORAGE_QUERY_TYPE QueryType;
//C       BYTE AdditionalParameters[1];
//C     } STORAGE_PROPERTY_QUERY,*PSTORAGE_PROPERTY_QUERY;
struct _STORAGE_PROPERTY_QUERY
{
    STORAGE_PROPERTY_ID PropertyId;
    STORAGE_QUERY_TYPE QueryType;
    BYTE [1]AdditionalParameters;
}
alias _STORAGE_PROPERTY_QUERY STORAGE_PROPERTY_QUERY;
alias _STORAGE_PROPERTY_QUERY *PSTORAGE_PROPERTY_QUERY;
//C     typedef struct _STORAGE_DEVICE_DESCRIPTOR {
//C       DWORD Version;
//C       DWORD Size;
//C       BYTE DeviceType;
//C       BYTE DeviceTypeModifier;
//C       BOOLEAN RemovableMedia;
//C       BOOLEAN CommandQueueing;
//C       DWORD VendorIdOffset;
//C       DWORD ProductIdOffset;
//C       DWORD ProductRevisionOffset;
//C       DWORD SerialNumberOffset;
//C       STORAGE_BUS_TYPE BusType;
//C       DWORD RawPropertiesLength;
//C       BYTE RawDeviceProperties[1];
//C     } STORAGE_DEVICE_DESCRIPTOR,*PSTORAGE_DEVICE_DESCRIPTOR;
struct _STORAGE_DEVICE_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BYTE DeviceType;
    BYTE DeviceTypeModifier;
    BOOLEAN RemovableMedia;
    BOOLEAN CommandQueueing;
    DWORD VendorIdOffset;
    DWORD ProductIdOffset;
    DWORD ProductRevisionOffset;
    DWORD SerialNumberOffset;
    STORAGE_BUS_TYPE BusType;
    DWORD RawPropertiesLength;
    BYTE [1]RawDeviceProperties;
}
alias _STORAGE_DEVICE_DESCRIPTOR STORAGE_DEVICE_DESCRIPTOR;
alias _STORAGE_DEVICE_DESCRIPTOR *PSTORAGE_DEVICE_DESCRIPTOR;
//C     typedef struct _STORAGE_ADAPTER_DESCRIPTOR {
//C       DWORD Version;
//C       DWORD Size;
//C       DWORD MaximumTransferLength;
//C       DWORD MaximumPhysicalPages;
//C       DWORD AlignmentMask;
//C       BOOLEAN AdapterUsesPio;
//C       BOOLEAN AdapterScansDown;
//C       BOOLEAN CommandQueueing;
//C       BOOLEAN AcceleratedTransfer;
//C       BYTE BusType;
//C       WORD BusMajorVersion;
//C       WORD BusMinorVersion;
//C     } STORAGE_ADAPTER_DESCRIPTOR,*PSTORAGE_ADAPTER_DESCRIPTOR;
struct _STORAGE_ADAPTER_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD MaximumTransferLength;
    DWORD MaximumPhysicalPages;
    DWORD AlignmentMask;
    BOOLEAN AdapterUsesPio;
    BOOLEAN AdapterScansDown;
    BOOLEAN CommandQueueing;
    BOOLEAN AcceleratedTransfer;
    BYTE BusType;
    WORD BusMajorVersion;
    WORD BusMinorVersion;
}
alias _STORAGE_ADAPTER_DESCRIPTOR STORAGE_ADAPTER_DESCRIPTOR;
alias _STORAGE_ADAPTER_DESCRIPTOR *PSTORAGE_ADAPTER_DESCRIPTOR;
//C     typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {
//C       DWORD Version;
//C       DWORD Size;
//C       DWORD NumberOfIdentifiers;
//C       BYTE Identifiers[1];
//C     } STORAGE_DEVICE_ID_DESCRIPTOR,*PSTORAGE_DEVICE_ID_DESCRIPTOR;
struct _STORAGE_DEVICE_ID_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfIdentifiers;
    BYTE [1]Identifiers;
}
alias _STORAGE_DEVICE_ID_DESCRIPTOR STORAGE_DEVICE_ID_DESCRIPTOR;
alias _STORAGE_DEVICE_ID_DESCRIPTOR *PSTORAGE_DEVICE_ID_DESCRIPTOR;
//C     typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
//C       ULONGLONG GptAttributes;
//C     } VOLUME_GET_GPT_ATTRIBUTES_INFORMATION,*PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
{
    ULONGLONG GptAttributes;
}
alias _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
alias _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
//C     typedef struct _DISK_EXTENT {
//C       DWORD DiskNumber;
//C       LARGE_INTEGER StartingOffset;
//C       LARGE_INTEGER ExtentLength;
//C     } DISK_EXTENT,*PDISK_EXTENT;
struct _DISK_EXTENT
{
    DWORD DiskNumber;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;
}
alias _DISK_EXTENT DISK_EXTENT;
alias _DISK_EXTENT *PDISK_EXTENT;
//C     typedef struct _VOLUME_DISK_EXTENTS {
//C       DWORD NumberOfDiskExtents;
//C       DISK_EXTENT Extents[1];
//C     } VOLUME_DISK_EXTENTS,*PVOLUME_DISK_EXTENTS;
struct _VOLUME_DISK_EXTENTS
{
    DWORD NumberOfDiskExtents;
    DISK_EXTENT [1]Extents;
}
alias _VOLUME_DISK_EXTENTS VOLUME_DISK_EXTENTS;
alias _VOLUME_DISK_EXTENTS *PVOLUME_DISK_EXTENTS;
//C       typedef WORD UWORD;
alias WORD UWORD;
//C       typedef struct _SCARD_IO_REQUEST {
//C         DWORD dwProtocol;
//C         DWORD cbPciLength;
//C       } SCARD_IO_REQUEST,*PSCARD_IO_REQUEST,*LPSCARD_IO_REQUEST;
struct _SCARD_IO_REQUEST
{
    DWORD dwProtocol;
    DWORD cbPciLength;
}
alias _SCARD_IO_REQUEST SCARD_IO_REQUEST;
alias _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;
alias _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;
//C       typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;
alias SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;
//C       typedef struct {
//C         BYTE
//C           bCla,bIns,bP1,bP2,bP3;
//C       } SCARD_T0_COMMAND,*LPSCARD_T0_COMMAND;
struct _N247
{
    BYTE bCla;
    BYTE bIns;
    BYTE bP1;
    BYTE bP2;
    BYTE bP3;
}
alias _N247 SCARD_T0_COMMAND;
alias _N247 *LPSCARD_T0_COMMAND;
//C       typedef struct {
//C         SCARD_IO_REQUEST ioRequest;
//C         BYTE bSw1,bSw2;
//C          union {
//C           SCARD_T0_COMMAND CmdBytes;
//C           BYTE rgbHeader[5];
//C         };
union _N249
{
    SCARD_T0_COMMAND CmdBytes;
    BYTE [5]rgbHeader;
}
//C       } SCARD_T0_REQUEST;
struct _N248
{
    SCARD_IO_REQUEST ioRequest;
    BYTE bSw1;
    BYTE bSw2;
    SCARD_T0_COMMAND CmdBytes;
    BYTE [5]rgbHeader;
}
alias _N248 SCARD_T0_REQUEST;
//C       typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST,*LPSCARD_T0_REQUEST;
alias SCARD_T0_REQUEST *PSCARD_T0_REQUEST;
alias SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;
//C       typedef struct {
//C         SCARD_IO_REQUEST ioRequest;
//C       } SCARD_T1_REQUEST;
struct _N250
{
    SCARD_IO_REQUEST ioRequest;
}
alias _N250 SCARD_T1_REQUEST;
//C       typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST,*LPSCARD_T1_REQUEST;
alias SCARD_T1_REQUEST *PSCARD_T1_REQUEST;
alias SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;
//C       typedef const BYTE *LPCBYTE;
alias BYTE *LPCBYTE;
//C        extern const SCARD_IO_REQUEST g_rgSCardT0Pci,g_rgSCardT1Pci,g_rgSCardRawPci;
extern const SCARD_IO_REQUEST g_rgSCardT0Pci;
extern const SCARD_IO_REQUEST g_rgSCardT1Pci;
extern const SCARD_IO_REQUEST g_rgSCardRawPci;
//C       typedef ULONG_PTR SCARDCONTEXT;
alias ULONG_PTR SCARDCONTEXT;
//C       typedef SCARDCONTEXT *PSCARDCONTEXT,*LPSCARDCONTEXT;
alias SCARDCONTEXT *PSCARDCONTEXT;
alias SCARDCONTEXT *LPSCARDCONTEXT;
//C       typedef ULONG_PTR SCARDHANDLE;
alias ULONG_PTR SCARDHANDLE;
//C       typedef SCARDHANDLE *PSCARDHANDLE,*LPSCARDHANDLE;
alias SCARDHANDLE *PSCARDHANDLE;
alias SCARDHANDLE *LPSCARDHANDLE;
//C       extern LONG SCardEstablishContext(DWORD dwScope,LPCVOID pvReserved1,LPCVOID pvReserved2,LPSCARDCONTEXT phContext);
LONG  SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext);
//C       extern LONG SCardReleaseContext(SCARDCONTEXT hContext);
LONG  SCardReleaseContext(SCARDCONTEXT hContext);
//C       extern LONG SCardIsValidContext(SCARDCONTEXT hContext);
LONG  SCardIsValidContext(SCARDCONTEXT hContext);
//C       extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext,LPSTR mszGroups,LPDWORD pcchGroups);
LONG  SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups);
//C       extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext,LPWSTR mszGroups,LPDWORD pcchGroups);
LONG  SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups);
//C       extern LONG SCardListReadersA(SCARDCONTEXT hContext,LPCSTR mszGroups,LPSTR mszReaders,LPDWORD pcchReaders);
LONG  SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders);
//C       extern LONG SCardListReadersW(SCARDCONTEXT hContext,LPCWSTR mszGroups,LPWSTR mszReaders,LPDWORD pcchReaders);
LONG  SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders);
//C       extern LONG SCardListCardsA(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPSTR mszCards,LPDWORD pcchCards);
LONG  SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, LPSTR mszCards, LPDWORD pcchCards);
//C       extern LONG SCardListCardsW(SCARDCONTEXT hContext,LPCBYTE pbAtr,LPCGUID rgquidInterfaces,DWORD cguidInterfaceCount,LPWSTR mszCards,LPDWORD pcchCards);
LONG  SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, LPWSTR mszCards, LPDWORD pcchCards);
//C       extern LONG SCardListInterfacesA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces);
LONG  SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces);
//C       extern LONG SCardListInterfacesW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidInterfaces,LPDWORD pcguidInterfaces);
LONG  SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces);
//C       extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext,LPCSTR szCard,LPGUID pguidProviderId);
LONG  SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId);
//C       extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext,LPCWSTR szCard,LPGUID pguidProviderId);
LONG  SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId);
//C       extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPSTR szProvider,LPDWORD pcchProvider);
LONG  SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPSTR szProvider, LPDWORD pcchProvider);
//C       extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPWSTR szProvider,LPDWORD pcchProvider);
LONG  SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPWSTR szProvider, LPDWORD pcchProvider);
//C       extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName);
LONG  SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName);
//C       extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName);
LONG  SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName);
//C       extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext,LPCSTR szGroupName);
LONG  SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName);
//C       extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext,LPCWSTR szGroupName);
LONG  SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName);
//C       extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szDeviceName);
LONG  SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName);
//C       extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szDeviceName);
LONG  SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName);
//C       extern LONG SCardForgetReaderA(SCARDCONTEXT hContext,LPCSTR szReaderName);
LONG  SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName);
//C       extern LONG SCardForgetReaderW(SCARDCONTEXT hContext,LPCWSTR szReaderName);
LONG  SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName);
//C       extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName);
LONG  SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName);
//C       extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName);
LONG  SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName);
//C       extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext,LPCSTR szReaderName,LPCSTR szGroupName);
LONG  SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName);
//C       extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext,LPCWSTR szReaderName,LPCWSTR szGroupName);
LONG  SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName);
//C       extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen);
LONG  SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen);
//C       extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName,LPCGUID pguidPrimaryProvider,LPCGUID rgguidInterfaces,DWORD dwInterfaceCount,LPCBYTE pbAtr,LPCBYTE pbAtrMask,DWORD cbAtrLen);
LONG  SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen);
//C       extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext,LPCSTR szCardName,DWORD dwProviderId,LPCSTR szProvider);
LONG  SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider);
//C       extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext,LPCWSTR szCardName,DWORD dwProviderId,LPCWSTR szProvider);
LONG  SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider);
//C       extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext,LPCSTR szCardName);
LONG  SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName);
//C       extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext,LPCWSTR szCardName);
LONG  SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName);
//C       extern LONG SCardFreeMemory(SCARDCONTEXT hContext,LPCVOID pvMem);
LONG  SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem);
//C       extern HANDLE SCardAccessStartedEvent(void);
HANDLE  SCardAccessStartedEvent();
//C       extern void SCardReleaseStartedEvent(void);
void  SCardReleaseStartedEvent();
//C       typedef struct {
//C         LPCSTR szReader;
//C         LPVOID pvUserData;
//C         DWORD dwCurrentState;
//C         DWORD dwEventState;
//C         DWORD cbAtr;
//C         BYTE rgbAtr[36];
//C       } SCARD_READERSTATEA,*PSCARD_READERSTATEA,*LPSCARD_READERSTATEA;
struct _N251
{
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE [36]rgbAtr;
}
alias _N251 SCARD_READERSTATEA;
alias _N251 *PSCARD_READERSTATEA;
alias _N251 *LPSCARD_READERSTATEA;
//C       typedef struct {
//C         LPCWSTR szReader;
//C         LPVOID pvUserData;
//C         DWORD dwCurrentState;
//C         DWORD dwEventState;
//C         DWORD cbAtr;
//C         BYTE rgbAtr[36];
//C       } SCARD_READERSTATEW,*PSCARD_READERSTATEW,*LPSCARD_READERSTATEW;
struct _N252
{
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE [36]rgbAtr;
}
alias _N252 SCARD_READERSTATEW;
alias _N252 *PSCARD_READERSTATEW;
alias _N252 *LPSCARD_READERSTATEW;
//C       typedef SCARD_READERSTATEA SCARD_READERSTATE;
alias SCARD_READERSTATEA SCARD_READERSTATE;
//C       typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
alias PSCARD_READERSTATEA PSCARD_READERSTATE;
//C       typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
alias LPSCARD_READERSTATEA LPSCARD_READERSTATE;
//C       extern LONG SCardLocateCardsA(SCARDCONTEXT hContext,LPCSTR mszCards,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
LONG  SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
//C       extern LONG SCardLocateCardsW(SCARDCONTEXT hContext,LPCWSTR mszCards,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
LONG  SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
//C       typedef struct _SCARD_ATRMASK {
//C         DWORD cbAtr;
//C         BYTE rgbAtr[36];
//C         BYTE rgbMask[36];
//C       } SCARD_ATRMASK,*PSCARD_ATRMASK,*LPSCARD_ATRMASK;
struct _SCARD_ATRMASK
{
    DWORD cbAtr;
    BYTE [36]rgbAtr;
    BYTE [36]rgbMask;
}
alias _SCARD_ATRMASK SCARD_ATRMASK;
alias _SCARD_ATRMASK *PSCARD_ATRMASK;
alias _SCARD_ATRMASK *LPSCARD_ATRMASK;
//C       extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
LONG  SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
//C       extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext,LPSCARD_ATRMASK rgAtrMasks,DWORD cAtrs,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
LONG  SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
//C       extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEA rgReaderStates,DWORD cReaders);
LONG  SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders);
//C       extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext,DWORD dwTimeout,LPSCARD_READERSTATEW rgReaderStates,DWORD cReaders);
LONG  SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders);
//C       extern LONG SCardCancel(SCARDCONTEXT hContext);
LONG  SCardCancel(SCARDCONTEXT hContext);
//C       extern LONG SCardConnectA(SCARDCONTEXT hContext,LPCSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol);
LONG  SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol);
//C       extern LONG SCardConnectW(SCARDCONTEXT hContext,LPCWSTR szReader,DWORD dwShareMode,DWORD dwPreferredProtocols,LPSCARDHANDLE phCard,LPDWORD pdwActiveProtocol);
LONG  SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol);
//C       extern LONG SCardReconnect(SCARDHANDLE hCard,DWORD dwShareMode,DWORD dwPreferredProtocols,DWORD dwInitialization,LPDWORD pdwActiveProtocol);
LONG  SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol);
//C       extern LONG SCardDisconnect(SCARDHANDLE hCard,DWORD dwDisposition);
LONG  SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition);
//C       extern LONG SCardBeginTransaction(SCARDHANDLE hCard);
LONG  SCardBeginTransaction(SCARDHANDLE hCard);
//C       extern LONG SCardEndTransaction(SCARDHANDLE hCard,DWORD dwDisposition);
LONG  SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition);
//C       extern LONG SCardCancelTransaction(SCARDHANDLE hCard);
LONG  SCardCancelTransaction(SCARDHANDLE hCard);
//C       extern LONG SCardState(SCARDHANDLE hCard,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
LONG  SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
//C       extern LONG SCardStatusA(SCARDHANDLE hCard,LPSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
LONG  SCardStatusA(SCARDHANDLE hCard, LPSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
//C       extern LONG SCardStatusW(SCARDHANDLE hCard,LPWSTR szReaderName,LPDWORD pcchReaderLen,LPDWORD pdwState,LPDWORD pdwProtocol,LPBYTE pbAtr,LPDWORD pcbAtrLen);
LONG  SCardStatusW(SCARDHANDLE hCard, LPWSTR szReaderName, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen);
//C       extern LONG SCardTransmit(SCARDHANDLE hCard,LPCSCARD_IO_REQUEST pioSendPci,LPCBYTE pbSendBuffer,DWORD cbSendLength,LPSCARD_IO_REQUEST pioRecvPci,LPBYTE pbRecvBuffer,LPDWORD pcbRecvLength);
LONG  SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength);
//C       extern LONG SCardControl(SCARDHANDLE hCard,DWORD dwControlCode,LPCVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned);
LONG  SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned);
//C       extern LONG SCardGetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPBYTE pbAttr,LPDWORD pcbAttrLen);
LONG  SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen);
//C       extern LONG SCardSetAttrib(SCARDHANDLE hCard,DWORD dwAttrId,LPCBYTE pbAttr,DWORD cbAttrLen);
LONG  SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen);
//C       typedef SCARDHANDLE ( *LPOCNCONNPROCA) (SCARDCONTEXT,LPSTR,LPSTR,PVOID);
alias SCARDHANDLE  function(SCARDCONTEXT , LPSTR , LPSTR , PVOID )LPOCNCONNPROCA;
//C       typedef SCARDHANDLE ( *LPOCNCONNPROCW) (SCARDCONTEXT,LPWSTR,LPWSTR,PVOID);
alias SCARDHANDLE  function(SCARDCONTEXT , LPWSTR , LPWSTR , PVOID )LPOCNCONNPROCW;
//C       typedef WINBOOL ( *LPOCNCHKPROC) (SCARDCONTEXT,SCARDHANDLE,PVOID);
alias WINBOOL  function(SCARDCONTEXT , SCARDHANDLE , PVOID )LPOCNCHKPROC;
//C       typedef void ( *LPOCNDSCPROC) (SCARDCONTEXT,SCARDHANDLE,PVOID);
alias void  function(SCARDCONTEXT , SCARDHANDLE , PVOID )LPOCNDSCPROC;
//C       typedef struct {
//C         DWORD dwStructSize;
//C         LPSTR lpstrGroupNames;
//C         DWORD nMaxGroupNames;
//C         LPCGUID rgguidInterfaces;
//C         DWORD cguidInterfaces;
//C         LPSTR lpstrCardNames;
//C         DWORD nMaxCardNames;
//C         LPOCNCHKPROC lpfnCheck;
//C         LPOCNCONNPROCA lpfnConnect;
//C         LPOCNDSCPROC lpfnDisconnect;
//C         LPVOID pvUserData;
//C         DWORD dwShareMode;
//C         DWORD dwPreferredProtocols;
//C       } OPENCARD_SEARCH_CRITERIAA,*POPENCARD_SEARCH_CRITERIAA,*LPOPENCARD_SEARCH_CRITERIAA;
struct _N253
{
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
}
alias _N253 OPENCARD_SEARCH_CRITERIAA;
alias _N253 *POPENCARD_SEARCH_CRITERIAA;
alias _N253 *LPOPENCARD_SEARCH_CRITERIAA;
//C       typedef struct {
//C         DWORD dwStructSize;
//C         LPWSTR lpstrGroupNames;
//C         DWORD nMaxGroupNames;
//C         LPCGUID rgguidInterfaces;
//C         DWORD cguidInterfaces;
//C         LPWSTR lpstrCardNames;
//C         DWORD nMaxCardNames;
//C         LPOCNCHKPROC lpfnCheck;
//C         LPOCNCONNPROCW lpfnConnect;
//C         LPOCNDSCPROC lpfnDisconnect;
//C         LPVOID pvUserData;
//C         DWORD dwShareMode;
//C         DWORD dwPreferredProtocols;
//C       } OPENCARD_SEARCH_CRITERIAW,*POPENCARD_SEARCH_CRITERIAW,*LPOPENCARD_SEARCH_CRITERIAW;
struct _N254
{
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
}
alias _N254 OPENCARD_SEARCH_CRITERIAW;
alias _N254 *POPENCARD_SEARCH_CRITERIAW;
alias _N254 *LPOPENCARD_SEARCH_CRITERIAW;
//C       typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
alias OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
//C       typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
alias POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
//C       typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
alias LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
//C       typedef struct {
//C         DWORD dwStructSize;
//C         SCARDCONTEXT hSCardContext;
//C         HWND hwndOwner;
//C         DWORD dwFlags;
//C         LPCSTR lpstrTitle;
//C         LPCSTR lpstrSearchDesc;
//C         HICON hIcon;
//C         POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
//C         LPOCNCONNPROCA lpfnConnect;
//C         LPVOID pvUserData;
//C         DWORD dwShareMode;
//C         DWORD dwPreferredProtocols;
//C         LPSTR lpstrRdr;
//C         DWORD nMaxRdr;
//C         LPSTR lpstrCard;
//C         DWORD nMaxCard;
//C         DWORD dwActiveProtocol;
//C         SCARDHANDLE hCardHandle;
//C       } OPENCARDNAME_EXA,*POPENCARDNAME_EXA,*LPOPENCARDNAME_EXA;
struct _N255
{
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
}
alias _N255 OPENCARDNAME_EXA;
alias _N255 *POPENCARDNAME_EXA;
alias _N255 *LPOPENCARDNAME_EXA;
//C       typedef struct {
//C         DWORD dwStructSize;
//C         SCARDCONTEXT hSCardContext;
//C         HWND hwndOwner;
//C         DWORD dwFlags;
//C         LPCWSTR lpstrTitle;
//C         LPCWSTR lpstrSearchDesc;
//C         HICON hIcon;
//C         POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
//C         LPOCNCONNPROCW lpfnConnect;
//C         LPVOID pvUserData;
//C         DWORD dwShareMode;
//C         DWORD dwPreferredProtocols;
//C         LPWSTR lpstrRdr;
//C         DWORD nMaxRdr;
//C         LPWSTR lpstrCard;
//C         DWORD nMaxCard;
//C         DWORD dwActiveProtocol;
//C         SCARDHANDLE hCardHandle;
//C       } OPENCARDNAME_EXW,*POPENCARDNAME_EXW,*LPOPENCARDNAME_EXW;
struct _N256
{
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
}
alias _N256 OPENCARDNAME_EXW;
alias _N256 *POPENCARDNAME_EXW;
alias _N256 *LPOPENCARDNAME_EXW;
//C       typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
alias OPENCARDNAME_EXA OPENCARDNAME_EX;
//C       typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
alias POPENCARDNAME_EXA POPENCARDNAME_EX;
//C       typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
alias LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
//C       extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA);
LONG  SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA );
//C       extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW);
LONG  SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW );
//C       typedef struct {
//C         DWORD dwStructSize;
//C         HWND hwndOwner;
//C         SCARDCONTEXT hSCardContext;
//C         LPSTR lpstrGroupNames;
//C         DWORD nMaxGroupNames;
//C         LPSTR lpstrCardNames;
//C         DWORD nMaxCardNames;
//C         LPCGUID rgguidInterfaces;
//C         DWORD cguidInterfaces;
//C         LPSTR lpstrRdr;
//C         DWORD nMaxRdr;
//C         LPSTR lpstrCard;
//C         DWORD nMaxCard;
//C         LPCSTR lpstrTitle;
//C         DWORD dwFlags;
//C         LPVOID pvUserData;
//C         DWORD dwShareMode;
//C         DWORD dwPreferredProtocols;
//C         DWORD dwActiveProtocol;
//C         LPOCNCONNPROCA lpfnConnect;
//C         LPOCNCHKPROC lpfnCheck;
//C         LPOCNDSCPROC lpfnDisconnect;
//C         SCARDHANDLE hCardHandle;
//C       } OPENCARDNAMEA,*POPENCARDNAMEA,*LPOPENCARDNAMEA;
struct _N257
{
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
}
alias _N257 OPENCARDNAMEA;
alias _N257 *POPENCARDNAMEA;
alias _N257 *LPOPENCARDNAMEA;
//C       typedef struct {
//C         DWORD dwStructSize;
//C         HWND hwndOwner;
//C         SCARDCONTEXT hSCardContext;
//C         LPWSTR lpstrGroupNames;
//C         DWORD nMaxGroupNames;
//C         LPWSTR lpstrCardNames;
//C         DWORD nMaxCardNames;
//C         LPCGUID rgguidInterfaces;
//C         DWORD cguidInterfaces;
//C         LPWSTR lpstrRdr;
//C         DWORD nMaxRdr;
//C         LPWSTR lpstrCard;
//C         DWORD nMaxCard;
//C         LPCWSTR lpstrTitle;
//C         DWORD dwFlags;
//C         LPVOID pvUserData;
//C         DWORD dwShareMode;
//C         DWORD dwPreferredProtocols;
//C         DWORD dwActiveProtocol;
//C         LPOCNCONNPROCW lpfnConnect;
//C         LPOCNCHKPROC lpfnCheck;
//C         LPOCNDSCPROC lpfnDisconnect;
//C         SCARDHANDLE hCardHandle;
//C       } OPENCARDNAMEW,*POPENCARDNAMEW,*LPOPENCARDNAMEW;
struct _N258
{
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
}
alias _N258 OPENCARDNAMEW;
alias _N258 *POPENCARDNAMEW;
alias _N258 *LPOPENCARDNAMEW;
//C       typedef OPENCARDNAMEA OPENCARDNAME;
alias OPENCARDNAMEA OPENCARDNAME;
//C       typedef POPENCARDNAMEA POPENCARDNAME;
alias POPENCARDNAMEA POPENCARDNAME;
//C       typedef LPOPENCARDNAMEA LPOPENCARDNAME;
alias LPOPENCARDNAMEA LPOPENCARDNAME;
//C       extern LONG GetOpenCardNameA(LPOPENCARDNAMEA);
LONG  GetOpenCardNameA(LPOPENCARDNAMEA );
//C       extern LONG GetOpenCardNameW(LPOPENCARDNAMEW);
LONG  GetOpenCardNameW(LPOPENCARDNAMEW );
//C       extern LONG SCardDlgExtendedError(void);
LONG  SCardDlgExtendedError();
//C       struct _PSP;
//C       struct _PROPSHEETPAGEA;
//C       struct _PROPSHEETPAGEW;
//C       typedef struct _PSP *HPROPSHEETPAGE;
alias _PSP *HPROPSHEETPAGE;
//C       typedef UINT ( *LPFNPSPCALLBACKA)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEA *ppsp);
alias UINT  function(HWND hwnd, UINT uMsg, _PROPSHEETPAGEA *ppsp)LPFNPSPCALLBACKA;
//C       typedef UINT ( *LPFNPSPCALLBACKW)(HWND hwnd,UINT uMsg,struct _PROPSHEETPAGEW *ppsp);
alias UINT  function(HWND hwnd, UINT uMsg, _PROPSHEETPAGEW *ppsp)LPFNPSPCALLBACKW;
//C       typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
alias LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
//C       typedef struct _PROPSHEETPAGEA_V1 {
//C         DWORD dwSize,dwFlags; HINSTANCE hInstance;  union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ;  union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
union _N259
{
    LPCSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
}
union _N260
{
    HICON hIcon;
    LPCSTR pszIcon;
}
//C       } PROPSHEETPAGEA_V1,*LPPROPSHEETPAGEA_V1;
struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    LPCSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
    HICON hIcon;
    LPCSTR pszIcon;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;
}
alias _PROPSHEETPAGEA_V1 PROPSHEETPAGEA_V1;
alias _PROPSHEETPAGEA_V1 *LPPROPSHEETPAGEA_V1;
//C       typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;
alias PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;
//C       typedef struct _PROPSHEETPAGEA_V2 {
//C         DWORD dwSize,dwFlags; HINSTANCE hInstance;  union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ;  union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
union _N261
{
    LPCSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
}
union _N262
{
    HICON hIcon;
    LPCSTR pszIcon;
}
//C           LPCSTR pszHeaderTitle;
//C         LPCSTR pszHeaderSubTitle;
//C       } PROPSHEETPAGEA_V2,*LPPROPSHEETPAGEA_V2;
struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    LPCSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
    HICON hIcon;
    LPCSTR pszIcon;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;
    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
}
alias _PROPSHEETPAGEA_V2 PROPSHEETPAGEA_V2;
alias _PROPSHEETPAGEA_V2 *LPPROPSHEETPAGEA_V2;
//C       typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;
alias PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;
//C       typedef struct _PROPSHEETPAGEA {
//C         DWORD dwSize,dwFlags; HINSTANCE hInstance;  union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ;  union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
union _N263
{
    LPCSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
}
union _N264
{
    HICON hIcon;
    LPCSTR pszIcon;
}
//C           LPCSTR pszHeaderTitle;
//C         LPCSTR pszHeaderSubTitle;
//C         HANDLE hActCtx;
//C       } PROPSHEETPAGEA_V3,*LPPROPSHEETPAGEA_V3;
struct _PROPSHEETPAGEA
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    LPCSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
    HICON hIcon;
    LPCSTR pszIcon;
    LPCSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    UINT *pcRefParent;
    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
    HANDLE hActCtx;
}
alias _PROPSHEETPAGEA PROPSHEETPAGEA_V3;
alias _PROPSHEETPAGEA *LPPROPSHEETPAGEA_V3;
//C       typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;
alias PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;
//C       typedef struct _PROPSHEETPAGEW_V1 {
//C         DWORD dwSize,dwFlags; HINSTANCE hInstance;  union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ;  union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
union _N265
{
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
}
union _N266
{
    HICON hIcon;
    LPCWSTR pszIcon;
}
//C       } PROPSHEETPAGEW_V1,*LPPROPSHEETPAGEW_V1;
struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
    HICON hIcon;
    LPCWSTR pszIcon;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;
}
alias _PROPSHEETPAGEW_V1 PROPSHEETPAGEW_V1;
alias _PROPSHEETPAGEW_V1 *LPPROPSHEETPAGEW_V1;
//C       typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;
alias PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;
//C       typedef struct _PROPSHEETPAGEW_V2 {
//C         DWORD dwSize,dwFlags; HINSTANCE hInstance;  union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ;  union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
union _N267
{
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
}
union _N268
{
    HICON hIcon;
    LPCWSTR pszIcon;
}
//C           LPCWSTR pszHeaderTitle;
//C         LPCWSTR pszHeaderSubTitle;
//C       } PROPSHEETPAGEW_V2,*LPPROPSHEETPAGEW_V2;
struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
    HICON hIcon;
    LPCWSTR pszIcon;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;
    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
}
alias _PROPSHEETPAGEW_V2 PROPSHEETPAGEW_V2;
alias _PROPSHEETPAGEW_V2 *LPPROPSHEETPAGEW_V2;
//C       typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;
alias PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;
//C       typedef struct _PROPSHEETPAGEW {
//C         DWORD dwSize,dwFlags; HINSTANCE hInstance;  union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ;  union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
union _N269
{
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
}
union _N270
{
    HICON hIcon;
    LPCWSTR pszIcon;
}
//C           LPCWSTR pszHeaderTitle;
//C         LPCWSTR pszHeaderSubTitle;
//C         HANDLE hActCtx;
//C       } PROPSHEETPAGEW_V3,*LPPROPSHEETPAGEW_V3;
struct _PROPSHEETPAGEW
{
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
    HICON hIcon;
    LPCWSTR pszIcon;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT *pcRefParent;
    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
    HANDLE hActCtx;
}
alias _PROPSHEETPAGEW PROPSHEETPAGEW_V3;
alias _PROPSHEETPAGEW *LPPROPSHEETPAGEW_V3;
//C       typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;
alias PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;
//C       typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
alias PROPSHEETPAGEA_V3 PROPSHEETPAGEA_LATEST;
//C       typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
alias PROPSHEETPAGEW_V3 PROPSHEETPAGEW_LATEST;
//C       typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
alias LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA_LATEST;
//C       typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
alias LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW_LATEST;
//C       typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
alias LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
//C       typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;
alias LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;
//C       typedef PROPSHEETPAGEA_V3 PROPSHEETPAGEA;
alias PROPSHEETPAGEA_V3 PROPSHEETPAGEA;
//C       typedef PROPSHEETPAGEW_V3 PROPSHEETPAGEW;
alias PROPSHEETPAGEW_V3 PROPSHEETPAGEW;
//C       typedef LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA;
alias LPPROPSHEETPAGEA_V3 LPPROPSHEETPAGEA;
//C       typedef LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW;
alias LPPROPSHEETPAGEW_V3 LPPROPSHEETPAGEW;
//C       typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA;
alias LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA;
//C       typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW;
alias LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW;
//C       typedef int ( *PFNPROPSHEETCALLBACK)(HWND,UINT,LPARAM);
alias int  function(HWND , UINT , LPARAM )PFNPROPSHEETCALLBACK;
//C       typedef struct _PROPSHEETHEADERA {
//C         DWORD dwSize;
//C         DWORD dwFlags;
//C         HWND hwndParent;
//C         HINSTANCE hInstance;
//C          union {
//C           HICON hIcon;
//C           LPCSTR pszIcon;
//C         } ;
union _N271
{
    HICON hIcon;
    LPCSTR pszIcon;
}
//C         LPCSTR pszCaption;
//C         UINT nPages;
//C          union {
//C           UINT nStartPage;
//C           LPCSTR pStartPage;
//C         } ;
union _N272
{
    UINT nStartPage;
    LPCSTR pStartPage;
}
//C          union {
//C           LPCPROPSHEETPAGEA ppsp;
//C           HPROPSHEETPAGE *phpage;
//C         } ;
union _N273
{
    LPCPROPSHEETPAGEA ppsp;
    HPROPSHEETPAGE *phpage;
}
//C         PFNPROPSHEETCALLBACK pfnCallback;
//C          union {
//C           HBITMAP hbmWatermark;
//C           LPCSTR pszbmWatermark;
//C         } ;
union _N274
{
    HBITMAP hbmWatermark;
    LPCSTR pszbmWatermark;
}
//C         HPALETTE hplWatermark;
//C          union {
//C           HBITMAP hbmHeader;
//C           LPCSTR pszbmHeader;
//C         } ;
union _N275
{
    HBITMAP hbmHeader;
    LPCSTR pszbmHeader;
}
//C       } PROPSHEETHEADERA,*LPPROPSHEETHEADERA;
struct _PROPSHEETHEADERA
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    HICON hIcon;
    LPCSTR pszIcon;
    LPCSTR pszCaption;
    UINT nPages;
    UINT nStartPage;
    LPCSTR pStartPage;
    LPCPROPSHEETPAGEA ppsp;
    HPROPSHEETPAGE *phpage;
    PFNPROPSHEETCALLBACK pfnCallback;
    HBITMAP hbmWatermark;
    LPCSTR pszbmWatermark;
    HPALETTE hplWatermark;
    HBITMAP hbmHeader;
    LPCSTR pszbmHeader;
}
alias _PROPSHEETHEADERA PROPSHEETHEADERA;
alias _PROPSHEETHEADERA *LPPROPSHEETHEADERA;
//C       typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
alias PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
//C       typedef struct _PROPSHEETHEADERW {
//C         DWORD dwSize;
//C         DWORD dwFlags;
//C         HWND hwndParent;
//C         HINSTANCE hInstance;
//C          union {
//C           HICON hIcon;
//C           LPCWSTR pszIcon;
//C         } ;
union _N276
{
    HICON hIcon;
    LPCWSTR pszIcon;
}
//C         LPCWSTR pszCaption;
//C         UINT nPages;
//C          union {
//C           UINT nStartPage;
//C           LPCWSTR pStartPage;
//C         } ;
union _N277
{
    UINT nStartPage;
    LPCWSTR pStartPage;
}
//C          union {
//C           LPCPROPSHEETPAGEW ppsp;
//C           HPROPSHEETPAGE *phpage;
//C         } ;
union _N278
{
    LPCPROPSHEETPAGEW ppsp;
    HPROPSHEETPAGE *phpage;
}
//C         PFNPROPSHEETCALLBACK pfnCallback;
//C          union {
//C           HBITMAP hbmWatermark;
//C           LPCWSTR pszbmWatermark;
//C         } ;
union _N279
{
    HBITMAP hbmWatermark;
    LPCWSTR pszbmWatermark;
}
//C         HPALETTE hplWatermark;
//C          union {
//C           HBITMAP hbmHeader;
//C           LPCWSTR pszbmHeader;
//C         } ;
union _N280
{
    HBITMAP hbmHeader;
    LPCWSTR pszbmHeader;
}
//C       } PROPSHEETHEADERW,*LPPROPSHEETHEADERW;
struct _PROPSHEETHEADERW
{
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    HICON hIcon;
    LPCWSTR pszIcon;
    LPCWSTR pszCaption;
    UINT nPages;
    UINT nStartPage;
    LPCWSTR pStartPage;
    LPCPROPSHEETPAGEW ppsp;
    HPROPSHEETPAGE *phpage;
    PFNPROPSHEETCALLBACK pfnCallback;
    HBITMAP hbmWatermark;
    LPCWSTR pszbmWatermark;
    HPALETTE hplWatermark;
    HBITMAP hbmHeader;
    LPCWSTR pszbmHeader;
}
alias _PROPSHEETHEADERW PROPSHEETHEADERW;
alias _PROPSHEETHEADERW *LPPROPSHEETHEADERW;
//C       typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
alias PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
//C        HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
HPROPSHEETPAGE  CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
//C        HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
HPROPSHEETPAGE  CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
//C        WINBOOL DestroyPropertySheetPage(HPROPSHEETPAGE);
WINBOOL  DestroyPropertySheetPage(HPROPSHEETPAGE );
//C        INT_PTR PropertySheetA(LPCPROPSHEETHEADERA);
INT_PTR  PropertySheetA(LPCPROPSHEETHEADERA );
//C        INT_PTR PropertySheetW(LPCPROPSHEETHEADERW);
INT_PTR  PropertySheetW(LPCPROPSHEETHEADERW );
//C       typedef WINBOOL ( *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE,LPARAM);
alias WINBOOL  function(HPROPSHEETPAGE , LPARAM )LPFNADDPROPSHEETPAGE;
//C       typedef WINBOOL ( *LPFNADDPROPSHEETPAGES)(LPVOID,LPFNADDPROPSHEETPAGE,LPARAM);
alias WINBOOL  function(LPVOID , LPFNADDPROPSHEETPAGE , LPARAM )LPFNADDPROPSHEETPAGES;
//C       typedef struct _PSHNOTIFY {
//C         NMHDR hdr;
//C         LPARAM lParam;
//C       } PSHNOTIFY,*LPPSHNOTIFY;
struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
}
alias _PSHNOTIFY PSHNOTIFY;
alias _PSHNOTIFY *LPPSHNOTIFY;
//C       typedef struct _PRINTER_INFO_1A {
//C         DWORD Flags;
//C         LPSTR pDescription;
//C         LPSTR pName;
//C         LPSTR pComment;
//C       } PRINTER_INFO_1A,*PPRINTER_INFO_1A,*LPPRINTER_INFO_1A;
struct _PRINTER_INFO_1A
{
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
}
alias _PRINTER_INFO_1A PRINTER_INFO_1A;
alias _PRINTER_INFO_1A *PPRINTER_INFO_1A;
alias _PRINTER_INFO_1A *LPPRINTER_INFO_1A;
//C       typedef struct _PRINTER_INFO_1W {
//C         DWORD Flags;
//C         LPWSTR pDescription;
//C         LPWSTR pName;
//C         LPWSTR pComment;
//C       } PRINTER_INFO_1W,*PPRINTER_INFO_1W,*LPPRINTER_INFO_1W;
struct _PRINTER_INFO_1W
{
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
}
alias _PRINTER_INFO_1W PRINTER_INFO_1W;
alias _PRINTER_INFO_1W *PPRINTER_INFO_1W;
alias _PRINTER_INFO_1W *LPPRINTER_INFO_1W;
//C       typedef PRINTER_INFO_1A PRINTER_INFO_1;
alias PRINTER_INFO_1A PRINTER_INFO_1;
//C       typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
alias PPRINTER_INFO_1A PPRINTER_INFO_1;
//C       typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
alias LPPRINTER_INFO_1A LPPRINTER_INFO_1;
//C       typedef struct _PRINTER_INFO_2A {
//C         LPSTR pServerName;
//C         LPSTR pPrinterName;
//C         LPSTR pShareName;
//C         LPSTR pPortName;
//C         LPSTR pDriverName;
//C         LPSTR pComment;
//C         LPSTR pLocation;
//C         LPDEVMODEA pDevMode;
//C         LPSTR pSepFile;
//C         LPSTR pPrintProcessor;
//C         LPSTR pDatatype;
//C         LPSTR pParameters;
//C         PSECURITY_DESCRIPTOR pSecurityDescriptor;
//C         DWORD Attributes;
//C         DWORD Priority;
//C         DWORD DefaultPriority;
//C         DWORD StartTime;
//C         DWORD UntilTime;
//C         DWORD Status;
//C         DWORD cJobs;
//C         DWORD AveragePPM;
//C       } PRINTER_INFO_2A,*PPRINTER_INFO_2A,*LPPRINTER_INFO_2A;
struct _PRINTER_INFO_2A
{
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
}
alias _PRINTER_INFO_2A PRINTER_INFO_2A;
alias _PRINTER_INFO_2A *PPRINTER_INFO_2A;
alias _PRINTER_INFO_2A *LPPRINTER_INFO_2A;
//C       typedef struct _PRINTER_INFO_2W {
//C         LPWSTR pServerName;
//C         LPWSTR pPrinterName;
//C         LPWSTR pShareName;
//C         LPWSTR pPortName;
//C         LPWSTR pDriverName;
//C         LPWSTR pComment;
//C         LPWSTR pLocation;
//C         LPDEVMODEW pDevMode;
//C         LPWSTR pSepFile;
//C         LPWSTR pPrintProcessor;
//C         LPWSTR pDatatype;
//C         LPWSTR pParameters;
//C         PSECURITY_DESCRIPTOR pSecurityDescriptor;
//C         DWORD Attributes;
//C         DWORD Priority;
//C         DWORD DefaultPriority;
//C         DWORD StartTime;
//C         DWORD UntilTime;
//C         DWORD Status;
//C         DWORD cJobs;
//C         DWORD AveragePPM;
//C       } PRINTER_INFO_2W,*PPRINTER_INFO_2W,*LPPRINTER_INFO_2W;
struct _PRINTER_INFO_2W
{
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
}
alias _PRINTER_INFO_2W PRINTER_INFO_2W;
alias _PRINTER_INFO_2W *PPRINTER_INFO_2W;
alias _PRINTER_INFO_2W *LPPRINTER_INFO_2W;
//C       typedef PRINTER_INFO_2A PRINTER_INFO_2;
alias PRINTER_INFO_2A PRINTER_INFO_2;
//C       typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
alias PPRINTER_INFO_2A PPRINTER_INFO_2;
//C       typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
alias LPPRINTER_INFO_2A LPPRINTER_INFO_2;
//C       typedef struct _PRINTER_INFO_3 {
//C         PSECURITY_DESCRIPTOR pSecurityDescriptor;
//C       } PRINTER_INFO_3,*PPRINTER_INFO_3,*LPPRINTER_INFO_3;
struct _PRINTER_INFO_3
{
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
}
alias _PRINTER_INFO_3 PRINTER_INFO_3;
alias _PRINTER_INFO_3 *PPRINTER_INFO_3;
alias _PRINTER_INFO_3 *LPPRINTER_INFO_3;
//C       typedef struct _PRINTER_INFO_4A {
//C         LPSTR pPrinterName;
//C         LPSTR pServerName;
//C         DWORD Attributes;
//C       } PRINTER_INFO_4A,*PPRINTER_INFO_4A,*LPPRINTER_INFO_4A;
struct _PRINTER_INFO_4A
{
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
}
alias _PRINTER_INFO_4A PRINTER_INFO_4A;
alias _PRINTER_INFO_4A *PPRINTER_INFO_4A;
alias _PRINTER_INFO_4A *LPPRINTER_INFO_4A;
//C       typedef struct _PRINTER_INFO_4W {
//C         LPWSTR pPrinterName;
//C         LPWSTR pServerName;
//C         DWORD Attributes;
//C       } PRINTER_INFO_4W,*PPRINTER_INFO_4W,*LPPRINTER_INFO_4W;
struct _PRINTER_INFO_4W
{
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
}
alias _PRINTER_INFO_4W PRINTER_INFO_4W;
alias _PRINTER_INFO_4W *PPRINTER_INFO_4W;
alias _PRINTER_INFO_4W *LPPRINTER_INFO_4W;
//C       typedef PRINTER_INFO_4A PRINTER_INFO_4;
alias PRINTER_INFO_4A PRINTER_INFO_4;
//C       typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
alias PPRINTER_INFO_4A PPRINTER_INFO_4;
//C       typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
alias LPPRINTER_INFO_4A LPPRINTER_INFO_4;
//C       typedef struct _PRINTER_INFO_5A {
//C         LPSTR pPrinterName;
//C         LPSTR pPortName;
//C         DWORD Attributes;
//C         DWORD DeviceNotSelectedTimeout;
//C         DWORD TransmissionRetryTimeout;
//C       } PRINTER_INFO_5A,*PPRINTER_INFO_5A,*LPPRINTER_INFO_5A;
struct _PRINTER_INFO_5A
{
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
}
alias _PRINTER_INFO_5A PRINTER_INFO_5A;
alias _PRINTER_INFO_5A *PPRINTER_INFO_5A;
alias _PRINTER_INFO_5A *LPPRINTER_INFO_5A;
//C       typedef struct _PRINTER_INFO_5W {
//C         LPWSTR pPrinterName;
//C         LPWSTR pPortName;
//C         DWORD Attributes;
//C         DWORD DeviceNotSelectedTimeout;
//C         DWORD TransmissionRetryTimeout;
//C       } PRINTER_INFO_5W,*PPRINTER_INFO_5W,*LPPRINTER_INFO_5W;
struct _PRINTER_INFO_5W
{
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
}
alias _PRINTER_INFO_5W PRINTER_INFO_5W;
alias _PRINTER_INFO_5W *PPRINTER_INFO_5W;
alias _PRINTER_INFO_5W *LPPRINTER_INFO_5W;
//C       typedef PRINTER_INFO_5A PRINTER_INFO_5;
alias PRINTER_INFO_5A PRINTER_INFO_5;
//C       typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
alias PPRINTER_INFO_5A PPRINTER_INFO_5;
//C       typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
alias LPPRINTER_INFO_5A LPPRINTER_INFO_5;
//C       typedef struct _PRINTER_INFO_6 {
//C         DWORD dwStatus;
//C       } PRINTER_INFO_6,*PPRINTER_INFO_6,*LPPRINTER_INFO_6;
struct _PRINTER_INFO_6
{
    DWORD dwStatus;
}
alias _PRINTER_INFO_6 PRINTER_INFO_6;
alias _PRINTER_INFO_6 *PPRINTER_INFO_6;
alias _PRINTER_INFO_6 *LPPRINTER_INFO_6;
//C       typedef struct _PRINTER_INFO_7A {
//C         LPSTR pszObjectGUID;
//C         DWORD dwAction;
//C       } PRINTER_INFO_7A,*PPRINTER_INFO_7A,*LPPRINTER_INFO_7A;
struct _PRINTER_INFO_7A
{
    LPSTR pszObjectGUID;
    DWORD dwAction;
}
alias _PRINTER_INFO_7A PRINTER_INFO_7A;
alias _PRINTER_INFO_7A *PPRINTER_INFO_7A;
alias _PRINTER_INFO_7A *LPPRINTER_INFO_7A;
//C       typedef struct _PRINTER_INFO_7W {
//C         LPWSTR pszObjectGUID;
//C         DWORD dwAction;
//C       } PRINTER_INFO_7W,*PPRINTER_INFO_7W,*LPPRINTER_INFO_7W;
struct _PRINTER_INFO_7W
{
    LPWSTR pszObjectGUID;
    DWORD dwAction;
}
alias _PRINTER_INFO_7W PRINTER_INFO_7W;
alias _PRINTER_INFO_7W *PPRINTER_INFO_7W;
alias _PRINTER_INFO_7W *LPPRINTER_INFO_7W;
//C       typedef PRINTER_INFO_7A PRINTER_INFO_7;
alias PRINTER_INFO_7A PRINTER_INFO_7;
//C       typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
alias PPRINTER_INFO_7A PPRINTER_INFO_7;
//C       typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
alias LPPRINTER_INFO_7A LPPRINTER_INFO_7;
//C       typedef struct _PRINTER_INFO_8A {
//C         LPDEVMODEA pDevMode;
//C       } PRINTER_INFO_8A,*PPRINTER_INFO_8A,*LPPRINTER_INFO_8A;
struct _PRINTER_INFO_8A
{
    LPDEVMODEA pDevMode;
}
alias _PRINTER_INFO_8A PRINTER_INFO_8A;
alias _PRINTER_INFO_8A *PPRINTER_INFO_8A;
alias _PRINTER_INFO_8A *LPPRINTER_INFO_8A;
//C       typedef struct _PRINTER_INFO_8W {
//C         LPDEVMODEW pDevMode;
//C       } PRINTER_INFO_8W,*PPRINTER_INFO_8W,*LPPRINTER_INFO_8W;
struct _PRINTER_INFO_8W
{
    LPDEVMODEW pDevMode;
}
alias _PRINTER_INFO_8W PRINTER_INFO_8W;
alias _PRINTER_INFO_8W *PPRINTER_INFO_8W;
alias _PRINTER_INFO_8W *LPPRINTER_INFO_8W;
//C       typedef PRINTER_INFO_8A PRINTER_INFO_8;
alias PRINTER_INFO_8A PRINTER_INFO_8;
//C       typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
alias PPRINTER_INFO_8A PPRINTER_INFO_8;
//C       typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
alias LPPRINTER_INFO_8A LPPRINTER_INFO_8;
//C       typedef struct _PRINTER_INFO_9A {
//C         LPDEVMODEA pDevMode;
//C       } PRINTER_INFO_9A,*PPRINTER_INFO_9A,*LPPRINTER_INFO_9A;
struct _PRINTER_INFO_9A
{
    LPDEVMODEA pDevMode;
}
alias _PRINTER_INFO_9A PRINTER_INFO_9A;
alias _PRINTER_INFO_9A *PPRINTER_INFO_9A;
alias _PRINTER_INFO_9A *LPPRINTER_INFO_9A;
//C       typedef struct _PRINTER_INFO_9W {
//C         LPDEVMODEW pDevMode;
//C       } PRINTER_INFO_9W,*PPRINTER_INFO_9W,*LPPRINTER_INFO_9W;
struct _PRINTER_INFO_9W
{
    LPDEVMODEW pDevMode;
}
alias _PRINTER_INFO_9W PRINTER_INFO_9W;
alias _PRINTER_INFO_9W *PPRINTER_INFO_9W;
alias _PRINTER_INFO_9W *LPPRINTER_INFO_9W;
//C       typedef PRINTER_INFO_9A PRINTER_INFO_9;
alias PRINTER_INFO_9A PRINTER_INFO_9;
//C       typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
alias PPRINTER_INFO_9A PPRINTER_INFO_9;
//C       typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
alias LPPRINTER_INFO_9A LPPRINTER_INFO_9;
//C       typedef struct _JOB_INFO_1A {
//C         DWORD JobId;
//C         LPSTR pPrinterName;
//C         LPSTR pMachineName;
//C         LPSTR pUserName;
//C         LPSTR pDocument;
//C         LPSTR pDatatype;
//C         LPSTR pStatus;
//C         DWORD Status;
//C         DWORD Priority;
//C         DWORD Position;
//C         DWORD TotalPages;
//C         DWORD PagesPrinted;
//C         SYSTEMTIME Submitted;
//C       } JOB_INFO_1A,*PJOB_INFO_1A,*LPJOB_INFO_1A;
struct _JOB_INFO_1A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pDatatype;
    LPSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
}
alias _JOB_INFO_1A JOB_INFO_1A;
alias _JOB_INFO_1A *PJOB_INFO_1A;
alias _JOB_INFO_1A *LPJOB_INFO_1A;
//C       typedef struct _JOB_INFO_1W {
//C         DWORD JobId;
//C         LPWSTR pPrinterName;
//C         LPWSTR pMachineName;
//C         LPWSTR pUserName;
//C         LPWSTR pDocument;
//C         LPWSTR pDatatype;
//C         LPWSTR pStatus;
//C         DWORD Status;
//C         DWORD Priority;
//C         DWORD Position;
//C         DWORD TotalPages;
//C         DWORD PagesPrinted;
//C         SYSTEMTIME Submitted;
//C       } JOB_INFO_1W,*PJOB_INFO_1W,*LPJOB_INFO_1W;
struct _JOB_INFO_1W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pDatatype;
    LPWSTR pStatus;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD TotalPages;
    DWORD PagesPrinted;
    SYSTEMTIME Submitted;
}
alias _JOB_INFO_1W JOB_INFO_1W;
alias _JOB_INFO_1W *PJOB_INFO_1W;
alias _JOB_INFO_1W *LPJOB_INFO_1W;
//C       typedef JOB_INFO_1A JOB_INFO_1;
alias JOB_INFO_1A JOB_INFO_1;
//C       typedef PJOB_INFO_1A PJOB_INFO_1;
alias PJOB_INFO_1A PJOB_INFO_1;
//C       typedef LPJOB_INFO_1A LPJOB_INFO_1;
alias LPJOB_INFO_1A LPJOB_INFO_1;
//C       typedef struct _JOB_INFO_2A {
//C         DWORD JobId;
//C         LPSTR pPrinterName;
//C         LPSTR pMachineName;
//C         LPSTR pUserName;
//C         LPSTR pDocument;
//C         LPSTR pNotifyName;
//C         LPSTR pDatatype;
//C         LPSTR pPrintProcessor;
//C         LPSTR pParameters;
//C         LPSTR pDriverName;
//C         LPDEVMODEA pDevMode;
//C         LPSTR pStatus;
//C         PSECURITY_DESCRIPTOR pSecurityDescriptor;
//C         DWORD Status;
//C         DWORD Priority;
//C         DWORD Position;
//C         DWORD StartTime;
//C         DWORD UntilTime;
//C         DWORD TotalPages;
//C         DWORD Size;
//C         SYSTEMTIME Submitted;
//C         DWORD Time;
//C         DWORD PagesPrinted;
//C       } JOB_INFO_2A,*PJOB_INFO_2A,*LPJOB_INFO_2A;
struct _JOB_INFO_2A
{
    DWORD JobId;
    LPSTR pPrinterName;
    LPSTR pMachineName;
    LPSTR pUserName;
    LPSTR pDocument;
    LPSTR pNotifyName;
    LPSTR pDatatype;
    LPSTR pPrintProcessor;
    LPSTR pParameters;
    LPSTR pDriverName;
    LPDEVMODEA pDevMode;
    LPSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
}
alias _JOB_INFO_2A JOB_INFO_2A;
alias _JOB_INFO_2A *PJOB_INFO_2A;
alias _JOB_INFO_2A *LPJOB_INFO_2A;
//C       typedef struct _JOB_INFO_2W {
//C         DWORD JobId;
//C         LPWSTR pPrinterName;
//C         LPWSTR pMachineName;
//C         LPWSTR pUserName;
//C         LPWSTR pDocument;
//C         LPWSTR pNotifyName;
//C         LPWSTR pDatatype;
//C         LPWSTR pPrintProcessor;
//C         LPWSTR pParameters;
//C         LPWSTR pDriverName;
//C         LPDEVMODEW pDevMode;
//C         LPWSTR pStatus;
//C         PSECURITY_DESCRIPTOR pSecurityDescriptor;
//C         DWORD Status;
//C         DWORD Priority;
//C         DWORD Position;
//C         DWORD StartTime;
//C         DWORD UntilTime;
//C         DWORD TotalPages;
//C         DWORD Size;
//C         SYSTEMTIME Submitted;
//C         DWORD Time;
//C         DWORD PagesPrinted;
//C       } JOB_INFO_2W,*PJOB_INFO_2W,*LPJOB_INFO_2W;
struct _JOB_INFO_2W
{
    DWORD JobId;
    LPWSTR pPrinterName;
    LPWSTR pMachineName;
    LPWSTR pUserName;
    LPWSTR pDocument;
    LPWSTR pNotifyName;
    LPWSTR pDatatype;
    LPWSTR pPrintProcessor;
    LPWSTR pParameters;
    LPWSTR pDriverName;
    LPDEVMODEW pDevMode;
    LPWSTR pStatus;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Status;
    DWORD Priority;
    DWORD Position;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD TotalPages;
    DWORD Size;
    SYSTEMTIME Submitted;
    DWORD Time;
    DWORD PagesPrinted;
}
alias _JOB_INFO_2W JOB_INFO_2W;
alias _JOB_INFO_2W *PJOB_INFO_2W;
alias _JOB_INFO_2W *LPJOB_INFO_2W;
//C       typedef JOB_INFO_2A JOB_INFO_2;
alias JOB_INFO_2A JOB_INFO_2;
//C       typedef PJOB_INFO_2A PJOB_INFO_2;
alias PJOB_INFO_2A PJOB_INFO_2;
//C       typedef LPJOB_INFO_2A LPJOB_INFO_2;
alias LPJOB_INFO_2A LPJOB_INFO_2;
//C       typedef struct _JOB_INFO_3 {
//C         DWORD JobId;
//C         DWORD NextJobId;
//C         DWORD Reserved;
//C       } JOB_INFO_3,*PJOB_INFO_3,*LPJOB_INFO_3;
struct _JOB_INFO_3
{
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
}
alias _JOB_INFO_3 JOB_INFO_3;
alias _JOB_INFO_3 *PJOB_INFO_3;
alias _JOB_INFO_3 *LPJOB_INFO_3;
//C       typedef struct _ADDJOB_INFO_1A {
//C         LPSTR Path;
//C         DWORD JobId;
//C       } ADDJOB_INFO_1A,*PADDJOB_INFO_1A,*LPADDJOB_INFO_1A;
struct _ADDJOB_INFO_1A
{
    LPSTR Path;
    DWORD JobId;
}
alias _ADDJOB_INFO_1A ADDJOB_INFO_1A;
alias _ADDJOB_INFO_1A *PADDJOB_INFO_1A;
alias _ADDJOB_INFO_1A *LPADDJOB_INFO_1A;
//C       typedef struct _ADDJOB_INFO_1W {
//C         LPWSTR Path;
//C         DWORD JobId;
//C       } ADDJOB_INFO_1W,*PADDJOB_INFO_1W,*LPADDJOB_INFO_1W;
struct _ADDJOB_INFO_1W
{
    LPWSTR Path;
    DWORD JobId;
}
alias _ADDJOB_INFO_1W ADDJOB_INFO_1W;
alias _ADDJOB_INFO_1W *PADDJOB_INFO_1W;
alias _ADDJOB_INFO_1W *LPADDJOB_INFO_1W;
//C       typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
alias ADDJOB_INFO_1A ADDJOB_INFO_1;
//C       typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
alias PADDJOB_INFO_1A PADDJOB_INFO_1;
//C       typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
alias LPADDJOB_INFO_1A LPADDJOB_INFO_1;
//C       typedef struct _DRIVER_INFO_1A {
//C         LPSTR pName;
//C       } DRIVER_INFO_1A,*PDRIVER_INFO_1A,*LPDRIVER_INFO_1A;
struct _DRIVER_INFO_1A
{
    LPSTR pName;
}
alias _DRIVER_INFO_1A DRIVER_INFO_1A;
alias _DRIVER_INFO_1A *PDRIVER_INFO_1A;
alias _DRIVER_INFO_1A *LPDRIVER_INFO_1A;
//C       typedef struct _DRIVER_INFO_1W {
//C         LPWSTR pName;
//C       } DRIVER_INFO_1W,*PDRIVER_INFO_1W,*LPDRIVER_INFO_1W;
struct _DRIVER_INFO_1W
{
    LPWSTR pName;
}
alias _DRIVER_INFO_1W DRIVER_INFO_1W;
alias _DRIVER_INFO_1W *PDRIVER_INFO_1W;
alias _DRIVER_INFO_1W *LPDRIVER_INFO_1W;
//C       typedef DRIVER_INFO_1A DRIVER_INFO_1;
alias DRIVER_INFO_1A DRIVER_INFO_1;
//C       typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
alias PDRIVER_INFO_1A PDRIVER_INFO_1;
//C       typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
alias LPDRIVER_INFO_1A LPDRIVER_INFO_1;
//C       typedef struct _DRIVER_INFO_2A {
//C         DWORD cVersion;
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDriverPath;
//C         LPSTR pDataFile;
//C         LPSTR pConfigFile;
//C       } DRIVER_INFO_2A,*PDRIVER_INFO_2A,*LPDRIVER_INFO_2A;
struct _DRIVER_INFO_2A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
}
alias _DRIVER_INFO_2A DRIVER_INFO_2A;
alias _DRIVER_INFO_2A *PDRIVER_INFO_2A;
alias _DRIVER_INFO_2A *LPDRIVER_INFO_2A;
//C       typedef struct _DRIVER_INFO_2W {
//C         DWORD cVersion;
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDriverPath;
//C         LPWSTR pDataFile;
//C         LPWSTR pConfigFile;
//C       } DRIVER_INFO_2W,*PDRIVER_INFO_2W,*LPDRIVER_INFO_2W;
struct _DRIVER_INFO_2W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
}
alias _DRIVER_INFO_2W DRIVER_INFO_2W;
alias _DRIVER_INFO_2W *PDRIVER_INFO_2W;
alias _DRIVER_INFO_2W *LPDRIVER_INFO_2W;
//C       typedef DRIVER_INFO_2A DRIVER_INFO_2;
alias DRIVER_INFO_2A DRIVER_INFO_2;
//C       typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
alias PDRIVER_INFO_2A PDRIVER_INFO_2;
//C       typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
alias LPDRIVER_INFO_2A LPDRIVER_INFO_2;
//C       typedef struct _DRIVER_INFO_3A {
//C         DWORD cVersion;
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDriverPath;
//C         LPSTR pDataFile;
//C         LPSTR pConfigFile;
//C         LPSTR pHelpFile;
//C         LPSTR pDependentFiles;
//C         LPSTR pMonitorName;
//C         LPSTR pDefaultDataType;
//C       } DRIVER_INFO_3A,*PDRIVER_INFO_3A,*LPDRIVER_INFO_3A;
struct _DRIVER_INFO_3A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
}
alias _DRIVER_INFO_3A DRIVER_INFO_3A;
alias _DRIVER_INFO_3A *PDRIVER_INFO_3A;
alias _DRIVER_INFO_3A *LPDRIVER_INFO_3A;
//C       typedef struct _DRIVER_INFO_3W {
//C         DWORD cVersion;
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDriverPath;
//C         LPWSTR pDataFile;
//C         LPWSTR pConfigFile;
//C         LPWSTR pHelpFile;
//C         LPWSTR pDependentFiles;
//C         LPWSTR pMonitorName;
//C         LPWSTR pDefaultDataType;
//C       } DRIVER_INFO_3W,*PDRIVER_INFO_3W,*LPDRIVER_INFO_3W;
struct _DRIVER_INFO_3W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
}
alias _DRIVER_INFO_3W DRIVER_INFO_3W;
alias _DRIVER_INFO_3W *PDRIVER_INFO_3W;
alias _DRIVER_INFO_3W *LPDRIVER_INFO_3W;
//C       typedef DRIVER_INFO_3A DRIVER_INFO_3;
alias DRIVER_INFO_3A DRIVER_INFO_3;
//C       typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
alias PDRIVER_INFO_3A PDRIVER_INFO_3;
//C       typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
alias LPDRIVER_INFO_3A LPDRIVER_INFO_3;
//C       typedef struct _DRIVER_INFO_4A {
//C         DWORD cVersion;
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDriverPath;
//C         LPSTR pDataFile;
//C         LPSTR pConfigFile;
//C         LPSTR pHelpFile;
//C         LPSTR pDependentFiles;
//C         LPSTR pMonitorName;
//C         LPSTR pDefaultDataType;
//C         LPSTR pszzPreviousNames;
//C       } DRIVER_INFO_4A,*PDRIVER_INFO_4A,*LPDRIVER_INFO_4A;
struct _DRIVER_INFO_4A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
}
alias _DRIVER_INFO_4A DRIVER_INFO_4A;
alias _DRIVER_INFO_4A *PDRIVER_INFO_4A;
alias _DRIVER_INFO_4A *LPDRIVER_INFO_4A;
//C       typedef struct _DRIVER_INFO_4W {
//C         DWORD cVersion;
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDriverPath;
//C         LPWSTR pDataFile;
//C         LPWSTR pConfigFile;
//C         LPWSTR pHelpFile;
//C         LPWSTR pDependentFiles;
//C         LPWSTR pMonitorName;
//C         LPWSTR pDefaultDataType;
//C         LPWSTR pszzPreviousNames;
//C       } DRIVER_INFO_4W,*PDRIVER_INFO_4W,*LPDRIVER_INFO_4W;
struct _DRIVER_INFO_4W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
}
alias _DRIVER_INFO_4W DRIVER_INFO_4W;
alias _DRIVER_INFO_4W *PDRIVER_INFO_4W;
alias _DRIVER_INFO_4W *LPDRIVER_INFO_4W;
//C       typedef DRIVER_INFO_4A DRIVER_INFO_4;
alias DRIVER_INFO_4A DRIVER_INFO_4;
//C       typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
alias PDRIVER_INFO_4A PDRIVER_INFO_4;
//C       typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
alias LPDRIVER_INFO_4A LPDRIVER_INFO_4;
//C       typedef struct _DRIVER_INFO_5A {
//C         DWORD cVersion;
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDriverPath;
//C         LPSTR pDataFile;
//C         LPSTR pConfigFile;
//C         DWORD dwDriverAttributes;
//C         DWORD dwConfigVersion;
//C         DWORD dwDriverVersion;
//C       } DRIVER_INFO_5A,*PDRIVER_INFO_5A,*LPDRIVER_INFO_5A;
struct _DRIVER_INFO_5A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
}
alias _DRIVER_INFO_5A DRIVER_INFO_5A;
alias _DRIVER_INFO_5A *PDRIVER_INFO_5A;
alias _DRIVER_INFO_5A *LPDRIVER_INFO_5A;
//C       typedef struct _DRIVER_INFO_5W {
//C         DWORD cVersion;
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDriverPath;
//C         LPWSTR pDataFile;
//C         LPWSTR pConfigFile;
//C         DWORD dwDriverAttributes;
//C         DWORD dwConfigVersion;
//C         DWORD dwDriverVersion;
//C       } DRIVER_INFO_5W,*PDRIVER_INFO_5W,*LPDRIVER_INFO_5W;
struct _DRIVER_INFO_5W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
}
alias _DRIVER_INFO_5W DRIVER_INFO_5W;
alias _DRIVER_INFO_5W *PDRIVER_INFO_5W;
alias _DRIVER_INFO_5W *LPDRIVER_INFO_5W;
//C       typedef DRIVER_INFO_5A DRIVER_INFO_5;
alias DRIVER_INFO_5A DRIVER_INFO_5;
//C       typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
alias PDRIVER_INFO_5A PDRIVER_INFO_5;
//C       typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
alias LPDRIVER_INFO_5A LPDRIVER_INFO_5;
//C       typedef struct _DRIVER_INFO_6A {
//C         DWORD cVersion;
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDriverPath;
//C         LPSTR pDataFile;
//C         LPSTR pConfigFile;
//C         LPSTR pHelpFile;
//C         LPSTR pDependentFiles;
//C         LPSTR pMonitorName;
//C         LPSTR pDefaultDataType;
//C         LPSTR pszzPreviousNames;
//C         FILETIME ftDriverDate;
//C         DWORDLONG dwlDriverVersion;
//C         LPSTR pszMfgName;
//C         LPSTR pszOEMUrl;
//C         LPSTR pszHardwareID;
//C         LPSTR pszProvider;
//C       } DRIVER_INFO_6A,*PDRIVER_INFO_6A,*LPDRIVER_INFO_6A;
struct _DRIVER_INFO_6A
{
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
}
alias _DRIVER_INFO_6A DRIVER_INFO_6A;
alias _DRIVER_INFO_6A *PDRIVER_INFO_6A;
alias _DRIVER_INFO_6A *LPDRIVER_INFO_6A;
//C       typedef struct _DRIVER_INFO_6W {
//C         DWORD cVersion;
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDriverPath;
//C         LPWSTR pDataFile;
//C         LPWSTR pConfigFile;
//C         LPWSTR pHelpFile;
//C         LPWSTR pDependentFiles;
//C         LPWSTR pMonitorName;
//C         LPWSTR pDefaultDataType;
//C         LPWSTR pszzPreviousNames;
//C         FILETIME ftDriverDate;
//C         DWORDLONG dwlDriverVersion;
//C         LPWSTR pszMfgName;
//C         LPWSTR pszOEMUrl;
//C         LPWSTR pszHardwareID;
//C         LPWSTR pszProvider;
//C       } DRIVER_INFO_6W,*PDRIVER_INFO_6W,*LPDRIVER_INFO_6W;
struct _DRIVER_INFO_6W
{
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
}
alias _DRIVER_INFO_6W DRIVER_INFO_6W;
alias _DRIVER_INFO_6W *PDRIVER_INFO_6W;
alias _DRIVER_INFO_6W *LPDRIVER_INFO_6W;
//C       typedef DRIVER_INFO_6A DRIVER_INFO_6;
alias DRIVER_INFO_6A DRIVER_INFO_6;
//C       typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
alias PDRIVER_INFO_6A PDRIVER_INFO_6;
//C       typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
alias LPDRIVER_INFO_6A LPDRIVER_INFO_6;
//C       typedef struct _DOC_INFO_1A {
//C         LPSTR pDocName;
//C         LPSTR pOutputFile;
//C         LPSTR pDatatype;
//C       } DOC_INFO_1A,*PDOC_INFO_1A,*LPDOC_INFO_1A;
struct _DOC_INFO_1A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
}
alias _DOC_INFO_1A DOC_INFO_1A;
alias _DOC_INFO_1A *PDOC_INFO_1A;
alias _DOC_INFO_1A *LPDOC_INFO_1A;
//C       typedef struct _DOC_INFO_1W {
//C         LPWSTR pDocName;
//C         LPWSTR pOutputFile;
//C         LPWSTR pDatatype;
//C       } DOC_INFO_1W,*PDOC_INFO_1W,*LPDOC_INFO_1W;
struct _DOC_INFO_1W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
}
alias _DOC_INFO_1W DOC_INFO_1W;
alias _DOC_INFO_1W *PDOC_INFO_1W;
alias _DOC_INFO_1W *LPDOC_INFO_1W;
//C       typedef DOC_INFO_1A DOC_INFO_1;
alias DOC_INFO_1A DOC_INFO_1;
//C       typedef PDOC_INFO_1A PDOC_INFO_1;
alias PDOC_INFO_1A PDOC_INFO_1;
//C       typedef LPDOC_INFO_1A LPDOC_INFO_1;
alias LPDOC_INFO_1A LPDOC_INFO_1;
//C       typedef struct _FORM_INFO_1A {
//C         DWORD Flags;
//C         LPSTR pName;
//C         SIZEL Size;
//C         RECTL ImageableArea;
//C       } FORM_INFO_1A,*PFORM_INFO_1A,*LPFORM_INFO_1A;
struct _FORM_INFO_1A
{
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
}
alias _FORM_INFO_1A FORM_INFO_1A;
alias _FORM_INFO_1A *PFORM_INFO_1A;
alias _FORM_INFO_1A *LPFORM_INFO_1A;
//C       typedef struct _FORM_INFO_1W {
//C         DWORD Flags;
//C         LPWSTR pName;
//C         SIZEL Size;
//C         RECTL ImageableArea;
//C       } FORM_INFO_1W,*PFORM_INFO_1W,*LPFORM_INFO_1W;
struct _FORM_INFO_1W
{
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
}
alias _FORM_INFO_1W FORM_INFO_1W;
alias _FORM_INFO_1W *PFORM_INFO_1W;
alias _FORM_INFO_1W *LPFORM_INFO_1W;
//C       typedef FORM_INFO_1A FORM_INFO_1;
alias FORM_INFO_1A FORM_INFO_1;
//C       typedef PFORM_INFO_1A PFORM_INFO_1;
alias PFORM_INFO_1A PFORM_INFO_1;
//C       typedef LPFORM_INFO_1A LPFORM_INFO_1;
alias LPFORM_INFO_1A LPFORM_INFO_1;
//C       typedef struct _DOC_INFO_2A {
//C         LPSTR pDocName;
//C         LPSTR pOutputFile;
//C         LPSTR pDatatype;
//C         DWORD dwMode;
//C         DWORD JobId;
//C       } DOC_INFO_2A,*PDOC_INFO_2A,*LPDOC_INFO_2A;
struct _DOC_INFO_2A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
}
alias _DOC_INFO_2A DOC_INFO_2A;
alias _DOC_INFO_2A *PDOC_INFO_2A;
alias _DOC_INFO_2A *LPDOC_INFO_2A;
//C       typedef struct _DOC_INFO_2W {
//C         LPWSTR pDocName;
//C         LPWSTR pOutputFile;
//C         LPWSTR pDatatype;
//C         DWORD dwMode;
//C         DWORD JobId;
//C       } DOC_INFO_2W,*PDOC_INFO_2W,*LPDOC_INFO_2W;
struct _DOC_INFO_2W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
}
alias _DOC_INFO_2W DOC_INFO_2W;
alias _DOC_INFO_2W *PDOC_INFO_2W;
alias _DOC_INFO_2W *LPDOC_INFO_2W;
//C       typedef DOC_INFO_2A DOC_INFO_2;
alias DOC_INFO_2A DOC_INFO_2;
//C       typedef PDOC_INFO_2A PDOC_INFO_2;
alias PDOC_INFO_2A PDOC_INFO_2;
//C       typedef LPDOC_INFO_2A LPDOC_INFO_2;
alias LPDOC_INFO_2A LPDOC_INFO_2;
//C       typedef struct _DOC_INFO_3A {
//C         LPSTR pDocName;
//C         LPSTR pOutputFile;
//C         LPSTR pDatatype;
//C         DWORD dwFlags;
//C       } DOC_INFO_3A,*PDOC_INFO_3A,*LPDOC_INFO_3A;
struct _DOC_INFO_3A
{
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
}
alias _DOC_INFO_3A DOC_INFO_3A;
alias _DOC_INFO_3A *PDOC_INFO_3A;
alias _DOC_INFO_3A *LPDOC_INFO_3A;
//C       typedef struct _DOC_INFO_3W {
//C         LPWSTR pDocName;
//C         LPWSTR pOutputFile;
//C         LPWSTR pDatatype;
//C         DWORD dwFlags;
//C       } DOC_INFO_3W,*PDOC_INFO_3W,*LPDOC_INFO_3W;
struct _DOC_INFO_3W
{
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
}
alias _DOC_INFO_3W DOC_INFO_3W;
alias _DOC_INFO_3W *PDOC_INFO_3W;
alias _DOC_INFO_3W *LPDOC_INFO_3W;
//C       typedef DOC_INFO_3A DOC_INFO_3;
alias DOC_INFO_3A DOC_INFO_3;
//C       typedef PDOC_INFO_3A PDOC_INFO_3;
alias PDOC_INFO_3A PDOC_INFO_3;
//C       typedef LPDOC_INFO_3A LPDOC_INFO_3;
alias LPDOC_INFO_3A LPDOC_INFO_3;
//C       typedef struct _PRINTPROCESSOR_INFO_1A {
//C         LPSTR pName;
//C       } PRINTPROCESSOR_INFO_1A,*PPRINTPROCESSOR_INFO_1A,*LPPRINTPROCESSOR_INFO_1A;
struct _PRINTPROCESSOR_INFO_1A
{
    LPSTR pName;
}
alias _PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1A;
alias _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A;
alias _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A;
//C       typedef struct _PRINTPROCESSOR_INFO_1W {
//C         LPWSTR pName;
//C       } PRINTPROCESSOR_INFO_1W,*PPRINTPROCESSOR_INFO_1W,*LPPRINTPROCESSOR_INFO_1W;
struct _PRINTPROCESSOR_INFO_1W
{
    LPWSTR pName;
}
alias _PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1W;
alias _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W;
alias _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W;
//C       typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
alias PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
//C       typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
alias PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
//C       typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
alias LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
//C       typedef struct _PRINTPROCESSOR_CAPS_1 {
//C         DWORD dwLevel;
//C         DWORD dwNupOptions;
//C         DWORD dwPageOrderFlags;
//C         DWORD dwNumberOfCopies;
//C       } PRINTPROCESSOR_CAPS_1,*PPRINTPROCESSOR_CAPS_1;
struct _PRINTPROCESSOR_CAPS_1
{
    DWORD dwLevel;
    DWORD dwNupOptions;
    DWORD dwPageOrderFlags;
    DWORD dwNumberOfCopies;
}
alias _PRINTPROCESSOR_CAPS_1 PRINTPROCESSOR_CAPS_1;
alias _PRINTPROCESSOR_CAPS_1 *PPRINTPROCESSOR_CAPS_1;
//C       typedef struct _PORT_INFO_1A {
//C         LPSTR pName;
//C       } PORT_INFO_1A,*PPORT_INFO_1A,*LPPORT_INFO_1A;
struct _PORT_INFO_1A
{
    LPSTR pName;
}
alias _PORT_INFO_1A PORT_INFO_1A;
alias _PORT_INFO_1A *PPORT_INFO_1A;
alias _PORT_INFO_1A *LPPORT_INFO_1A;
//C       typedef struct _PORT_INFO_1W {
//C         LPWSTR pName;
//C       } PORT_INFO_1W,*PPORT_INFO_1W,*LPPORT_INFO_1W;
struct _PORT_INFO_1W
{
    LPWSTR pName;
}
alias _PORT_INFO_1W PORT_INFO_1W;
alias _PORT_INFO_1W *PPORT_INFO_1W;
alias _PORT_INFO_1W *LPPORT_INFO_1W;
//C       typedef PORT_INFO_1A PORT_INFO_1;
alias PORT_INFO_1A PORT_INFO_1;
//C       typedef PPORT_INFO_1A PPORT_INFO_1;
alias PPORT_INFO_1A PPORT_INFO_1;
//C       typedef LPPORT_INFO_1A LPPORT_INFO_1;
alias LPPORT_INFO_1A LPPORT_INFO_1;
//C       typedef struct _PORT_INFO_2A {
//C         LPSTR pPortName;
//C         LPSTR pMonitorName;
//C         LPSTR pDescription;
//C         DWORD fPortType;
//C         DWORD Reserved;
//C       } PORT_INFO_2A,*PPORT_INFO_2A,*LPPORT_INFO_2A;
struct _PORT_INFO_2A
{
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
}
alias _PORT_INFO_2A PORT_INFO_2A;
alias _PORT_INFO_2A *PPORT_INFO_2A;
alias _PORT_INFO_2A *LPPORT_INFO_2A;
//C       typedef struct _PORT_INFO_2W {
//C         LPWSTR pPortName;
//C         LPWSTR pMonitorName;
//C         LPWSTR pDescription;
//C         DWORD fPortType;
//C         DWORD Reserved;
//C       } PORT_INFO_2W,*PPORT_INFO_2W,*LPPORT_INFO_2W;
struct _PORT_INFO_2W
{
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
}
alias _PORT_INFO_2W PORT_INFO_2W;
alias _PORT_INFO_2W *PPORT_INFO_2W;
alias _PORT_INFO_2W *LPPORT_INFO_2W;
//C       typedef PORT_INFO_2A PORT_INFO_2;
alias PORT_INFO_2A PORT_INFO_2;
//C       typedef PPORT_INFO_2A PPORT_INFO_2;
alias PPORT_INFO_2A PPORT_INFO_2;
//C       typedef LPPORT_INFO_2A LPPORT_INFO_2;
alias LPPORT_INFO_2A LPPORT_INFO_2;
//C       typedef struct _PORT_INFO_3A {
//C         DWORD dwStatus;
//C         LPSTR pszStatus;
//C         DWORD dwSeverity;
//C       } PORT_INFO_3A,*PPORT_INFO_3A,*LPPORT_INFO_3A;
struct _PORT_INFO_3A
{
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
}
alias _PORT_INFO_3A PORT_INFO_3A;
alias _PORT_INFO_3A *PPORT_INFO_3A;
alias _PORT_INFO_3A *LPPORT_INFO_3A;
//C       typedef struct _PORT_INFO_3W {
//C         DWORD dwStatus;
//C         LPWSTR pszStatus;
//C         DWORD dwSeverity;
//C       } PORT_INFO_3W,*PPORT_INFO_3W,*LPPORT_INFO_3W;
struct _PORT_INFO_3W
{
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
}
alias _PORT_INFO_3W PORT_INFO_3W;
alias _PORT_INFO_3W *PPORT_INFO_3W;
alias _PORT_INFO_3W *LPPORT_INFO_3W;
//C       typedef PORT_INFO_3A PORT_INFO_3;
alias PORT_INFO_3A PORT_INFO_3;
//C       typedef PPORT_INFO_3A PPORT_INFO_3;
alias PPORT_INFO_3A PPORT_INFO_3;
//C       typedef LPPORT_INFO_3A LPPORT_INFO_3;
alias LPPORT_INFO_3A LPPORT_INFO_3;
//C       typedef struct _MONITOR_INFO_1A{
//C         LPSTR pName;
//C       } MONITOR_INFO_1A,*PMONITOR_INFO_1A,*LPMONITOR_INFO_1A;
struct _MONITOR_INFO_1A
{
    LPSTR pName;
}
alias _MONITOR_INFO_1A MONITOR_INFO_1A;
alias _MONITOR_INFO_1A *PMONITOR_INFO_1A;
alias _MONITOR_INFO_1A *LPMONITOR_INFO_1A;
//C       typedef struct _MONITOR_INFO_1W{
//C         LPWSTR pName;
//C       } MONITOR_INFO_1W,*PMONITOR_INFO_1W,*LPMONITOR_INFO_1W;
struct _MONITOR_INFO_1W
{
    LPWSTR pName;
}
alias _MONITOR_INFO_1W MONITOR_INFO_1W;
alias _MONITOR_INFO_1W *PMONITOR_INFO_1W;
alias _MONITOR_INFO_1W *LPMONITOR_INFO_1W;
//C       typedef MONITOR_INFO_1A MONITOR_INFO_1;
alias MONITOR_INFO_1A MONITOR_INFO_1;
//C       typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
alias PMONITOR_INFO_1A PMONITOR_INFO_1;
//C       typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
alias LPMONITOR_INFO_1A LPMONITOR_INFO_1;
//C       typedef struct _MONITOR_INFO_2A {
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDLLName;
//C       } MONITOR_INFO_2A,*PMONITOR_INFO_2A,*LPMONITOR_INFO_2A;
struct _MONITOR_INFO_2A
{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
}
alias _MONITOR_INFO_2A MONITOR_INFO_2A;
alias _MONITOR_INFO_2A *PMONITOR_INFO_2A;
alias _MONITOR_INFO_2A *LPMONITOR_INFO_2A;
//C       typedef struct _MONITOR_INFO_2W {
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDLLName;
//C       } MONITOR_INFO_2W,*PMONITOR_INFO_2W,*LPMONITOR_INFO_2W;
struct _MONITOR_INFO_2W
{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
}
alias _MONITOR_INFO_2W MONITOR_INFO_2W;
alias _MONITOR_INFO_2W *PMONITOR_INFO_2W;
alias _MONITOR_INFO_2W *LPMONITOR_INFO_2W;
//C       typedef MONITOR_INFO_2A MONITOR_INFO_2;
alias MONITOR_INFO_2A MONITOR_INFO_2;
//C       typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
alias PMONITOR_INFO_2A PMONITOR_INFO_2;
//C       typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
alias LPMONITOR_INFO_2A LPMONITOR_INFO_2;
//C       typedef struct _DATATYPES_INFO_1A {
//C         LPSTR pName;
//C       } DATATYPES_INFO_1A,*PDATATYPES_INFO_1A,*LPDATATYPES_INFO_1A;
struct _DATATYPES_INFO_1A
{
    LPSTR pName;
}
alias _DATATYPES_INFO_1A DATATYPES_INFO_1A;
alias _DATATYPES_INFO_1A *PDATATYPES_INFO_1A;
alias _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A;
//C       typedef struct _DATATYPES_INFO_1W {
//C         LPWSTR pName;
//C       } DATATYPES_INFO_1W,*PDATATYPES_INFO_1W,*LPDATATYPES_INFO_1W;
struct _DATATYPES_INFO_1W
{
    LPWSTR pName;
}
alias _DATATYPES_INFO_1W DATATYPES_INFO_1W;
alias _DATATYPES_INFO_1W *PDATATYPES_INFO_1W;
alias _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W;
//C       typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
alias DATATYPES_INFO_1A DATATYPES_INFO_1;
//C       typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
alias PDATATYPES_INFO_1A PDATATYPES_INFO_1;
//C       typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
alias LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
//C       typedef struct _PRINTER_DEFAULTSA {
//C         LPSTR pDatatype;
//C         LPDEVMODEA pDevMode;
//C         ACCESS_MASK DesiredAccess;
//C       } PRINTER_DEFAULTSA,*PPRINTER_DEFAULTSA,*LPPRINTER_DEFAULTSA;
struct _PRINTER_DEFAULTSA
{
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
}
alias _PRINTER_DEFAULTSA PRINTER_DEFAULTSA;
alias _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA;
alias _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA;
//C       typedef struct _PRINTER_DEFAULTSW {
//C         LPWSTR pDatatype;
//C         LPDEVMODEW pDevMode;
//C         ACCESS_MASK DesiredAccess;
//C       } PRINTER_DEFAULTSW,*PPRINTER_DEFAULTSW,*LPPRINTER_DEFAULTSW;
struct _PRINTER_DEFAULTSW
{
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
}
alias _PRINTER_DEFAULTSW PRINTER_DEFAULTSW;
alias _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW;
alias _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;
//C       typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
alias PRINTER_DEFAULTSA PRINTER_DEFAULTS;
//C       typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
alias PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
//C       typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
alias LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
//C       typedef struct _PRINTER_ENUM_VALUESA {
//C         LPSTR pValueName;
//C         DWORD cbValueName;
//C         DWORD dwType;
//C         LPBYTE pData;
//C         DWORD cbData;
//C       } PRINTER_ENUM_VALUESA,*PPRINTER_ENUM_VALUESA,*LPPRINTER_ENUM_VALUESA;
struct _PRINTER_ENUM_VALUESA
{
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
}
alias _PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUESA;
alias _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA;
alias _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA;
//C       typedef struct _PRINTER_ENUM_VALUESW {
//C         LPWSTR pValueName;
//C         DWORD cbValueName;
//C         DWORD dwType;
//C         LPBYTE pData;
//C         DWORD cbData;
//C       } PRINTER_ENUM_VALUESW,*PPRINTER_ENUM_VALUESW,*LPPRINTER_ENUM_VALUESW;
struct _PRINTER_ENUM_VALUESW
{
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
}
alias _PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUESW;
alias _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW;
alias _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW;
//C       typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
alias PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
//C       typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
alias PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
//C       typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
alias LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
//C       WINBOOL EnumPrintersA(DWORD Flags,LPSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumPrintersW(DWORD Flags,LPWSTR Name,DWORD Level,LPBYTE pPrinterEnum,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL OpenPrinterA(LPSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSA pDefault);
WINBOOL  OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault);
//C       WINBOOL OpenPrinterW(LPWSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSW pDefault);
WINBOOL  OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault);
//C       WINBOOL ResetPrinterA(HANDLE hPrinter,LPPRINTER_DEFAULTSA pDefault);
WINBOOL  ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault);
//C       WINBOOL ResetPrinterW(HANDLE hPrinter,LPPRINTER_DEFAULTSW pDefault);
WINBOOL  ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault);
//C       WINBOOL SetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command);
WINBOOL  SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command);
//C       WINBOOL SetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD Command);
WINBOOL  SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command);
//C       WINBOOL GetJobA(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetJobW(HANDLE hPrinter,DWORD JobId,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL EnumJobsA(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumJobsW(HANDLE hPrinter,DWORD FirstJob,DWORD NoJobs,DWORD Level,LPBYTE pJob,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       HANDLE AddPrinterA(LPSTR pName,DWORD Level,LPBYTE pPrinter);
HANDLE  AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter);
//C       HANDLE AddPrinterW(LPWSTR pName,DWORD Level,LPBYTE pPrinter);
HANDLE  AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter);
//C       WINBOOL DeletePrinter(HANDLE hPrinter);
WINBOOL  DeletePrinter(HANDLE hPrinter);
//C       WINBOOL SetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command);
WINBOOL  SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command);
//C       WINBOOL SetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD Command);
WINBOOL  SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command);
//C       WINBOOL GetPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pPrinter,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL AddPrinterDriverA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo);
WINBOOL  AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo);
//C       WINBOOL AddPrinterDriverW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo);
WINBOOL  AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo);
//C       WINBOOL AddPrinterDriverExA(LPSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags);
WINBOOL  AddPrinterDriverExA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags);
//C       WINBOOL AddPrinterDriverExW(LPWSTR pName,DWORD Level,LPBYTE pDriverInfo,DWORD dwFileCopyFlags);
WINBOOL  AddPrinterDriverExW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo, DWORD dwFileCopyFlags);
//C       WINBOOL EnumPrinterDriversA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumPrinterDriversW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL GetPrinterDriverA(HANDLE hPrinter,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetPrinterDriverW(HANDLE hPrinter,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverInfo,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetPrinterDriverDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetPrinterDriverDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pDriverDirectory,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL DeletePrinterDriverA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName);
WINBOOL  DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName);
//C       WINBOOL DeletePrinterDriverW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName);
WINBOOL  DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName);
//C       WINBOOL DeletePrinterDriverExA(LPSTR pName,LPSTR pEnvironment,LPSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag);
WINBOOL  DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag);
//C       WINBOOL DeletePrinterDriverExW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pDriverName,DWORD dwDeleteFlag,DWORD dwVersionFlag);
WINBOOL  DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag);
//C       WINBOOL AddPrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPathName,LPSTR pPrintProcessorName);
WINBOOL  AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName);
//C       WINBOOL AddPrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPathName,LPWSTR pPrintProcessorName);
WINBOOL  AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName);
//C       WINBOOL EnumPrintProcessorsA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumPrintProcessorsW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL GetPrintProcessorDirectoryA(LPSTR pName,LPSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetPrintProcessorDirectoryW(LPWSTR pName,LPWSTR pEnvironment,DWORD Level,LPBYTE pPrintProcessorInfo,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL EnumPrintProcessorDatatypesA(LPSTR pName,LPSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumPrintProcessorDatatypesW(LPWSTR pName,LPWSTR pPrintProcessorName,DWORD Level,LPBYTE pDatatypes,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL DeletePrintProcessorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProcessorName);
WINBOOL  DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName);
//C       WINBOOL DeletePrintProcessorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProcessorName);
WINBOOL  DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName);
//C       DWORD StartDocPrinterA(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo);
DWORD  StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);
//C       DWORD StartDocPrinterW(HANDLE hPrinter,DWORD Level,LPBYTE pDocInfo);
DWORD  StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo);
//C       WINBOOL StartPagePrinter(HANDLE hPrinter);
WINBOOL  StartPagePrinter(HANDLE hPrinter);
//C       WINBOOL WritePrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten);
WINBOOL  WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten);
//C       WINBOOL FlushPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pcWritten,DWORD cSleep);
WINBOOL  FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep);
//C       WINBOOL EndPagePrinter(HANDLE hPrinter);
WINBOOL  EndPagePrinter(HANDLE hPrinter);
//C       WINBOOL AbortPrinter(HANDLE hPrinter);
WINBOOL  AbortPrinter(HANDLE hPrinter);
//C       WINBOOL ReadPrinter(HANDLE hPrinter,LPVOID pBuf,DWORD cbBuf,LPDWORD pNoBytesRead);
WINBOOL  ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead);
//C       WINBOOL EndDocPrinter(HANDLE hPrinter);
WINBOOL  EndDocPrinter(HANDLE hPrinter);
//C       WINBOOL AddJobA(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL AddJobW(HANDLE hPrinter,DWORD Level,LPBYTE pData,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL ScheduleJob(HANDLE hPrinter,DWORD JobId);
WINBOOL  ScheduleJob(HANDLE hPrinter, DWORD JobId);
//C       WINBOOL PrinterProperties(HWND hWnd,HANDLE hPrinter);
WINBOOL  PrinterProperties(HWND hWnd, HANDLE hPrinter);
//C       LONG DocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput,DWORD fMode);
LONG  DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode);
//C       LONG DocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput,DWORD fMode);
LONG  DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode);
//C       LONG AdvancedDocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput);
LONG  AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput);
//C       LONG AdvancedDocumentPropertiesW(HWND hWnd,HANDLE hPrinter,LPWSTR pDeviceName,PDEVMODEW pDevModeOutput,PDEVMODEW pDevModeInput);
LONG  AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput);
//C       LONG ExtDeviceMode(HWND hWnd,HANDLE hInst,LPDEVMODEA pDevModeOutput,LPSTR pDeviceName,LPSTR pPort,LPDEVMODEA pDevModeInput,LPSTR pProfile,DWORD fMode);
LONG  ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode);
//C       DWORD GetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
DWORD  GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
//C       DWORD GetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
DWORD  GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
//C       DWORD GetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
DWORD  GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
//C       DWORD GetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,LPDWORD pType,LPBYTE pData,DWORD nSize,LPDWORD pcbNeeded);
DWORD  GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded);
//C       DWORD EnumPrinterDataA(HANDLE hPrinter,DWORD dwIndex,LPSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData);
DWORD  EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData);
//C       DWORD EnumPrinterDataW(HANDLE hPrinter,DWORD dwIndex,LPWSTR pValueName,DWORD cbValueName,LPDWORD pcbValueName,LPDWORD pType,LPBYTE pData,DWORD cbData,LPDWORD pcbData);
DWORD  EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData);
//C       DWORD EnumPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues);
DWORD  EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues);
//C       DWORD EnumPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPBYTE pEnumValues,DWORD cbEnumValues,LPDWORD pcbEnumValues,LPDWORD pnEnumValues);
DWORD  EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues);
//C       DWORD EnumPrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName,LPSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey);
DWORD  EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey);
//C       DWORD EnumPrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName,LPWSTR pSubkey,DWORD cbSubkey,LPDWORD pcbSubkey);
DWORD  EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey);
//C       DWORD SetPrinterDataA(HANDLE hPrinter,LPSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
DWORD  SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
//C       DWORD SetPrinterDataW(HANDLE hPrinter,LPWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
DWORD  SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
//C       DWORD SetPrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
DWORD  SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
//C       DWORD SetPrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName,DWORD Type,LPBYTE pData,DWORD cbData);
DWORD  SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData);
//C       DWORD DeletePrinterDataA(HANDLE hPrinter,LPSTR pValueName);
DWORD  DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName);
//C       DWORD DeletePrinterDataW(HANDLE hPrinter,LPWSTR pValueName);
DWORD  DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName);
//C       DWORD DeletePrinterDataExA(HANDLE hPrinter,LPCSTR pKeyName,LPCSTR pValueName);
DWORD  DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName);
//C       DWORD DeletePrinterDataExW(HANDLE hPrinter,LPCWSTR pKeyName,LPCWSTR pValueName);
DWORD  DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName);
//C       DWORD DeletePrinterKeyA(HANDLE hPrinter,LPCSTR pKeyName);
DWORD  DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName);
//C       DWORD DeletePrinterKeyW(HANDLE hPrinter,LPCWSTR pKeyName);
DWORD  DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName);
//C       typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
//C         WORD Type;
//C         WORD Reserved0;
//C         DWORD Reserved1;
//C         DWORD Reserved2;
//C         DWORD Count;
//C         PWORD pFields;
//C       } PRINTER_NOTIFY_OPTIONS_TYPE,*PPRINTER_NOTIFY_OPTIONS_TYPE,*LPPRINTER_NOTIFY_OPTIONS_TYPE;
struct _PRINTER_NOTIFY_OPTIONS_TYPE
{
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
}
alias _PRINTER_NOTIFY_OPTIONS_TYPE PRINTER_NOTIFY_OPTIONS_TYPE;
alias _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE;
alias _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE;
//C       typedef struct _PRINTER_NOTIFY_OPTIONS {
//C         DWORD Version;
//C         DWORD Flags;
//C         DWORD Count;
//C         PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
//C       } PRINTER_NOTIFY_OPTIONS,*PPRINTER_NOTIFY_OPTIONS,*LPPRINTER_NOTIFY_OPTIONS;
struct _PRINTER_NOTIFY_OPTIONS
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
}
alias _PRINTER_NOTIFY_OPTIONS PRINTER_NOTIFY_OPTIONS;
alias _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS;
alias _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS;
//C       typedef struct _PRINTER_NOTIFY_INFO_DATA {
//C         WORD Type;
//C         WORD Field;
//C         DWORD Reserved;
//C         DWORD Id;
//C         union {
//C           DWORD adwData[2];
//C           struct {
//C      DWORD cbBuf;
//C      LPVOID pBuf;
//C           } Data;
struct _N282
{
    DWORD cbBuf;
    LPVOID pBuf;
}
//C         } NotifyData;
union _N281
{
    DWORD [2]adwData;
    _N282 Data;
}
//C       } PRINTER_NOTIFY_INFO_DATA,*PPRINTER_NOTIFY_INFO_DATA,*LPPRINTER_NOTIFY_INFO_DATA;
struct _PRINTER_NOTIFY_INFO_DATA
{
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    _N281 NotifyData;
}
alias _PRINTER_NOTIFY_INFO_DATA PRINTER_NOTIFY_INFO_DATA;
alias _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA;
alias _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA;
//C       typedef struct _PRINTER_NOTIFY_INFO {
//C         DWORD Version;
//C         DWORD Flags;
//C         DWORD Count;
//C         PRINTER_NOTIFY_INFO_DATA aData[1];
//C       } PRINTER_NOTIFY_INFO,*PPRINTER_NOTIFY_INFO,*LPPRINTER_NOTIFY_INFO;
struct _PRINTER_NOTIFY_INFO
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA [1]aData;
}
alias _PRINTER_NOTIFY_INFO PRINTER_NOTIFY_INFO;
alias _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO;
alias _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO;
//C       typedef struct _BINARY_CONTAINER{
//C         DWORD cbBuf;
//C         LPBYTE pData;
//C       } BINARY_CONTAINER,*PBINARY_CONTAINER;
struct _BINARY_CONTAINER
{
    DWORD cbBuf;
    LPBYTE pData;
}
alias _BINARY_CONTAINER BINARY_CONTAINER;
alias _BINARY_CONTAINER *PBINARY_CONTAINER;
//C       typedef struct _BIDI_DATA{
//C         DWORD dwBidiType;
//C         union {
//C           WINBOOL bData;
//C           LONG iData;
//C           LPWSTR sData;
//C           FLOAT fData;
//C           BINARY_CONTAINER biData;
//C         } u;
union _N283
{
    WINBOOL bData;
    LONG iData;
    LPWSTR sData;
    FLOAT fData;
    BINARY_CONTAINER biData;
}
//C       } BIDI_DATA,*PBIDI_DATA,*LPBIDI_DATA;
struct _BIDI_DATA
{
    DWORD dwBidiType;
    _N283 u;
}
alias _BIDI_DATA BIDI_DATA;
alias _BIDI_DATA *PBIDI_DATA;
alias _BIDI_DATA *LPBIDI_DATA;
//C       typedef struct _BIDI_REQUEST_DATA{
//C         DWORD dwReqNumber;
//C         LPWSTR pSchema;
//C         BIDI_DATA data;
//C       } BIDI_REQUEST_DATA ,*PBIDI_REQUEST_DATA ,*LPBIDI_REQUEST_DATA;
struct _BIDI_REQUEST_DATA
{
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
}
alias _BIDI_REQUEST_DATA BIDI_REQUEST_DATA;
alias _BIDI_REQUEST_DATA *PBIDI_REQUEST_DATA;
alias _BIDI_REQUEST_DATA *LPBIDI_REQUEST_DATA;
//C       typedef struct _BIDI_REQUEST_CONTAINER{
//C         DWORD Version;
//C         DWORD Flags;
//C         DWORD Count;
//C         BIDI_REQUEST_DATA aData[1 ];
//C       }BIDI_REQUEST_CONTAINER,*PBIDI_REQUEST_CONTAINER,*LPBIDI_REQUEST_CONTAINER;
struct _BIDI_REQUEST_CONTAINER
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_REQUEST_DATA [1]aData;
}
alias _BIDI_REQUEST_CONTAINER BIDI_REQUEST_CONTAINER;
alias _BIDI_REQUEST_CONTAINER *PBIDI_REQUEST_CONTAINER;
alias _BIDI_REQUEST_CONTAINER *LPBIDI_REQUEST_CONTAINER;
//C       typedef struct _BIDI_RESPONSE_DATA{
//C         DWORD dwResult;
//C         DWORD dwReqNumber;
//C         LPWSTR pSchema;
//C         BIDI_DATA data;
//C       } BIDI_RESPONSE_DATA,*PBIDI_RESPONSE_DATA,*LPBIDI_RESPONSE_DATA;
struct _BIDI_RESPONSE_DATA
{
    DWORD dwResult;
    DWORD dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
}
alias _BIDI_RESPONSE_DATA BIDI_RESPONSE_DATA;
alias _BIDI_RESPONSE_DATA *PBIDI_RESPONSE_DATA;
alias _BIDI_RESPONSE_DATA *LPBIDI_RESPONSE_DATA;
//C       typedef struct _BIDI_RESPONSE_CONTAINER{
//C         DWORD Version;
//C         DWORD Flags;
//C         DWORD Count;
//C         BIDI_RESPONSE_DATA aData[1 ];
//C       } BIDI_RESPONSE_CONTAINER,*PBIDI_RESPONSE_CONTAINER,*LPBIDI_RESPONSE_CONTAINER;
struct _BIDI_RESPONSE_CONTAINER
{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_RESPONSE_DATA [1]aData;
}
alias _BIDI_RESPONSE_CONTAINER BIDI_RESPONSE_CONTAINER;
alias _BIDI_RESPONSE_CONTAINER *PBIDI_RESPONSE_CONTAINER;
alias _BIDI_RESPONSE_CONTAINER *LPBIDI_RESPONSE_CONTAINER;
//C       typedef enum {
//C         BIDI_NULL = 0,BIDI_INT = 1,BIDI_FLOAT = 2,BIDI_BOOL = 3,BIDI_STRING = 4,BIDI_TEXT = 5,BIDI_ENUM = 6,BIDI_BLOB = 7
//C       } BIDI_TYPE;
enum
{
    BIDI_NULL,
    BIDI_INT,
    BIDI_FLOAT,
    BIDI_BOOL,
    BIDI_STRING,
    BIDI_TEXT,
    BIDI_ENUM,
    BIDI_BLOB,
}
alias int BIDI_TYPE;
//C       DWORD WaitForPrinterChange(HANDLE hPrinter,DWORD Flags);
DWORD  WaitForPrinterChange(HANDLE hPrinter, DWORD Flags);
//C       HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter,DWORD fdwFlags,DWORD fdwOptions,LPVOID pPrinterNotifyOptions);
HANDLE  FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFlags, DWORD fdwOptions, LPVOID pPrinterNotifyOptions);
//C       WINBOOL FindNextPrinterChangeNotification(HANDLE hChange,PDWORD pdwChange,LPVOID pPrinterNotifyOptions,LPVOID *ppPrinterNotifyInfo);
WINBOOL  FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pPrinterNotifyOptions, LPVOID *ppPrinterNotifyInfo);
//C       WINBOOL FreePrinterNotifyInfo (PPRINTER_NOTIFY_INFO pPrinterNotifyInfo);
WINBOOL  FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo);
//C       WINBOOL FindClosePrinterChangeNotification(HANDLE hChange);
WINBOOL  FindClosePrinterChangeNotification(HANDLE hChange);
//C       DWORD PrinterMessageBoxA(HANDLE hPrinter,DWORD Error,HWND hWnd,LPSTR pText,LPSTR pCaption,DWORD dwType);
DWORD  PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType);
//C       DWORD PrinterMessageBoxW(HANDLE hPrinter,DWORD Error,HWND hWnd,LPWSTR pText,LPWSTR pCaption,DWORD dwType);
DWORD  PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType);
//C       WINBOOL ClosePrinter(HANDLE hPrinter);
WINBOOL  ClosePrinter(HANDLE hPrinter);
//C       WINBOOL AddFormA(HANDLE hPrinter,DWORD Level,LPBYTE pForm);
WINBOOL  AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm);
//C       WINBOOL AddFormW(HANDLE hPrinter,DWORD Level,LPBYTE pForm);
WINBOOL  AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm);
//C       WINBOOL DeleteFormA(HANDLE hPrinter,LPSTR pFormName);
WINBOOL  DeleteFormA(HANDLE hPrinter, LPSTR pFormName);
//C       WINBOOL DeleteFormW(HANDLE hPrinter,LPWSTR pFormName);
WINBOOL  DeleteFormW(HANDLE hPrinter, LPWSTR pFormName);
//C       WINBOOL GetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL GetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded);
WINBOOL  GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded);
//C       WINBOOL SetFormA(HANDLE hPrinter,LPSTR pFormName,DWORD Level,LPBYTE pForm);
WINBOOL  SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm);
//C       WINBOOL SetFormW(HANDLE hPrinter,LPWSTR pFormName,DWORD Level,LPBYTE pForm);
WINBOOL  SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm);
//C       WINBOOL EnumFormsA(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumFormsW(HANDLE hPrinter,DWORD Level,LPBYTE pForm,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumMonitorsA(LPSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumMonitorsW(LPWSTR pName,DWORD Level,LPBYTE pMonitor,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL AddMonitorA(LPSTR pName,DWORD Level,LPBYTE pMonitorInfo);
WINBOOL  AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitorInfo);
//C       WINBOOL AddMonitorW(LPWSTR pName,DWORD Level,LPBYTE pMonitorInfo);
WINBOOL  AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitorInfo);
//C       WINBOOL DeleteMonitorA(LPSTR pName,LPSTR pEnvironment,LPSTR pMonitorName);
WINBOOL  DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName);
//C       WINBOOL DeleteMonitorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pMonitorName);
WINBOOL  DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName);
//C       WINBOOL EnumPortsA(LPSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL EnumPortsW(LPWSTR pName,DWORD Level,LPBYTE pPorts,DWORD cbBuf,LPDWORD pcbNeeded,LPDWORD pcReturned);
WINBOOL  EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPorts, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned);
//C       WINBOOL AddPortA(LPSTR pName,HWND hWnd,LPSTR pMonitorName);
WINBOOL  AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName);
//C       WINBOOL AddPortW(LPWSTR pName,HWND hWnd,LPWSTR pMonitorName);
WINBOOL  AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName);
//C       WINBOOL ConfigurePortA(LPSTR pName,HWND hWnd,LPSTR pPortName);
WINBOOL  ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName);
//C       WINBOOL ConfigurePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName);
WINBOOL  ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName);
//C       WINBOOL DeletePortA(LPSTR pName,HWND hWnd,LPSTR pPortName);
WINBOOL  DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName);
//C       WINBOOL DeletePortW(LPWSTR pName,HWND hWnd,LPWSTR pPortName);
WINBOOL  DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName);
//C       WINBOOL XcvDataW(HANDLE hXcv,PCWSTR pszDataName,PBYTE pInputData,DWORD cbInputData,PBYTE pOutputData,DWORD cbOutputData,PDWORD pcbOutputNeeded,PDWORD pdwStatus);
WINBOOL  XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus);
//C       WINBOOL GetDefaultPrinterA(LPSTR pszBuffer,LPDWORD pcchBuffer);
WINBOOL  GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer);
//C       WINBOOL GetDefaultPrinterW(LPWSTR pszBuffer,LPDWORD pcchBuffer);
WINBOOL  GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer);
//C       WINBOOL SetDefaultPrinterA(LPCSTR pszPrinter);
WINBOOL  SetDefaultPrinterA(LPCSTR pszPrinter);
//C       WINBOOL SetDefaultPrinterW(LPCWSTR pszPrinter);
WINBOOL  SetDefaultPrinterW(LPCWSTR pszPrinter);
//C       WINBOOL SetPortA(LPSTR pName,LPSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo);
WINBOOL  SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo);
//C       WINBOOL SetPortW(LPWSTR pName,LPWSTR pPortName,DWORD dwLevel,LPBYTE pPortInfo);
WINBOOL  SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo);
//C       WINBOOL AddPrinterConnectionA(LPSTR pName);
WINBOOL  AddPrinterConnectionA(LPSTR pName);
//C       WINBOOL AddPrinterConnectionW(LPWSTR pName);
WINBOOL  AddPrinterConnectionW(LPWSTR pName);
//C       WINBOOL DeletePrinterConnectionA(LPSTR pName);
WINBOOL  DeletePrinterConnectionA(LPSTR pName);
//C       WINBOOL DeletePrinterConnectionW(LPWSTR pName);
WINBOOL  DeletePrinterConnectionW(LPWSTR pName);
//C       HANDLE ConnectToPrinterDlg(HWND hwnd,DWORD Flags);
HANDLE  ConnectToPrinterDlg(HWND hwnd, DWORD Flags);
//C       typedef struct _PROVIDOR_INFO_1A{
//C         LPSTR pName;
//C         LPSTR pEnvironment;
//C         LPSTR pDLLName;
//C       } PROVIDOR_INFO_1A,*PPROVIDOR_INFO_1A,*LPPROVIDOR_INFO_1A;
struct _PROVIDOR_INFO_1A
{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
}
alias _PROVIDOR_INFO_1A PROVIDOR_INFO_1A;
alias _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A;
alias _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A;
//C       typedef struct _PROVIDOR_INFO_1W{
//C         LPWSTR pName;
//C         LPWSTR pEnvironment;
//C         LPWSTR pDLLName;
//C       } PROVIDOR_INFO_1W,*PPROVIDOR_INFO_1W,*LPPROVIDOR_INFO_1W;
struct _PROVIDOR_INFO_1W
{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
}
alias _PROVIDOR_INFO_1W PROVIDOR_INFO_1W;
alias _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W;
alias _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W;
//C       typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
alias PROVIDOR_INFO_1A PROVIDOR_INFO_1;
//C       typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
alias PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
//C       typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
alias LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
//C       typedef struct _PROVIDOR_INFO_2A{
//C         LPSTR pOrder;
//C       } PROVIDOR_INFO_2A,*PPROVIDOR_INFO_2A,*LPPROVIDOR_INFO_2A;
struct _PROVIDOR_INFO_2A
{
    LPSTR pOrder;
}
alias _PROVIDOR_INFO_2A PROVIDOR_INFO_2A;
alias _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2A;
alias _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2A;
//C       typedef struct _PROVIDOR_INFO_2W{
//C         LPWSTR pOrder;
//C       } PROVIDOR_INFO_2W,*PPROVIDOR_INFO_2W,*LPPROVIDOR_INFO_2W;
struct _PROVIDOR_INFO_2W
{
    LPWSTR pOrder;
}
alias _PROVIDOR_INFO_2W PROVIDOR_INFO_2W;
alias _PROVIDOR_INFO_2W *PPROVIDOR_INFO_2W;
alias _PROVIDOR_INFO_2W *LPPROVIDOR_INFO_2W;
//C       typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
alias PROVIDOR_INFO_2A PROVIDOR_INFO_2;
//C       typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
alias PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
//C       typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
alias LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
//C       WINBOOL AddPrintProvidorA(LPSTR pName,DWORD level,LPBYTE pProvidorInfo);
WINBOOL  AddPrintProvidorA(LPSTR pName, DWORD level, LPBYTE pProvidorInfo);
//C       WINBOOL AddPrintProvidorW(LPWSTR pName,DWORD level,LPBYTE pProvidorInfo);
WINBOOL  AddPrintProvidorW(LPWSTR pName, DWORD level, LPBYTE pProvidorInfo);
//C       WINBOOL DeletePrintProvidorA(LPSTR pName,LPSTR pEnvironment,LPSTR pPrintProvidorName);
WINBOOL  DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName);
//C       WINBOOL DeletePrintProvidorW(LPWSTR pName,LPWSTR pEnvironment,LPWSTR pPrintProvidorName);
WINBOOL  DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName);
//C       WINBOOL IsValidDevmodeA (PDEVMODEA pDevmode,size_t DevmodeSize);
WINBOOL  IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize);
//C       WINBOOL IsValidDevmodeW (PDEVMODEW pDevmode,size_t DevmodeSize);
WINBOOL  IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize);
//C     extern const GUID IID_IPrintDialogCallback;
extern const GUID IID_IPrintDialogCallback;
//C     extern const GUID IID_IPrintDialogServices;
extern const GUID IID_IPrintDialogServices;
//C       typedef UINT_PTR ( *LPOFNHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPOFNHOOKPROC;
//C       typedef struct tagOFN_NT4A {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         LPCSTR lpstrFilter;
//C         LPSTR lpstrCustomFilter;
//C         DWORD nMaxCustFilter;
//C         DWORD nFilterIndex;
//C         LPSTR lpstrFile;
//C         DWORD nMaxFile;
//C         LPSTR lpstrFileTitle;
//C         DWORD nMaxFileTitle;
//C         LPCSTR lpstrInitialDir;
//C         LPCSTR lpstrTitle;
//C         DWORD Flags;
//C         WORD nFileOffset;
//C         WORD nFileExtension;
//C         LPCSTR lpstrDefExt;
//C         LPARAM lCustData;
//C         LPOFNHOOKPROC lpfnHook;
//C         LPCSTR lpTemplateName;
//C       } OPENFILENAME_NT4A,*LPOPENFILENAME_NT4A;
struct tagOFN_NT4A
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
}
alias tagOFN_NT4A OPENFILENAME_NT4A;
alias tagOFN_NT4A *LPOPENFILENAME_NT4A;
//C       typedef struct tagOFN_NT4W {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         LPCWSTR lpstrFilter;
//C         LPWSTR lpstrCustomFilter;
//C         DWORD nMaxCustFilter;
//C         DWORD nFilterIndex;
//C         LPWSTR lpstrFile;
//C         DWORD nMaxFile;
//C         LPWSTR lpstrFileTitle;
//C         DWORD nMaxFileTitle;
//C         LPCWSTR lpstrInitialDir;
//C         LPCWSTR lpstrTitle;
//C         DWORD Flags;
//C         WORD nFileOffset;
//C         WORD nFileExtension;
//C         LPCWSTR lpstrDefExt;
//C         LPARAM lCustData;
//C         LPOFNHOOKPROC lpfnHook;
//C         LPCWSTR lpTemplateName;
//C       } OPENFILENAME_NT4W,*LPOPENFILENAME_NT4W;
struct tagOFN_NT4W
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
}
alias tagOFN_NT4W OPENFILENAME_NT4W;
alias tagOFN_NT4W *LPOPENFILENAME_NT4W;
//C       typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
alias OPENFILENAME_NT4A OPENFILENAME_NT4;
//C       typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
alias LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
//C       typedef struct tagOFNA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         LPCSTR lpstrFilter;
//C         LPSTR lpstrCustomFilter;
//C         DWORD nMaxCustFilter;
//C         DWORD nFilterIndex;
//C         LPSTR lpstrFile;
//C         DWORD nMaxFile;
//C         LPSTR lpstrFileTitle;
//C         DWORD nMaxFileTitle;
//C         LPCSTR lpstrInitialDir;
//C         LPCSTR lpstrTitle;
//C         DWORD Flags;
//C         WORD nFileOffset;
//C         WORD nFileExtension;
//C         LPCSTR lpstrDefExt;
//C         LPARAM lCustData;
//C         LPOFNHOOKPROC lpfnHook;
//C         LPCSTR lpTemplateName;
//C         void *pvReserved;
//C         DWORD dwReserved;
//C         DWORD FlagsEx;
//C       } OPENFILENAMEA,*LPOPENFILENAMEA;
struct tagOFNA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpstrFilter;
    LPSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPSTR lpstrFile;
    DWORD nMaxFile;
    LPSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCSTR lpstrInitialDir;
    LPCSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
}
alias tagOFNA OPENFILENAMEA;
alias tagOFNA *LPOPENFILENAMEA;
//C       typedef struct tagOFNW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         LPCWSTR lpstrFilter;
//C         LPWSTR lpstrCustomFilter;
//C         DWORD nMaxCustFilter;
//C         DWORD nFilterIndex;
//C         LPWSTR lpstrFile;
//C         DWORD nMaxFile;
//C         LPWSTR lpstrFileTitle;
//C         DWORD nMaxFileTitle;
//C         LPCWSTR lpstrInitialDir;
//C         LPCWSTR lpstrTitle;
//C         DWORD Flags;
//C         WORD nFileOffset;
//C         WORD nFileExtension;
//C         LPCWSTR lpstrDefExt;
//C         LPARAM lCustData;
//C         LPOFNHOOKPROC lpfnHook;
//C         LPCWSTR lpTemplateName;
//C         void *pvReserved;
//C         DWORD dwReserved;
//C         DWORD FlagsEx;
//C       } OPENFILENAMEW,*LPOPENFILENAMEW;
struct tagOFNW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    void *pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
}
alias tagOFNW OPENFILENAMEW;
alias tagOFNW *LPOPENFILENAMEW;
//C       typedef OPENFILENAMEA OPENFILENAME;
alias OPENFILENAMEA OPENFILENAME;
//C       typedef LPOPENFILENAMEA LPOPENFILENAME;
alias LPOPENFILENAMEA LPOPENFILENAME;
//C        WINBOOL GetOpenFileNameA(LPOPENFILENAMEA);
WINBOOL  GetOpenFileNameA(LPOPENFILENAMEA );
//C        WINBOOL GetOpenFileNameW(LPOPENFILENAMEW);
WINBOOL  GetOpenFileNameW(LPOPENFILENAMEW );
//C        WINBOOL GetSaveFileNameA(LPOPENFILENAMEA);
WINBOOL  GetSaveFileNameA(LPOPENFILENAMEA );
//C        WINBOOL GetSaveFileNameW(LPOPENFILENAMEW);
WINBOOL  GetSaveFileNameW(LPOPENFILENAMEW );
//C        short GetFileTitleA(LPCSTR,LPSTR,WORD);
short  GetFileTitleA(LPCSTR , LPSTR , WORD );
//C        short GetFileTitleW(LPCWSTR,LPWSTR,WORD);
short  GetFileTitleW(LPCWSTR , LPWSTR , WORD );
//C       typedef UINT_PTR ( *LPCCHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPCCHOOKPROC;
//C       typedef struct _OFNOTIFYA {
//C         NMHDR hdr;
//C         LPOPENFILENAMEA lpOFN;
//C         LPSTR pszFile;
//C       } OFNOTIFYA,*LPOFNOTIFYA;
struct _OFNOTIFYA
{
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPSTR pszFile;
}
alias _OFNOTIFYA OFNOTIFYA;
alias _OFNOTIFYA *LPOFNOTIFYA;
//C       typedef struct _OFNOTIFYW {
//C         NMHDR hdr;
//C         LPOPENFILENAMEW lpOFN;
//C         LPWSTR pszFile;
//C       } OFNOTIFYW,*LPOFNOTIFYW;
struct _OFNOTIFYW
{
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPWSTR pszFile;
}
alias _OFNOTIFYW OFNOTIFYW;
alias _OFNOTIFYW *LPOFNOTIFYW;
//C       typedef OFNOTIFYA OFNOTIFY;
alias OFNOTIFYA OFNOTIFY;
//C       typedef LPOFNOTIFYA LPOFNOTIFY;
alias LPOFNOTIFYA LPOFNOTIFY;
//C       typedef struct _OFNOTIFYEXA {
//C         NMHDR hdr;
//C         LPOPENFILENAMEA lpOFN;
//C         LPVOID psf;
//C         LPVOID pidl;
//C       } OFNOTIFYEXA,*LPOFNOTIFYEXA;
struct _OFNOTIFYEXA
{
    NMHDR hdr;
    LPOPENFILENAMEA lpOFN;
    LPVOID psf;
    LPVOID pidl;
}
alias _OFNOTIFYEXA OFNOTIFYEXA;
alias _OFNOTIFYEXA *LPOFNOTIFYEXA;
//C       typedef struct _OFNOTIFYEXW {
//C         NMHDR hdr;
//C         LPOPENFILENAMEW lpOFN;
//C         LPVOID psf;
//C         LPVOID pidl;
//C       } OFNOTIFYEXW,*LPOFNOTIFYEXW;
struct _OFNOTIFYEXW
{
    NMHDR hdr;
    LPOPENFILENAMEW lpOFN;
    LPVOID psf;
    LPVOID pidl;
}
alias _OFNOTIFYEXW OFNOTIFYEXW;
alias _OFNOTIFYEXW *LPOFNOTIFYEXW;
//C       typedef OFNOTIFYEXA OFNOTIFYEX;
alias OFNOTIFYEXA OFNOTIFYEX;
//C       typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
alias LPOFNOTIFYEXA LPOFNOTIFYEX;
//C       typedef struct tagCHOOSECOLORA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HWND hInstance;
//C         COLORREF rgbResult;
//C         COLORREF *lpCustColors;
//C         DWORD Flags;
//C         LPARAM lCustData;
//C         LPCCHOOKPROC lpfnHook;
//C         LPCSTR lpTemplateName;
//C       } CHOOSECOLORA,*LPCHOOSECOLORA;
struct tagCHOOSECOLORA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
}
alias tagCHOOSECOLORA CHOOSECOLORA;
alias tagCHOOSECOLORA *LPCHOOSECOLORA;
//C       typedef struct tagCHOOSECOLORW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HWND hInstance;
//C         COLORREF rgbResult;
//C         COLORREF *lpCustColors;
//C         DWORD Flags;
//C         LPARAM lCustData;
//C         LPCCHOOKPROC lpfnHook;
//C         LPCWSTR lpTemplateName;
//C       } CHOOSECOLORW,*LPCHOOSECOLORW;
struct tagCHOOSECOLORW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF *lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
}
alias tagCHOOSECOLORW CHOOSECOLORW;
alias tagCHOOSECOLORW *LPCHOOSECOLORW;
//C       typedef CHOOSECOLORA CHOOSECOLOR;
alias CHOOSECOLORA CHOOSECOLOR;
//C       typedef LPCHOOSECOLORA LPCHOOSECOLOR;
alias LPCHOOSECOLORA LPCHOOSECOLOR;
//C        WINBOOL ChooseColorA(LPCHOOSECOLORA);
WINBOOL  ChooseColorA(LPCHOOSECOLORA );
//C        WINBOOL ChooseColorW(LPCHOOSECOLORW);
WINBOOL  ChooseColorW(LPCHOOSECOLORW );
//C       typedef UINT_PTR ( *LPFRHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPFRHOOKPROC;
//C       typedef struct tagFINDREPLACEA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         DWORD Flags;
//C         LPSTR lpstrFindWhat;
//C         LPSTR lpstrReplaceWith;
//C         WORD wFindWhatLen;
//C         WORD wReplaceWithLen;
//C         LPARAM lCustData;
//C         LPFRHOOKPROC lpfnHook;
//C         LPCSTR lpTemplateName;
//C       } FINDREPLACEA,*LPFINDREPLACEA;
struct tagFINDREPLACEA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPSTR lpstrFindWhat;
    LPSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
}
alias tagFINDREPLACEA FINDREPLACEA;
alias tagFINDREPLACEA *LPFINDREPLACEA;
//C       typedef struct tagFINDREPLACEW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HINSTANCE hInstance;
//C         DWORD Flags;
//C         LPWSTR lpstrFindWhat;
//C         LPWSTR lpstrReplaceWith;
//C         WORD wFindWhatLen;
//C         WORD wReplaceWithLen;
//C         LPARAM lCustData;
//C         LPFRHOOKPROC lpfnHook;
//C         LPCWSTR lpTemplateName;
//C       } FINDREPLACEW,*LPFINDREPLACEW;
struct tagFINDREPLACEW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    DWORD Flags;
    LPWSTR lpstrFindWhat;
    LPWSTR lpstrReplaceWith;
    WORD wFindWhatLen;
    WORD wReplaceWithLen;
    LPARAM lCustData;
    LPFRHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
}
alias tagFINDREPLACEW FINDREPLACEW;
alias tagFINDREPLACEW *LPFINDREPLACEW;
//C       typedef FINDREPLACEA FINDREPLACE;
alias FINDREPLACEA FINDREPLACE;
//C       typedef LPFINDREPLACEA LPFINDREPLACE;
alias LPFINDREPLACEA LPFINDREPLACE;
//C        HWND FindTextA(LPFINDREPLACEA);
HWND  FindTextA(LPFINDREPLACEA );
//C        HWND FindTextW(LPFINDREPLACEW);
HWND  FindTextW(LPFINDREPLACEW );
//C        HWND ReplaceTextA(LPFINDREPLACEA);
HWND  ReplaceTextA(LPFINDREPLACEA );
//C        HWND ReplaceTextW(LPFINDREPLACEW);
HWND  ReplaceTextW(LPFINDREPLACEW );
//C       typedef UINT_PTR ( *LPCFHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPCFHOOKPROC;
//C       typedef struct tagCHOOSEFONTA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HDC hDC;
//C         LPLOGFONTA lpLogFont;
//C         INT iPointSize;
//C         DWORD Flags;
//C         COLORREF rgbColors;
//C         LPARAM lCustData;
//C         LPCFHOOKPROC lpfnHook;
//C         LPCSTR lpTemplateName;
//C         HINSTANCE hInstance;
//C         LPSTR lpszStyle;
//C         WORD nFontType;
//C         WORD ___MISSING_ALIGNMENT__;
//C         INT nSizeMin;
//C         INT nSizeMax;
//C       } CHOOSEFONTA,*LPCHOOSEFONTA;
struct tagCHOOSEFONTA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTA lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCSTR lpTemplateName;
    HINSTANCE hInstance;
    LPSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
}
alias tagCHOOSEFONTA CHOOSEFONTA;
alias tagCHOOSEFONTA *LPCHOOSEFONTA;
//C       typedef struct tagCHOOSEFONTW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HDC hDC;
//C         LPLOGFONTW lpLogFont;
//C         INT iPointSize;
//C         DWORD Flags;
//C         COLORREF rgbColors;
//C         LPARAM lCustData;
//C         LPCFHOOKPROC lpfnHook;
//C         LPCWSTR lpTemplateName;
//C         HINSTANCE hInstance;
//C         LPWSTR lpszStyle;
//C         WORD nFontType;
//C         WORD ___MISSING_ALIGNMENT__;
//C         INT nSizeMin;
//C         INT nSizeMax;
//C       } CHOOSEFONTW,*LPCHOOSEFONTW;
struct tagCHOOSEFONTW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HDC hDC;
    LPLOGFONTW lpLogFont;
    INT iPointSize;
    DWORD Flags;
    COLORREF rgbColors;
    LPARAM lCustData;
    LPCFHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    HINSTANCE hInstance;
    LPWSTR lpszStyle;
    WORD nFontType;
    WORD ___MISSING_ALIGNMENT__;
    INT nSizeMin;
    INT nSizeMax;
}
alias tagCHOOSEFONTW CHOOSEFONTW;
alias tagCHOOSEFONTW *LPCHOOSEFONTW;
//C       typedef CHOOSEFONTA CHOOSEFONT;
alias CHOOSEFONTA CHOOSEFONT;
//C       typedef LPCHOOSEFONTA LPCHOOSEFONT;
alias LPCHOOSEFONTA LPCHOOSEFONT;
//C        WINBOOL ChooseFontA(LPCHOOSEFONTA);
WINBOOL  ChooseFontA(LPCHOOSEFONTA );
//C        WINBOOL ChooseFontW(LPCHOOSEFONTW);
WINBOOL  ChooseFontW(LPCHOOSEFONTW );
//C       typedef UINT_PTR ( *LPPRINTHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPPRINTHOOKPROC;
//C       typedef UINT_PTR ( *LPSETUPHOOKPROC) (HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPSETUPHOOKPROC;
//C       typedef struct tagPDA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HGLOBAL hDevMode;
//C         HGLOBAL hDevNames;
//C         HDC hDC;
//C         DWORD Flags;
//C         WORD nFromPage;
//C         WORD nToPage;
//C         WORD nMinPage;
//C         WORD nMaxPage;
//C         WORD nCopies;
//C         HINSTANCE hInstance;
//C         LPARAM lCustData;
//C         LPPRINTHOOKPROC lpfnPrintHook;
//C         LPSETUPHOOKPROC lpfnSetupHook;
//C         LPCSTR lpPrintTemplateName;
//C         LPCSTR lpSetupTemplateName;
//C         HGLOBAL hPrintTemplate;
//C         HGLOBAL hSetupTemplate;
//C       } PRINTDLGA,*LPPRINTDLGA;
struct tagPDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCSTR lpPrintTemplateName;
    LPCSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
}
alias tagPDA PRINTDLGA;
alias tagPDA *LPPRINTDLGA;
//C       typedef struct tagPDW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HGLOBAL hDevMode;
//C         HGLOBAL hDevNames;
//C         HDC hDC;
//C         DWORD Flags;
//C         WORD nFromPage;
//C         WORD nToPage;
//C         WORD nMinPage;
//C         WORD nMaxPage;
//C         WORD nCopies;
//C         HINSTANCE hInstance;
//C         LPARAM lCustData;
//C         LPPRINTHOOKPROC lpfnPrintHook;
//C         LPSETUPHOOKPROC lpfnSetupHook;
//C         LPCWSTR lpPrintTemplateName;
//C         LPCWSTR lpSetupTemplateName;
//C         HGLOBAL hPrintTemplate;
//C         HGLOBAL hSetupTemplate;
//C       } PRINTDLGW,*LPPRINTDLGW;
struct tagPDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    WORD nFromPage;
    WORD nToPage;
    WORD nMinPage;
    WORD nMaxPage;
    WORD nCopies;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPRINTHOOKPROC lpfnPrintHook;
    LPSETUPHOOKPROC lpfnSetupHook;
    LPCWSTR lpPrintTemplateName;
    LPCWSTR lpSetupTemplateName;
    HGLOBAL hPrintTemplate;
    HGLOBAL hSetupTemplate;
}
alias tagPDW PRINTDLGW;
alias tagPDW *LPPRINTDLGW;
//C       typedef PRINTDLGA PRINTDLG;
alias PRINTDLGA PRINTDLG;
//C       typedef LPPRINTDLGA LPPRINTDLG;
alias LPPRINTDLGA LPPRINTDLG;
//C        WINBOOL PrintDlgA(LPPRINTDLGA);
WINBOOL  PrintDlgA(LPPRINTDLGA );
//C        WINBOOL PrintDlgW(LPPRINTDLGW);
WINBOOL  PrintDlgW(LPPRINTDLGW );
//C       typedef struct IPrintDialogCallback { struct IPrintDialogCallbackVtbl *lpVtbl; } IPrintDialogCallback; typedef struct IPrintDialogCallbackVtbl IPrintDialogCallbackVtbl; struct IPrintDialogCallbackVtbl {
struct IPrintDialogCallback
{
    IPrintDialogCallbackVtbl *lpVtbl;
}
//C         HRESULT ( *QueryInterface) (IPrintDialogCallback *This,const IID *const riid,LPVOID *ppvObj) ;
//C         ULONG ( *AddRef) (IPrintDialogCallback *This) ;
//C         ULONG ( *Release) (IPrintDialogCallback *This) ;
//C         HRESULT ( *InitDone) (IPrintDialogCallback *This) ;
//C         HRESULT ( *SelectionChange) (IPrintDialogCallback *This) ;
//C         HRESULT ( *HandleMessage) (IPrintDialogCallback *This,HWND hDlg,UINT uMsg,WPARAM wParam,LPARAM lParam,LRESULT *pResult) ;
//C       };
struct IPrintDialogCallbackVtbl
{
    HRESULT  function(IPrintDialogCallback *This, IID *riid, LPVOID *ppvObj)QueryInterface;
    ULONG  function(IPrintDialogCallback *This)AddRef;
    ULONG  function(IPrintDialogCallback *This)Release;
    HRESULT  function(IPrintDialogCallback *This)InitDone;
    HRESULT  function(IPrintDialogCallback *This)SelectionChange;
    HRESULT  function(IPrintDialogCallback *This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult)HandleMessage;
}
//C       typedef struct IPrintDialogServices { struct IPrintDialogServicesVtbl *lpVtbl; } IPrintDialogServices; typedef struct IPrintDialogServicesVtbl IPrintDialogServicesVtbl; struct IPrintDialogServicesVtbl {
struct IPrintDialogServices
{
    IPrintDialogServicesVtbl *lpVtbl;
}
//C         HRESULT ( *QueryInterface) (IPrintDialogServices *This,const IID *const riid,LPVOID *ppvObj) ;
//C         ULONG ( *AddRef) (IPrintDialogServices *This) ;
//C         ULONG ( *Release) (IPrintDialogServices *This) ;
//C         HRESULT ( *GetCurrentDevMode) (IPrintDialogServices *This,LPDEVMODE pDevMode,UINT *pcbSize) ;
//C         HRESULT ( *GetCurrentPrinterName) (IPrintDialogServices *This,LPTSTR pPrinterName,UINT *pcchSize) ;
//C         HRESULT ( *GetCurrentPortName) (IPrintDialogServices *This,LPTSTR pPortName,UINT *pcchSize) ;
//C       };
struct IPrintDialogServicesVtbl
{
    HRESULT  function(IPrintDialogServices *This, IID *riid, LPVOID *ppvObj)QueryInterface;
    ULONG  function(IPrintDialogServices *This)AddRef;
    ULONG  function(IPrintDialogServices *This)Release;
    HRESULT  function(IPrintDialogServices *This, LPDEVMODE pDevMode, UINT *pcbSize)GetCurrentDevMode;
    HRESULT  function(IPrintDialogServices *This, LPTSTR pPrinterName, UINT *pcchSize)GetCurrentPrinterName;
    HRESULT  function(IPrintDialogServices *This, LPTSTR pPortName, UINT *pcchSize)GetCurrentPortName;
}
//C       typedef struct tagPRINTPAGERANGE {
//C         DWORD nFromPage;
//C         DWORD nToPage;
//C       } PRINTPAGERANGE,*LPPRINTPAGERANGE;
struct tagPRINTPAGERANGE
{
    DWORD nFromPage;
    DWORD nToPage;
}
alias tagPRINTPAGERANGE PRINTPAGERANGE;
alias tagPRINTPAGERANGE *LPPRINTPAGERANGE;
//C       typedef struct tagPDEXA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HGLOBAL hDevMode;
//C         HGLOBAL hDevNames;
//C         HDC hDC;
//C         DWORD Flags;
//C         DWORD Flags2;
//C         DWORD ExclusionFlags;
//C         DWORD nPageRanges;
//C         DWORD nMaxPageRanges;
//C         LPPRINTPAGERANGE lpPageRanges;
//C         DWORD nMinPage;
//C         DWORD nMaxPage;
//C         DWORD nCopies;
//C         HINSTANCE hInstance;
//C         LPCSTR lpPrintTemplateName;
//C         LPUNKNOWN lpCallback;
//C         DWORD nPropertyPages;
//C         HPROPSHEETPAGE *lphPropertyPages;
//C         DWORD nStartPage;
//C         DWORD dwResultAction;
//C       } PRINTDLGEXA,*LPPRINTDLGEXA;
struct tagPDEXA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
}
alias tagPDEXA PRINTDLGEXA;
alias tagPDEXA *LPPRINTDLGEXA;
//C       typedef struct tagPDEXW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HGLOBAL hDevMode;
//C         HGLOBAL hDevNames;
//C         HDC hDC;
//C         DWORD Flags;
//C         DWORD Flags2;
//C         DWORD ExclusionFlags;
//C         DWORD nPageRanges;
//C         DWORD nMaxPageRanges;
//C         LPPRINTPAGERANGE lpPageRanges;
//C         DWORD nMinPage;
//C         DWORD nMaxPage;
//C         DWORD nCopies;
//C         HINSTANCE hInstance;
//C         LPCWSTR lpPrintTemplateName;
//C         LPUNKNOWN lpCallback;
//C         DWORD nPropertyPages;
//C         HPROPSHEETPAGE *lphPropertyPages;
//C         DWORD nStartPage;
//C         DWORD dwResultAction;
//C       } PRINTDLGEXW,*LPPRINTDLGEXW;
struct tagPDEXW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    HDC hDC;
    DWORD Flags;
    DWORD Flags2;
    DWORD ExclusionFlags;
    DWORD nPageRanges;
    DWORD nMaxPageRanges;
    LPPRINTPAGERANGE lpPageRanges;
    DWORD nMinPage;
    DWORD nMaxPage;
    DWORD nCopies;
    HINSTANCE hInstance;
    LPCWSTR lpPrintTemplateName;
    LPUNKNOWN lpCallback;
    DWORD nPropertyPages;
    HPROPSHEETPAGE *lphPropertyPages;
    DWORD nStartPage;
    DWORD dwResultAction;
}
alias tagPDEXW PRINTDLGEXW;
alias tagPDEXW *LPPRINTDLGEXW;
//C       typedef PRINTDLGEXA PRINTDLGEX;
alias PRINTDLGEXA PRINTDLGEX;
//C       typedef LPPRINTDLGEXA LPPRINTDLGEX;
alias LPPRINTDLGEXA LPPRINTDLGEX;
//C        HRESULT PrintDlgExA(LPPRINTDLGEXA);
HRESULT  PrintDlgExA(LPPRINTDLGEXA );
//C        HRESULT PrintDlgExW(LPPRINTDLGEXW);
HRESULT  PrintDlgExW(LPPRINTDLGEXW );
//C       typedef struct tagDEVNAMES {
//C         WORD wDriverOffset;
//C         WORD wDeviceOffset;
//C         WORD wOutputOffset;
//C         WORD wDefault;
//C       } DEVNAMES,*LPDEVNAMES;
struct tagDEVNAMES
{
    WORD wDriverOffset;
    WORD wDeviceOffset;
    WORD wOutputOffset;
    WORD wDefault;
}
alias tagDEVNAMES DEVNAMES;
alias tagDEVNAMES *LPDEVNAMES;
//C        DWORD CommDlgExtendedError(void);
DWORD  CommDlgExtendedError();
//C       typedef UINT_PTR ( *LPPAGEPAINTHOOK)(HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPPAGEPAINTHOOK;
//C       typedef UINT_PTR ( *LPPAGESETUPHOOK)(HWND,UINT,WPARAM,LPARAM);
alias UINT_PTR  function(HWND , UINT , WPARAM , LPARAM )LPPAGESETUPHOOK;
//C       typedef struct tagPSDA {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HGLOBAL hDevMode;
//C         HGLOBAL hDevNames;
//C         DWORD Flags;
//C         POINT ptPaperSize;
//C         RECT rtMinMargin;
//C         RECT rtMargin;
//C         HINSTANCE hInstance;
//C         LPARAM lCustData;
//C         LPPAGESETUPHOOK lpfnPageSetupHook;
//C         LPPAGEPAINTHOOK lpfnPagePaintHook;
//C         LPCSTR lpPageSetupTemplateName;
//C         HGLOBAL hPageSetupTemplate;
//C       } PAGESETUPDLGA,*LPPAGESETUPDLGA;
struct tagPSDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
}
alias tagPSDA PAGESETUPDLGA;
alias tagPSDA *LPPAGESETUPDLGA;
//C       typedef struct tagPSDW {
//C         DWORD lStructSize;
//C         HWND hwndOwner;
//C         HGLOBAL hDevMode;
//C         HGLOBAL hDevNames;
//C         DWORD Flags;
//C         POINT ptPaperSize;
//C         RECT rtMinMargin;
//C         RECT rtMargin;
//C         HINSTANCE hInstance;
//C         LPARAM lCustData;
//C         LPPAGESETUPHOOK lpfnPageSetupHook;
//C         LPPAGEPAINTHOOK lpfnPagePaintHook;
//C         LPCWSTR lpPageSetupTemplateName;
//C         HGLOBAL hPageSetupTemplate;
//C       } PAGESETUPDLGW,*LPPAGESETUPDLGW;
struct tagPSDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
}
alias tagPSDW PAGESETUPDLGW;
alias tagPSDW *LPPAGESETUPDLGW;
//C       typedef PAGESETUPDLGA PAGESETUPDLG;
alias PAGESETUPDLGA PAGESETUPDLG;
//C       typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
alias LPPAGESETUPDLGA LPPAGESETUPDLG;
//C        WINBOOL PageSetupDlgA(LPPAGESETUPDLGA);
WINBOOL  PageSetupDlgA(LPPAGESETUPDLGA );
//C        WINBOOL PageSetupDlgW(LPPAGESETUPDLGW);
WINBOOL  PageSetupDlgW(LPPAGESETUPDLGW );
//C       LPUWSTR uaw_CharUpperW(LPUWSTR String);
LPUWSTR  uaw_CharUpperW(LPUWSTR String);
//C       int uaw_lstrcmpW(PCUWSTR String1,PCUWSTR String2);
int  uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2);
//C       int uaw_lstrcmpiW(PCUWSTR String1,PCUWSTR String2);
int  uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2);
//C       int uaw_lstrlenW(LPCUWSTR String);
int  uaw_lstrlenW(LPCUWSTR String);
//C       PUWSTR  uaw_wcschr(PCUWSTR String,WCHAR Character);
PUWSTR  uaw_wcschr(PCUWSTR String, WCHAR Character);
//C       PUWSTR  uaw_wcscpy(PUWSTR Destination,PCUWSTR Source);
PUWSTR  uaw_wcscpy(PUWSTR Destination, PCUWSTR Source);
//C       int  uaw_wcsicmp(PCUWSTR String1,PCUWSTR String2);
int  uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2);
//C       size_t  uaw_wcslen(PCUWSTR String);
size_t  uaw_wcslen(PCUWSTR String);
//C       PUWSTR  uaw_wcsrchr(PCUWSTR String,WCHAR Character);
PUWSTR  uaw_wcsrchr(PCUWSTR String, WCHAR Character);
//C       LPUWSTR ua_CharUpperW(LPUWSTR String);
LPUWSTR  ua_CharUpperW(LPUWSTR String);
//C       int ua_lstrcmpW(LPCUWSTR String1,LPCUWSTR String2);
int  ua_lstrcmpW(LPCUWSTR String1, LPCUWSTR String2);
//C       int ua_lstrcmpiW(LPCUWSTR String1,LPCUWSTR String2);
int  ua_lstrcmpiW(LPCUWSTR String1, LPCUWSTR String2);
//C       int ua_lstrlenW(LPCUWSTR String);
int  ua_lstrlenW(LPCUWSTR String);
//C       typedef WCHAR *PUWSTR_C;
alias WCHAR *PUWSTR_C;
//C       PUWSTR_C ua_wcschr(PCUWSTR String,WCHAR Character);
PUWSTR_C  ua_wcschr(PCUWSTR String, WCHAR Character);
//C       PUWSTR_C ua_wcsrchr(PCUWSTR String,WCHAR Character);
PUWSTR_C  ua_wcsrchr(PCUWSTR String, WCHAR Character);
//C       PUWSTR ua_wcscpy(PUWSTR Destination,PCUWSTR Source);
PUWSTR  ua_wcscpy(PUWSTR Destination, PCUWSTR Source);
//C       size_t ua_wcslen(PCUWSTR String);
size_t  ua_wcslen(PCUWSTR String);
//C       int ua_wcsicmp(LPCUWSTR String1,LPCUWSTR String2);
int  ua_wcsicmp(LPCUWSTR String1, LPCUWSTR String2);
//C       typedef struct _SERVICE_DESCRIPTIONA {
//C         LPSTR lpDescription;
//C       } SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;
struct _SERVICE_DESCRIPTIONA
{
    LPSTR lpDescription;
}
alias _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTIONA;
alias _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;
//C       typedef struct _SERVICE_DESCRIPTIONW {
//C         LPWSTR lpDescription;
//C       } SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;
struct _SERVICE_DESCRIPTIONW
{
    LPWSTR lpDescription;
}
alias _SERVICE_DESCRIPTIONW SERVICE_DESCRIPTIONW;
alias _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;
//C       typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
alias SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
//C       typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
alias LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
//C       typedef enum _SC_ACTION_TYPE {
//C         SC_ACTION_NONE = 0,SC_ACTION_RESTART = 1,SC_ACTION_REBOOT = 2,SC_ACTION_RUN_COMMAND = 3
//C       } SC_ACTION_TYPE;
enum _SC_ACTION_TYPE
{
    SC_ACTION_NONE,
    SC_ACTION_RESTART,
    SC_ACTION_REBOOT,
    SC_ACTION_RUN_COMMAND,
}
alias _SC_ACTION_TYPE SC_ACTION_TYPE;
//C       typedef struct _SC_ACTION {
//C         SC_ACTION_TYPE Type;
//C         DWORD Delay;
//C       } SC_ACTION,*LPSC_ACTION;
struct _SC_ACTION
{
    SC_ACTION_TYPE Type;
    DWORD Delay;
}
alias _SC_ACTION SC_ACTION;
alias _SC_ACTION *LPSC_ACTION;
//C       typedef struct _SERVICE_FAILURE_ACTIONSA {
//C         DWORD dwResetPeriod;
//C         LPSTR lpRebootMsg;
//C         LPSTR lpCommand;
//C         DWORD cActions;
//C         SC_ACTION *lpsaActions;
//C       } SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;
struct _SERVICE_FAILURE_ACTIONSA
{
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
}
alias _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONSA;
alias _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;
//C       typedef struct _SERVICE_FAILURE_ACTIONSW {
//C         DWORD dwResetPeriod;
//C         LPWSTR lpRebootMsg;
//C         LPWSTR lpCommand;
//C         DWORD cActions;
//C         SC_ACTION *lpsaActions;
//C       } SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;
struct _SERVICE_FAILURE_ACTIONSW
{
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION *lpsaActions;
}
alias _SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONSW;
alias _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;
//C       typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
alias SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
//C       typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
alias LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
//C       struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__ *SC_HANDLE;
struct SC_HANDLE__
{
    int unused;
}
alias SC_HANDLE__ *SC_HANDLE;
//C       typedef SC_HANDLE *LPSC_HANDLE;
alias SC_HANDLE *LPSC_HANDLE;
//C       struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;
struct SERVICE_STATUS_HANDLE__
{
    int unused;
}
alias SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;
//C       typedef enum _SC_STATUS_TYPE {
//C         SC_STATUS_PROCESS_INFO = 0
//C       } SC_STATUS_TYPE;
enum _SC_STATUS_TYPE
{
    SC_STATUS_PROCESS_INFO,
}
alias _SC_STATUS_TYPE SC_STATUS_TYPE;
//C       typedef enum _SC_ENUM_TYPE {
//C         SC_ENUM_PROCESS_INFO = 0
//C       } SC_ENUM_TYPE;
enum _SC_ENUM_TYPE
{
    SC_ENUM_PROCESS_INFO,
}
alias _SC_ENUM_TYPE SC_ENUM_TYPE;
//C       typedef struct _SERVICE_STATUS {
//C         DWORD dwServiceType;
//C         DWORD dwCurrentState;
//C         DWORD dwControlsAccepted;
//C         DWORD dwWin32ExitCode;
//C         DWORD dwServiceSpecificExitCode;
//C         DWORD dwCheckPoint;
//C         DWORD dwWaitHint;
//C       } SERVICE_STATUS,*LPSERVICE_STATUS;
struct _SERVICE_STATUS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
}
alias _SERVICE_STATUS SERVICE_STATUS;
alias _SERVICE_STATUS *LPSERVICE_STATUS;
//C       typedef struct _SERVICE_STATUS_PROCESS {
//C         DWORD dwServiceType;
//C         DWORD dwCurrentState;
//C         DWORD dwControlsAccepted;
//C         DWORD dwWin32ExitCode;
//C         DWORD dwServiceSpecificExitCode;
//C         DWORD dwCheckPoint;
//C         DWORD dwWaitHint;
//C         DWORD dwProcessId;
//C         DWORD dwServiceFlags;
//C       } SERVICE_STATUS_PROCESS,*LPSERVICE_STATUS_PROCESS;
struct _SERVICE_STATUS_PROCESS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
}
alias _SERVICE_STATUS_PROCESS SERVICE_STATUS_PROCESS;
alias _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS;
//C       typedef struct _ENUM_SERVICE_STATUSA {
//C         LPSTR lpServiceName;
//C         LPSTR lpDisplayName;
//C         SERVICE_STATUS ServiceStatus;
//C       } ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;
struct _ENUM_SERVICE_STATUSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
}
alias _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUSA;
alias _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;
//C       typedef struct _ENUM_SERVICE_STATUSW {
//C         LPWSTR lpServiceName;
//C         LPWSTR lpDisplayName;
//C         SERVICE_STATUS ServiceStatus;
//C       } ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;
struct _ENUM_SERVICE_STATUSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
}
alias _ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUSW;
alias _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;
//C       typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
alias ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
//C       typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
alias LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
//C       typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
//C         LPSTR lpServiceName;
//C         LPSTR lpDisplayName;
//C         SERVICE_STATUS_PROCESS ServiceStatusProcess;
//C       } ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;
struct _ENUM_SERVICE_STATUS_PROCESSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
}
alias _ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESSA;
alias _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA;
//C       typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
//C         LPWSTR lpServiceName;
//C         LPWSTR lpDisplayName;
//C         SERVICE_STATUS_PROCESS ServiceStatusProcess;
//C       } ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;
struct _ENUM_SERVICE_STATUS_PROCESSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
}
alias _ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESSW;
alias _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW;
//C       typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
alias ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
//C       typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
alias LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
//C       typedef LPVOID SC_LOCK;
alias LPVOID SC_LOCK;
//C       typedef struct _QUERY_SERVICE_LOCK_STATUSA {
//C         DWORD fIsLocked;
//C         LPSTR lpLockOwner;
//C         DWORD dwLockDuration;
//C       } QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;
struct _QUERY_SERVICE_LOCK_STATUSA
{
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
}
alias _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUSA;
alias _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;
//C       typedef struct _QUERY_SERVICE_LOCK_STATUSW {
//C         DWORD fIsLocked;
//C         LPWSTR lpLockOwner;
//C         DWORD dwLockDuration;
//C       } QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;
struct _QUERY_SERVICE_LOCK_STATUSW
{
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
}
alias _QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUSW;
alias _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;
//C       typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
alias QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
//C       typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
alias LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
//C       typedef struct _QUERY_SERVICE_CONFIGA {
//C         DWORD dwServiceType;
//C         DWORD dwStartType;
//C         DWORD dwErrorControl;
//C         LPSTR lpBinaryPathName;
//C         LPSTR lpLoadOrderGroup;
//C         DWORD dwTagId;
//C         LPSTR lpDependencies;
//C         LPSTR lpServiceStartName;
//C         LPSTR lpDisplayName;
//C       } QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;
struct _QUERY_SERVICE_CONFIGA
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
}
alias _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIGA;
alias _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;
//C       typedef struct _QUERY_SERVICE_CONFIGW {
//C         DWORD dwServiceType;
//C         DWORD dwStartType;
//C         DWORD dwErrorControl;
//C         LPWSTR lpBinaryPathName;
//C         LPWSTR lpLoadOrderGroup;
//C         DWORD dwTagId;
//C         LPWSTR lpDependencies;
//C         LPWSTR lpServiceStartName;
//C         LPWSTR lpDisplayName;
//C       } QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;
struct _QUERY_SERVICE_CONFIGW
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
}
alias _QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIGW;
alias _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;
//C       typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
alias QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
//C       typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
alias LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
//C       typedef void ( *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs,LPWSTR *lpServiceArgVectors);
alias void  function(DWORD dwNumServicesArgs, LPWSTR *lpServiceArgVectors)LPSERVICE_MAIN_FUNCTIONW;
//C       typedef void ( *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs,LPSTR *lpServiceArgVectors);
alias void  function(DWORD dwNumServicesArgs, LPSTR *lpServiceArgVectors)LPSERVICE_MAIN_FUNCTIONA;
//C       typedef struct _SERVICE_TABLE_ENTRYA {
//C         LPSTR lpServiceName;
//C         LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
//C       } SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;
struct _SERVICE_TABLE_ENTRYA
{
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}
alias _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRYA;
alias _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;
//C       typedef struct _SERVICE_TABLE_ENTRYW {
//C         LPWSTR lpServiceName;
//C         LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
//C       } SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;
struct _SERVICE_TABLE_ENTRYW
{
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}
alias _SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRYW;
alias _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;
//C       typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
alias SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
//C       typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
alias LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
//C       typedef void ( *LPHANDLER_FUNCTION)(DWORD dwControl);
alias void  function(DWORD dwControl)LPHANDLER_FUNCTION;
//C       typedef DWORD ( *LPHANDLER_FUNCTION_EX)(DWORD dwControl,DWORD dwEventType,LPVOID lpEventData,LPVOID lpContext);
alias DWORD  function(DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext)LPHANDLER_FUNCTION_EX;
//C        WINBOOL ChangeServiceConfigA(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword,LPCSTR lpDisplayName);
WINBOOL  ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName);
//C        WINBOOL ChangeServiceConfigW(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword,LPCWSTR lpDisplayName);
WINBOOL  ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName);
//C        WINBOOL ChangeServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
WINBOOL  ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo);
//C        WINBOOL ChangeServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
WINBOOL  ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo);
//C        WINBOOL CloseServiceHandle(SC_HANDLE hSCObject);
WINBOOL  CloseServiceHandle(SC_HANDLE hSCObject);
//C        WINBOOL ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
WINBOOL  ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus);
//C        SC_HANDLE CreateServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPCSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCSTR lpBinaryPathName,LPCSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCSTR lpDependencies,LPCSTR lpServiceStartName,LPCSTR lpPassword);
SC_HANDLE  CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword);
//C        SC_HANDLE CreateServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPCWSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCWSTR lpBinaryPathName,LPCWSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCWSTR lpDependencies,LPCWSTR lpServiceStartName,LPCWSTR lpPassword);
SC_HANDLE  CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword);
//C        WINBOOL DeleteService(SC_HANDLE hService);
WINBOOL  DeleteService(SC_HANDLE hService);
//C        WINBOOL EnumDependentServicesA(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
WINBOOL  EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned);
//C        WINBOOL EnumDependentServicesW(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
WINBOOL  EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned);
//C        WINBOOL EnumServicesStatusA(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSA lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
WINBOOL  EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle);
//C        WINBOOL EnumServicesStatusW(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUSW lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
WINBOOL  EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle);
//C        WINBOOL EnumServicesStatusExA(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCSTR pszGroupName);
WINBOOL  EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName);
//C        WINBOOL EnumServicesStatusExW(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCWSTR pszGroupName);
WINBOOL  EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName);
//C        WINBOOL GetServiceKeyNameA(SC_HANDLE hSCManager,LPCSTR lpDisplayName,LPSTR lpServiceName,LPDWORD lpcchBuffer);
WINBOOL  GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer);
//C        WINBOOL GetServiceKeyNameW(SC_HANDLE hSCManager,LPCWSTR lpDisplayName,LPWSTR lpServiceName,LPDWORD lpcchBuffer);
WINBOOL  GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer);
//C        WINBOOL GetServiceDisplayNameA(SC_HANDLE hSCManager,LPCSTR lpServiceName,LPSTR lpDisplayName,LPDWORD lpcchBuffer);
WINBOOL  GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer);
//C        WINBOOL GetServiceDisplayNameW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,LPWSTR lpDisplayName,LPDWORD lpcchBuffer);
WINBOOL  GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer);
//C        SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager);
SC_LOCK  LockServiceDatabase(SC_HANDLE hSCManager);
//C        WINBOOL NotifyBootConfigStatus(WINBOOL BootAcceptable);
WINBOOL  NotifyBootConfigStatus(WINBOOL BootAcceptable);
//C        SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName,LPCSTR lpDatabaseName,DWORD dwDesiredAccess);
SC_HANDLE  OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess);
//C        SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName,LPCWSTR lpDatabaseName,DWORD dwDesiredAccess);
SC_HANDLE  OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess);
//C        SC_HANDLE OpenServiceA(SC_HANDLE hSCManager,LPCSTR lpServiceName,DWORD dwDesiredAccess);
SC_HANDLE  OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess);
//C        SC_HANDLE OpenServiceW(SC_HANDLE hSCManager,LPCWSTR lpServiceName,DWORD dwDesiredAccess);
SC_HANDLE  OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess);
//C        WINBOOL QueryServiceConfigA(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGA lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceConfigW(SC_HANDLE hService,LPQUERY_SERVICE_CONFIGW lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceConfig2A(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceConfig2W(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceLockStatusA(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceLockStatusW(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        WINBOOL QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
WINBOOL  QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus);
//C        WINBOOL QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
WINBOOL  QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
//C        SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
SERVICE_STATUS_HANDLE  RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc);
//C        SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
SERVICE_STATUS_HANDLE  RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc);
//C        SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
SERVICE_STATUS_HANDLE  RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext);
//C        SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
SERVICE_STATUS_HANDLE  RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext);
//C        WINBOOL SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor);
WINBOOL  SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor);
//C        WINBOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus,LPSERVICE_STATUS lpServiceStatus);
WINBOOL  SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus);
//C        WINBOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable);
WINBOOL  StartServiceCtrlDispatcherA(SERVICE_TABLE_ENTRYA *lpServiceStartTable);
//C        WINBOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable);
WINBOOL  StartServiceCtrlDispatcherW(SERVICE_TABLE_ENTRYW *lpServiceStartTable);
//C        WINBOOL StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCSTR *lpServiceArgVectors);
WINBOOL  StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors);
//C        WINBOOL StartServiceW(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCWSTR *lpServiceArgVectors);
WINBOOL  StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors);
//C        WINBOOL UnlockServiceDatabase(SC_LOCK ScLock);
WINBOOL  UnlockServiceDatabase(SC_LOCK ScLock);
//C     typedef struct _MODEMDEVCAPS {
//C       DWORD dwActualSize;
//C       DWORD dwRequiredSize;
//C       DWORD dwDevSpecificOffset;
//C       DWORD dwDevSpecificSize;
//C       DWORD dwModemProviderVersion;
//C       DWORD dwModemManufacturerOffset;
//C       DWORD dwModemManufacturerSize;
//C       DWORD dwModemModelOffset;
//C       DWORD dwModemModelSize;
//C       DWORD dwModemVersionOffset;
//C       DWORD dwModemVersionSize;
//C       DWORD dwDialOptions;
//C       DWORD dwCallSetupFailTimer;
//C       DWORD dwInactivityTimeout;
//C       DWORD dwSpeakerVolume;
//C       DWORD dwSpeakerMode;
//C       DWORD dwModemOptions;
//C       DWORD dwMaxDTERate;
//C       DWORD dwMaxDCERate;
//C       BYTE abVariablePortion[1];
//C     } MODEMDEVCAPS,*PMODEMDEVCAPS,*LPMODEMDEVCAPS;
struct _MODEMDEVCAPS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;
    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;
    BYTE [1]abVariablePortion;
}
alias _MODEMDEVCAPS MODEMDEVCAPS;
alias _MODEMDEVCAPS *PMODEMDEVCAPS;
alias _MODEMDEVCAPS *LPMODEMDEVCAPS;
//C     typedef struct _MODEMSETTINGS {
//C       DWORD dwActualSize;
//C       DWORD dwRequiredSize;
//C       DWORD dwDevSpecificOffset;
//C       DWORD dwDevSpecificSize;
//C       DWORD dwCallSetupFailTimer;
//C       DWORD dwInactivityTimeout;
//C       DWORD dwSpeakerVolume;
//C       DWORD dwSpeakerMode;
//C       DWORD dwPreferredModemOptions;
//C       DWORD dwNegotiatedModemOptions;
//C       DWORD dwNegotiatedDCERate;
//C       BYTE abVariablePortion [1];
//C     } MODEMSETTINGS,*PMODEMSETTINGS,*LPMODEMSETTINGS;
struct _MODEMSETTINGS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;
    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;
    BYTE [1]abVariablePortion;
}
alias _MODEMSETTINGS MODEMSETTINGS;
alias _MODEMSETTINGS *PMODEMSETTINGS;
alias _MODEMSETTINGS *LPMODEMSETTINGS;
//C       struct HIMC__ { int unused; }; typedef struct HIMC__ *HIMC;
struct HIMC__
{
    int unused;
}
alias HIMC__ *HIMC;
//C       struct HIMCC__ { int unused; }; typedef struct HIMCC__ *HIMCC;
struct HIMCC__
{
    int unused;
}
alias HIMCC__ *HIMCC;
//C       typedef HKL *LPHKL;
alias HKL *LPHKL;
//C       typedef struct tagCOMPOSITIONFORM {
//C         DWORD dwStyle;
//C         POINT ptCurrentPos;
//C         RECT rcArea;
//C       } COMPOSITIONFORM,*PCOMPOSITIONFORM,*NPCOMPOSITIONFORM,*LPCOMPOSITIONFORM;
struct tagCOMPOSITIONFORM
{
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
}
alias tagCOMPOSITIONFORM COMPOSITIONFORM;
alias tagCOMPOSITIONFORM *PCOMPOSITIONFORM;
alias tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;
alias tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;
//C       typedef struct tagCANDIDATEFORM {
//C         DWORD dwIndex;
//C         DWORD dwStyle;
//C         POINT ptCurrentPos;
//C         RECT rcArea;
//C       } CANDIDATEFORM,*PCANDIDATEFORM,*NPCANDIDATEFORM,*LPCANDIDATEFORM;
struct tagCANDIDATEFORM
{
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
}
alias tagCANDIDATEFORM CANDIDATEFORM;
alias tagCANDIDATEFORM *PCANDIDATEFORM;
alias tagCANDIDATEFORM *NPCANDIDATEFORM;
alias tagCANDIDATEFORM *LPCANDIDATEFORM;
//C       typedef struct tagCANDIDATELIST {
//C         DWORD dwSize;
//C         DWORD dwStyle;
//C         DWORD dwCount;
//C         DWORD dwSelection;
//C         DWORD dwPageStart;
//C         DWORD dwPageSize;
//C         DWORD dwOffset[1];
//C       } CANDIDATELIST,*PCANDIDATELIST,*NPCANDIDATELIST,*LPCANDIDATELIST;
struct tagCANDIDATELIST
{
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD [1]dwOffset;
}
alias tagCANDIDATELIST CANDIDATELIST;
alias tagCANDIDATELIST *PCANDIDATELIST;
alias tagCANDIDATELIST *NPCANDIDATELIST;
alias tagCANDIDATELIST *LPCANDIDATELIST;
//C       typedef struct tagREGISTERWORDA {
//C         LPSTR lpReading;
//C         LPSTR lpWord;
//C       } REGISTERWORDA,*PREGISTERWORDA,*NPREGISTERWORDA,*LPREGISTERWORDA;
struct tagREGISTERWORDA
{
    LPSTR lpReading;
    LPSTR lpWord;
}
alias tagREGISTERWORDA REGISTERWORDA;
alias tagREGISTERWORDA *PREGISTERWORDA;
alias tagREGISTERWORDA *NPREGISTERWORDA;
alias tagREGISTERWORDA *LPREGISTERWORDA;
//C       typedef struct tagREGISTERWORDW {
//C         LPWSTR lpReading;
//C         LPWSTR lpWord;
//C       } REGISTERWORDW,*PREGISTERWORDW,*NPREGISTERWORDW,*LPREGISTERWORDW;
struct tagREGISTERWORDW
{
    LPWSTR lpReading;
    LPWSTR lpWord;
}
alias tagREGISTERWORDW REGISTERWORDW;
alias tagREGISTERWORDW *PREGISTERWORDW;
alias tagREGISTERWORDW *NPREGISTERWORDW;
alias tagREGISTERWORDW *LPREGISTERWORDW;
//C       typedef REGISTERWORDA REGISTERWORD;
alias REGISTERWORDA REGISTERWORD;
//C       typedef PREGISTERWORDA PREGISTERWORD;
alias PREGISTERWORDA PREGISTERWORD;
//C       typedef NPREGISTERWORDA NPREGISTERWORD;
alias NPREGISTERWORDA NPREGISTERWORD;
//C       typedef LPREGISTERWORDA LPREGISTERWORD;
alias LPREGISTERWORDA LPREGISTERWORD;
//C       typedef struct tagRECONVERTSTRING {
//C         DWORD dwSize;
//C         DWORD dwVersion;
//C         DWORD dwStrLen;
//C         DWORD dwStrOffset;
//C         DWORD dwCompStrLen;
//C         DWORD dwCompStrOffset;
//C         DWORD dwTargetStrLen;
//C         DWORD dwTargetStrOffset;
//C       } RECONVERTSTRING,*PRECONVERTSTRING,*NPRECONVERTSTRING,*LPRECONVERTSTRING;
struct tagRECONVERTSTRING
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
}
alias tagRECONVERTSTRING RECONVERTSTRING;
alias tagRECONVERTSTRING *PRECONVERTSTRING;
alias tagRECONVERTSTRING *NPRECONVERTSTRING;
alias tagRECONVERTSTRING *LPRECONVERTSTRING;
//C       typedef struct tagSTYLEBUFA {
//C         DWORD dwStyle;
//C         CHAR szDescription[32];
//C       } STYLEBUFA,*PSTYLEBUFA,*NPSTYLEBUFA,*LPSTYLEBUFA;
struct tagSTYLEBUFA
{
    DWORD dwStyle;
    CHAR [32]szDescription;
}
alias tagSTYLEBUFA STYLEBUFA;
alias tagSTYLEBUFA *PSTYLEBUFA;
alias tagSTYLEBUFA *NPSTYLEBUFA;
alias tagSTYLEBUFA *LPSTYLEBUFA;
//C       typedef struct tagSTYLEBUFW {
//C         DWORD dwStyle;
//C         WCHAR szDescription[32];
//C       } STYLEBUFW,*PSTYLEBUFW,*NPSTYLEBUFW,*LPSTYLEBUFW;
struct tagSTYLEBUFW
{
    DWORD dwStyle;
    WCHAR [32]szDescription;
}
alias tagSTYLEBUFW STYLEBUFW;
alias tagSTYLEBUFW *PSTYLEBUFW;
alias tagSTYLEBUFW *NPSTYLEBUFW;
alias tagSTYLEBUFW *LPSTYLEBUFW;
//C       typedef STYLEBUFA STYLEBUF;
alias STYLEBUFA STYLEBUF;
//C       typedef PSTYLEBUFA PSTYLEBUF;
alias PSTYLEBUFA PSTYLEBUF;
//C       typedef NPSTYLEBUFA NPSTYLEBUF;
alias NPSTYLEBUFA NPSTYLEBUF;
//C       typedef LPSTYLEBUFA LPSTYLEBUF;
alias LPSTYLEBUFA LPSTYLEBUF;
//C       typedef struct tagIMEMENUITEMINFOA {
//C         UINT cbSize;
//C         UINT fType;
//C         UINT fState;
//C         UINT wID;
//C         HBITMAP hbmpChecked;
//C         HBITMAP hbmpUnchecked;
//C         DWORD dwItemData;
//C         CHAR szString[80];
//C         HBITMAP hbmpItem;
//C       } IMEMENUITEMINFOA,*PIMEMENUITEMINFOA,*NPIMEMENUITEMINFOA,*LPIMEMENUITEMINFOA;
struct tagIMEMENUITEMINFOA
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR [80]szString;
    HBITMAP hbmpItem;
}
alias tagIMEMENUITEMINFOA IMEMENUITEMINFOA;
alias tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;
alias tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;
alias tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;
//C       typedef struct tagIMEMENUITEMINFOW {
//C         UINT cbSize;
//C         UINT fType;
//C         UINT fState;
//C         UINT wID;
//C         HBITMAP hbmpChecked;
//C         HBITMAP hbmpUnchecked;
//C         DWORD dwItemData;
//C         WCHAR szString[80];
//C         HBITMAP hbmpItem;
//C       } IMEMENUITEMINFOW,*PIMEMENUITEMINFOW,*NPIMEMENUITEMINFOW,*LPIMEMENUITEMINFOW;
struct tagIMEMENUITEMINFOW
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR [80]szString;
    HBITMAP hbmpItem;
}
alias tagIMEMENUITEMINFOW IMEMENUITEMINFOW;
alias tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;
alias tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;
alias tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;
//C       typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
alias IMEMENUITEMINFOA IMEMENUITEMINFO;
//C       typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
alias PIMEMENUITEMINFOA PIMEMENUITEMINFO;
//C       typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
alias NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
//C       typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
alias LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
//C       typedef struct tagIMECHARPOSITION {
//C         DWORD dwSize;
//C         DWORD dwCharPos;
//C         POINT pt;
//C         UINT cLineHeight;
//C         RECT rcDocument;
//C       } IMECHARPOSITION,*PIMECHARPOSITION,*NPIMECHARPOSITION,*LPIMECHARPOSITION;
struct tagIMECHARPOSITION
{
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
}
alias tagIMECHARPOSITION IMECHARPOSITION;
alias tagIMECHARPOSITION *PIMECHARPOSITION;
alias tagIMECHARPOSITION *NPIMECHARPOSITION;
alias tagIMECHARPOSITION *LPIMECHARPOSITION;
//C       typedef WINBOOL ( *IMCENUMPROC)(HIMC,LPARAM);
alias WINBOOL  function(HIMC , LPARAM )IMCENUMPROC;
//C       HKL ImmInstallIMEA(LPCSTR lpszIMEFileName,LPCSTR lpszLayoutText);
HKL  ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
//C       HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName,LPCWSTR lpszLayoutText);
HKL  ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);
//C       HWND ImmGetDefaultIMEWnd(HWND);
HWND  ImmGetDefaultIMEWnd(HWND );
//C       UINT ImmGetDescriptionA(HKL,LPSTR,UINT uBufLen);
UINT  ImmGetDescriptionA(HKL , LPSTR , UINT uBufLen);
//C       UINT ImmGetDescriptionW(HKL,LPWSTR,UINT uBufLen);
UINT  ImmGetDescriptionW(HKL , LPWSTR , UINT uBufLen);
//C       UINT ImmGetIMEFileNameA(HKL,LPSTR,UINT uBufLen);
UINT  ImmGetIMEFileNameA(HKL , LPSTR , UINT uBufLen);
//C       UINT ImmGetIMEFileNameW(HKL,LPWSTR,UINT uBufLen);
UINT  ImmGetIMEFileNameW(HKL , LPWSTR , UINT uBufLen);
//C       DWORD ImmGetProperty(HKL,DWORD);
DWORD  ImmGetProperty(HKL , DWORD );
//C       WINBOOL ImmIsIME();
WINBOOL  ImmIsIME(HKL );
//C       WINBOOL ImmSimulateHotKey(HWND,DWORD);
WINBOOL  ImmSimulateHotKey(HWND , DWORD );
//C       HIMC ImmCreateContext(void);
HIMC  ImmCreateContext();
//C       WINBOOL ImmDestroyContext(HIMC);
WINBOOL  ImmDestroyContext(HIMC );
//C       HIMC ImmGetContext(HWND);
HIMC  ImmGetContext(HWND );
//C       WINBOOL ImmReleaseContext(HWND,HIMC);
WINBOOL  ImmReleaseContext(HWND , HIMC );
//C       HIMC ImmAssociateContext(HWND,HIMC);
HIMC  ImmAssociateContext(HWND , HIMC );
//C       WINBOOL ImmAssociateContextEx(HWND,HIMC,DWORD);
WINBOOL  ImmAssociateContextEx(HWND , HIMC , DWORD );
//C       LONG ImmGetCompositionStringA(HIMC,DWORD,LPVOID,DWORD);
LONG  ImmGetCompositionStringA(HIMC , DWORD , LPVOID , DWORD );
//C       LONG ImmGetCompositionStringW(HIMC,DWORD,LPVOID,DWORD);
LONG  ImmGetCompositionStringW(HIMC , DWORD , LPVOID , DWORD );
//C       WINBOOL ImmSetCompositionStringA(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
WINBOOL  ImmSetCompositionStringA(HIMC , DWORD dwIndex, LPVOID lpComp, DWORD , LPVOID lpRead, DWORD );
//C       WINBOOL ImmSetCompositionStringW(HIMC,DWORD dwIndex,LPVOID lpComp,DWORD,LPVOID lpRead,DWORD);
WINBOOL  ImmSetCompositionStringW(HIMC , DWORD dwIndex, LPVOID lpComp, DWORD , LPVOID lpRead, DWORD );
//C       DWORD ImmGetCandidateListCountA(HIMC,LPDWORD lpdwListCount);
DWORD  ImmGetCandidateListCountA(HIMC , LPDWORD lpdwListCount);
//C       DWORD ImmGetCandidateListCountW(HIMC,LPDWORD lpdwListCount);
DWORD  ImmGetCandidateListCountW(HIMC , LPDWORD lpdwListCount);
//C       DWORD ImmGetCandidateListA(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
DWORD  ImmGetCandidateListA(HIMC , DWORD deIndex, LPCANDIDATELIST , DWORD dwBufLen);
//C       DWORD ImmGetCandidateListW(HIMC,DWORD deIndex,LPCANDIDATELIST,DWORD dwBufLen);
DWORD  ImmGetCandidateListW(HIMC , DWORD deIndex, LPCANDIDATELIST , DWORD dwBufLen);
//C       DWORD ImmGetGuideLineA(HIMC,DWORD dwIndex,LPSTR,DWORD dwBufLen);
DWORD  ImmGetGuideLineA(HIMC , DWORD dwIndex, LPSTR , DWORD dwBufLen);
//C       DWORD ImmGetGuideLineW(HIMC,DWORD dwIndex,LPWSTR,DWORD dwBufLen);
DWORD  ImmGetGuideLineW(HIMC , DWORD dwIndex, LPWSTR , DWORD dwBufLen);
//C       WINBOOL ImmGetConversionStatus(HIMC,LPDWORD,LPDWORD);
WINBOOL  ImmGetConversionStatus(HIMC , LPDWORD , LPDWORD );
//C       WINBOOL ImmSetConversionStatus(HIMC,DWORD,DWORD);
WINBOOL  ImmSetConversionStatus(HIMC , DWORD , DWORD );
//C       WINBOOL ImmGetOpenStatus(HIMC);
WINBOOL  ImmGetOpenStatus(HIMC );
//C       WINBOOL ImmSetOpenStatus(HIMC,WINBOOL);
WINBOOL  ImmSetOpenStatus(HIMC , WINBOOL );
//C       WINBOOL ImmGetCompositionFontA(HIMC,LPLOGFONTA);
WINBOOL  ImmGetCompositionFontA(HIMC , LPLOGFONTA );
//C       WINBOOL ImmGetCompositionFontW(HIMC,LPLOGFONTW);
WINBOOL  ImmGetCompositionFontW(HIMC , LPLOGFONTW );
//C       WINBOOL ImmSetCompositionFontA(HIMC,LPLOGFONTA);
WINBOOL  ImmSetCompositionFontA(HIMC , LPLOGFONTA );
//C       WINBOOL ImmSetCompositionFontW(HIMC,LPLOGFONTW);
WINBOOL  ImmSetCompositionFontW(HIMC , LPLOGFONTW );
//C       typedef int ( *REGISTERWORDENUMPROCA)(LPCSTR,DWORD,LPCSTR,LPVOID);
alias int  function(LPCSTR , DWORD , LPCSTR , LPVOID )REGISTERWORDENUMPROCA;
//C       typedef int ( *REGISTERWORDENUMPROCW)(LPCWSTR,DWORD,LPCWSTR,LPVOID);
alias int  function(LPCWSTR , DWORD , LPCWSTR , LPVOID )REGISTERWORDENUMPROCW;
//C       WINBOOL ImmConfigureIMEA(HKL,HWND,DWORD,LPVOID);
WINBOOL  ImmConfigureIMEA(HKL , HWND , DWORD , LPVOID );
//C       WINBOOL ImmConfigureIMEW(HKL,HWND,DWORD,LPVOID);
WINBOOL  ImmConfigureIMEW(HKL , HWND , DWORD , LPVOID );
//C       LRESULT ImmEscapeA(HKL,HIMC,UINT,LPVOID);
LRESULT  ImmEscapeA(HKL , HIMC , UINT , LPVOID );
//C       LRESULT ImmEscapeW(HKL,HIMC,UINT,LPVOID);
LRESULT  ImmEscapeW(HKL , HIMC , UINT , LPVOID );
//C       DWORD ImmGetConversionListA(HKL,HIMC,LPCSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
DWORD  ImmGetConversionListA(HKL , HIMC , LPCSTR , LPCANDIDATELIST , DWORD dwBufLen, UINT uFlag);
//C       DWORD ImmGetConversionListW(HKL,HIMC,LPCWSTR,LPCANDIDATELIST,DWORD dwBufLen,UINT uFlag);
DWORD  ImmGetConversionListW(HKL , HIMC , LPCWSTR , LPCANDIDATELIST , DWORD dwBufLen, UINT uFlag);
//C       WINBOOL ImmNotifyIME(HIMC,DWORD dwAction,DWORD dwIndex,DWORD dwValue);
WINBOOL  ImmNotifyIME(HIMC , DWORD dwAction, DWORD dwIndex, DWORD dwValue);
//C       WINBOOL ImmGetStatusWindowPos(HIMC,LPPOINT);
WINBOOL  ImmGetStatusWindowPos(HIMC , LPPOINT );
//C       WINBOOL ImmSetStatusWindowPos(HIMC,LPPOINT);
WINBOOL  ImmSetStatusWindowPos(HIMC , LPPOINT );
//C       WINBOOL ImmGetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
WINBOOL  ImmGetCompositionWindow(HIMC , LPCOMPOSITIONFORM );
//C       WINBOOL ImmSetCompositionWindow(HIMC,LPCOMPOSITIONFORM);
WINBOOL  ImmSetCompositionWindow(HIMC , LPCOMPOSITIONFORM );
//C       WINBOOL ImmGetCandidateWindow(HIMC,DWORD,LPCANDIDATEFORM);
WINBOOL  ImmGetCandidateWindow(HIMC , DWORD , LPCANDIDATEFORM );
//C       WINBOOL ImmSetCandidateWindow(HIMC,LPCANDIDATEFORM);
WINBOOL  ImmSetCandidateWindow(HIMC , LPCANDIDATEFORM );
//C       WINBOOL ImmIsUIMessageA(HWND,UINT,WPARAM,LPARAM);
WINBOOL  ImmIsUIMessageA(HWND , UINT , WPARAM , LPARAM );
//C       WINBOOL ImmIsUIMessageW(HWND,UINT,WPARAM,LPARAM);
WINBOOL  ImmIsUIMessageW(HWND , UINT , WPARAM , LPARAM );
//C       UINT ImmGetVirtualKey(HWND);
UINT  ImmGetVirtualKey(HWND );
//C       WINBOOL ImmRegisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister);
WINBOOL  ImmRegisterWordA(HKL , LPCSTR lpszReading, DWORD , LPCSTR lpszRegister);
//C       WINBOOL ImmRegisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister);
WINBOOL  ImmRegisterWordW(HKL , LPCWSTR lpszReading, DWORD , LPCWSTR lpszRegister);
//C       WINBOOL ImmUnregisterWordA(HKL,LPCSTR lpszReading,DWORD,LPCSTR lpszUnregister);
WINBOOL  ImmUnregisterWordA(HKL , LPCSTR lpszReading, DWORD , LPCSTR lpszUnregister);
//C       WINBOOL ImmUnregisterWordW(HKL,LPCWSTR lpszReading,DWORD,LPCWSTR lpszUnregister);
WINBOOL  ImmUnregisterWordW(HKL , LPCWSTR lpszReading, DWORD , LPCWSTR lpszUnregister);
//C       UINT ImmGetRegisterWordStyleA(HKL,UINT nItem,LPSTYLEBUFA);
UINT  ImmGetRegisterWordStyleA(HKL , UINT nItem, LPSTYLEBUFA );
//C       UINT ImmGetRegisterWordStyleW(HKL,UINT nItem,LPSTYLEBUFW);
UINT  ImmGetRegisterWordStyleW(HKL , UINT nItem, LPSTYLEBUFW );
//C       UINT ImmEnumRegisterWordA(HKL,REGISTERWORDENUMPROCA,LPCSTR lpszReading,DWORD,LPCSTR lpszRegister,LPVOID);
UINT  ImmEnumRegisterWordA(HKL , REGISTERWORDENUMPROCA , LPCSTR lpszReading, DWORD , LPCSTR lpszRegister, LPVOID );
//C       UINT ImmEnumRegisterWordW(HKL,REGISTERWORDENUMPROCW,LPCWSTR lpszReading,DWORD,LPCWSTR lpszRegister,LPVOID);
UINT  ImmEnumRegisterWordW(HKL , REGISTERWORDENUMPROCW , LPCWSTR lpszReading, DWORD , LPCWSTR lpszRegister, LPVOID );
//C       WINBOOL ImmDisableIME(DWORD);
WINBOOL  ImmDisableIME(DWORD );
//C       WINBOOL ImmEnumInputContext(DWORD idThread,IMCENUMPROC lpfn,LPARAM lParam);
WINBOOL  ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
//C       DWORD ImmGetImeMenuItemsA(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOA,LPIMEMENUITEMINFOA,DWORD);
DWORD  ImmGetImeMenuItemsA(HIMC , DWORD , DWORD , LPIMEMENUITEMINFOA , LPIMEMENUITEMINFOA , DWORD );
//C       DWORD ImmGetImeMenuItemsW(HIMC,DWORD,DWORD,LPIMEMENUITEMINFOW,LPIMEMENUITEMINFOW,DWORD);
DWORD  ImmGetImeMenuItemsW(HIMC , DWORD , DWORD , LPIMEMENUITEMINFOW , LPIMEMENUITEMINFOW , DWORD );
//C       WINBOOL ImmDisableTextFrameService(DWORD idThread);
WINBOOL  ImmDisableTextFrameService(DWORD idThread);
alias IDispatch *LPDISPATCH;
alias ITypeComp *LPTYPECOMP;
alias ITypeInfo *LPTYPEINFO;
alias ITypeLib *LPTYPELIB;
struct threadmbcinfostruct;
struct EXCEPTION_DISPOSITION;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _TEB;
struct _NDR_ASYNC_MESSAGE;
struct _NDR_CORRELATION_INFO;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;
struct _PSP;
const ARW_RIGHT =0x0000;
const CACHE_S_FIRST =0x00040170;
const WINSTA_ENUMERATE =0x0100;
const ERROR_DS_NAME_ERROR_NO_MAPPING =8472;
const TPM_TOPALIGN =0x0000;
const ERROR_OPERATION_ABORTED =995;
const SS_ETCHEDHORZ =0x00000010;
const ERROR_DS_CANT_DELETE_DSA_OBJ =8340;
const VOS_DOS =0x00010000;
const DCX_NORESETATTRS =0x00000004;
const JOY_USEDEADZONE =0x00000800;
const ERROR_UNKNOWN_REVISION =1305;
const DNS_ERROR_DP_ALREADY_ENLISTED =9904;
const DESKTOP_WRITEOBJECTS =0x0080;
const VFT_DRV =0x00000003;
const ERROR_CLUSTER_NODE_ALREADY_DOWN =5062;
const ERROR_CTX_LICENSE_EXPIRED =7056;
const WS_EX_APPWINDOW =0x00040000;
const FS_CHINESESIMP =0x00040000;
const MF_INSERT =0x00000000;
const STGM_SHARE_EXCLUSIVE =0x00000010;
const ERROR_NO_NETWORK =1222;
const VS_FF_PATCHED =0x00000004;
const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR =13804;
const ERROR_FILEMARK_DETECTED =1101;
const GMDI_USEDISABLED =0x0001;
const ERROR_FILE_ENCRYPTED =6002;
const RPC_S_UNKNOWN_AUTHZ_SERVICE =1750;
const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION =8236;
const ERROR_PKINIT_FAILURE =1263;
const MCI_VD_STATUS_SIDE =0x00004005;
const ERROR_DS_DUP_SCHEMA_ID_GUID =8381;
const ERROR_DS_ROOT_CANT_BE_SUBREF =8326;
const DM_POSITION =0x00000020;
const MF_BYCOMMAND =0x00000000;
const ERROR_INVALID_FIELD =1616;
const ERROR_INVALID_SCROLLBAR_RANGE =1448;
const DM_ICMINTENT =0x01000000;
const MFT_RADIOCHECK =0x00000200;
const ERROR_DS_CANT_ON_RDN =8214;
const NDR_VAX_FLOAT =0X00000100U;
const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX =8416;
const ERROR_SXS_XML_E_UNCLOSEDTAG =14052;
const ERROR_DS_CANT_MOD_SYSTEM_ONLY =8369;
const ERROR_CANNOT_COPY =266;
const ERROR_INVALID_LIST_FORMAT =153;
const ES_PASSWORD =0x0020;
const ERROR_NO_SCROLLBARS =1447;
const ERROR_PASSWORD_MUST_CHANGE =1907;
const VIF_CANNOTDELETECUR =0x00004000;
const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED =5076;
const MCI_WAIT =0x00000002;
const VIF_FILEINUSE =0x00000080;
const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING =8474;
const ERROR_INVALID_SERVICE_LOCK =1071;
const ERROR_IPSEC_IKE_QM_DELAY_DROP =13815;
const ERROR_DS_MISSING_SUPREF =8406;
const APPCLASS_MASK =0x0000000F;
const ERROR_INVALID_PRINTER_COMMAND =1803;
const MCI_INFO_MEDIA_UPC =0x00000400;
const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS =5075;
const ERROR_CLUSTER_GUM_NOT_LOCKER =5085;
const ERROR_MUTUAL_AUTH_FAILED =1397;
const ERROR_OPLOCK_NOT_GRANTED =300;
const DNS_ERROR_ZONE_ALREADY_EXISTS =9609;
const RPC_X_NO_MORE_ENTRIES =1772;
const ERROR_DOMAIN_EXISTS =1356;
const ERROR_CTX_LICENSE_CLIENT_INVALID =7055;
const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND =13013;
const MCI_SET_AUDIO_ALL =0x00000000;
const RPC_S_PROCNUM_OUT_OF_RANGE =1745;
const ERROR_DS_INSUFF_ACCESS_RIGHTS =8344;
const MIXER_GETLINEINFOF_TARGETTYPE =0x00000004;
const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER =8584;
const TAPE_ABSOLUTE_POSITION =0;
const ERROR_SHARING_PAUSED =70;
const ERROR_CANNOT_DETECT_DRIVER_FAILURE =1080;
const ERROR_DS_CANT_CACHE_CLASS =8402;
const ERROR_NETWORK_ACCESS_DENIED =65;
const ERROR_DS_ENCODING_ERROR =8252;
const MF_UNHILITE =0x00000000;
const ERROR_GROUP_NOT_ONLINE =5014;
const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED =1934;
const ERROR_SERVICE_DEPENDENCY_DELETED =1075;
const RPC_S_PROTOCOL_ERROR =1728;
const VIF_CANNOTREADDST =0x00020000;
const TAPE_LOGICAL_BLOCK =2;
const CBS_HASSTRINGS =0x0200;
const ERROR_DS_DRA_SOURCE_REINSTALLED =8459;
const RPC_S_NOT_RPC_ERROR =1823;
const ERROR_DS_NOT_CLOSEST =8588;
const CONVERT10_E_FIRST =0x800401C0;
const ERROR_RETRY =1237;
const ERROR_CLUSTER_NETWORK_NOT_FOUND =5045;
const DM_PANNINGHEIGHT =0x10000000;
const BI_RGB =0;
const ERROR_INVALID_DOMAIN_ROLE =1354;
const ERROR_DS_DRA_NAME_COLLISION =8458;
const DS_LOCALEDIT =0x20;
const ERROR_CTX_MODEM_RESPONSE_TIMEOUT =7012;
const ERROR_DS_MISSING_FSMO_SETTINGS =8434;
const ERROR_DS_SECURITY_ILLEGAL_MODIFY =8423;
const ERROR_DS_NAMING_VIOLATION =8247;
const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME =14022;
const ERROR_CLUSTER_SHUTTING_DOWN =5022;
const ERROR_SEM_NOT_FOUND =187;
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 =8586;
const MCI_OVLY_WHERE_DESTINATION =0x00040000;
const ERROR_WRONG_PASSWORD =1323;
const RPC_S_INVALID_TAG =1733;
const MIXER_GETLINECONTROLSF_QUERYMASK =0x0000000F;
const ERROR_DS_SOURCE_DOMAIN_IN_FOREST =8534;
const ERROR_REDIRECTOR_HAS_OPEN_HANDLES =1794;
const DS_CENTER =0x0800;
const ERROR_INVALID_INDEX =1413;
const ERROR_SXS_XML_E_INVALID_UNICODE =14049;
const STGM_SHARE_DENY_READ =0x00000030;
const ERROR_NOT_QUORUM_CAPABLE =5021;
const ERROR_JOIN_TO_JOIN =138;
const ERROR_DEBUGGER_INACTIVE =1284;
const ERROR_NO_SUCH_DOMAIN =1355;
const ERROR_DS_CANT_RETRIEVE_CHILD =8422;
const RPC_S_UNKNOWN_AUTHN_SERVICE =1747;
const MCI_RECORD_INSERT =0x00000100;
const DNS_ERROR_NODE_CREATION_FAILED =9703;
const ERROR_CLIPBOARD_NOT_OPEN =1418;
const ERROR_DS_ALIAS_DEREF_PROBLEM =8244;
const ERROR_DS_EXISTS_IN_SUB_CLS =8394;
const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT =5903;
const MCI_ANIM_WINDOW_ENABLE_STRETCH =0x00100000;
const ERROR_INCORRECT_ADDRESS =1241;
const FRS_ERR_SYSVOL_DEMOTE =8016;
const MCI_VD_GETDEVCAPS_CAV =0x00020000;
const ERROR_CHILD_WINDOW_MENU =1436;
const SBS_SIZEGRIP =0x0010;
const WS_SYSMENU =0x00080000;
const VFT2_DRV_COMM =0x0000000A;
const DM_PAPERLENGTH =0x00000004;
const VFT2_DRV_DISPLAY =0x00000004;
const ERROR_DS_ILLEGAL_SUPERIOR =8345;
const RPC_S_GROUP_MEMBER_NOT_FOUND =1898;
const VIF_MISMATCH =0x00000002;
const ERROR_DS_DRA_MAIL_PROBLEM =8447;
const MCI_VD_GETDEVCAPS_CLV =0x00010000;
const BS_DEFPUSHBUTTON =0x00000001;
const ERROR_DS_INAPPROPRIATE_MATCHING =8238;
const ERROR_FILE_OFFLINE =4350;
const ERROR_CURRENT_DIRECTORY =16;
const ERROR_TAG_NOT_PRESENT =2013;
const ERROR_NO_MORE_SEARCH_HANDLES =113;
const ERROR_IPSEC_IKE_INVALID_SIG =13875;
const TPM_RECURSE =0x0001;
const MCI_ANIM_GETDEVCAPS_NORMAL_RATE =0x00004004;
const ERROR_BAD_INHERITANCE_ACL =1340;
const DNS_ERROR_RCODE_BADSIG =9016;
const MB_APPLMODAL =0x00000000;
const RPC_CONTEXT_HANDLE_DONT_SERIALIZE =0x20000000U;
const ERROR_TOKEN_ALREADY_IN_USE =1375;
const SS_CENTER =0x00000001;
const ERROR_NO_TRACKING_SERVICE =1172;
const STGM_NOSNAPSHOT =0x00200000;
const ERROR_PATCH_PACKAGE_REJECTED =1643;
const ERROR_DS_BAD_NAME_SYNTAX =8335;
const CACHE_S_LAST =0x0004017F;
const ERROR_INSUFFICIENT_BUFFER =122;
const ERROR_TOO_MANY_MODULES =214;
const RPC_CONTEXT_HANDLE_SERIALIZE =0x10000000U;
const DRAGDROP_S_FIRST =0x00040100;
const RPCFLG_NON_NDR =0x80000000U;
const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES =8556;
const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT =9710;
const MF_BITMAP =0x00000004;
const ERROR_WORKING_SET_QUOTA =1453;
const ERROR_PATCH_PACKAGE_INVALID =1636;
const ERROR_BADKEY =1010;
const MCI_VD_GETDEVCAPS_NORMAL_RATE =0x00004005;
const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER =8615;
const ERROR_INVALID_PRINTER_STATE =1906;
const ERROR_NODE_CANNOT_BE_CLUSTERED =5898;
const ERROR_IPSEC_IKE_INVALID_PAYLOAD =13843;
const RPC_S_NO_PRINC_NAME =1822;
const ES_WANTRETURN =0x1000;
const OR_INVALID_SET =1912;
const ERROR_BAD_RECOVERY_POLICY =6012;
const ERROR_CTX_MODEM_INF_NOT_FOUND =7009;
const ERROR_INVALID_MEMBER =1388;
const MIXERLINE_COMPONENTTYPE_SRC_FIRST =0x00001000;
const ERROR_DS_DUP_MSDS_INTID =8597;
const ERROR_DOMAIN_TRUST_INCONSISTENT =1810;
const ERROR_IPSEC_IKE_UNKNOWN_DOI =13862;
const STGM_TRANSACTED =0x00010000;
const MF_GRAYED =0x00000001;
const ERROR_OUT_OF_STRUCTURES =84;
const FS_THAI =0x00010000;
const CONTEXT_S_LAST =0x0004E02F;
const CS_ENABLE =0x00000001;
const ERROR_IPSEC_IKE_TIMED_OUT =13805;
const ERROR_CAN_NOT_DEL_LOCAL_WINS =4001;
const ERROR_DATABASE_FAILURE =4313;
const VIF_CANNOTREADSRC =0x00010000;
const JOY_BUTTON5 =0x00000010;
const JOY_BUTTON6 =0x00000020;
const JOY_BUTTON8 =0x00000080;
const JOY_BUTTON9 =0x00000100;
const JOY_CAL_READXONLY =0x00100000;
const RPC_X_INVALID_ES_ACTION =1827;
const MIXERCONTROL_CONTROLF_DISABLED =0x80000000;
const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD =8507;
const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED =13883;
const TAPE_FORMAT =5;
const ERROR_BAD_DESCRIPTOR_FORMAT =1361;
const RPC_S_INVALID_BOUND =1734;
const ERROR_CSCSHARE_OFFLINE =1262;
const ERROR_CANTWRITE =1013;
const ERROR_INVALID_ENVIRONMENT =1805;
const ERROR_DS_CONTROL_NOT_FOUND =8258;
const NDR_INT_REP_MASK =0X000000F0U;
const ERROR_INVALID_FLAG_NUMBER =186;
const ERROR_USER_MAPPED_FILE =1224;
const ERROR_BAD_PIPE =230;
const ERROR_POSSIBLE_DEADLOCK =1131;
const MCI_OVLY_WHERE_SOURCE =0x00020000;
const RPC_S_NOT_LISTENING =1715;
const ERROR_SERVICE_NOT_ACTIVE =1062;
const ERROR_UNABLE_TO_MOVE_REPLACEMENT =1176;
const ERROR_HOST_NODE_NOT_RESOURCE_OWNER =5015;
const FRS_ERR_INVALID_SERVICE_PARAMETER =8017;
const CBS_DROPDOWN =0x0002;
const CALLBACK_EVENT =0x00050000;
const RPC_X_BAD_STUB_DATA =1783;
const ERROR_IPSEC_IKE_ERROR =13816;
const WS_CLIPSIBLINGS =0x04000000;
const ERROR_NO_SECURITY_ON_OBJECT =1350;
const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME =5905;
const ERROR_DS_ADD_REPLICA_INHIBITED =8302;
const ERROR_RECOVERY_FAILURE =1279;
const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED =1932;
const CBS_UPPERCASE =0x2000;
const ERROR_NOT_AUTHENTICATED =1244;
const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP =9612;
const WS_MAXIMIZE =0x01000000;
const ERROR_INVALID_SEPARATOR_FILE =1799;
const SBS_SIZEBOXTOPLEFTALIGN =0x0002;
const ERROR_CANNOT_OPEN_PROFILE =1205;
const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY =218;
const ERROR_DS_AUTHORIZATION_FAILED =8599;
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME =14080;
const ERROR_DS_GC_REQUIRED =8547;
const RPC_S_NOT_ALL_OBJS_UNEXPORTED =1758;
const ERROR_UNRECOGNIZED_VOLUME =1005;
const ERROR_NOTIFY_ENUM_DIR =1022;
const ERROR_SXS_XML_E_MISSINGQUOTE =14030;
const ERROR_DS_CANT_REPLACE_HIDDEN_REC =8424;
const ERROR_DS_CLASS_NOT_DSA =8343;
const ERROR_PIPE_LISTENING =536;
const ARW_BOTTOMLEFT =0x0000;
const DNS_ERROR_FILE_WRITEBACK_FAILED =9654;
const MF_DELETE =0x00000200;
const ERROR_CORE_RESOURCE =5026;
const ERROR_ALIAS_EXISTS =1379;
const TAPE_QUERY_IO_ERROR_DATA =3;
const DNS_ERROR_DP_NOT_ENLISTED =9903;
const TAPE_SELECT_PARTITIONS =1;
const ERROR_INVALID_SIGNAL_NUMBER =209;
const ERROR_SERVICE_DEPENDENCY_FAIL =1068;
const WS_EX_LEFTSCROLLBAR =0x00004000;
const ERROR_REG_NAT_CONSUMPTION =1261;
const ERROR_FLOPPY_UNKNOWN_ERROR =1124;
const ERROR_INSTALL_SUSPEND =1604;
const TPM_LAYOUTRTL =0x8000;
const ERROR_HOOK_NOT_INSTALLED =1431;
const ERROR_CTX_MODEM_RESPONSE_VOICE =7016;
const ERROR_DS_MISSING_REQUIRED_ATT =8316;
const WS_EX_RIGHTSCROLLBAR =0x00000000;
const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST =5082;
const ARW_STARTTOP =0x0002;
const ERROR_DS_SEC_DESC_TOO_SHORT =8353;
const ERROR_DS_INVALID_LDAP_DISPLAY_NAME =8479;
const ERROR_ADAP_HDW_ERR =57;
const RPC_X_SS_CONTEXT_DAMAGED =1777;
const RPCFLG_LOCAL_CALL =0x10000000U;
const ERROR_DS_EXISTS_IN_MAY_HAVE =8386;
const ERROR_DATABASE_BACKUP_CORRUPT =5087;
const ERROR_DS_BAD_INSTANCE_TYPE =8313;
const ERROR_INVALID_HOOK_HANDLE =1404;
const ERROR_CALL_NOT_IMPLEMENTED =120;
const RPC_S_NO_MORE_BINDINGS =1806;
const ERROR_DISK_RESET_FAILED =1128;
const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP =13809;
const ERROR_FILENAME_EXCED_RANGE =206;
const ERROR_DS_INVALID_SEARCH_FLAG =8500;
const ERROR_INVALID_EVENTNAME =1211;
const MCI_SET_AUDIO_RIGHT =0x00000002;
const CWF_CREATE_ONLY =0x0001;
const ERROR_DS_NONEXISTENT_POSS_SUP =8390;
const TAPE_LONG_FILEMARKS =3;
const VOS__WINDOWS32 =0x00000004;
const ERROR_SERVICE_EXISTS =1073;
const RPC_S_INVALID_ENDPOINT_FORMAT =1706;
const DNS_ERROR_RCODE_YXDOMAIN =9006;
const ERROR_CTX_TD_ERROR =7017;
const RPC_X_ENUM_VALUE_OUT_OF_RANGE =1781;
const MCI_STATUS_CURRENT_TRACK =0x00000008;
const MCI_GETDEVCAPS_CAN_RECORD =0x00000001;
const BS_CENTER =0x00000300;
const ENUM_E_FIRST =0x800401B0;
const ERROR_CANT_ACCESS_DOMAIN_INFO =1351;
const ERROR_DS_SUBREF_MUST_HAVE_PARENT =8356;
const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY =13840;
const MB_ICONEXCLAMATION =0x00000030;
const ERROR_META_EXPANSION_TOO_LONG =208;
const ERROR_RESOURCE_PROPERTIES_STORED =5024;
const SS_LEFTNOWORDWRAP =0x0000000C;
const MCI_OVLY_GETDEVCAPS_CAN_STRETCH =0x00004001;
const RPC_S_NOTHING_TO_EXPORT =1754;
const ERROR_SXS_DUPLICATE_IID =14024;
const ERROR_HOOK_TYPE_NOT_ALLOWED =1458;
const ERROR_PROFILE_NOT_FOUND =2016;
const ERROR_CLUSTER_NETINTERFACE_EXISTS =5046;
const RPC_S_CANNOT_SUPPORT =1764;
const TAPE_SPACE_FILEMARKS =6;
const MCI_BREAK_KEY =0x00000100;
const WS_GROUP =0x00020000;
const ERROR_PRINTER_DRIVER_IN_USE =3001;
const ERROR_DS_SCHEMA_NOT_LOADED =8414;
const ERROR_REQ_NOT_ACCEP =71;
const ERROR_DS_NON_BASE_SEARCH =8480;
const ERROR_DS_WRONG_LINKED_ATT_SYNTAX =8528;
const ERROR_FLOPPY_BAD_REGISTERS =1125;
const FRS_ERR_SYSVOL_POPULATE_TIMEOUT =8014;
const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD =9605;
const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH =5895;
const DNS_ERROR_RCODE_BADTIME =9018;
const ERROR_IPSEC_IKE_INVALID_FILTER =13858;
const ERROR_DS_SCHEMA_UPDATE_DISALLOWED =8509;
const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE =7014;
const ERROR_CTX_WINSTATION_BUSY =7024;
const ERROR_WAIT_NO_CHILDREN =128;
const MCI_SYSINFO_INSTALLNAME =0x00000800;
const ERROR_INVALID_OPERATION =4317;
const MF_SYSMENU =0x00002000;
const JOY_RETURNPOVCTS =0x00000200;
const ES_UPPERCASE =0x0008;
const ERROR_RELOC_CHAIN_XEEDS_SEGLIM =201;
const DM_PELSHEIGHT =0x00100000;
const ERROR_NESTING_NOT_ALLOWED =215;
const ERROR_SXS_XML_E_UNCLOSEDENDTAG =14061;
const ERROR_DS_DRA_DB_ERROR =8451;
const TAPE_SETMARKS =0;
const ERROR_INVALID_MEDIA_POOL =4302;
const ERROR_INVALID_NAME =123;
const ERROR_DEVICE_NOT_AVAILABLE =4319;
const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER =8497;
const ERROR_TRANSFORM_NOT_SUPPORTED =2004;
const ERROR_LOCK_FAILED =167;
const ERROR_INVALID_PRINTER_NAME =1801;
const ERROR_DS_DUP_RDN =8378;
const ERROR_REMOTE_STORAGE_MEDIA_ERROR =4352;
const ERROR_INVALID_STARTING_CODESEG =188;
const SND_FILENAME =0x00020000;
const MARSHAL_S_FIRST =0x00040120;
const ERROR_DS_NOT_ON_BACKLINK =8362;
const ERROR_REDIR_PAUSED =72;
const ERROR_WINDOW_NOT_DIALOG =1420;
const ERROR_ALLOTTED_SPACE_EXCEEDED =1344;
const LBS_SORT =0x0002;
const RPC_S_CANT_CREATE_ENDPOINT =1720;
const FS_VIETNAMESE =0x00000100;
const LBS_USETABSTOPS =0x0080;
const ERROR_OVERRIDE_NOCHANGES =1252;
const MIXERCONTROL_CT_UNITS_DECIBELS =0x00040000;
const ERROR_IPSEC_IKE_PROCESS_ERR =13829;
const DNS_ERROR_RCODE_NOTZONE =9010;
const ERROR_PIPE_NOT_CONNECTED =233;
const EMBDHLP_INPROC_HANDLER =0x0000;
const ERROR_NO_TRUST_LSA_SECRET =1786;
const TAPE_ABSOLUTE_BLOCK =1;
const WINSTA_READSCREEN =0x0200;
const ES_AUTOHSCROLL =0x0080;
const RPC_S_TYPE_ALREADY_REGISTERED =1712;
const NDR_LOCAL_DATA_REPRESENTATION =0X00000010U;
const ERROR_TIMEOUT =1460;
const ERROR_DS_CANT_ON_NON_LEAF =8213;
const DNS_ERROR_NAME_DOES_NOT_EXIST =9714;
const ERROR_CLUSTER_OLD_VERSION =5904;
const ERROR_SERVICE_DATABASE_LOCKED =1055;
const ERROR_IPSEC_IKE_QUEUE_DROP_MM =13811;
const MB_SETFOREGROUND =0x00010000;
const ERROR_GROUP_NOT_FOUND =5013;
const ERROR_UNKNOWN_PRINTER_DRIVER =1797;
const RPC_S_INVALID_OBJECT =1900;
const MCI_ANIM_RECT =0x00010000;
const MIXER_GETCONTROLDETAILSF_QUERYMASK =0x0000000F;
const VOS_NT =0x00040000;
const ERROR_DS_INSTALL_SCHEMA_MISMATCH =8467;
const ERROR_CLUSTER_WRONG_OS_VERSION =5899;
const ERROR_INSTALL_TEMP_UNWRITABLE =1632;
const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA =8306;
const ERROR_CLUSCFG_ALREADY_COMMITTED =5901;
const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT =2109;
const ERROR_CONNECTION_REFUSED =1225;
const ERROR_FILE_NOT_FOUND =2;
const ERROR_IPSEC_IKE_SA_DELETED =13807;
const DNS_ERROR_NO_TCPIP =9851;
const MCI_WAVE_SET_BITSPERSAMPLE =0x00200000;
const ERROR_RXACT_INVALID_STATE =1369;
const DS_SETFOREGROUND =0x200;
const VFT2_DRV_INPUTMETHOD =0x0000000B;
const MCI_SEQ_STATUS_PORT =0x00004003;
const CF_ANSIONLY =0x400;
const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS =8549;
const ERROR_NO_IMPERSONATION_TOKEN =1309;
const LBS_OWNERDRAWFIXED =0x0010;
const MCI_OVLY_PUT_VIDEO =0x00100000;
const ERROR_CANNOT_FIND_WND_CLASS =1407;
const ERROR_IO_INCOMPLETE =996;
const BS_PUSHBOX =0x0000000A;
const FS_LATIN1 =0x00000001;
const FS_LATIN2 =0x00000002;
const CACHE_E_LAST =0x8004017F;
const ERROR_INVALID_SPI_VALUE =1439;
const SS_USERITEM =0x0000000A;
const WS_MINIMIZEBOX =0x00020000;
const ERROR_CLUSTER_JOIN_ABORTED =5074;
const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR =8591;
const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND =13017;
const NDR_FLOAT_REP_MASK =0X0000FF00U;
const ERROR_DS_DATABASE_ERROR =8409;
const ERROR_NO_SUCH_ALIAS =1376;
const ERROR_DS_NOT_SUPPORTED_SORT_ORDER =8570;
const ERROR_DOMAIN_LIMIT_EXCEEDED =1357;
const ERROR_CLUSTER_NODE_ALREADY_UP =5061;
const MIXER_GETLINECONTROLSF_ONEBYTYPE =0x00000002;
const FS_GREEK =0x00000008;
const ERROR_CALLBACK_SUPPLIED_INVALID_DATA =1273;
const CF_LIMITSIZE =0x2000;
const ERROR_LM_CROSS_ENCRYPTION_REQUIRED =1390;
const CLASSFACTORY_S_FIRST =0x00040110;
const ERROR_MORE_DATA =234;
const ERROR_CLUSTER_PARAMETER_MISMATCH =5897;
const ES_OEMCONVERT =0x0400;
const ERROR_BADDB =1009;
const ERROR_NOT_A_REPARSE_POINT =4390;
const ERROR_IRQ_BUSY =1119;
const ERROR_NODE_NOT_AVAILABLE =5036;
const DNS_ERROR_DS_UNAVAILABLE =9717;
const SS_RIGHTJUST =0x00000400;
const ERROR_EAS_DIDNT_FIT =275;
const MIXER_GETLINEINFOF_COMPONENTTYPE =0x00000003;
const DNS_ERROR_RCODE_NXRRSET =9008;
const VIEW_S_FIRST =0x00040140;
const ERROR_NO_USER_SESSION_KEY =1394;
const ERROR_INSTALL_LANGUAGE_UNSUPPORTED =1623;
const DM_PAPERWIDTH =0x00000008;
const ERROR_DS_DRA_NO_REPLICA =8452;
const VIF_SHARINGVIOLATION =0x00000400;
const DM_DISPLAYORIENTATION =0x00000080;
const ERROR_INVALID_SERVICE_ACCOUNT =1057;
const TPM_VCENTERALIGN =0x0010;
const ERROR_WRITE_FAULT =29;
const ERROR_DS_NO_ATTRIBUTE_OR_VALUE =8202;
const ERROR_DLL_NOT_FOUND =1157;
const ERROR_DS_INCORRECT_ROLE_OWNER =8210;
const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED =3005;
const MCI_INFO_MEDIA_IDENTITY =0x00000800;
const ERROR_IPSEC_IKE_PROCESS_ERR_SIG =13838;
const ERROR_CTX_CLIENT_LICENSE_IN_USE =7052;
const ERROR_INVALID_FORM_NAME =1902;
const ERROR_IPSEC_MM_FILTER_PENDING_DELETION =13018;
const ERROR_CLUSTER_NODE_UNREACHABLE =5051;
const ERROR_CTX_LICENSE_NOT_AVAILABLE =7054;
const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED =5081;
const ERROR_FILE_NOT_ENCRYPTED =6007;
const ERROR_CLUSTER_NODE_NOT_PAUSED =5058;
const ERROR_SXS_XML_E_UNEXPECTEDEOF =14058;
const ERROR_DS_BACKLINK_WITHOUT_LINK =8482;
const BS_AUTO3STATE =0x00000006;
const MB_MODEMASK =0x00003000;
const STG_LAYOUT_SEQUENTIAL =0x00000000;
const CBS_OWNERDRAWVARIABLE =0x0020;
const MCI_WAVE_STATUS_AVGBYTESPERSEC =0x00004004;
const ERROR_QUORUM_RESOURCE_ONLINE_FAILED =5027;
const OLEOBJ_E_FIRST =0x80040180;
const ERROR_SIGNAL_REFUSED =156;
const ERROR_DS_COMPARE_TRUE =8230;
const MCI_INFO_COPYRIGHT =0x00002000;
const ERROR_LUIDS_EXHAUSTED =1334;
const ERROR_DS_UNWILLING_TO_PERFORM =8245;
const ERROR_WINDOW_NOT_COMBOBOX =1423;
const SS_ETCHEDFRAME =0x00000012;
const DCX_VALIDATE =0x00200000;
const ERROR_LICENSE_QUOTA_EXCEEDED =1395;
const WS_TABSTOP =0x00010000;
const ERROR_NO_INHERITANCE =1391;
const MCI_SYSINFO_QUANTITY =0x00000100;
const WINSTA_ACCESSCLIPBOARD =0x0004;
const ERROR_TAG_NOT_FOUND =2012;
const ES_LOWERCASE =0x0010;
const ERROR_DS_OFFSET_RANGE_ERROR =8262;
const ERROR_ACCOUNT_EXPIRED =1793;
const ERROR_PROTOCOL_UNREACHABLE =1233;
const ERROR_INVALID_LOGON_HOURS =1328;
const ERROR_INVALID_PARAMETER =87;
const ERROR_NO_SYSTEM_RESOURCES =1450;
const ERROR_SXS_XML_E_INVALID_VERSION =14072;
const ERROR_DS_NAME_TOO_LONG =8348;
const ERROR_IPSEC_IKE_PROCESS_ERR_PROP =13831;
const ERROR_OUT_OF_PAPER =28;
const ERROR_DS_BUSY =8206;
const ERROR_DIFFERENT_SERVICE_ACCOUNT =1079;
const ERROR_INVALID_DOMAIN_STATE =1353;
const LBS_COMBOBOX =0x8000;
const MCI_ANIM_WINDOW_DISABLE_STRETCH =0x00200000;
const JOY_RETURNPOV =0x00000040;
const MB_DEFBUTTON1 =0x00000000;
const MB_DEFBUTTON2 =0x00000100;
const MB_DEFBUTTON3 =0x00000200;
const MB_DEFBUTTON4 =0x00000300;
const ERROR_SXS_VERSION_CONFLICT =14008;
const DM_DEFAULTSOURCE =0x00000200;
const TAPE_ERASE_LONG =1;
const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 =1177;
const ERROR_PRINTER_ALREADY_EXISTS =1802;
const ERROR_UNKNOWN_PRODUCT =1605;
const ERROR_DS_EPOCH_MISMATCH =8483;
const ERROR_IPSEC_IKE_INVALID_AUTH_ALG =13874;
const WS_EX_LEFT =0x00000000;
const ERROR_CTX_WINSTATION_NOT_FOUND =7022;
const ERROR_FILE_EXISTS =80;
const ERROR_INVALID_BLOCK_LENGTH =1106;
const ERROR_BAD_EXE_FORMAT =193;
const MIXERCONTROL_CT_UNITS_BOOLEAN =0x00010000;
const ERROR_SERVICE_NEVER_STARTED =1077;
const DNS_ERROR_DP_FSMO_ERROR =9906;
const ERROR_INVALID_OPERATION_ON_QUORUM =5068;
const ERROR_INVALID_TARGET_HANDLE =114;
const ERROR_SXS_UNTRANSLATABLE_HRESULT =14077;
const ERROR_BAD_DEVICE =1200;
const ERROR_DS_NO_DELETED_NAME =8355;
const BS_TEXT =0x00000000;
const MCI_WAVE_STATUS_BLOCKALIGN =0x00004005;
const ERROR_DS_DRA_NOT_SUPPORTED =8454;
const ERROR_LOGON_FAILURE =1326;
const MIXERCONTROL_CT_SC_TIME_MILLISECS =0x01000000;
const ERROR_DEVICE_REINITIALIZATION_NEEDED =1164;
const ERROR_NETLOGON_NOT_STARTED =1792;
const ERROR_INVALID_ACL =1336;
const BS_LEFTTEXT =0x00000020;
const DNS_ERROR_NODE_IS_CNAME =9708;
const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP =5896;
const EMBDHLP_INPROC_SERVER =0x0001;
const TAPE_UNLOAD =1;
const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION =8511;
const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION =13019;
const MIXERCONTROL_CT_SC_SWITCH_BUTTON =0x01000000;
const TAPE_UNLOCK =4;
const DNS_WARNING_PTR_CREATE_FAILED =9715;
const VS_FFI_SIGNATURE =0xFEEF04BD;
const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC =8553;
const ERROR_INCORRECT_SIZE =1462;
const ERROR_DS_NO_SUCH_OBJECT =8240;
const ERROR_DS_DRA_OUT_OF_MEM =8446;
const ERROR_GEN_FAILURE =31;
const ERROR_HANDLE_EOF =38;
const ERROR_DOMAIN_CONTROLLER_EXISTS =1250;
const ERROR_WMI_GUID_DISCONNECTED =4207;
const SS_TYPEMASK =0x0000001F;
const ERROR_INVALID_IMPORT_OF_NON_DLL =1276;
const ERROR_RESOURCE_NOT_ONLINE =5004;
const DNS_ERROR_RECORD_TIMED_OUT =9705;
const TPM_VERPOSANIMATION =0x1000;
const ERROR_CLASS_DOES_NOT_EXIST =1411;
const ERROR_DS_EXISTS_IN_MUST_HAVE =8385;
const RPC_S_PRF_ELT_NOT_REMOVED =1927;
const FRS_ERR_INTERNAL_API =8004;
const ERROR_PIPE_CONNECTED =535;
const ERROR_INSTALL_PACKAGE_VERSION =1613;
const DESKTOP_CREATEMENU =0x0004;
const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND =13015;
const ERROR_EFS_SERVER_NOT_TRUSTED =6011;
const ERROR_SHARED_POLICY =8218;
const ERROR_INVALID_LIBRARY =4301;
const LBS_NOTIFY =0x0001;
const VIF_ACCESSVIOLATION =0x00000200;
const WS_MINIMIZE =0x20000000;
const EPT_S_INVALID_ENTRY =1751;
const ERROR_DS_MASTERDSA_REQUIRED =8314;
const DESKTOP_CREATEWINDOW =0x0002;
const MCI_OVLY_RECT =0x00010000;
const MCI_ANIM_WHERE_SOURCE =0x00020000;
const CF_USESTYLE =0x80;
const DNS_ERROR_UNSECURE_PACKET =9505;
const ERROR_DS_DRA_SCHEMA_INFO_SHIP =8542;
const ERROR_SXS_ASSEMBLY_NOT_FOUND =14003;
const RPC_S_INVALID_RPC_PROTSEQ =1704;
const ERROR_DS_OBJECT_CLASS_REQUIRED =8315;
const INPLACE_E_FIRST =0x800401A0;
const DNS_ERROR_ZONE_IS_SHUTDOWN =9621;
const ERROR_DS_DRA_REPL_PENDING =8477;
const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED =1933;
const ERROR_DIR_NOT_EMPTY =145;
const STGM_SHARE_DENY_NONE =0x00000040;
const GCP_JUSTIFY =0x00010000;
const ERROR_DUPLICATE_TAG =2014;
const ERROR_NOT_READY =21;
const ERROR_STACK_BUFFER_OVERRUN =1282;
const ERROR_PRINTER_NOT_FOUND =3012;
const ERROR_BAD_PROFILE =1206;
const ERROR_DEPENDENCY_ALREADY_EXISTS =5003;
const RPC_S_INVALID_AUTH_IDENTITY =1749;
const ERROR_DS_PARAM_ERROR =8255;
const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER =8520;
const RPC_S_INVALID_VERS_OPTION =1756;
const ERROR_DS_NAME_ERROR_NOT_FOUND =8470;
const ERROR_RPL_NOT_ALLOWED =4006;
const DS_FIXEDSYS =0x0008;
const MF_DISABLED =0x00000002;
const PRF_OWNED =0x00000020;
const ERROR_DS_CANT_MOD_PRIMARYGROUPID =8506;
const MF_ENABLED =0x00000000;
const RPC_S_ADDRESS_ERROR =1768;
const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED =1220;
const ERROR_INVALID_GROUP_ATTRIBUTES =1345;
const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS =13008;
const RPC_C_SECURITY_QOS_VERSION_1 =1;
const RPC_C_SECURITY_QOS_VERSION_2 =2;
const RPC_C_SECURITY_QOS_VERSION_3 =3;
const ERROR_SXS_XML_E_INCOMPLETE_ENCODING =14043;
const ERROR_BUSY =170;
const ERROR_IPSEC_IKE_INVALID_HASH =13870;
const ERROR_DS_DRA_GENERIC =8436;
const MCI_ANIM_WINDOW_TEXT =0x00080000;
const ERROR_SXS_XML_E_INVALID_STANDALONE =14070;
const RPC_S_MAX_CALLS_TOO_SMALL =1742;
const SS_WHITERECT =0x00000006;
const ERROR_INVALID_EXE_SIGNATURE =191;
const ERROR_DS_STRING_SD_CONVERSION_FAILED =8522;
const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM =13812;
const MIDIPROP_GET =0x40000000;
const ERROR_DELAY_LOAD_FAILED =1285;
const ERROR_CLIPPING_NOT_SUPPORTED =2005;
const ERROR_IPSEC_IKE_INVALID_COOKIE =13846;
const ERROR_RXACT_COMMIT_FAILURE =1370;
const ERROR_DEVICE_REMOVED =1617;
const ERROR_NO_MATCH =1169;
const ERROR_MEMBER_IN_ALIAS =1378;
const ERROR_WRITE_PROTECT =19;
const ERROR_CTX_CONSOLE_CONNECT =7042;
const ERROR_INVALID_MINALLOCSIZE =195;
const MIXERCONTROL_CT_SC_LIST_MULTIPLE =0x01000000;
const RPC_S_ALREADY_REGISTERED =1711;
const ERROR_SUBST_TO_SUBST =139;
const ERROR_NO_TOKEN =1008;
const MCI_WAVE_SET_ANYINPUT =0x04000000;
const ERROR_DS_UNKNOWN_ERROR =8431;
const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA =4330;
const ERROR_SXS_XML_E_BADCHARINSTRING =14034;
const ERROR_SXS_XML_E_RESERVEDNAMESPACE =14066;
const ERROR_DS_NO_CROSSREF_FOR_NC =8363;
const MCI_VD_PLAY_REVERSE =0x00010000;
const ERROR_DS_LOW_DSA_VERSION =8568;
const ERROR_BAD_IMPERSONATION_LEVEL =1346;
const ERROR_INVALID_FILTER_PROC =1427;
const TPM_LEFTBUTTON =0x0000;
const MCI_ANIM_STEP_REVERSE =0x00010000;
const ERROR_INSTALL_PACKAGE_REJECTED =1625;
const ERROR_CANT_OPEN_ANONYMOUS =1347;
const ERROR_CANCELLED =1223;
const MCI_OVLY_WINDOW_TEXT =0x00080000;
const MCI_ANIM_OPEN_NOSTATIC =0x00040000;
const MF_POPUP =0x00000010;
const ERROR_ALREADY_REGISTERED =1242;
const ERROR_INVALID_ID_AUTHORITY =1343;
const ERROR_IPSEC_IKE_PROCESS_ERR_HASH =13837;
const ERROR_EXCL_SEM_ALREADY_OWNED =101;
const ERROR_NOT_JOINED =136;
const ERROR_PAGED_SYSTEM_RESOURCES =1452;
const ERROR_PARAMETER_QUOTA_EXCEEDED =1283;
const ERROR_OLD_WIN_VERSION =1150;
const ERROR_CLUSTER_NODE_NOT_MEMBER =5052;
const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX =8400;
const ERROR_DEVICE_DOOR_OPEN =1166;
const ERROR_DS_DRA_PREEMPTED =8461;
const VOS__BASE =0x00000000;
const VFT_UNKNOWN =0x00000000;
const BS_PUSHLIKE =0x00001000;
const ERROR_RESOURCE_NOT_PRESENT =4316;
const ERROR_DS_NC_MUST_HAVE_NC_PARENT =8494;
const ERROR_INVALID_EA_HANDLE =278;
const ERROR_DS_COULDNT_UPDATE_SPNS =8525;
const MF_CHECKED =0x00000008;
const STGM_FAILIFTHERE =0x00000000;
const EVENT_S_FIRST =0x00040200;
const MB_SYSTEMMODAL =0x00001000;
const ERROR_DS_MUST_BE_RUN_ON_DST_DC =8558;
const ERROR_DOWNGRADE_DETECTED =1265;
const ERROR_CLASS_HAS_WINDOWS =1412;
const ERROR_GRACEFUL_DISCONNECT =1226;
const SS_CENTERIMAGE =0x00000200;
const ERROR_IPSEC_IKE_OUT_OF_MEMORY =13859;
const MIXER_SETCONTROLDETAILSF_CUSTOM =0x00000001;
const ERROR_DS_SINGLE_VALUE_CONSTRAINT =8321;
const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER =8519;
const ERROR_SERVICE_CANNOT_ACCEPT_CTRL =1061;
const ERROR_PATH_BUSY =148;
const ERROR_BAD_ARGUMENTS =160;
const JOY_RETURNU =0x00000010;
const JOY_RETURNX =0x00000001;
const JOY_RETURNY =0x00000002;
const JOY_RETURNZ =0x00000004;
const ERROR_DS_CANT_START =8531;
const ERROR_CLUSTER_INSTANCE_ID_MISMATCH =5893;
const DRAGDROP_S_LAST =0x0004010F;
const RPCFLG_INPUT_SYNCHRONOUS =0x20000000U;
const ERROR_NOT_FOUND =1168;
const ERROR_DS_NAME_UNPARSEABLE =8350;
const CLASSFACTORY_S_LAST =0x0004011F;
const ERROR_CIRCULAR_DEPENDENCY =1059;
const MF_END =0x00000080;
const ERROR_BAD_NET_NAME =67;
const MIXER_GETLINEINFOF_LINEID =0x00000002;
const ERROR_TRANSPORT_FULL =4328;
const ERROR_IPSEC_MM_POLICY_EXISTS =13003;
const DS_SYSMODAL =0x02;
const SBS_RIGHTALIGN =0x0004;
const ERROR_INVALID_ACCESS =12;
const ERROR_DS_NO_CHAINING =8327;
const ERROR_INVALID_CMM =2010;
const ERROR_ADDRESS_ALREADY_ASSOCIATED =1227;
const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS =13832;
const ERROR_IPSEC_QM_POLICY_IN_USE =13002;
const MCI_ANIM_OPEN_PARENT =0x00020000;
const MCI_WAVE_GETDEVCAPS_INPUTS =0x00004001;
const ERROR_APP_WRONG_OS =1151;
const ERROR_SXS_XML_E_UNCLOSEDDECL =14064;
const ERROR_NOT_DOS_DISK =26;
const VIF_OUTOFSPACE =0x00000100;
const ERROR_SERVICE_MARKED_FOR_DELETE =1072;
const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN =13800;
const MCI_SET_ON =0x00002000;
const ERROR_BOOT_ALREADY_ACCEPTED =1076;
const TAPE_ERASE_SHORT =0;
const DNS_ERROR_INVALID_NAME_CHAR =9560;
const ERROR_CLUSTER_IPADDR_IN_USE =5057;
const ERROR_DS_BAD_HIERARCHY_FILE =8425;
const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE =8502;
const ERROR_ILLEGAL_ELEMENT_ADDRESS =1162;
const ERROR_TOO_MANY_SIDS =1389;
const ERROR_INVALID_BLOCK =9;
const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED =8552;
const ERROR_SXS_XML_E_XMLDECLSYNTAX =14035;
const CO_S_FIRST =0x000401F0;
const DNS_ERROR_RECORD_DOES_NOT_EXIST =9701;
const ERROR_RESOURCE_NOT_AVAILABLE =5006;
const ERROR_DS_UNABLE_TO_SURRENDER_ROLES =8435;
const FRS_ERR_INTERNAL =8005;
const VFT2_DRV_INSTALLABLE =0x00000008;
const ERROR_ADDRESS_NOT_ASSOCIATED =1228;
const VIEW_S_LAST =0x0004014F;
const ERROR_IPSEC_MM_AUTH_NOT_FOUND =13011;
const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN =8569;
const ERROR_FLOPPY_WRONG_CYLINDER =1123;
const ERROR_SET_POWER_STATE_VETOED =1140;
const ERROR_DIRECT_ACCESS_HANDLE =130;
const ERROR_WMI_TRY_AGAIN =4203;
const RPC_S_SEND_INCOMPLETE =1913;
const ERROR_DS_GC_NOT_AVAILABLE =8217;
const MCI_OVLY_OPEN_PARENT =0x00020000;
const ERROR_TOO_MANY_SESS =69;
const VFT2_DRV_NETWORK =0x00000006;
const MCI_WAVE_OPEN_BUFFER =0x00010000;
const ERROR_IPSEC_TUNNEL_FILTER_EXISTS =13016;
const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ =8560;
const MIXERLINE_LINEF_SOURCE =0x80000000;
const RPC_S_NAME_SERVICE_UNAVAILABLE =1762;
const ERROR_DS_CANT_FIND_DSA_OBJ =8419;
const ERROR_FILE_READ_ONLY =6009;
const ERROR_SXS_UNKNOWN_ENCODING =14013;
const MCI_OPEN_ELEMENT_ID =0x00000800;
const ERROR_LOGON_TYPE_NOT_GRANTED =1385;
const MCI_ANIM_PLAY_SPEED =0x00010000;
const ERROR_PRODUCT_VERSION =1638;
const BI_JPEG =4;
const ERROR_DS_REPLICATOR_ONLY =8370;
const WS_EX_NOACTIVATE =0x08000000;
const MCI_SEQ_SET_SLAVE =0x00040000;
const RPC_S_SERVER_TOO_BUSY =1723;
const RPC_S_INVALID_ASYNC_CALL =1915;
const DS_MODALFRAME =0x80;
const ERROR_EA_FILE_CORRUPT =276;
const ERROR_HOTKEY_ALREADY_REGISTERED =1409;
const ERROR_DS_CONFIDENTIALITY_REQUIRED =8237;
const ERROR_LOGIN_TIME_RESTRICTION =1239;
const PRF_CLIENT =0x00000004;
const ERROR_DS_CROSS_NC_DN_RENAME =8368;
const ERROR_TOO_MANY_MUXWAITERS =152;
const ERROR_DC_NOT_FOUND =1425;
const WINSTA_ACCESSGLOBALATOMS =0x0020;
const ERROR_NOT_EMPTY =4307;
const DS_ABSALIGN =0x01;
const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE =5030;
const ERROR_SXS_INVALID_XML_NAMESPACE_URI =14014;
const ERROR_RESOURCE_DISABLED =4309;
const ERROR_DS_DUPLICATE_ID_FOUND =8605;
const ERROR_ALREADY_EXISTS =183;
const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX =8377;
const ERROR_IEPORT_FULL =4341;
const JOY_CAL_READALWAYS =0x00010000;
const MIXER_OBJECTF_MIXER =0x00000000;
const DNS_ERROR_INVALID_PROPERTY =9553;
const ERROR_DEVICE_IN_USE =2404;
const ERROR_UNEXPECTED_OMID =4334;
const ERROR_DS_OBJ_NOT_FOUND =8333;
const ERROR_INVALID_LOGON_TYPE =1367;
const MIXERCONTROL_CT_CLASS_NUMBER =0x30000000;
const ERROR_DS_NO_MORE_RIDS =8209;
const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE =5089;
const ERROR_IPSEC_MM_FILTER_NOT_FOUND =13007;
const ERROR_NO_SUCH_USER =1317;
const TAPE_TENSION =2;
const MB_ICONQUESTION =0x00000020;
const ERROR_NO_SHUTDOWN_IN_PROGRESS =1116;
const MB_USERICON =0x00000080;
const ERROR_NOT_LOGON_PROCESS =1362;
const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD =8585;
const ERROR_INVALID_COMPUTERNAME =1210;
const MCI_ANIM_WINDOW_HWND =0x00010000;
const WS_EX_LTRREADING =0x00000000;
const DNS_ERROR_NAME_NOT_IN_ZONE =9706;
const MCI_ANIM_PLAY_REVERSE =0x00020000;
const ERROR_DS_CANT_DELETE =8398;
const RPC_S_INVALID_NETWORK_OPTIONS =1724;
const ERROR_SEM_OWNER_DIED =105;
const LCS_GM_IMAGES =0x00000004;
const CF_TTONLY =0x40000;
const ERROR_DS_SIZELIMIT_EXCEEDED =8227;
const ERROR_INFLOOP_IN_RELOC_CHAIN =202;
const WS_THICKFRAME =0x00040000;
const ERROR_BAD_THREADID_ADDR =159;
const ERROR_INVALID_MODULETYPE =190;
const ERROR_SOURCE_ELEMENT_EMPTY =1160;
const VFT2_FONT_VECTOR =0x00000002;
const ERROR_METAFILE_NOT_SUPPORTED =2003;
const RPC_S_INVALID_BINDING =1702;
const MB_SERVICE_NOTIFICATION_NT3X =0x00040000;
const STG_TOEND =0xFFFFFFFF;
const JOY_CAL_READRONLY =0x02000000;
const ERROR_PROC_NOT_FOUND =127;
const ERROR_NT_CROSS_ENCRYPTION_REQUIRED =1386;
const TPM_RIGHTBUTTON =0x0002;
const ERROR_MEMBER_NOT_IN_GROUP =1321;
const MEVT_F_SHORT =0x00000000;
const ERROR_THREAD_1_INACTIVE =210;
const ERROR_INVALID_ADDRESS =487;
const ERROR_ACTIVATION_COUNT_EXCEEDED =7059;
const ERROR_EVENTLOG_FILE_CORRUPT =1500;
const DNS_ERROR_RECORD_FORMAT =9702;
const CBS_OWNERDRAWFIXED =0x0010;
const ERROR_DATATYPE_MISMATCH =1629;
const MCI_ANIM_GETDEVCAPS_FAST_RATE =0x00004002;
const MCI_OPEN_ALIAS =0x00000400;
const JOY_BUTTON7 =0x00000040;
const ERROR_POPUP_ALREADY_ACTIVE =1446;
const ERROR_SXS_XML_E_BADNAMECHAR =14033;
const MCI_OVLY_WINDOW_HWND =0x00010000;
const MB_YESNO =0x00000004;
const ERROR_ILL_FORMED_PASSWORD =1324;
const ERROR_DS_SINGLE_USER_MODE_FAILED =8590;
const MIXERCONTROL_CT_CLASS_METER =0x10000000;
const DS_NOIDLEMSG =0x100;
const ERROR_SXS_XML_E_BADXMLCASE =14069;
const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC =8580;
const ERROR_DS_EXISTS_IN_POSS_SUP =8395;
const ERROR_NOT_EXPORT_FORMAT =6008;
const SS_ENHMETAFILE =0x0000000F;
const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME =5900;
const ERROR_IPSEC_IKE_SRVACQFAIL =13855;
const ERROR_NOT_REGISTRY_FILE =1017;
const ERROR_CRC =23;
const DNS_ERROR_ZONE_CONFIGURATION_ERROR =9604;
const ERROR_ACCESS_DENIED =5;
const ERROR_DS_DRA_SOURCE_DISABLED =8456;
const DNS_ERROR_NUMERIC_NAME =9561;
const ERROR_TOO_MANY_SEM_REQUESTS =103;
const DM_PELSWIDTH =0x00080000;
const ERROR_PRINTER_DRIVER_WARNED =3013;
const ERROR_INVALID_DRIVE =15;
const TPM_HORNEGANIMATION =0x0800;
const MB_TYPEMASK =0x0000000F;
const ERROR_INVALID_PRIMARY_GROUP =1308;
const ERROR_FULL_BACKUP =4004;
const ERROR_INVALID_SERVICE_CONTROL =1052;
const ERROR_IPSEC_IKE_SECLOADFAIL =13852;
const RPC_S_UNSUPPORTED_TYPE =1732;
const ERROR_SXS_XML_E_MISSINGEQUALS =14073;
const GMDI_GOINTOPOPUPS =0x0002;
const CF_NOSIMULATIONS =0x1000;
const MIXER_OBJECTF_AUX =0x50000000;
const CF_NOVECTORFONTS =0x800;
const ERROR_DS_CONSTRAINT_VIOLATION =8239;
const VFT2_DRV_SOUND =0x00000009;
const MCI_GETDEVCAPS_CAN_SAVE =0x00000009;
const MCI_OVLY_WHERE_FRAME =0x00080000;
const ERROR_DS_DRA_OBJ_IS_REP_SOURCE =8450;
const ERROR_INVALID_WORKSTATION =1329;
const BS_MULTILINE =0x00002000;
const ERROR_MEDIUM_NOT_ACCESSIBLE =4323;
const JOY_RETURNV =0x00000020;
const CBS_SORT =0x0100;
const DNS_ERROR_RCODE_SERVER_FAILURE =9002;
const MCI_STATUS_ITEM =0x00000100;
const ERROR_VDM_DISALLOWED =1286;
const FRS_ERR_STOPPING_SERVICE =8003;
const ERROR_IS_JOINED =134;
const ERROR_INVALID_SUB_AUTHORITY =1335;
const CAT_E_LAST =0x80040161;
const ERROR_DS_LDAP_SEND_QUEUE_FULL =8616;
const WS_BORDER =0x00800000;
const STG_LAYOUT_INTERLEAVED =0x00000001;
const TPM_VERTICAL =0x0040;
const ERROR_REGISTRY_RECOVERED =1014;
const DRAGDROP_E_LAST =0x8004010F;
const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER =5049;
const FRS_ERR_CHILD_TO_PARENT_COMM =8011;
const CLASSFACTORY_E_LAST =0x8004011F;
const ERROR_DS_SAM_INIT_FAILURE =8504;
const ERROR_NO_NET_OR_BAD_PATH =1203;
const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX =8203;
const DNS_ERROR_ZONE_REQUIRES_MASTER_IP =9620;
const ERROR_DEVICE_NOT_CONNECTED =1167;
const RPC_X_WRONG_PIPE_ORDER =1831;
const ERROR_NO_DATA_DETECTED =1104;
const ERROR_PRINT_MONITOR_ALREADY_INSTALLED =3006;
const MEVT_F_CALLBACK =0x40000000;
const VFT2_DRV_PRINTER =0x00000001;
const MCI_OVLY_PUT_DESTINATION =0x00040000;
const ERROR_SUCCESS_RESTART_REQUIRED =3011;
const TPM_CENTERALIGN =0x0004;
const STGM_DIRECT_SWMR =0x00400000;
const ERROR_IPSEC_IKE_BENIGN_REINIT =13878;
const LBS_OWNERDRAWVARIABLE =0x0020;
const ERROR_INVALID_DLL =1154;
const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND =5032;
const ERROR_CONTROLLING_IEPORT =4329;
const STGM_PRIORITY =0x00040000;
const OLEOBJ_S_LAST =0x0004018F;
const ERROR_DS_IS_LEAF =8243;
const LBS_WANTKEYBOARDINPUT =0x0400;
const NDR_EBCDIC_CHAR =0X00000001U;
const ERROR_PATCH_TARGET_NOT_FOUND =1642;
const ERROR_IPSEC_IKE_SA_REAPED =13808;
const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE =8503;
const ERROR_SERVICE_REQUEST_TIMEOUT =1053;
const ERROR_CLUSTER_NODE_PAUSED =5070;
const DS_3DLOOK =0x0004;
const CBS_NOINTEGRALHEIGHT =0x0400;
const ERROR_LOGIN_WKSTA_RESTRICTION =1240;
const VFT_VXD =0x00000005;
const ERROR_DS_SORT_CONTROL_MISSING =8261;
const FS_CYRILLIC =0x00000004;
const MCI_VD_SEEK_REVERSE =0x00010000;
const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS =8493;
const MCI_WAVE_INPUT =0x00400000;
const VIEW_E_LAST =0x8004014F;
const ERROR_INVALID_SEGDPL =198;
const ERROR_BAD_VALIDATION_CLASS =1348;
const NDR_IBM_FLOAT =0X00000300U;
const MF_USECHECKBITMAPS =0x00000200;
const ERROR_DS_DECODING_ERROR =8253;
const ERROR_DISK_OPERATION_FAILED =1127;
const ERROR_DS_GOVERNSID_MISSING =8410;
const MCI_VD_STATUS_DISC_SIZE =0x00004006;
const ERROR_DELETING_ICM_XFORM =2019;
const WS_EX_WINDOWEDGE =0x00000100;
const ERROR_NOT_SUPPORTED_ON_SBS =1254;
const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS =5053;
const ERROR_EOM_OVERFLOW =1129;
const ERROR_WINDOW_OF_OTHER_THREAD =1408;
const ERROR_DS_TREE_DELETE_NOT_FINISHED =8397;
const ERROR_OPEN_FAILED =110;
const ERROR_RESOURCE_DATA_NOT_FOUND =1812;
const ERROR_CTX_CLIENT_QUERY_TIMEOUT =7040;
const ERROR_WMI_ALREADY_ENABLED =4206;
const ERROR_SETCOUNT_ON_BAD_LB =1433;
const ERROR_SXS_XML_E_INVALIDENCODING =14067;
const RPC_S_PROTSEQ_NOT_FOUND =1744;
const MCI_ANIM_STATUS_FORWARD =0x00004002;
const ERROR_SXS_DUPLICATE_PROGID =14026;
const ERROR_INVALID_PRIORITY =1800;
const ERROR_IPSEC_IKE_INVALID_SITUATION =13863;
const MIXER_SETCONTROLDETAILSF_QUERYMASK =0x0000000F;
const VS_FFI_STRUCVERSION =0x00010000;
const ERROR_CONNECTED_OTHER_PASSWORD =2108;
const ERROR_IPSEC_IKE_INVALID_HASH_SIZE =13872;
const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM =8346;
const ERROR_DS_DRA_RPC_CANCELLED =8455;
const MF_MOUSESELECT =0x00008000;
const ERROR_DS_CLIENT_LOOP =8259;
const MK_E_FIRST =0x800401E0;
const WS_EX_NOPARENTNOTIFY =0x00000004;
const ENUM_S_LAST =0x000401BF;
const MCI_SEQ_STATUS_MASTER =0x00004008;
const ERROR_SXS_DUPLICATE_CLSID =14023;
const DNS_WARNING_DOMAIN_UNDELETED =9716;
const ERROR_CLUSCFG_ROLLBACK_FAILED =5902;
const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS =8612;
const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING =14078;
const ERROR_WMI_INVALID_REGINFO =4211;
const MCI_SEQ_SET_TEMPO =0x00010000;
const MCI_STATUS_LENGTH =0x00000001;
const CF_SCALABLEONLY =0x20000;
const MCI_SET_TIME_FORMAT =0x00000400;
const SS_REALSIZECONTROL =0x00000040;
const MEVT_F_LONG =0x80000000;
const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE =13839;
const ERROR_INVALID_SHOWWIN_COMMAND =1449;
const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE =5064;
const ERROR_IPSEC_IKE_NO_CERT =13806;
const DNS_ERROR_BAD_PACKET =9502;
const LBS_NOINTEGRALHEIGHT =0x0100;
const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 =8572;
const OLEOBJ_E_LAST =0x8004018F;
const ERROR_DS_COUNTING_AB_INDICES_FAILED =8428;
const ERROR_DS_OBJECT_BEING_REMOVED =8339;
const DESKTOP_READOBJECTS =0x0001;
const ERROR_BAD_USER_PROFILE =1253;
const CBS_SIMPLE =0x0001;
const MCI_SEQ_STATUS_TEMPO =0x00004002;
const ERROR_BUSY_DRIVE =142;
const APPCMD_CLIENTONLY =0x00000010;
const RPC_S_CALL_IN_PROGRESS =1791;
const PRF_NONCLIENT =0x00000002;
const CF_NOVERTFONTS =0x1000000;
const ERROR_OBJECT_NOT_FOUND =4312;
const ERROR_WRONG_EFS =6005;
const ERROR_SIGNAL_PENDING =162;
const CF_ENABLEHOOK =0x8;
const VIF_DIFFLANG =0x00000008;
const ERROR_OPEN_FILES =2401;
const CONVERT10_S_LAST =0x000401CF;
const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED =14015;
const DM_BITSPERPEL =0x00040000;
const ERROR_DS_CROSS_REF_BUSY =8602;
const ERROR_UNKNOWN_FEATURE =1606;
const ERROR_NO_MORE_USER_HANDLES =1158;
const SS_NOPREFIX =0x00000080;
const ERROR_DS_INVALID_ROLE_OWNER =8366;
const GCP_CLASSIN =0x00080000;
const ERROR_CLUSTER_NETWORK_NOT_INTERNAL =5060;
const ERROR_BUS_RESET =1111;
const MCI_STATUS_POSITION =0x00000002;
const FRS_ERR_PARENT_TO_CHILD_COMM =8012;
const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED =5079;
const MCI_STATUS_READY =0x00000007;
const STGM_SIMPLE =0x08000000;
const ERROR_CLUSTERLOG_CORRUPT =5029;
const CACHE_E_FIRST =0x80040170;
const MB_NOFOCUS =0x00008000;
const ERROR_EFS_DISABLED =6015;
const ERROR_NO_DATA =232;
const DNS_ERROR_DATAFILE_PARSING =9655;
const ERROR_IPSEC_IKE_INVALID_SIGNATURE =13826;
const MCI_ANIM_WHERE_DESTINATION =0x00040000;
const DNS_ERROR_NEED_WINS_SERVERS =9616;
const MIXERLINE_LINEF_ACTIVE =0x00000001;
const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT =14075;
const ERROR_PATH_NOT_FOUND =3;
const RPC_S_UNSUPPORTED_AUTHN_LEVEL =1821;
const ERROR_OBJECT_IN_LIST =5011;
const MIXERCONTROL_CT_CLASS_SWITCH =0x20000000;
const ERROR_NO_SUCH_MEMBER =1387;
const ERROR_DS_NAME_ERROR_DOMAIN_ONLY =8473;
const MIXERCONTROL_CT_CLASS_FADER =0x50000000;
const LBS_EXTENDEDSEL =0x0800;
const ERROR_INVALID_NETNAME =1214;
const MIXERCONTROL_CT_SC_METER_POLLED =0x00000000;
const FRS_ERR_PARENT_AUTHENTICATION =8010;
const ERROR_INSTALL_TRANSFORM_FAILURE =1624;
const ERROR_NETWORK_BUSY =54;
const ERROR_ALREADY_INITIALIZED =1247;
const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG =13873;
const ERROR_DS_DRA_INTERNAL_ERROR =8442;
const ERROR_NO_UNICODE_TRANSLATION =1113;
const RPC_S_INTERNAL_ERROR =1766;
const ERROR_DS_DUP_OID =8379;
const RPC_S_INTERFACE_NOT_EXPORTED =1924;
const ERROR_DS_DRA_BAD_INSTANCE_TYPE =8445;
const ERROR_DISK_FULL =112;
const ERROR_DS_NAME_TOO_MANY_PARTS =8347;
const BS_3STATE =0x00000005;
const ERROR_UNEXP_NET_ERR =59;
const MCI_SET_AUDIO =0x00000800;
const ERROR_DS_NO_RIDS_ALLOCATED =8208;
const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER =7013;
const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY =8530;
const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN =8603;
const ERROR_PARTITION_FAILURE =1105;
const BI_BITFIELDS =3;
const MB_HELP =0x00004000;
const ERROR_SXS_UNKNOWN_ENCODING_GROUP =14012;
const ERROR_POINT_NOT_FOUND =1171;
const ERROR_PASSWORD_EXPIRED =1330;
const ERROR_DEV_NOT_EXIST =55;
const ERROR_DS_FILTER_UNKNOWN =8254;
const ERROR_DS_DRA_SHUTDOWN =8463;
const ERROR_INVALID_ACCOUNT_NAME =1315;
const ERROR_SERVICE_NOT_FOUND =1243;
const MCI_SEQ_STATUS_NAME =0x0000400B;
const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS =5067;
const ERROR_DS_NO_PARENT_OBJECT =8329;
const BS_GROUPBOX =0x00000007;
const DM_SCALE =0x00000010;
const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA =8303;
const ERROR_INVALID_DWP_HANDLE =1405;
const ERROR_IPSEC_IKE_PROCESS_ERR_ID =13834;
const ERROR_PIPE_BUSY =231;
const ERROR_IPSEC_IKE_PROCESS_ERR_KE =13833;
const CLIPBRD_S_FIRST =0x000401D0;
const ERROR_MR_MID_NOT_FOUND =317;
const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA =8307;
const ERROR_SXS_XML_E_BADCHARDATA =14036;
const ERROR_MEMBERS_PRIMARY_GROUP =1374;
const MCI_WAVE_SET_SAMPLESPERSEC =0x00040000;
const WS_VISIBLE =0x10000000;
const MCI_OPEN_ELEMENT =0x00000200;
const MCI_ANIM_STATUS_HPAL =0x00004004;
const SS_RIGHT =0x00000002;
const RPC_S_INVALID_TIMEOUT =1709;
const ERROR_CONNECTION_INVALID =1229;
const ERROR_INC_BACKUP =4003;
const TAPE_LOAD =0;
const ERROR_IPSEC_IKE_PROCESS_ERR_SA =13830;
const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION =9563;
const ERROR_IPSEC_MM_FILTER_EXISTS =13006;
const TAPE_LOCK =3;
const ERROR_SXS_XML_E_UNBALANCEDPAREN =14040;
const MF_OWNERDRAW =0x00000100;
const ERROR_INVALID_PASSWORDNAME =1216;
const RPC_S_UNSUPPORTED_TRANS_SYN =1730;
const ERROR_KEY_HAS_CHILDREN =1020;
const RPC_S_SEC_PKG_ERROR =1825;
const BS_NOTIFY =0x00004000;
const ERROR_NOT_ALL_ASSIGNED =1300;
const BS_AUTORADIOBUTTON =0x00000009;
const MCI_SEQ_SET_MASTER =0x00080000;
const ERROR_DS_NOT_SUPPORTED =8256;
const WS_HSCROLL =0x00100000;
const RPC_S_INTERFACE_NOT_FOUND =1759;
const MB_YESNOCANCEL =0x00000003;
const MIXERCONTROL_CT_SC_SWITCH_BOOLEAN =0x00000000;
const RPC_X_INVALID_PIPE_OBJECT =1830;
const DCX_PARENTCLIP =0x00000020;
const SS_BLACKRECT =0x00000004;
const MCI_ANIM_GETDEVCAPS_MAX_WINDOWS =0x00004008;
const ERROR_DS_REPL_LIFETIME_EXCEEDED =8614;
const ERROR_DEPENDENCY_NOT_ALLOWED =5069;
const ERROR_RESOURCE_FAILED =5038;
const ERROR_SERVICE_NOT_IN_EXE =1083;
const ERROR_DEPENDENT_SERVICES_RUNNING =1051;
const ERROR_IPSEC_IKE_NO_PRIVATE_KEY =13820;
const RPC_X_PIPE_DISCIPLINE_ERROR =1917;
const ERROR_SXS_DUPLICATE_TLBID =14025;
const ERROR_BAD_DRIVER =2001;
const ERROR_LOGON_SESSION_EXISTS =1363;
const MIXERCONTROL_CT_SC_TIME_MICROSECS =0x00000000;
const VIF_SRCOLD =0x00000004;
const ERROR_SHARING_BUFFER_EXCEEDED =36;
const BS_PUSHBUTTON =0x00000000;
const TAPE_SPACE_SEQUENTIAL_FMKS =7;
const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT =8544;
const ERROR_DEPENDENCY_NOT_FOUND =5002;
const ERROR_DS_RIDMGR_INIT_ERROR =8211;
const ERROR_DS_KEY_NOT_UNIQUE =8527;
const ERROR_SXS_XML_E_UNEXPECTEDENDTAG =14051;
const MCI_ANIM_GETDEVCAPS_CAN_REVERSE =0x00004001;
const DM_DISPLAYFLAGS =0x00200000;
const ERROR_DS_SRC_GUID_MISMATCH =8488;
const ERROR_UNABLE_TO_LOCK_MEDIA =1108;
const ERROR_PATCH_PACKAGE_UNSUPPORTED =1637;
const TPM_BOTTOMALIGN =0x0020;
const ERROR_DS_CANT_DEL_MASTER_CROSSREF =8375;
const CBS_AUTOHSCROLL =0x0040;
const RPC_X_PIPE_CLOSED =1916;
const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY =7005;
const ERROR_INVALID_HANDLE =6;
const RPC_S_WRONG_KIND_OF_BINDING =1701;
const ERROR_INVALID_MESSAGE =1002;
const ERROR_DS_MISSING_EXPECTED_ATT =8411;
const ERROR_DS_PDC_OPERATION_IN_PROGRESS =8490;
const DNS_ERROR_ZONE_DOES_NOT_EXIST =9601;
const ERROR_CLUSTER_NETWORK_EXISTS =5044;
const DATA_S_FIRST =0x00040130;
const ERROR_REQUEST_REFUSED =4320;
const NTM_REGULAR =0x00000040;
const VFT_FONT =0x00000004;
const ERROR_MAGAZINE_NOT_PRESENT =1163;
const MIXERCONTROL_CT_UNITS_MASK =0x00FF0000;
const DNS_ERROR_NO_CREATE_CACHE_DATA =9713;
const ERROR_DS_OUT_OF_VERSION_STORE =8573;
const ERROR_CLUSTER_NODE_ALREADY_MEMBER =5065;
const ES_AUTOVSCROLL =0x0040;
const FRS_ERR_INVALID_API_SEQUENCE =8001;
const MCI_VD_GETDEVCAPS_CAN_REVERSE =0x00004002;
const ERROR_SXS_MANIFEST_FORMAT_ERROR =14004;
const ERROR_REC_NON_EXISTENT =4005;
const ERROR_DS_ATT_ALREADY_EXISTS =8318;
const ERROR_WMI_SET_FAILURE =4214;
const ERROR_GROUP_EXISTS =1318;
const ARW_HIDE =0x0008;
const ERROR_NOT_SAME_DEVICE =17;
const ENUM_E_LAST =0x800401BF;
const ERROR_SMARTCARD_SUBSYSTEM_FAILURE =1264;
const ERROR_JOURNAL_HOOK_SET =1430;
const ERROR_DISK_TOO_FRAGMENTED =302;
const WINSTA_ENUMDESKTOPS =0x0001;
const ERROR_DS_SEC_DESC_INVALID =8354;
const MCI_STATUS_MODE =0x00000004;
const ERROR_UNABLE_TO_INVENTORY_TRANSPORT =4327;
const ERROR_DS_CROSS_REF_EXISTS =8374;
const ERROR_SHUTDOWN_IN_PROGRESS =1115;
const FS_SYMBOL =0x80000000;
const MCI_VD_SPIN_DOWN =0x00020000;
const MB_SERVICE_NOTIFICATION =0x00200000;
const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE =5031;
const ERROR_SINGLE_INSTANCE_APP =1152;
const MCI_VD_GETDEVCAPS_FAST_RATE =0x00004003;
const ERROR_LOCK_VIOLATION =33;
const RPC_S_NO_PROTSEQS_REGISTERED =1714;
const ERROR_TOO_MANY_LINKS =1142;
const ERROR_PAGEFILE_QUOTA =1454;
const ERROR_DS_TIMELIMIT_EXCEEDED =8226;
const MCI_RECORD_OVERWRITE =0x00000200;
const VFT2_DRV_LANGUAGE =0x00000003;
const ERROR_NULL_LM_PASSWORD =1304;
const ES_NUMBER =0x2000;
const ERROR_CTX_WINSTATION_NAME_INVALID =7001;
const ERROR_INSTALL_FAILURE =1603;
const ERROR_UNABLE_TO_UNLOAD_MEDIA =1109;
const LBS_HASSTRINGS =0x0040;
const DCX_CLIPCHILDREN =0x00000008;
const CS_DELETE_TRANSFORM =0x00000003;
const MCI_OVLY_OPEN_WS =0x00010000;
const BS_CHECKBOX =0x00000002;
const ERROR_CONNECTION_ACTIVE =1230;
const ERROR_NOT_CONNECTED =2250;
const MCI_BREAK_HWND =0x00000200;
const SS_ELLIPSISMASK =0x0000C000;
const ERROR_DS_DRA_BUSY =8438;
const ERROR_IPSEC_IKE_CRL_FAILED =13817;
const ERROR_DS_EXISTING_AD_CHILD_NC =8613;
const MCI_WAVE_SET_FORMATTAG =0x00010000;
const CLIENTSITE_S_LAST =0x0004019F;
const ERROR_RESMON_CREATE_FAILED =5017;
const ERROR_SPL_NO_STARTDOC =3003;
const RPC_S_INVALID_NAF_ID =1763;
const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP =8498;
const CERT_EXCLUDED_SUBTREE_BIT =0x80000000;
const ERROR_INVALID_VERIFY_SWITCH =118;
const BS_USERBUTTON =0x00000008;
const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER =8518;
const CALLBACK_WINDOW =0x00010000;
const DCTT_BITMAP =0x0000001;
const FLI_GLYPHS =0x00040000;
const MIXERCONTROL_CT_UNITS_SIGNED =0x00020000;
const ERROR_DS_FOREST_VERSION_TOO_HIGH =8563;
const EMBDHLP_DELAYCREATE =0x00010000;
const ERROR_DS_OUT_OF_SCOPE =8338;
const DM_COLOR =0x00000800;
const ERROR_JOURNAL_ENTRY_DELETED =1181;
const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED =8231;
const ERROR_DS_ILLEGAL_MOD_OPERATION =8311;
const RPC_S_NO_ENDPOINT_FOUND =1708;
const ERROR_DS_NO_CHECKPOINT_WITH_PDC =8551;
const ERROR_CANNOT_MAKE =82;
const ERROR_CLUSTER_LAST_INTERNAL_NETWORK =5066;
const ERROR_NEGATIVE_SEEK =131;
const ERROR_DELETE_PENDING =303;
const WS_EX_TRANSPARENT =0x00000020;
const ERROR_DS_SUB_CLS_TEST_FAIL =8391;
const DM_DITHERTYPE =0x04000000;
const OR_INVALID_OID =1911;
const ERROR_DS_THREAD_LIMIT_EXCEEDED =8587;
const ERROR_BAD_DEV_TYPE =66;
const ERROR_DS_REFUSING_FSMO_ROLES =8433;
const DNS_STATUS_CONTINUE_NEEDED =9801;
const ERROR_MOD_NOT_FOUND =126;
const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE =5063;
const ERROR_UNKNOWN_COMPONENT =1607;
const DF_ALLOWOTHERACCOUNTHOOK =0x0001;
const FS_JISJAPAN =0x00020000;
const ERROR_SERVICE_SPECIFIC_ERROR =1066;
const ERROR_INVALID_ORDINAL =182;
const MCI_ANIM_PLAY_SCAN =0x00100000;
const ERROR_SXS_XML_E_MISSINGROOT =14057;
const WARNING_IPSEC_MM_POLICY_PRUNED =13024;
const MCI_WAVE_SET_BLOCKALIGN =0x00100000;
const ERROR_QUORUM_DISK_NOT_FOUND =5086;
const ERROR_DISCARDED =157;
const ERROR_IPSEC_IKE_POLICY_CHANGE =13849;
const ERROR_CTX_MODEM_RESPONSE_BUSY =7015;
const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED =14016;
const MCI_SEQ_STATUS_OFFSET =0x00004009;
const DNS_ERROR_UNKNOWN_RECORD_TYPE =9704;
const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG =14060;
const ERROR_DS_DRA_BAD_NC =8440;
const ERROR_SEM_IS_SET =102;
const ARW_DOWN =0x0004;
const ERROR_ACCOUNT_LOCKED_OUT =1909;
const ERROR_NO_MORE_DEVICES =1248;
const BS_FLAT =0x00008000;
const RPC_S_NOT_CANCELLED =1826;
const CF_NOSCRIPTSEL =0x800000;
const DCX_INTERSECTUPDATE =0x00000200;
const MCI_ANIM_STATUS_HWND =0x00004003;
const ERROR_NETWORK_UNREACHABLE =1231;
const DS_CONTROL =0x0400;
const ERROR_DS_NAME_ERROR_TRUST_REFERRAL =8583;
const ARW_LEFT =0x0000;
const ERROR_READ_FAULT =30;
const ERROR_DS_CANT_ADD_SYSTEM_ONLY =8358;
const ERROR_VOLUME_CONTAINS_SYS_FILES =4337;
const ERROR_DS_OPERATIONS_ERROR =8224;
const ERROR_TOO_MANY_TCBS =155;
const WS_OVERLAPPED =0x00000000;
const STGM_READWRITE =0x00000002;
const ERROR_DS_ALIAS_PROBLEM =8241;
const MCI_SET_DOOR_OPEN =0x00000100;
const ERROR_KEY_DELETED =1018;
const ERROR_FAIL_I24 =83;
const ERROR_CTX_WD_NOT_FOUND =7004;
const ERROR_JOURNAL_DELETE_IN_PROGRESS =1178;
const APPCMD_MASK =0x00000FF0;
const ERROR_COLORSPACE_MISMATCH =2021;
const ERROR_APPHELP_BLOCK =1259;
const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT =8606;
const VFT2_FONT_RASTER =0x00000001;
const MB_DEFMASK =0x00000F00;
const ERROR_NODE_CANT_HOST_RESOURCE =5071;
const ERROR_DS_RANGE_CONSTRAINT =8322;
const ERROR_INVALID_TIME =1901;
const RPC_S_GRP_ELT_NOT_REMOVED =1929;
const ERROR_IPSEC_IKE_DECRYPT =13867;
const ERROR_DDE_FAIL =1156;
const BI_RLE4 =2;
const BI_RLE8 =1;
const JOY_BUTTON10 =0x00000200;
const MF_APPEND =0x00000100;
const MCI_OVLY_STATUS_HWND =0x00004001;
const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP =8609;
const REGDB_S_FIRST =0x00040150;
const MF_RIGHTJUSTIFY =0x00004000;
const VFT_STATIC_LIB =0x00000007;
const ERROR_WMI_DP_FAILED =4209;
const ERROR_DS_DUP_LDAP_DISPLAY_NAME =8382;
const ERROR_CTX_INVALID_MODEMNAME =7010;
const ERROR_EXCEPTION_IN_SERVICE =1064;
const ERROR_IPSEC_IKE_UNSUPPORTED_ID =13869;
const ERROR_DS_NO_RESULTS_RETURNED =8257;
const JOY_BUTTON17 =0x00010000;
const ERROR_WMI_INVALID_MOF =4210;
const TAPE_PSEUDO_LOGICAL_POSITION =2;
const SBS_VERT =0x0001;
const ERROR_NO_MEDIA_IN_DRIVE =1112;
const ERROR_MEDIA_NOT_AVAILABLE =4318;
const ERROR_MESSAGE_EXCEEDS_MAX_SIZE =4336;
const ARW_TOPRIGHT =0x0003;
const ES_CENTER =0x0001;
const MB_ICONMASK =0x000000F0;
const ERROR_DS_DUP_LINK_ID =8468;
const DESKTOP_SWITCHDESKTOP =0x0100;
const VOS_DOS_WINDOWS32 =0x00010004;
const RPC_S_INVALID_NET_ADDR =1707;
const ERROR_NON_DOMAIN_SID =1258;
const ERROR_DS_INVALID_DN_SYNTAX =8242;
const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID =14076;
const TPM_NOANIMATION =0x4000;
const ERROR_DS_CANT_MIX_MASTER_AND_REPS =8331;
const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL =8611;
const ERROR_SAME_DRIVE =143;
const ERROR_RESMON_INVALID_STATE =5084;
const ERROR_DS_CANT_REM_MISSING_ATT =8324;
const ERROR_NO_PROC_SLOTS =89;
const MCI_VD_PLAY_SPEED =0x00040000;
const ERROR_LOCKED =212;
const BS_TOP =0x00000400;
const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP =5894;
const MARSHAL_E_FIRST =0x80040120;
const ERROR_WMI_DP_NOT_FOUND =4204;
const ERROR_INVALID_DATA =13;
const STGM_DIRECT =0x00000000;
const NDR_CHAR_REP_MASK =0X0000000FU;
const WS_DISABLED =0x08000000;
const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED =14006;
const ERROR_DS_DST_NC_MISMATCH =8486;
const DNS_ERROR_ZONE_CREATION_FAILED =9608;
const MF_DEFAULT =0x00001000;
const RPC_X_PIPE_EMPTY =1918;
const ERROR_SUCCESS_REBOOT_INITIATED =1641;
const ERROR_BAD_USERNAME =2202;
const ERROR_DS_CHILDREN_EXIST =8332;
const ERROR_NOT_CONTAINER =1207;
const ERROR_SEM_USER_LIMIT =106;
const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED =174;
const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE =8495;
const ERROR_EXE_MACHINE_TYPE_MISMATCH =216;
const DM_FORMNAME =0x00010000;
const ERROR_INVALID_CURSOR_HANDLE =1402;
const CBM_INIT =0x04;
const ERROR_DS_DRA_SCHEMA_CONFLICT =8543;
const DCX_WINDOW =0x00000001;
const TAPE_SPACE_RELATIVE_BLOCKS =5;
const ERROR_IPSEC_IKE_GETSPIFAIL =13857;
const ERROR_DS_CANT_ADD_TO_GC =8550;
const ERROR_DS_DRA_OBJ_NC_MISMATCH =8545;
const ERROR_DS_NAME_VALUE_TOO_LONG =8349;
const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE =14079;
const ERROR_DIRECTORY =267;
const ERROR_CLUSTER_INVALID_NODE =5039;
const ERROR_CTX_NO_OUTBUF =7008;
const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE =14018;
const ERROR_REPARSE_ATTRIBUTE_CONFLICT =4391;
const ERROR_INSTALL_NOTUSED =1634;
const RPC_S_FP_DIV_ZERO =1769;
const ERROR_DS_DIFFERENT_REPL_EPOCHS =8593;
const MIXERCONTROL_CONTROLF_UNIFORM =0x00000001;
const ERROR_NO_LOGON_SERVERS =1311;
const ERROR_NOT_ENOUGH_QUOTA =1816;
const ERROR_SPECIAL_USER =1373;
const ERROR_DS_PARENT_IS_AN_ALIAS =8330;
const REGDB_S_LAST =0x0004015F;
const WINSTA_READATTRIBUTES =0x0002;
const ERROR_GENERIC_NOT_MAPPED =1360;
const RPC_S_UUID_LOCAL_ONLY =1824;
const RPC_S_BINDING_HAS_NO_AUTH =1746;
const ERROR_RMODE_APP =1153;
const ERROR_IPSEC_IKE_MM_LIMIT =13882;
const RPC_S_NO_INTERFACES =1817;
const ERROR_DS_NAME_ERROR_RESOLVING =8469;
const SS_LEFT =0x00000000;
const ERROR_INVALID_FUNCTION =1;
const ERROR_NOT_SAFEBOOT_SERVICE =1084;
const ERROR_DS_AUTH_UNKNOWN =8234;
const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP =8608;
const ERROR_DS_GENERIC_ERROR =8341;
const ERROR_HOST_DOWN =1256;
const ERROR_SPECIAL_GROUP =1372;
const CS_E_FIRST =0x80040164;
const DNS_ERROR_RECORD_ALREADY_EXISTS =9711;
const ERROR_DUP_NAME =52;
const ERROR_CANTOPEN =1011;
const ERROR_NET_WRITE_FAULT =88;
const JOY_RETURNCENTERED =0x00000400;
const RPC_X_WRONG_ES_VERSION =1828;
const WINSTA_CREATEDESKTOP =0x0008;
const MCI_SEQ_SET_OFFSET =0x01000000;
const ERROR_REM_NOT_LIST =51;
const ERROR_CLUSTER_DATABASE_SEQMISMATCH =5083;
const LBS_NODATA =0x2000;
const TAPE_SPACE_END_OF_DATA =4;
const LBS_DISABLENOSCROLL =0x1000;
const DNS_ERROR_NO_ZONE_INFO =9602;
const CBS_DROPDOWNLIST =0x0003;
const SS_WORDELLIPSIS =0x0000C000;
const ERROR_INSTALL_REMOTE_PROHIBITED =1645;
const RPCFLG_AUTO_COMPLETE =0x08000000U;
const INPLACE_E_LAST =0x800401AF;
const ERROR_IPSEC_IKE_PEER_CRL_FAILED =13848;
const WS_CAPTION =0x00C00000;
const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS =8372;
const ERROR_ALREADY_ASSIGNED =85;
const ERROR_DS_USER_BUFFER_TO_SMALL =8309;
const VS_FF_PRERELEASE =0x00000002;
const CLASSFACTORY_E_FIRST =0x80040110;
const ERROR_INVALID_LB_MESSAGE =1432;
const ERROR_TRUSTED_DOMAIN_FAILURE =1788;
const MCI_ANIM_UPDATE_HDC =0x00020000;
const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND =5078;
const DNS_ERROR_CNAME_LOOP =9707;
const ERROR_DS_INVALID_NAME_FOR_SPN =8554;
const SBS_LEFTALIGN =0x0002;
const ERROR_NO_SUCH_LOGON_SESSION =1312;
const DM_DISPLAYFIXEDOUTPUT =0x20000000;
const ERROR_DS_COMPARE_FALSE =8229;
const MCI_VD_STATUS_FORWARD =0x00004003;
const SS_ENDELLIPSIS =0x00004000;
const MIXERCONTROL_CT_CLASS_LIST =0x70000000;
const GCP_NEUTRALOVERRIDE =0x02000000;
const DCX_CACHE =0x00000002;
const VIEW_E_FIRST =0x80040140;
const DNS_ERROR_INVALID_ZONE_OPERATION =9603;
const ERROR_INVALID_FORM_SIZE =1903;
const ERROR_GLOBAL_ONLY_HOOK =1429;
const ERROR_DS_FOREST_VERSION_TOO_LOW =8565;
const ERROR_INVALID_PRINT_MONITOR =3007;
const WS_EX_CLIENTEDGE =0x00000200;
const ERROR_EXE_MARKED_INVALID =192;
const SS_GRAYRECT =0x00000005;
const MF_HELP =0x00004000;
const JOY_RETURNBUTTONS =0x00000080;
const ERROR_IPSEC_IKE_INVALID_POLICY =13861;
const ERROR_DS_NO_CHAINED_EVAL =8328;
const SND_ALIAS =0x00010000;
const ERROR_DRIVE_MEDIA_MISMATCH =4303;
const ERROR_DS_DS_REQUIRED =8478;
const ERROR_SHARING_VIOLATION =32;
const MCI_WAVE_STATUS_LEVEL =0x00004007;
const ERROR_SECRET_TOO_LONG =1382;
const JOY_CAL_READZONLY =0x01000000;
const ERROR_WMI_UNRESOLVED_INSTANCE_REF =4205;
const RPC_S_UNKNOWN_IF =1717;
const SS_EDITCONTROL =0x00002000;
const MCI_STATUS_NUMBER_OF_TRACKS =0x00000003;
const CS_DISABLE =0x00000002;
const WS_EX_TOPMOST =0x00000008;
const ERROR_IS_SUBST_TARGET =149;
const MIXERCONTROL_CT_SUBCLASS_MASK =0x0F000000;
const SS_REALSIZEIMAGE =0x00000800;
const PRF_CHILDREN =0x00000010;
const ERROR_DS_SCHEMA_ALLOC_FAILED =8415;
const FS_HEBREW =0x00000020;
const MCI_WAVE_SET_AVGBYTESPERSEC =0x00080000;
const DNS_ERROR_NO_PACKET =9503;
const ERROR_CTX_NOT_CONSOLE =7038;
const WS_EX_MDICHILD =0x00000040;
const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED =1795;
const ERROR_SERVER_NOT_DISABLED =1342;
const CLIENTSITE_S_FIRST =0x00040190;
const ERROR_INVALID_CATEGORY =117;
const MCI_STATUS_START =0x00000200;
const MCI_OVLY_WINDOW_DISABLE_STRETCH =0x00200000;
const ERROR_CLUSTER_INVALID_REQUEST =5048;
const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK =14050;
const ERROR_SWAPERROR =999;
const DATA_S_LAST =0x0004013F;
const ERROR_SERVICE_ALREADY_RUNNING =1056;
const ERROR_INVALID_KEYBOARD_HANDLE =1457;
const WS_EX_CONTEXTHELP =0x00000400;
const FRS_ERR_PARENT_INSUFFICIENT_PRIV =8009;
const VIF_DIFFTYPE =0x00000020;
const ERROR_DS_INVALID_GROUP_TYPE =8513;
const ERROR_IPSEC_IKE_NO_MM_POLICY =13850;
const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED =8426;
const RPC_S_ZERO_DIVIDE =1767;
const ERROR_DS_CANT_ADD_ATT_VALUES =8320;
const ERROR_DS_SRC_SID_EXISTS_IN_FOREST =8539;
const ERROR_LIBRARY_FULL =4322;
const ERROR_NO_RECOVERY_PROGRAM =1082;
const MIXERCONTROL_CT_CLASS_MASK =0xF0000000;
const SS_BLACKFRAME =0x00000007;
const DM_NUP =0x00000040;
const DNS_INFO_ADDED_LOCAL_WINS =9753;
const DO_DROPFILE =0x454C4946;
const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY =217;
const ERROR_IS_SUBST_PATH =146;
const VS_FFI_FILEFLAGSMASK =0x0000003F;
const ERROR_NETNAME_DELETED =64;
const ERROR_SXS_XML_E_INVALIDATROOTLEVEL =14055;
const ERROR_INVALID_EVENT_COUNT =151;
const ERROR_NO_SYSTEM_MENU =1437;
const ERROR_FULLSCREEN_MODE =1007;
const ERROR_DS_CONFIG_PARAM_MISSING =8427;
const ERROR_NO_SUCH_GROUP =1319;
const ERROR_JOURNAL_NOT_ACTIVE =1179;
const CONTEXT_S_FIRST =0x0004E000;
const ERROR_SERVICE_LOGON_FAILED =1069;
const ERROR_IPSEC_QM_POLICY_EXISTS =13000;
const MCI_SEQ_SET_PORT =0x00020000;
const ERROR_NO_LOG_SPACE =1019;
const ERROR_CLASS_ALREADY_EXISTS =1410;
const ERROR_CLUSTER_NODE_NOT_FOUND =5042;
const ERROR_NO_PROMOTION_ACTIVE =8222;
const ERROR_CANCEL_VIOLATION =173;
const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE =14053;
const ERROR_BAD_DRIVER_LEVEL =119;
const ERROR_WRONG_TARGET_NAME =1396;
const ERROR_UNKNOWN_PORT =1796;
const MCI_SYSINFO_OPEN =0x00000200;
const RPC_X_WRONG_STUB_VERSION =1829;
const RPCFLG_MESSAGE =0x01000000U;
const ERROR_DS_REMOTE_CROSSREF_OP_FAILED =8601;
const ERROR_BAD_NET_RESP =58;
const RPC_X_WRONG_PIPE_VERSION =1832;
const ERROR_INSTALL_SOURCE_ABSENT =1612;
const ERROR_RESOURCE_ONLINE =5019;
const ERROR_IPSEC_MM_AUTH_IN_USE =13012;
const MCI_OVLY_STATUS_STRETCH =0x00004002;
const ERROR_DS_REFERRAL_LIMIT_EXCEEDED =8260;
const WS_EX_RTLREADING =0x00002000;
const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF =8589;
const DNS_ERROR_RCODE_NOT_IMPLEMENTED =9004;
const MCI_BREAK_OFF =0x00000400;
const MCI_GETDEVCAPS_COMPOUND_DEVICE =0x00000006;
const DCTT_SUBDEV =0x0000004;
const ERROR_DS_DRA_ACCESS_DENIED =8453;
const ERROR_INSTALL_TRANSFORM_REJECTED =1644;
const ERROR_OUTOFMEMORY =14;
const ERROR_LABEL_TOO_LONG =154;
const ERROR_IS_SUBSTED =135;
const ERROR_DS_NAME_NOT_UNIQUE =8571;
const SS_ICON =0x00000003;
const EPT_S_CANT_CREATE =1899;
const ERROR_IPSEC_IKE_FAILSSPINIT =13853;
const ERROR_NETWORK_NOT_AVAILABLE =5035;
const RPC_S_DUPLICATE_ENDPOINT =1740;
const ERROR_MEMBER_NOT_IN_ALIAS =1377;
const FS_JOHAB =0x00200000;
const ERROR_TRUSTED_RELATIONSHIP_FAILURE =1789;
const ERROR_END_OF_MEDIA =1100;
const ERROR_WINS_INTERNAL =4000;
const ERROR_SXS_CANT_GEN_ACTCTX =14001;
const DNS_ERROR_RCODE =9504;
const STGM_CREATE =0x00001000;
const MIXER_OBJECTF_WAVEIN =0x20000000;
const ERROR_DS_ADMIN_LIMIT_EXCEEDED =8228;
const ERROR_ITERATED_DATA_EXCEEDS_64k =194;
const JOY_CAL_READVONLY =0x08000000;
const STGM_SHARE_DENY_WRITE =0x00000020;
const ERROR_IPSEC_IKE_DH_FAILURE =13864;
const ERROR_CAN_NOT_COMPLETE =1003;
const VIF_DIFFCODEPG =0x00000010;
const ERROR_DEPENDENT_RESOURCE_EXISTS =5001;
const MB_ICONHAND =0x00000010;
const ERROR_IPSEC_IKE_LOAD_FAILED =13876;
const WS_VSCROLL =0x00200000;
const TPM_NONOTIFY =0x0080;
const ERROR_ACCOUNT_RESTRICTION =1327;
const MCI_ANIM_INFO_TEXT =0x00010000;
const MCI_WAVE_STATUS_BITSPERSAMPLE =0x00004006;
const NTM_BOLD =0x00000020;
const ERROR_FUNCTION_NOT_CALLED =1626;
const ERROR_PATCH_PACKAGE_OPEN_FAILED =1635;
const ERROR_MACHINE_LOCKED =1271;
const ERROR_NO_WILDCARD_CHARACTERS =1417;
const ERROR_IPSEC_IKE_INVALID_HASH_ALG =13871;
const ERROR_ARENA_TRASHED =7;
const MIXERCONTROL_CONTROLF_MULTIPLE =0x00000002;
const ERROR_AUTHENTICATION_FIREWALL_FAILED =1935;
const RPC_S_PRF_ELT_NOT_ADDED =1926;
const ERROR_CTX_CLIENT_LICENSE_NOT_SET =7053;
const CLIPBRD_S_LAST =0x000401DF;
const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET =14011;
const ERROR_INSTALL_ALREADY_RUNNING =1618;
const ERROR_DISK_CORRUPT =1393;
const ERROR_BROKEN_PIPE =109;
const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX =8392;
const WS_EX_COMPOSITED =0x02000000;
const JOY_CAL_READ6 =0x00800000;
const MCI_WAVE_STATUS_FORMATTAG =0x00004001;
const ERROR_CLUSTER_NODE_UP =5056;
const ERROR_NO_USER_KEYS =6006;
const ERROR_QUORUMLOG_OPEN_FAILED =5028;
const ERROR_DS_DRA_ABANDON_SYNC =8462;
const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT =1807;
const TAPE_LOGICAL_POSITION =1;
const ERROR_HWNDS_HAVE_DIFF_PARENT =1441;
const ERROR_DS_WRONG_OM_OBJ_CLASS =8476;
const ERROR_DLL_INIT_FAILED =1114;
const CF_NOSTYLESEL =0x100000;
const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER =8517;
const VIF_CANNOTDELETE =0x00001000;
const SND_RESOURCE =0x00040004;
const DNS_ERROR_FORWARDER_ALREADY_EXISTS =9619;
const REGDB_E_LAST =0x8004015F;
const ERROR_DRIVER_BLOCKED =1275;
const ERROR_IPSEC_IKE_NEGOTIATION_PENDING =13803;
const MIXERCONTROL_CT_SC_LIST_SINGLE =0x00000000;
const ERROR_EA_TABLE_FULL =277;
const ERROR_DS_INIT_FAILURE =8532;
const ERROR_IS_JOIN_PATH =147;
const TAPE_RETURN_STATISTICS =0;
const ERROR_INVALID_COLORSPACE =2017;
const DESKTOP_HOOKCONTROL =0x0008;
const JOY_RETURNR =0x00000008;
const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG =8581;
const ERROR_IPSEC_IKE_ENCRYPT =13866;
const ERROR_BAD_ENVIRONMENT =10;
const ERROR_INVALID_SERVICENAME =1213;
const ERROR_WRONG_DISK =34;
const ERROR_SEEK_ON_DEVICE =132;
const PRF_CHECKVISIBLE =0x00000001;
const ERROR_DS_SAM_INIT_FAILURE_CONSOLE =8562;
const ASYNC_MODE_COMPATIBILITY =0x00000001;
const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION =13020;
const MCI_GETDEVCAPS_USES_FILES =0x00000005;
const MFS_GRAYED =0x00000003;
const ERROR_DS_DRA_DN_EXISTS =8441;
const LBS_MULTICOLUMN =0x0200;
const ERROR_EA_LIST_INCONSISTENT =255;
const VOS_OS232_PM32 =0x00030003;
const MCI_GETDEVCAPS_CAN_EJECT =0x00000007;
const ERROR_INVALID_DRIVE_OBJECT =4321;
const DM_ORIENTATION =0x00000001;
const ERROR_EMPTY =4306;
const VOS_NT_WINDOWS32 =0x00040004;
const ERROR_SXS_XML_E_INTERNALERROR =14041;
const ERROR_DS_NO_REQUESTED_ATTS_FOUND =8308;
const ERROR_SXS_SECTION_NOT_FOUND =14000;
const ERROR_NOT_ENOUGH_MEMORY =8;
const ERROR_INVALID_AT_INTERRUPT_TIME =104;
const ERROR_FILE_CORRUPT =1392;
const ERROR_IPSEC_IKE_LOAD_SOFT_SA =13844;
const ERROR_JOIN_TO_SUBST =140;
const ERROR_ACTIVE_CONNECTIONS =2402;
const VS_FF_SPECIALBUILD =0x00000020;
const ERROR_SXS_XML_E_UNCLOSEDSTRING =14062;
const TPM_HORPOSANIMATION =0x0400;
const ERROR_NO_TRUST_SAM_ACCOUNT =1787;
const VFT_APP =0x00000001;
const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS =8205;
const RPC_X_BYTE_COUNT_TOO_SMALL =1782;
const MCI_OVLY_WHERE_VIDEO =0x00100000;
const DM_PRINTQUALITY =0x00000400;
const ERROR_INVALID_THREAD_ID =1444;
const ERROR_DS_UNAVAILABLE =8207;
const ERROR_HOST_UNREACHABLE =1232;
const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT =1808;
const ERROR_IPSEC_IKE_RPC_DELETE =13877;
const MCI_OVLY_GETDEVCAPS_CAN_FREEZE =0x00004002;
const MF_UNCHECKED =0x00000000;
const LBS_NOREDRAW =0x0004;
const RPC_X_SS_CANNOT_GET_CALL_HANDLE =1779;
const ERROR_IPSEC_IKE_INVALID_HEADER =13824;
const MIDIPROP_SET =0x80000000;
const ERROR_CANT_EVICT_ACTIVE_NODE =5009;
const MCI_STATUS_MEDIA_PRESENT =0x00000005;
const ERROR_CANNOT_DETECT_PROCESS_ABORT =1081;
const RPC_S_COMM_FAILURE =1820;
const ERROR_DS_NO_TREE_DELETE_ABOVE_NC =8501;
const DNS_ERROR_RCODE_YXRRSET =9007;
const DM_PANNINGWIDTH =0x08000000;
const RPC_S_UUID_NO_ADDRESS =1739;
const ERROR_TOO_MANY_CONTEXT_IDS =1384;
const CONVERT10_S_FIRST =0x000401C0;
const ERROR_DS_DRA_INCONSISTENT_DIT =8443;
const MCI_GETDEVCAPS_HAS_AUDIO =0x00000002;
const MCI_LOAD_FILE =0x00000100;
const EVENT_E_FIRST =0x80040200;
const ERROR_PROMOTION_ACTIVE =8221;
const ERROR_SERVER_HAS_OPEN_HANDLES =1811;
const DATA_E_LAST =0x8004013F;
const CF_APPLY =0x200;
const ERROR_NOT_LOCKED =158;
const MCI_WAVE_SET_ANYOUTPUT =0x08000000;
const VS_FF_PRIVATEBUILD =0x00000008;
const MIXER_OBJECTF_HANDLE =0x80000000;
const ERROR_LOGON_SESSION_COLLISION =1366;
const ERROR_DS_INCOMPATIBLE_CONTROLS_USED =8574;
const ERROR_REPARSE_TAG_INVALID =4393;
const DCX_LOCKWINDOWUPDATE =0x00000400;
const VIF_TEMPFILE =0x00000001;
const ERROR_CLEANER_CARTRIDGE_SPENT =4333;
const ERROR_IPSEC_QM_POLICY_PENDING_DELETION =13023;
const ERROR_CHILD_NOT_COMPLETE =129;
const MCI_SEQ_STATUS_COPYRIGHT =0x0000400C;
const BS_BOTTOM =0x00000800;
const BS_OWNERDRAW =0x0000000B;
const ERROR_IOPL_NOT_ENABLED =197;
const ERROR_INVALID_MENU_HANDLE =1401;
const MF_REMOVE =0x00001000;
const ERROR_SXS_XML_E_BADSTARTNAMECHAR =14032;
const ERROR_INVALID_WINDOW_STYLE =2002;
const CF_FIXEDPITCHONLY =0x4000;
const ERROR_DS_DRA_CONNECTION_FAILED =8444;
const ERROR_PRIVILEGE_NOT_HELD =1314;
const NO_ERROR =0;
const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN =13881;
const ERROR_SERVER_SHUTDOWN_IN_PROGRESS =1255;
const TAPE_REWIND =0;
const ERROR_IPSEC_IKE_INVALID_KEY_USAGE =13818;
const ERROR_ALREADY_RUNNING_LKG =1074;
const ERROR_NONPAGED_SYSTEM_RESOURCES =1451;
const OR_INVALID_OXID =1910;
const ERROR_DS_LOCAL_ERROR =8251;
const ERROR_MEMBER_IN_GROUP =1320;
const MCI_VD_STATUS_SPEED =0x00004002;
const LBS_MULTIPLESEL =0x0008;
const CALLBACK_TYPEMASK =0x00070000;
const ERROR_EA_ACCESS_DENIED =994;
const MK_S_LAST =0x000401EF;
const CF_ENABLETEMPLATE =0x10;
const SS_OWNERDRAW =0x0000000D;
const MCI_VD_PLAY_SCAN =0x00080000;
const ERROR_DS_ALIASED_OBJ_MISSING =8334;
const DCX_CLIPSIBLINGS =0x00000010;
const ERROR_IPSEC_IKE_ATTRIB_FAIL =13802;
const ERROR_DS_NOT_AN_OBJECT =8352;
const ERROR_NO_VOLUME_ID =1173;
const JOY_CAL_READXYONLY =0x00020000;
const TPM_LEFTALIGN =0x0000;
const MCI_GETDEVCAPS_HAS_VIDEO =0x00000003;
const ERROR_SXS_KEY_NOT_FOUND =14007;
const ERROR_NOT_QUORUM_CLASS =5025;
const CF_NOFACESEL =0x80000;
const DNS_ERROR_WINS_INIT_FAILED =9615;
const MF_STRING =0x00000000;
const ERROR_INVALID_SHARENAME =1215;
const VOS_DOS_WINDOWS16 =0x00010001;
const ERROR_DEVICE_REQUIRES_CLEANING =1165;
const ERROR_CANT_DELETE_LAST_ITEM =4335;
const MCI_SET_DOOR_CLOSED =0x00000200;
const ERROR_NOT_CHILD_WINDOW =1442;
const ERROR_LIBRARY_OFFLINE =4305;
const MCI_OVLY_PUT_SOURCE =0x00020000;
const ERROR_IPSEC_MM_AUTH_PENDING_DELETION =13022;
const ERROR_INVALID_SECURITY_DESCR =1338;
const ERROR_IPSEC_IKE_MM_DELAY_DROP =13814;
const DNS_ERROR_AUTOZONE_ALREADY_EXISTS =9610;
const GCP_JUSTIFYIN =0x00200000;
const ERROR_DS_CANT_CREATE_UNDER_SCHEMA =8510;
const RPCFLG_ASYNCHRONOUS =0x40000000U;
const ERROR_INVALID_COLORINDEX =2022;
const ERROR_CTX_WINSTATION_ALREADY_EXISTS =7023;
const RPC_X_NULL_REF_POINTER =1780;
const ERROR_RESMON_ONLINE_FAILED =5018;
const MIXER_GETLINEINFOF_SOURCE =0x00000001;
const BS_RADIOBUTTON =0x00000004;
const ERROR_HOST_NODE_NOT_AVAILABLE =5005;
const DNS_ERROR_INVALID_IP_ADDRESS =9552;
const DESKTOP_ENUMERATE =0x0040;
const NDR_BIG_ENDIAN =0X00000000U;
const ERROR_INVALID_MESSAGENAME =1217;
const ERROR_DS_STRONG_AUTH_REQUIRED =8232;
const MCI_ANIM_PUT_DESTINATION =0x00040000;
const MCI_ANIM_PLAY_FAST =0x00040000;
const DNS_ERROR_ZONE_NOT_SECONDARY =9613;
const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER =9562;
const MCI_OPEN_TYPE_ID =0x00001000;
const ERROR_PRINTER_DELETED =1905;
const ERROR_SEEK =25;
const ERROR_ALREADY_WAITING =1904;
const ARW_STARTRIGHT =0x0001;
const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR =8595;
const ERROR_DS_GROUP_CONVERSION_ERROR =8607;
const ERROR_DS_INTERNAL_FAILURE =8430;
const MIXERCONTROL_CT_CLASS_CUSTOM =0x00000000;
const ERROR_NO_SUPPORTING_DRIVES =4339;
const DNS_ERROR_RCODE_NAME_ERROR =9003;
const RPC_S_INVALID_ASYNC_HANDLE =1914;
const ERROR_FLOPPY_ID_MARK_NOT_FOUND =1122;
const MIXER_GETLINECONTROLSF_ONEBYID =0x00000001;
const ERROR_NO_VOLUME_LABEL =125;
const ERROR_SYSTEM_TRACE =150;
const ERROR_MAX_THRDS_REACHED =164;
const ERROR_DS_DRA_REF_ALREADY_EXISTS =8448;
const ERROR_INVALID_MEDIA =4300;
const RPC_S_CALL_FAILED_DNE =1727;
const CLIPBRD_E_LAST =0x800401DF;
const WS_EX_CONTROLPARENT =0x00010000;
const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH =8540;
const ERROR_RING2_STACK_IN_USE =207;
const ERROR_UNIDENTIFIED_ERROR =1287;
const ERROR_REQUEST_ABORTED =1235;
const ERROR_DS_CANT_MOD_OBJ_CLASS =8215;
const ERROR_DS_SRC_AND_DST_NC_IDENTICAL =8485;
const DNS_ERROR_DP_NOT_AVAILABLE =9905;
const MCI_FROM =0x00000004;
const DNS_ERROR_NEED_SECONDARY_ADDRESSES =9614;
const ERROR_BAD_COMMAND =22;
const ERROR_CLUSTER_NODE_DOWN =5050;
const MIXERLINE_COMPONENTTYPE_DST_FIRST =0x0;
const ERROR_CTX_WINSTATION_ACCESS_DENIED =7045;
const MCI_SET_VIDEO =0x00001000;
const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE =2015;
const ERROR_IPSEC_IKE_INVALID_GROUP =13865;
const ERROR_DEVICE_ALREADY_REMEMBERED =1202;
const ERROR_SXS_XML_E_INVALIDSWITCH =14068;
const CLIPBRD_E_FIRST =0x800401D0;
const TPM_RETURNCMD =0x0100;
const ERROR_CTX_INVALID_PD =7002;
const RPC_X_SS_CHAR_TRANS_SHORT_FILE =1774;
const WS_EX_ACCEPTFILES =0x00000010;
const ERROR_MENU_ITEM_NOT_FOUND =1456;
const MCI_OVLY_WINDOW_DEFAULT =0x00000000;
const RPC_S_PROFILE_NOT_ADDED =1925;
const ERROR_CTX_LOGON_DISABLED =7037;
const ERROR_BAD_TOKEN_TYPE =1349;
const EMBDHLP_CREATENOW =0x00000000;
const ERROR_NO_SUCH_PRIVILEGE =1313;
const CBS_LOWERCASE =0x4000;
const ERROR_DS_CANT_FIND_NC_IN_CACHE =8421;
const ERROR_CTX_SHADOW_DENIED =7044;
const ERROR_CTX_INVALID_WD =7049;
const ERROR_INVALID_PIXEL_FORMAT =2000;
const ERROR_CTX_MODEM_RESPONSE_ERROR =7011;
const LCS_GM_GRAPHICS =0x00000002;
const MCI_INFO_FILE =0x00000200;
const ERROR_SXS_PROTECTION_RECOVERY_FAILED =14074;
const RPC_S_ALREADY_LISTENING =1713;
const ERROR_INVALID_ICON_HANDLE =1414;
const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE =14042;
const ERROR_MEDIA_UNAVAILABLE =4308;
const ERROR_RESOURCE_NOT_FOUND =5007;
const RPC_X_SS_HANDLES_MISMATCH =1778;
const ERROR_ALREADY_THREAD =1281;
const FS_TURKISH =0x00000010;
const WAIT_TIMEOUT =258;
const ERROR_EXTENDED_ERROR =1208;
const STGM_WRITE =0x00000001;
const MIXERCONTROL_CT_CLASS_SLIDER =0x40000000;
const ERROR_MEDIA_CHANGED =1110;
const ERROR_INVALID_HOOK_FILTER =1426;
const ERROR_IPSEC_MM_POLICY_NOT_FOUND =13004;
const ERROR_DS_CODE_INCONSISTENCY =8408;
const LBS_NOSEL =0x4000;
const ERROR_DS_NONEXISTENT_MUST_HAVE =8388;
const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND =5891;
const ARW_BOTTOMRIGHT =0x0001;
const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN =13845;
const MCI_OVLY_WINDOW_ENABLE_STRETCH =0x00100000;
const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE =14019;
const GCP_NUMERICSLOCAL =0x08000000;
const ERROR_CREATE_FAILED =1631;
const JOY_BUTTON31 =0x40000000;
const ERROR_UNABLE_TO_CLEAN =4311;
const ERROR_CTX_CLOSE_PENDING =7007;
const NDR_IEEE_FLOAT =0X00000000U;
const ERROR_DS_OBJECT_RESULTS_TOO_LARGE =8248;
const ERROR_DS_NO_REF_DOMAIN =8575;
const ERROR_SEM_TIMEOUT =121;
const ERROR_INVALID_PASSWORD =86;
const ERROR_PRODUCT_UNINSTALLED =1614;
const ENUM_S_FIRST =0x000401B0;
const VIF_CANNOTLOADCABINET =0x00100000;
const ERROR_NO_SUCH_SITE =1249;
const CONTEXT_E_LAST =0x8004E02F;
const ERROR_DS_UNKNOWN_OPERATION =8365;
const DNS_ERROR_ZONE_LOCKED =9607;
const ERROR_DS_ROLE_NOT_VERIFIED =8610;
const ERROR_NO_MORE_FILES =18;
const ERROR_IPSEC_IKE_POLICY_MATCH =13868;
const ERROR_CTX_SHADOW_INVALID =7050;
const MB_TASKMODAL =0x00002000;
const ERROR_SXS_XML_E_UNCLOSEDCDATA =14065;
const RPC_S_NO_MORE_MEMBERS =1757;
const WS_EX_LAYOUTRTL =0x00400000;
const LCS_GM_ABS_COLORIMETRIC =0x00000008;
const TAPE_QUERY_MEDIA_CAPACITY =1;
const DM_DISPLAYFREQUENCY =0x00400000;
const DM_MEDIATYPE =0x02000000;
const CLIENTSITE_E_LAST =0x8004019F;
const ERROR_BAD_UNIT =20;
const MCI_SEQ_STATUS_SLAVE =0x00004007;
const ERROR_NO_SPOOL_SPACE =62;
const VFT2_FONT_TRUETYPE =0x00000003;
const CF_NOSIZESEL =0x200000;
const ERROR_DS_ATT_VAL_ALREADY_EXISTS =8323;
const ERROR_CANTREAD =1012;
const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE =5890;
const MF_SEPARATOR =0x00000800;
const DCTT_DOWNLOAD =0x0000002;
const ERROR_PRINT_MONITOR_IN_USE =3008;
const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE =5033;
const MCI_ANIM_STATUS_SPEED =0x00004001;
const SBS_HORZ =0x0000;
const DNS_ERROR_DS_ZONE_ALREADY_EXISTS =9718;
const ERROR_NOT_LOGGED_ON =1245;
const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE =8579;
const ERROR_DS_OBJ_CLASS_NOT_DEFINED =8371;
const MB_ABORTRETRYIGNORE =0x00000002;
const APPCMD_FILTERINITS =0x00000020;
const VFT_DLL =0x00000002;
const ERROR_DS_AFFECTS_MULTIPLE_DSAS =8249;
const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT =8582;
const ERROR_CONTEXT_EXPIRED =1931;
const ERROR_ENVVAR_NOT_FOUND =203;
const MB_DEFAULT_DESKTOP_ONLY =0x00020000;
const ERROR_DISK_CHANGE =107;
const ERROR_SPL_NO_ADDJOB =3004;
const RPC_S_OBJECT_NOT_FOUND =1710;
const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT =14002;
const MCI_GETDEVCAPS_DEVICE_TYPE =0x00000004;
const ERROR_CLEANER_CARTRIDGE_INSTALLED =4340;
const DNS_STATUS_SINGLE_PART_NAME =9559;
const MCI_OVLY_WINDOW_STATE =0x00040000;
const ERROR_DATABASE_DOES_NOT_EXIST =1065;
const MCI_NOTIFY =0x00000001;
const ERROR_IPSEC_IKE_INVALID_CERT_TYPE =13819;
const RPC_CONTEXT_HANDLE_DEFAULT_FLAGS =0x00000000U;
const TPM_HORIZONTAL =0x0000;
const ERROR_INTERNAL_DB_ERROR =1383;
const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE =7058;
const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD =8491;
const DS_SETFONT =0x40;
const MCI_ANIM_OPEN_WS =0x00010000;
const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN =8514;
const MCI_WAVE_STATUS_CHANNELS =0x00004002;
const ERROR_RESOURCE_TYPE_NOT_FOUND =1813;
const ERROR_DS_LINK_ID_NOT_AVAILABLE =8577;
const MCI_OPEN_SHAREABLE =0x00000100;
const ERROR_UNABLE_TO_INVENTORY_SLOT =4326;
const ERROR_SXS_XML_E_BADXMLDECL =14056;
const MIDI_IO_STATUS =0x00000020;
const MF_CHANGE =0x00000080;
const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED =8536;
const ERROR_INVALID_GROUPNAME =1209;
const TAPE_FIXED_PARTITIONS =0;
const ES_READONLY =0x0800;
const MCI_SEEK_TO_END =0x00000200;
const MK_E_LAST =0x800401EF;
const ERROR_SOME_NOT_MAPPED =1301;
const ERROR_NOT_OWNER =288;
const ERROR_DS_NONSAFE_SCHEMA_CHANGE =8508;
const ES_RIGHT =0x0002;
const MF_HILITE =0x00000080;
const MB_TOPMOST =0x00040000;
const ERROR_INVALID_DOMAINNAME =1212;
const ERROR_DS_CANT_RETRIEVE_INSTANCE =8407;
const ERROR_CANT_ACCESS_FILE =1920;
const ERROR_CONNECTION_COUNT_LIMIT =1238;
const ERROR_INVALID_COMBOBOX_MESSAGE =1422;
const ERROR_DIR_EFS_DISALLOWED =6010;
const DNS_STATUS_FQDN =9557;
const ERROR_CLEANER_SLOT_NOT_SET =4332;
const ERROR_INSTALL_LOG_FAILURE =1622;
const ERROR_INVALID_DATATYPE =1804;
const FS_CHINESETRAD =0x00100000;
const ERROR_RESOURCE_NAME_NOT_FOUND =1814;
const ERROR_BAD_LOGON_SESSION_STATE =1365;
const ERROR_PASSWORD_RESTRICTION =1325;
const ERROR_BAD_PATHNAME =161;
const RPC_S_NO_CALL_ACTIVE =1725;
const ERROR_FILE_INVALID =1006;
const ERROR_WMI_INSTANCE_NOT_FOUND =4201;
const ERROR_ALL_NODES_NOT_AVAILABLE =5037;
const MCI_SEEK_TO_START =0x00000100;
const ERROR_SUCCESS =0;
const DNS_ERROR_NBSTAT_INIT_FAILED =9617;
const ERROR_LOCAL_USER_SESSION_KEY =1303;
const ES_NOHIDESEL =0x0100;
const ERROR_INSTALL_USEREXIT =1602;
const ERROR_INVALID_STATE =5023;
const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED =8557;
const RPC_S_SERVER_UNAVAILABLE =1722;
const RPC_S_ENTRY_TYPE_MISMATCH =1922;
const TAPE_SHORT_FILEMARKS =2;
const ERROR_INTERNAL_DB_CORRUPTION =1358;
const SND_NOWAIT =0x00002000;
const ERROR_DS_REFERRAL =8235;
const ERROR_INVALID_REPARSE_DATA =4392;
const DS_CONTEXTHELP =0x2000;
const ERROR_RESOURCE_LANG_NOT_FOUND =1815;
const ERROR_SXS_XML_E_MULTIPLEROOTS =14054;
const MCI_STATUS_TIME_FORMAT =0x00000006;
const MCI_VD_STEP_FRAMES =0x00010000;
const ERROR_INVALID_FLAGS =1004;
const VS_FF_INFOINFERRED =0x00000010;
const ERROR_SERVICE_START_HANG =1070;
const MCI_OVLY_GETDEVCAPS_MAX_WINDOWS =0x00004003;
const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD =1435;
const ERROR_NO_SIGNAL_SENT =205;
const ERROR_DS_ATT_NOT_DEF_FOR_CLASS =8317;
const ERROR_DS_CANT_RETRIEVE_ATTS =8481;
const MCI_VD_SPIN_UP =0x00010000;
const LCS_CALIBRATED_RGB =0x00000000;
const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET =8464;
const ERROR_CTX_PD_NOT_FOUND =7003;
const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD =8376;
const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER =8578;
const ERROR_UNABLE_TO_REMOVE_REPLACED =1175;
const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION =8492;
const VOS__PM16 =0x00000002;
const VOS__PM32 =0x00000003;
const ERROR_SERVICE_NO_THREAD =1054;
const MIXER_GETLINEINFOF_QUERYMASK =0x0000000F;
const DNS_ERROR_NOT_UNIQUE =9555;
const MCI_ANIM_GETDEVCAPS_PALETTES =0x00004006;
const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED =13860;
const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS =8555;
const ERROR_INTERNAL_ERROR =1359;
const STGM_NOSCRATCH =0x00100000;
const ERROR_UNABLE_TO_LOAD_MEDIUM =4324;
const VFT2_DRV_KEYBOARD =0x00000002;
const APPCLASS_MONITOR =0x00000001;
const RPC_S_UNKNOWN_MGR_TYPE =1716;
const ERROR_ICM_NOT_ENABLED =2018;
const ERROR_NO_RECOVERY_POLICY =6003;
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ =13836;
const ERROR_TRUST_FAILURE =1790;
const ERROR_DS_CANT_FIND_EXPECTED_NC =8420;
const ERROR_DRIVE_LOCKED =108;
const ERROR_SXS_XML_E_MULTIPLE_COLONS =14046;
const RPC_S_NO_ENTRY_NAME =1735;
const ERROR_DS_CANT_CACHE_ATT =8401;
const ERROR_IPSEC_IKE_AUTH_FAIL =13801;
const MIDIPROP_TIMEDIV =0x00000001;
const MIXER_GETLINEINFOF_DESTINATION =0x00000000;
const ERROR_SERVICE_DISABLED =1058;
const CALLBACK_NULL =0x00000000;
const ERROR_MESSAGE_SYNC_ONLY =1159;
const DO_PRINTFILE =0x544E5250;
const ERROR_ACCESS_DISABLED_WEBBLADE =1277;
const SBS_SIZEBOXBOTTOMRIGHTALIGN =0x0004;
const ERROR_INSTALL_PACKAGE_INVALID =1620;
const ERROR_SXS_XML_E_MISSINGWHITESPACE =14037;
const MCI_ANIM_REALIZE_BKGD =0x00020000;
const ERROR_DS_NOT_INSTALLED =8200;
const ERROR_MAPPED_ALIGNMENT =1132;
const OLEOBJ_S_FIRST =0x00040180;
const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT =14020;
const ERROR_COMMITMENT_LIMIT =1455;
const MCI_ANIM_GETDEVCAPS_CAN_STRETCH =0x00004007;
const ERROR_DS_CANT_REMOVE_ATT_CACHE =8403;
const CBS_DISABLENOSCROLL =0x0800;
const ERROR_DS_INIT_FAILURE_CONSOLE =8561;
const RPC_C_SECURITY_QOS_VERSION =1;
const DNS_ERROR_CANNOT_FIND_ROOT_HINTS =9564;
const ERROR_IPSEC_IKE_KERBEROS_ERROR =13827;
const DNS_ERROR_RCODE_BADKEY =9017;
const ERROR_EAS_NOT_SUPPORTED =282;
const DS_CENTERMOUSE =0x1000;
const DNS_INFO_AXFR_COMPLETE =9751;
const MCI_INFO_NAME =0x00001000;
const RPC_S_BINDING_INCOMPLETE =1819;
const ERROR_DS_NAMING_MASTER_GC =8523;
const CF_INITTOLOGFONTSTRUCT =0x40;
const RPC_S_UNKNOWN_AUTHN_LEVEL =1748;
const MCI_OVLY_INFO_TEXT =0x00010000;
const NDR_LITTLE_ENDIAN =0X00000010U;
const MIXERCONTROL_CT_UNITS_UNSIGNED =0x00030000;
const ERROR_DS_HAVE_PRIMARY_MEMBERS =8521;
const SS_ETCHEDVERT =0x00000011;
const VIF_WRITEPROT =0x00000040;
const ERROR_CONTROL_ID_NOT_FOUND =1421;
const BS_TYPEMASK =0x0000000F;
const FRS_ERR_SYSVOL_POPULATE =8013;
const FS_BALTIC =0x00000080;
const ERROR_KM_DRIVER_BLOCKED =1930;
const ERROR_NOACCESS =998;
const DNS_ERROR_RCODE_REFUSED =9005;
const SS_SIMPLE =0x0000000B;
const ERROR_GROUP_NOT_AVAILABLE =5012;
const ERROR_VC_DISCONNECTED =240;
const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE =14071;
const VIF_CANNOTRENAME =0x00002000;
const ERROR_REGISTRY_IO_FAILED =1016;
const ERROR_DS_RECALCSCHEMA_FAILED =8396;
const LCS_GM_BUSINESS =0x00000001;
const ERROR_TOO_MANY_LUIDS_REQUESTED =1333;
const ERROR_DS_ROOT_REQUIRES_CLASS_TOP =8432;
const DNS_ERROR_RCODE_FORMAT_ERROR =9001;
const ERROR_SET_NOT_FOUND =1170;
const ERROR_BUFFER_OVERFLOW =111;
const DM_COLLATE =0x00008000;
const CF_ENABLETEMPLATEHANDLE =0x20;
const ERROR_IPSEC_IKE_DH_FAIL =13822;
const RPC_X_SS_IN_NULL_CONTEXT =1775;
const STGTY_REPEAT =0x00000100;
const VOS_OS216_PM16 =0x00020002;
const MCI_ANIM_PLAY_SLOW =0x00080000;
const DM_COPIES =0x00000100;
const ERROR_DS_SRC_NAME_MISMATCH =8484;
const ERROR_IPSEC_IKE_DROP_NO_RESPONSE =13813;
const ERROR_EVENTLOG_CANT_START =1501;
const TAPE_INITIATOR_PARTITIONS =2;
const BS_VCENTER =0x00000C00;
const ERROR_NOT_ENOUGH_SERVER_MEMORY =1130;
const ERROR_ONLY_IF_CONNECTED =1251;
const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY =13879;
const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE =14017;
const ERROR_SCOPE_NOT_FOUND =318;
const VFT2_DRV_VERSIONED_PRINTER =0x0000000C;
const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND =5043;
const DESKTOP_JOURNALPLAYBACK =0x0020;
const EPT_S_NOT_REGISTERED =1753;
const MCI_VD_GETDEVCAPS_SLOW_RATE =0x00004004;
const MCI_ANIM_GETDEVCAPS_SLOW_RATE =0x00004003;
const DNS_ERROR_DP_DOES_NOT_EXIST =9901;
const NDR_ASCII_CHAR =0X00000000U;
const ERROR_DS_DRA_INVALID_PARAMETER =8437;
const RPC_S_FP_OVERFLOW =1771;
const DCX_EXCLUDERGN =0x00000040;
const ERROR_NO_BROWSER_SERVERS_FOUND =6118;
const GCP_NUMERICOVERRIDE =0x01000000;
const ERROR_DS_CANT_REM_MISSING_ATT_VAL =8325;
const ARW_STARTMASK =0x0003;
const ERROR_TOO_MANY_OPEN_FILES =4;
const ERROR_CHILD_MUST_BE_VOLATILE =1021;
const DNS_ERROR_TRY_AGAIN_LATER =9554;
const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER =8516;
const ERROR_DS_ATT_SCHEMA_REQ_ID =8399;
const BS_RIGHT =0x00000200;
const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED =8429;
const ERROR_INVALID_SID =1337;
const WSF_VISIBLE =0x0001;
const ERROR_SXS_THREAD_QUERIES_DISABLED =14010;
const ERROR_DS_INVALID_SCRIPT =8600;
const MCI_GETDEVCAPS_CAN_PLAY =0x00000008;
const ERROR_CLUSTER_NO_SECURITY_CONTEXT =5059;
const MCI_ANIM_STATUS_STRETCH =0x00004005;
const ERROR_INVALID_CLEANER =4310;
const ERROR_UNABLE_TO_INVENTORY_DRIVE =4325;
const CALLBACK_FUNCTION =0x00030000;
const ERROR_POLICY_ONLY_IN_DS =8220;
const SS_GRAYFRAME =0x00000008;
const ERROR_DS_NC_STILL_HAS_DSAS =8546;
const VOS__WINDOWS16 =0x00000001;
const ERROR_STATIC_INIT =4002;
const MCI_OPEN_TYPE =0x00002000;
const ERROR_UNRECOGNIZED_MEDIA =1785;
const JOY_CAL_READYONLY =0x00200000;
const ERROR_DS_INCOMPATIBLE_VERSION =8567;
const ERROR_TOO_MANY_NAMES =68;
const VIF_OUTOFMEMORY =0x00008000;
const VOS_WINCE =0x00050000;
const INPLACE_S_FIRST =0x000401A0;
const RPC_S_CALL_FAILED =1726;
const RPC_S_GRP_ELT_NOT_ADDED =1928;
const RPC_S_UNSUPPORTED_NAME_SYNTAX =1737;
const ERROR_ALREADY_FIBER =1280;
const CF_SHOWHELP =0x4;
const ERROR_SXS_MANIFEST_PARSE_ERROR =14005;
const ERROR_IPSEC_QM_POLICY_NOT_FOUND =13001;
const FS_WANSUNG =0x00080000;
const ERROR_DS_CONSTRUCTED_ATT_MOD =8475;
const JOY_RETURNRAWDATA =0x00000100;
const ERROR_IPSEC_IKE_NO_PEER_CERT =13847;
const MIXERLINE_LINEF_DISCONNECTED =0x00008000;
const ERROR_IPSEC_IKE_NO_POLICY =13825;
const ERROR_DS_NTDSCRIPT_PROCESS_ERROR =8592;
const RPC_S_UNKNOWN_AUTHN_TYPE =1741;
const ERROR_IS_JOIN_TARGET =133;
const ERROR_INVALID_EA_NAME =254;
const ERROR_REMOTE_STORAGE_NOT_ACTIVE =4351;
const ERROR_DS_ATT_IS_NOT_ON_OBJ =8310;
const MFT_RIGHTORDER =0x00002000;
const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED =5077;
const ERROR_INVALID_PROFILE =2011;
const ERROR_DS_OBJ_CLASS_VIOLATION =8212;
const ERROR_TOO_MANY_CMDS =56;
const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE =9651;
const ERROR_DS_SYNTAX_MISMATCH =8384;
const CF_EFFECTS =0x100;
const ERROR_CONNECTION_ABORTED =1236;
const ERROR_REVISION_MISMATCH =1306;
const ERROR_NO_EFS =6004;
const GCP_NUMERICSLATIN =0x04000000;
const ERROR_NOT_SUBSTED =137;
const ERROR_INVALID_ACCEL_HANDLE =1403;
const ERROR_TLW_WITH_WSCHILD =1406;
const ERROR_SXS_XML_E_MISSING_PAREN =14044;
const DNS_ERROR_INCONSISTENT_ROOT_HINTS =9565;
const ERROR_CTX_SHADOW_DISABLED =7051;
const TAPE_FILEMARKS =1;
const TAPE_PSEUDO_LOGICAL_BLOCK =3;
const CONVERT10_E_LAST =0x800401CF;
const ERROR_HOOK_NEEDS_HMOD =1428;
const ERROR_SERVER_DISABLED =1341;
const FRS_ERR_STARTING_SERVICE =8002;
const ERROR_ENCRYPTION_FAILED =6000;
const ERROR_COUNTER_TIMEOUT =1121;
const ERROR_INSTALL_UI_FAILURE =1621;
const ERROR_EFS_VERSION_NOT_SUPPORT =6016;
const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE =13841;
const ERROR_WMI_GUID_NOT_FOUND =4200;
const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER =8559;
const ERROR_DS_NAME_REFERENCE_INVALID =8373;
const MARSHAL_S_LAST =0x0004012F;
const ERROR_PRIVATE_DIALOG_INDEX =1415;
const ERROR_DS_CANT_REMOVE_CLASS_CACHE =8404;
const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED =8304;
const RPC_S_STRING_TOO_LONG =1743;
const MCI_SYSINFO_NAME =0x00000400;
const EVENT_S_LAST =0x0004021F;
const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED =8204;
const ERROR_DIR_NOT_ROOT =144;
const GCP_DISPLAYZWG =0x00400000;
const ERROR_CURRENT_DOMAIN_NOT_ALLOWED =1399;
const ERROR_DS_DST_DOMAIN_NOT_NATIVE =8496;
const ERROR_INVALID_EDIT_HEIGHT =1424;
const ERROR_HOST_NODE_NOT_GROUP_OWNER =5016;
const MCI_VD_STATUS_MEDIA_TYPE =0x00004004;
const CF_FORCEFONTEXIST =0x10000;
const ERROR_SXS_POLICY_PARSE_ERROR =14029;
const RPC_S_NO_PROTSEQS =1719;
const ERROR_INVALID_HANDLE_STATE =1609;
const ERROR_BAD_CONFIGURATION =1610;
const ERROR_CLEANER_SLOT_SET =4331;
const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION =1459;
const MB_OK =0x00000000;
const MIXER_OBJECTF_MIDIOUT =0x30000000;
const ERROR_DISK_RECALIBRATE_FAILED =1126;
const DNS_ERROR_CNAME_COLLISION =9709;
const ERROR_DS_INAPPROPRIATE_AUTH =8233;
const ERROR_STACK_OVERFLOW =1001;
const WS_EX_NOINHERITLAYOUT =0x00100000;
const DNS_ERROR_INVALID_ZONE_TYPE =9611;
const MIXER_OBJECTF_WAVEOUT =0x10000000;
const ERROR_INVALID_TRANSFORM =2020;
const JOY_CAL_READUONLY =0x04000000;
const ERROR_IPSEC_IKE_NOTCBPRIV =13851;
const ERROR_SXS_FILE_HASH_MISMATCH =14028;
const ERROR_BAD_QUERY_SYNTAX =1615;
const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY =8201;
const ERROR_INSTALL_PLATFORM_UNSUPPORTED =1633;
const MCI_GETDEVCAPS_ITEM =0x00000100;
const ERROR_MEDIA_OFFLINE =4304;
const ERROR_CANT_DISABLE_MANDATORY =1310;
const ERROR_CLUSTER_NODE_EXISTS =5040;
const ERROR_REGISTRY_CORRUPT =1015;
const RPC_S_NO_BINDINGS =1718;
const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT =1063;
const ERROR_INVALID_LEVEL =124;
const RPC_X_SS_CHAR_TRANS_OPEN_FAIL =1773;
const ERROR_DS_OBJ_GUID_EXISTS =8361;
const ERROR_DS_DOMAIN_VERSION_TOO_LOW =8566;
const ERROR_DS_DRA_SCHEMA_MISMATCH =8418;
const ERROR_DS_NAME_ERROR_NOT_UNIQUE =8471;
const ERROR_SXS_XML_E_MISSINGSEMICOLON =14039;
const WS_EX_STATICEDGE =0x00020000;
const MCI_SEQ_STATUS_DIVTYPE =0x0000400A;
const CALLBACK_TASK =0x00020000;
const ERROR_DS_DSA_MUST_BE_INT_MASTER =8342;
const ERROR_CLUSTER_MEMBERSHIP_HALT =5892;
const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR =13842;
const ERROR_LB_WITHOUT_TABSTOPS =1434;
const ERROR_NO_SITENAME =1919;
const ERROR_DS_GCVERIFY_ERROR =8417;
const MB_RTLREADING =0x00100000;
const MCI_ANIM_WINDOW_STATE =0x00040000;
const RPC_S_INVALID_NAME_SYNTAX =1736;
const RPC_S_NO_CONTEXT_AVAILABLE =1765;
const ERROR_DS_COULDNT_CONTACT_FSMO =8367;
const TAPE_SPACE_SETMARKS =8;
const ERROR_REPARSE_TAG_MISMATCH =4394;
const RPC_S_INVALID_STRING_BINDING =1700;
const ERROR_PRINTER_HAS_JOBS_QUEUED =3009;
const GCP_SYMSWAPOFF =0x00800000;
const STGM_READ =0x00000000;
const ERROR_BEGINNING_OF_MEDIA =1102;
const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE =9719;
const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION =8533;
const ERROR_INVALID_MESSAGEDEST =1218;
const ERROR_SUBST_TO_JOIN =141;
const VS_FF_DEBUG =0x00000001;
const ERROR_UNKNOWN_PRINTPROCESSOR =1798;
const VOS_OS216 =0x00020000;
const MCI_WAVE_GETDEVCAPS_OUTPUTS =0x00004002;
const ERROR_BAD_LENGTH =24;
const BS_LEFT =0x00000100;
const VOS_OS232 =0x00030000;
const SS_WHITEFRAME =0x00000009;
const SS_NOTIFY =0x00000100;
const ERROR_DS_CROSS_DOM_MOVE_ERROR =8216;
const ERROR_RING2SEG_MUST_BE_MOVABLE =200;
const ERROR_IO_DEVICE =1117;
const INPLACE_S_LAST =0x000401AF;
const JOY_BUTTON11 =0x00000400;
const JOY_BUTTON12 =0x00000800;
const JOY_BUTTON13 =0x00001000;
const JOY_BUTTON14 =0x00002000;
const JOY_BUTTON15 =0x00004000;
const JOY_BUTTON16 =0x00008000;
const JOY_BUTTON18 =0x00020000;
const JOY_BUTTON19 =0x00040000;
const JOY_BUTTON20 =0x00080000;
const JOY_BUTTON21 =0x00100000;
const JOY_BUTTON22 =0x00200000;
const JOY_BUTTON23 =0x00400000;
const JOY_BUTTON24 =0x00800000;
const JOY_BUTTON25 =0x01000000;
const JOY_BUTTON26 =0x02000000;
const JOY_BUTTON27 =0x04000000;
const JOY_BUTTON28 =0x08000000;
const JOY_BUTTON29 =0x10000000;
const MIDIPROP_TEMPO =0x00000002;
const JOY_BUTTON30 =0x20000000;
const JOY_BUTTON32 =0x80000000;
const MCI_TO =0x00000008;
const MCI_OVLY_PUT_FRAME =0x00080000;
const RPC_C_AUTHN_DEFAULT =0xFFFFFFFF;
const ERROR_DECRYPTION_FAILED =6001;
const MCI_WAVE_STATUS_SAMPLESPERSEC =0x00004003;
const ES_MULTILINE =0x0004;
const DCX_INTERSECTRGN =0x00000080;
const CS_E_LAST =0x8004016F;
const ERROR_VOLUME_NOT_SIS_ENABLED =4500;
const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED =1274;
const ERROR_DS_RESERVED_LINK_ID =8576;
const ERROR_SPOOL_FILE_NOT_FOUND =3002;
const ERROR_DS_DNS_LOOKUP_FAILURE =8524;
const ERROR_SERIAL_NO_DEVICE =1118;
const MCI_WAVE_SET_CHANNELS =0x00020000;
const ERROR_DS_CANT_RETRIEVE_DN =8405;
const ERROR_PORT_UNREACHABLE =1234;
const ERROR_CTX_GRAPHICS_INVALID =7035;
const ERROR_QUORUM_RESOURCE =5020;
const RPC_S_FP_UNDERFLOW =1770;
const FRS_ERR_INSUFFICIENT_PRIV =8007;
const GCP_MAXEXTENT =0x00100000;
const ERROR_DS_NONEXISTENT_MAY_HAVE =8387;
const ERROR_DS_SENSITIVE_GROUP_VIOLATION =8505;
const ERROR_SERVICE_DOES_NOT_EXIST =1060;
const WS_CLIPCHILDREN =0x02000000;
const RPC_S_PROTSEQ_NOT_SUPPORTED =1703;
const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND =13009;
const ERROR_UNKNOWN_PROPERTY =1608;
const ERROR_TOO_MANY_SEMAPHORES =100;
const CF_WYSIWYG =0x8000;
const VFT2_DRV_MOUSE =0x00000005;
const ERROR_INVALID_GW_COMMAND =1443;
const ERROR_DS_CANT_RETRIEVE_SD =8526;
const TAPE_QUERY_DRIVE_PARAMETERS =0;
const CO_S_LAST =0x000401FF;
const MIXER_SETCONTROLDETAILSF_VALUE =0x00000000;
const ERROR_DS_INVALID_DMD =8360;
const FRS_ERR_SYSVOL_IS_BUSY =8015;
const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE =14045;
const ERROR_INSTALL_SERVICE_FAILURE =1601;
const FS_ARABIC =0x00000040;
const ERROR_DS_NCNAME_MUST_BE_NC =8357;
const ERROR_TIME_SKEW =1398;
const WARNING_IPSEC_QM_POLICY_PRUNED =13025;
const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD =8529;
const MB_ICONASTERISK =0x00000040;
const RPC_S_ENTRY_NOT_FOUND =1761;
const ERROR_DS_ROOT_MUST_BE_NC =8301;
const DNS_ERROR_SECONDARY_DATA =9712;
const RPCFLG_HAS_CALLBACK =0x04000000U;
const MB_RIGHT =0x00080000;
const ERROR_IPSEC_MM_AUTH_EXISTS =13010;
const CAT_E_FIRST =0x80040160;
const STGM_DELETEONRELEASE =0x04000000;
const ERROR_INVALID_MSGBOX_STYLE =1438;
const ERROR_DS_SERVER_DOWN =8250;
const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC =8487;
const ARW_UP =0x0004;
const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND =13014;
const ERROR_SXS_XML_E_INVALID_DECIMAL =14047;
const DNS_ERROR_SOA_DELETE_INVALID =9618;
const ERROR_IO_PENDING =997;
const MCI_SET_OFF =0x00004000;
const MCI_WAVE_OUTPUT =0x00800000;
const REGDB_E_FIRST =0x80040150;
const CRL_DIST_POINT_ERR_CRL_ISSUER_BIT =0x80000000;
const ERROR_DHCP_ADDRESS_CONFLICT =4100;
const ERROR_AUTODATASEG_EXCEEDS_64k =199;
const ERROR_IPSEC_MM_POLICY_PENDING_DELETION =13021;
const ERROR_VOLUME_NOT_SUPPORT_EFS =6014;
const ERROR_DS_CANT_MOVE_DELETED_OBJECT =8489;
const ERROR_WMI_ALREADY_DISABLED =4212;
const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW =8617;
const ERROR_BAD_FORMAT =11;
const ERROR_IPSEC_IKE_PROCESS_ERR_CERT =13835;
const MIXERCONTROL_CT_CLASS_TIME =0x60000000;
const ERROR_HANDLE_DISK_FULL =39;
const SBS_SIZEBOX =0x0008;
const ERROR_DS_LOOP_DETECT =8246;
const ERROR_CANNOT_IMPERSONATE =1368;
const ERROR_DOMAIN_CONTROLLER_NOT_FOUND =1908;
const ERROR_ARITHMETIC_OVERFLOW =534;
const ERROR_SXS_XML_E_BADPEREFINSUBSET =14059;
const MCI_CDA_STATUS_TYPE_TRACK =0x00004001;
const MF_MENUBARBREAK =0x00000020;
const TAPE_CHECK_FOR_DRIVE_PROBLEM =2;
const ERROR_DATABASE_FULL =4314;
const ERROR_CONNECTION_UNAVAIL =1201;
const ERROR_BAD_PROVIDER =1204;
const ERROR_PRINTQ_FULL =61;
const TPM_RIGHTALIGN =0x0008;
const MB_RETRYCANCEL =0x00000005;
const ERROR_DS_SEMANTIC_ATT_TEST =8383;
const ERROR_EVENTLOG_FILE_CHANGED =1503;
const ERROR_DS_DRA_BAD_DN =8439;
const RPC_S_OUT_OF_RESOURCES =1721;
const VIF_CANNOTCREATE =0x00000800;
const MF_BYPOSITION =0x00000400;
const FRS_ERR_AUTHENTICATION =8008;
const ERROR_INSTALL_PACKAGE_OPEN_FAILED =1619;
const ERROR_WMI_SERVER_UNAVAILABLE =4208;
const ERROR_INVALID_COMMAND_LINE =1639;
const ERROR_IPSEC_IKE_NO_PUBLIC_KEY =13828;
const MIXERCONTROL_CT_UNITS_CUSTOM =0x00000000;
const MF_MENUBREAK =0x00000040;
const ERROR_DS_PROTOCOL_ERROR =8225;
const ERROR_EFS_ALG_BLOB_TOO_BIG =6013;
const ERROR_SXS_WRONG_SECTION_TYPE =14009;
const DATA_E_FIRST =0x80040130;
const MCI_VD_PLAY_FAST =0x00020000;
const ERROR_ACCESS_DISABLED_BY_POLICY =1260;
const ERROR_BAD_NETPATH =53;
const FRS_ERR_SERVICE_COMM =8006;
const MIXER_GETLINECONTROLSF_ALL =0x00000000;
const SND_ALIAS_ID =0x00110000;
const MCI_VD_STEP_REVERSE =0x00020000;
const SCHED_E_SERVICE_NOT_LOCALSYSTEM =6200;
const MARSHAL_E_LAST =0x8004012F;
const BS_ICON =0x00000040;
const ERROR_IPSEC_IKE_SRVQUERYCRED =13856;
const WS_EX_RIGHT =0x00001000;
const EVENT_E_LAST =0x8004021F;
const ERROR_LOGON_NOT_GRANTED =1380;
const ERROR_INVALID_TABLE =1628;
const TPM_VERNEGANIMATION =0x2000;
const ERROR_DS_CLASS_MUST_BE_CONCRETE =8359;
const SBS_BOTTOMALIGN =0x0004;
const MCI_ANIM_WINDOW_DEFAULT =0x00000000;
const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT =1809;
const ERROR_DS_DRA_MISSING_PARENT =8460;
const ERROR_NOT_SUPPORTED =50;
const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT =5088;
const ERROR_DESTINATION_ELEMENT_FULL =1161;
const DM_ICMMETHOD =0x00800000;
const DNS_STATUS_DOTTED_NAME =9558;
const ES_LEFT =0x0000;
const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN =8515;
const VFT2_UNKNOWN =0x00000000;
const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN =8537;
const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY =8548;
const DNS_ERROR_INVALID_DATAFILE_NAME =9652;
const ERROR_IPSEC_IKE_NEG_STATUS_END =13884;
const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE =8512;
const MB_CANCELTRYCONTINUE =0x00000006;
const WS_POPUP =0x80000000;
const ERROR_DS_CANT_MOVE_RESOURCE_GROUP =8499;
const ERROR_INDEX_ABSENT =1611;
const ERROR_DS_DRA_EXTN_CONNECTION_FAILED =8466;
const ERROR_SET_POWER_STATE_FAILED =1141;
const ERROR_DS_OBJ_STRING_NAME_EXISTS =8305;
const MB_MISCMASK =0x0000C000;
const APPCLASS_STANDARD =0x00000000;
const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA =8465;
const ERROR_CLUSTER_NODE_NOT_READY =5072;
const BS_AUTOCHECKBOX =0x00000003;
const ERROR_DUP_DOMAINNAME =1221;
const MIXER_GETCONTROLDETAILSF_LISTTEXT =0x00000001;
const ERROR_INVALID_USER_BUFFER =1784;
const DS_NOFAILCREATE =0x0010;
const ERROR_SXS_XML_E_UNCLOSEDCOMMENT =14063;
const MB_OKCANCEL =0x00000001;
const ERROR_UNKNOWN_PRINT_MONITOR =3000;
const ERROR_DS_SHUTTING_DOWN =8364;
const ERROR_DS_DRA_SINK_DISABLED =8457;
const WS_EX_TOOLWINDOW =0x00000080;
const ERROR_NO_MORE_ITEMS =259;
const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME =14027;
const ERROR_ACCOUNT_DISABLED =1331;
const ERROR_DEVICE_NOT_PARTITIONED =1107;
const CBS_OEMCONVERT =0x0080;
const MCI_SET_AUDIO_LEFT =0x00000001;
const ERROR_MORE_WRITES =1120;
const DESKTOP_JOURNALRECORD =0x0010;
const ERROR_CTX_BAD_VIDEO_MODE =7025;
const ERROR_CLUSTER_RESNAME_NOT_FOUND =5080;
const ERROR_SECTOR_NOT_FOUND =27;
const ERROR_CLUSTER_NODE_SHUTTING_DOWN =5073;
const ERROR_SUCCESS_REBOOT_REQUIRED =3010;
const SS_BITMAP =0x0000000E;
const CO_E_FIRST =0x800401F0;
const VFT2_DRV_SYSTEM =0x00000007;
const ERROR_SCREEN_ALREADY_LOCKED =1440;
const ARW_TOPLEFT =0x0002;
const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP =13810;
const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND =5047;
const ERROR_LAST_ADMIN =1322;
const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL =14048;
const ERROR_INVALID_MONITOR_HANDLE =1461;
const WINSTA_WRITEATTRIBUTES =0x0010;
const STGM_CONVERT =0x00020000;
const ERROR_PARTIAL_COPY =299;
const DNS_ERROR_INVALID_TYPE =9551;
const ERROR_IPSEC_MM_POLICY_IN_USE =13005;
const ERROR_INDIGENOUS_TYPE =4338;
const CLIENTSITE_E_FIRST =0x80040190;
const ERROR_TOO_MANY_SECRETS =1381;
const ERROR_WMI_ITEMID_NOT_FOUND =4202;
const ERROR_INVALID_WINDOW_HANDLE =1400;
const TAPE_QUERY_DEVICE_ERROR_DATA =4;
const ERROR_SPECIAL_ACCOUNT =1371;
const ERROR_INVALID_SEGMENT_NUMBER =180;
const ERROR_INVALID_STACKSEG =189;
const DNS_ERROR_DP_ALREADY_EXISTS =9902;
const ERROR_NO_QUOTAS_FOR_ACCOUNT =1302;
const TAPE_RESET_STATISTICS =2;
const BS_BITMAP =0x00000080;
const DM_PAPERSIZE =0x00000002;
const DM_LOGPIXELS =0x00020000;
const ERROR_DS_DRS_EXTENSIONS_CHANGED =8594;
const ERROR_CTX_CONSOLE_DISCONNECT =7041;
const ERROR_PRINTER_DRIVER_BLOCKED =3014;
const SS_PATHELLIPSIS =0x00008000;
const ERROR_DS_DRA_REF_NOT_FOUND =8449;
const ERROR_HOTKEY_NOT_REGISTERED =1419;
const ERROR_MEDIA_INCOMPATIBLE =4315;
const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED =1936;
const DCX_EXCLUDEUPDATE =0x00000100;
const WINSTA_EXITWINDOWS =0x0040;
const JOY_CAL_READ3 =0x00040000;
const JOY_CAL_READ4 =0x00080000;
const JOY_CAL_READ5 =0x00400000;
const DRAGDROP_E_FIRST =0x80040100;
const CF_SELECTSCRIPT =0x400000;
const DCTT_DOWNLOAD_OUTLINE =0x0000008;
const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS =9606;
const VIF_CANNOTLOADLZ32 =0x00080000;
const WS_MAXIMIZEBOX =0x00010000;
const RPC_S_ENTRY_ALREADY_EXISTS =1760;
const ERROR_DS_NAME_TYPE_UNKNOWN =8351;
const ERROR_INVALID_SERVER_STATE =1352;
const ERROR_SHUTDOWN_CLUSTER =5008;
const ERROR_PROCESS_ABORTED =1067;
const ERROR_PRINT_CANCELLED =63;
const ERROR_NO_SUCH_PACKAGE =1364;
const ERROR_DS_OBJ_TOO_LARGE =8312;
const ERROR_DS_AUX_CLS_TEST_FAIL =8389;
const RPC_S_CALL_CANCELLED =1818;
const TAPE_SPACE_SEQUENTIAL_SMKS =9;
const RPC_S_INVALID_STRING_UUID =1705;
const RPC_S_INCOMPLETE_NAME =1755;
const DNS_ERROR_NO_DNS_SERVERS =9852;
const CO_E_LAST =0x800401FF;
const ERROR_SETMARK_DETECTED =1103;
const CONTEXT_E_FIRST =0x8004E000;
const ERROR_USER_EXISTS =1316;
const ERROR_DS_SECURITY_CHECKING_ERROR =8413;
const TAPE_RETURN_ENV_INFO =1;
const RPCFLG_HAS_MULTI_SYNTAXES =0x02000000U;
const DNS_ERROR_AXFR =9752;
const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER =8538;
const ERROR_CLUSTER_INVALID_NETWORK =5054;
const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST =8535;
const BI_PNG =5;
const MIXERCONTROL_CT_UNITS_PERCENT =0x00050000;
const DNS_ERROR_RCODE_NOTAUTH =9009;
const SBS_TOPALIGN =0x0002;
const MCI_SAVE_FILE =0x00000100;
const ERROR_LISTBOX_ID_NOT_FOUND =1416;
const MCI_VD_PLAY_SLOW =0x00100000;
const DNS_ERROR_DATAFILE_OPEN_FAILURE =9653;
const ERROR_CANT_RESOLVE_FILENAME =1921;
const ERROR_CTX_SHADOW_NOT_RUNNING =7057;
const EPT_S_CANT_PERFORM_OP =1752;
const PRF_ERASEBKGND =0x00000008;
const VIF_BUFFTOOSMALL =0x00040000;
const MK_S_FIRST =0x000401E0;
const ERROR_BAD_REM_ADAP =60;
const DM_YRESOLUTION =0x00002000;
const ERROR_SXS_DUPLICATE_DLL_NAME =14021;
const ERROR_IPSEC_IKE_FAILQUERYSSP =13854;
const ERROR_NON_ACCOUNT_SID =1257;
const ERROR_OBJECT_ALREADY_EXISTS =5010;
const ERROR_UNSUPPORTED_TYPE =1630;
const WS_DLGFRAME =0x00400000;
const ERROR_CLUSTER_JOIN_IN_PROGRESS =5041;
const NTM_ITALIC =0x00000001;
const MIXER_OBJECTF_MIDIIN =0x40000000;
const ERROR_SXS_XML_E_COMMENTSYNTAX =14031;
const ERROR_DS_CANT_DEREF_ALIAS =8337;
const ERROR_INSTALL_REMOTE_DISALLOWED =1640;
const SS_SUNKEN =0x00001000;
const DM_DUPLEX =0x00001000;
const MCI_VD_ESCAPE_STRING =0x00000100;
const RPC_CONTEXT_HANDLE_FLAGS =0x30000000U;
const ERROR_INVALID_OWNER =1307;
const ERROR_SXS_XML_E_EXPECTINGTAGEND =14038;
const ERROR_TOO_MANY_POSTS =298;
const LB_CTLCODE =0;
const ASYNC_MODE_DEFAULT =0x00000000;
const ERROR_DS_EXISTS_IN_RDNATTID =8598;
const ERROR_DS_NO_MSDS_INTID =8596;
const DNS_INFO_NO_RECORDS =9501;
const DM_TTOPTION =0x00004000;
const ERROR_DS_NCNAME_MISSING_CR_REF =8412;
const ERROR_DS_DOMAIN_VERSION_TOO_HIGH =8564;
const ERROR_SESSION_CREDENTIAL_CONFLICT =1219;
const ERROR_DS_ALIAS_POINTS_TO_ALIAS =8336;
const ERROR_SAM_INIT_FAILURE =8541;
const ERROR_DS_EXISTS_IN_AUX_CLS =8393;
const WS_CHILD =0x40000000;
const ERROR_DS_DUP_MAPI_ID =8380;
const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER =1278;
const ERROR_NON_MDICHILD_WINDOW =1445;
const ERROR_QUORUM_OWNER_ALIVE =5034;
const MCI_INFO_PRODUCT =0x00000100;
const RPC_S_NOT_ALL_OBJS_EXPORTED =1923;
const ERROR_POTENTIAL_FILE_FOUND =1180;
const ERROR_INVALID_OPLOCK_PROTOCOL =301;
const ERROR_POLICY_OBJECT_NOT_FOUND =8219;
const MIXER_GETCONTROLDETAILSF_VALUE =0x00000000;
const ERROR_FUNCTION_FAILED =1627;
const ERROR_CONTINUE =1246;
const ERROR_NO_ASSOCIATION =1155;
const VOS_UNKNOWN =0x00000000;
const ERROR_WMI_READ_ONLY =4213;
const ERROR_DYNLINK_FROM_INVALID_RING =196;
const MCI_ANIM_PUT_SOURCE =0x00020000;
const MCI_ANIM_STEP_FRAMES =0x00020000;
const MCI_TRACK =0x00000010;
const ERROR_CTX_SERVICE_NAME_COLLISION =7006;
const ERROR_LOG_FILE_FULL =1502;
const ERROR_NONE_MAPPED =1332;
const DNS_ERROR_NON_RFC_NAME =9556;
const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC =8604;
const WS_EX_DLGMODALFRAME =0x00000001;
const MCI_ANIM_REALIZE_NORM =0x00010000;
const ERROR_DUPLICATE_SERVICE_NAME =1078;
